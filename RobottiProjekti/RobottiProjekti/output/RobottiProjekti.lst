FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C27xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
001C: 7D 13 4D LJMP  PSoC_GPIO_ISR      (0145)     ljmp	PSoC_GPIO_ISR
001F: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 03 FF LJMP  _PWM8_VASEN_ISR    (0149)     ljmp	_PWM8_VASEN_ISR
0023: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0024: 7D 04 9B LJMP  _PWM8_OIKEA_ISR    (0153)     ljmp	_PWM8_OIKEA_ISR
0027: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 03 5A LJMP  _Timer8_ISR        (0157)     ljmp	_Timer8_ISR
002B: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0161)     // call	void_handler
002C: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
0030: 7D 04 42 LJMP  _PWM8_SERVO_ISR    (0165)     ljmp	_PWM8_SERVO_ISR
0033: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
0038: 7D 07 94 LJMP  _Counter16_1_ISR   (0173)     ljmp	_Counter16_1_ISR
003B: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0181)     // call	void_handler
0060: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0185)     // call	void_handler
0064: 7E       RETI                     (0186)     reti
0068: 71 10    OR    F,0x10             
                                        (0187)     ;---------------------------------------------------
                                        (0188)     ; Insert your custom code above this banner
                                        (0189)     ;---------------------------------------------------
                                        (0190)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0191) 
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  Start of Execution.
                                        (0194) ;-----------------------------------------------------------------------------
                                        (0195) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0196) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0197) ;
                                        (0198) 
                                        (0199) IF	(TOOLCHAIN & HITECH)
                                        (0200)  	AREA PD_startup(CODE, REL, CON)
                                        (0201) ELSE
                                        (0202)     org 68h
                                        (0203) ENDIF
                                        (0204) __Start:
                                        (0205) 
                                        (0206)     ; initialize SMP values for voltage stabilization, if required,
                                        (0207)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0208)     ; least for now. 
                                        (0209)     ;
                                        (0210)     M8C_SetBank1
006A: 62 E3 87 MOV   REG[0xE3],0x87     (0211)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0212)     M8C_SetBank0
                                        (0213) 
                                        (0214) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0215) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0216)     M8C_EnableWatchDog
                                        (0217) ENDIF
                                        (0218) 
                                        (0219) IF ( SELECT_32K )
                                        (0220)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0221) ELSE
0072: 41 FE FB AND   REG[0xFE],0xFB     (0222)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0223) ENDIF
                                        (0224) 
                                        (0225) IF	(TOOLCHAIN & HITECH) 
                                        (0226)     ;---------------------------
                                        (0227)     ; Set up the Temporary stack
                                        (0228)     ;---------------------------
                                        (0229)     ; A temporary stack is set up for the SSC instructions.
                                        (0230)     ; The real stack start will be assigned later.
                                        (0231)     ;
                                        (0232) 	global		__Lstackps
                                        (0233) 	mov     a,low __Lstackps
                                        (0234) 	swap    a,sp
                                        (0235) ELSE
                                        (0236)     ;------------------
                                        (0237)     ; Set up the stack
                                        (0238)     ;------------------
0075: 50 4B    MOV   A,0x4B             (0239)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0240)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0241) ENDIF
                                        (0242) 
                                        (0243)     ;-----------------------------------------------
                                        (0244)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0245)     ;-----------------------------------------------
                                        (0246) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0247) IF ( SUPPLY_VOLTAGE )         ; 1 means 5.0V
                                        (0248)  IF ( AGND_BYPASS )
                                        (0249)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0250)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0251)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0252)     ; value using the proper trim values.
                                        (0253)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0254)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0255)  ENDIF
                                        (0256) ELSE    ; 3.3 V Operation, not 5.0V
                                        (0257)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0258) ENDIF ;(SUPPLY_VOLTAGE)
                                        (0259) 
007B: 55 F8 00 MOV   [_ramareas_end+173],0x0(0260)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
007E: 55 F9 00 MOV   [_ramareas_end+174],0x0(0261)     mov  [bSSC_KEYSP], 0
0081: 71 10    OR    F,0x10             
                                        (0262) 
                                        (0263)     ;---------------------------------------
                                        (0264)     ; Initialize Crystal Oscillator and PLL
                                        (0265)     ;---------------------------------------
                                        (0266) 
                                        (0267) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0268)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0269)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0270)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0271)     ; the ECO to stabilize.
                                        (0272)     ;
                                        (0273)     M8C_SetBank1
                                        (0274)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0275)     M8C_SetBank0
                                        (0276)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0277)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0278)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0279) .WaitFor1s:
                                        (0280)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0281)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0282)                                           ;   since interrupts are not globally enabled
                                        (0283) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0284)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0285)     M8C_SetBank1
0083: 62 E0 02 MOV   REG[0xE0],0x2      (0286)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0086: 70 EF    AND   F,0xEF             
0088: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0287)     M8C_SetBank0
                                        (0288)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0289) 
                                        (0290) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0291) 
                                        (0292) IF ( PLL_MODE )
                                        (0293)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0294)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0295)     ;
                                        (0296)     M8C_SetBank1
                                        (0297)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0298)     M8C_SetBank0
                                        (0299)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0300)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0301) 
                                        (0302) .WaitFor16ms:
                                        (0303)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0304)     jz   .WaitFor16ms
                                        (0305)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0306)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0307)     M8C_SetBank0
                                        (0308) 
                                        (0309) IF      ( WAIT_FOR_32K )
                                        (0310) ELSE ; !( WAIT_FOR_32K )
                                        (0311)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0312)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0313) ENDIF ;(WAIT_FOR_32K)
                                        (0314) ENDIF ;(PLL_MODE)
                                        (0315) 
                                        (0316) 	;-------------------------------------------------------
                                        (0317)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0318)     ;-------------------------------------------------------
                                        (0319) 
                                        (0320)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0321) 
                                        (0322) IF (SYSCLK_SOURCE)
                                        (0323)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0324) ENDIF
                                        (0325)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0326) 
                                        (0327)     ;------------------------
                                        (0328)     ; Close CT leakage path.
                                        (0329)     ;------------------------
008B: 62 71 05 MOV   REG[0x71],0x5      (0330)     mov   reg[ACB00CR0], 05h
008E: 62 75 05 MOV   REG[0x75],0x5      (0331)     mov   reg[ACB01CR0], 05h
0091: 62 79 05 MOV   REG[0x79],0x5      (0332)     mov   reg[ACB02CR0], 05h
0094: 62 7D 05 MOV   REG[0x7D],0x5      (0333)     mov   reg[ACB03CR0], 05h
                                        (0334) 
                                        (0335)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0336)     ;---------------------------------------------------
                                        (0337)     ; Insert your custom code below this banner
                                        (0338)     ;---------------------------------------------------
                                        (0339) 
                                        (0340)     ;---------------------------------------------------
                                        (0341)     ; Insert your custom code above this banner
                                        (0342)     ;---------------------------------------------------
                                        (0343)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0344) 
                                        (0345)     ;-------------------------
                                        (0346)     ; Load Base Configuration
                                        (0347)     ;-------------------------
                                        (0348)     ; Load global parameter settings and load the user modules in the
                                        (0349)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0350)     ; to minimize start up time; (2) We may still need to play with the
                                        (0351)     ; Sleep Timer.
                                        (0352)     ;
0097: 7C 02 F0 LCALL 0x02F0             (0353)     lcall LoadConfigInit
                                        (0354) 
                                        (0355)     ;-----------------------------------
                                        (0356)     ; Initialize C Run-Time Environment
                                        (0357)     ;-----------------------------------
                                        (0358) IF ( C_LANGUAGE_SUPPORT )
009A: 50 00    MOV   A,0x0              (0359)     mov  A,0                           ; clear the 'bss' segment to zero
009C: 55 38 3D MOV   [__r0],0x3D        (0360)     mov  [__r0],<__bss_start
                                        (0361) BssLoop:
009F: 3C 38 4B CMP   [__r0],0x4B        (0362)     cmp  [__r0],<__bss_end
00A2: A0 05    JZ    0x00A8             (0363)     jz   BssDone
00A4: 3F 38    MVI   [__r0],A           (0364)     mvi  [__r0],A
00A6: 8F F8    JMP   0x009F             (0365)     jmp  BssLoop
                                        (0366) BssDone:
00A8: 50 02    MOV   A,0x2              (0367)     mov  A,>__idata_start              ; copy idata to data segment
00AA: 57 01    MOV   X,0x1              (0368)     mov  X,<__idata_start
00AC: 55 38 00 MOV   [__r0],0x0         (0369)     mov  [__r0],<__data_start
                                        (0370) IDataLoop:
00AF: 3C 38 2A CMP   [__r0],0x2A        (0371)     cmp  [__r0],<__data_end
00B2: A0 0B    JZ    0x00BE             (0372)     jz   C_RTE_Done
00B4: 08       PUSH  A                  (0373)     push A
00B5: 28       ROMX                     (0374)     romx
00B6: 3F 38    MVI   [__r0],A           (0375)     mvi  [__r0],A
00B8: 18       POP   A                  (0376)     pop  A
00B9: 75       INC   X                  (0377)     inc  X
00BA: 09 00    ADC   A,0x0              (0378)     adc  A,0
00BC: 8F F2    JMP   0x00AF             (0379)     jmp  IDataLoop
00BE: 71 10    OR    F,0x10             
00C0: 70 EF    AND   F,0xEF             
                                        (0380) 
                                        (0381) C_RTE_Done:
                                        (0382) 
                                        (0383) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0384) 
                                        (0385)     ;-------------------------------
                                        (0386)     ; Voltage Stabilization for SMP
                                        (0387)     ;-------------------------------
                                        (0388) 
                                        (0389) IF ( SUPPLY_VOLTAGE )                  ; 1 Means 5 Volts
                                        (0390) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0391)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0392)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0393)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0394)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0395)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0396)     M8C_SetBank1
                                        (0397)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0398)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0399)     M8C_SetBank0
                                        (0400)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0401)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0402) .WaitFor2ms:
                                        (0403)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0404)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0405) ENDIF ; ( SWITCH_MODE_PUMP ^ 1 )
                                        (0406) ENDIF ; ( SUPPLY_VOLTAGE )
                                        (0407) 
                                        (0408)     ;-------------------------------
                                        (0409)     ; Set Power-On Reset (POR) Level
                                        (0410)     ;-------------------------------
                                        (0411)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0412)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0413)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0414)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0415)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0416) 
                                        (0417)     M8C_SetBank1
                                        (0418) 
                                        (0419) IF ( SUPPLY_VOLTAGE )                       ; 1 Means 5 Volts
                                        (0420)  IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )  ;    Also 24MHz?
                                        (0421)                                             ;       no, set 4.5V POR in user code, if desired
                                        (0422)  ELSE ; 24HMz                               ;
                                        (0423)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0424)  ENDIF ; OSC_CRO_CPU_24MHz
                                        (0425) ENDIF ; 5V
                                        (0426) 
                                        (0427)     M8C_SetBank0
                                        (0428) 
                                        (0429)     ;----------------------------
                                        (0430)     ; Wrap up and invoke "main"
                                        (0431)     ;----------------------------
                                        (0432) 
                                        (0433)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0434)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0435)     ;
00C2: 62 E0 00 MOV   REG[0xE0],0x0      (0436)     mov  reg[INT_MSK0],0
00C5: 71 10    OR    F,0x10             
                                        (0437) 
                                        (0438)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0439)     ;
                                        (0440)     M8C_SetBank1
00C7: 62 E0 00 MOV   REG[0xE0],0x0      (0441)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
00CA: 70 EF    AND   F,0xEF             
                                        (0442)     M8C_SetBank0
                                        (0443) 
                                        (0444)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0445)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0446)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0447)     ;
00CC: 62 E2 00 MOV   REG[0xE2],0x0      (0448)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0449)                                    ; have been set during the boot process.
                                        (0450) IF	(TOOLCHAIN & HITECH)
                                        (0451) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0452) ELSE
                                        (0453) IF ENABLE_LJMP_TO_MAIN
                                        (0454)     ljmp  _main                    ; goto main (no return)
                                        (0455) ELSE
00CF: 7C 08 7F LCALL _main              (0456)     lcall _main                    ; call main
                                        (0457) .Exit:
00D2: 8F FF    JMP   0x00D2             (0458)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0459) ENDIF
                                        (0460) ENDIF ; TOOLCHAIN
                                        (0461) 
                                        (0462)     ;---------------------------------
                                        (0463)     ; Library Access to Global Parms
                                        (0464)     ;---------------------------------
                                        (0465)     ;
                                        (0466)  bGetPowerSetting:
                                        (0467) _bGetPowerSetting:
                                        (0468)     ; Synthesize the "power setting" value used by chips with SlowIMO mode.
                                        (0469)     ; Returns value of POWER_SETTING in the A register.
                                        (0470)     ; No inputs. No Side Effects.
                                        (0471)     ;
                                        (0472) IF ( SUPPLY_VOLTAGE )            ; 1 means 5.0V
00D4: 50 10    MOV   A,0x10             (0473)     mov   A, POWER_SET_5V0_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0474) ELSE        
                                        (0475)     mov   A, POWER_SET_3V3_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0476) ENDIF
00D6: 7F       RET                      (0477)     ret
                                        (0478) 
                                        (0479) IF	(TOOLCHAIN & HITECH)
                                        (0480) ELSE
                                        (0481)     ;---------------------------------
                                        (0482)     ; Order Critical RAM & ROM AREAs
                                        (0483)     ;---------------------------------
                                        (0484)     ;  'TOP' is all that has been defined so far...
                                        (0485) 
                                        (0486)     ;  ROM AREAs for C CONST, static & global items
                                        (0487)     ;
                                        (0488)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0489)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0490) __idata_start:
                                        (0491) 
                                        (0492)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0493) __func_lit_start:
                                        (0494) 
                                        (0495)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0496)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0497) 
                                        (0498)     ; CODE segment for general use
                                        (0499)     ;
                                        (0500)     AREA text (ROM, REL, CON)
                                        (0501) __text_start:
                                        (0502) 
                                        (0503)     ; RAM area usage
                                        (0504)     ;
                                        (0505)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0506) __data_start:
                                        (0507) 
                                        (0508)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0509)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0510)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0511) __bss_start:
                                        (0512) 
                                        (0513) ENDIF ; TOOLCHAIN
                                        (0514) 
                                        (0515) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.2946
022B: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_robottiprojekti_Bank1
                                        (0019) export LoadConfigTBL_robottiprojekti_Bank0
                                        (0020) export LoadConfigTBL_robottiprojekti_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_robottiprojekti_Bank0:
                                        (0023) ;  Instance name Counter16_1, User Module Counter16
                                        (0024) ;       Instance name Counter16_1, Block Name CNTR16_LSB(DBB11)
                                        (0025) 	db		37h, 00h		;Counter16_1_CONTROL_LSB_REG(DBB11CR0)
                                        (0026) 	db		35h, 13h		;Counter16_1_PERIOD_LSB_REG(DBB11DR1)
                                        (0027) 	db		36h, 00h		;Counter16_1_COMPARE_LSB_REG(DBB11DR2)
                                        (0028) ;       Instance name Counter16_1, Block Name CNTR16_MSB(DCB12)
                                        (0029) 	db		3bh, 00h		;Counter16_1_CONTROL_MSB_REG(DCB12CR0)
                                        (0030) 	db		39h, 00h		;Counter16_1_PERIOD_MSB_REG(DCB12DR1)
                                        (0031) 	db		3ah, 00h		;Counter16_1_COMPARE_MSB_REG(DCB12DR2)
                                        (0032) ;  Instance name LCD, User Module LCD
                                        (0033) ;  Instance name LED, User Module LED
                                        (0034) ;  Instance name PWM8_OIKEA, User Module PWM8
                                        (0035) ;       Instance name PWM8_OIKEA, Block Name PWM8(DBB01)
                                        (0036) 	db		27h, 00h		;PWM8_OIKEA_CONTROL_REG(DBB01CR0)
                                        (0037) 	db		25h, c7h		;PWM8_OIKEA_PERIOD_REG(DBB01DR1)
                                        (0038) 	db		26h, 00h		;PWM8_OIKEA_COMPARE_REG(DBB01DR2)
                                        (0039) ;  Instance name PWM8_SERVO, User Module PWM16
                                        (0040) ;       Instance name PWM8_SERVO, Block Name PWM16_LSB(DCB03)
                                        (0041) 	db		2fh, 00h		;PWM8_SERVO_CONTROL_LSB_REG(DCB03CR0)
                                        (0042) 	db		2dh, 8fh		;PWM8_SERVO_PERIOD_LSB_REG(DCB03DR1)
                                        (0043) 	db		2eh, 00h		;PWM8_SERVO_COMPARE_LSB_REG(DCB03DR2)
                                        (0044) ;       Instance name PWM8_SERVO, Block Name PWM16_MSB(DBB10)
                                        (0045) 	db		33h, 00h		;PWM8_SERVO_CONTROL_MSB_REG(DBB10CR0)
                                        (0046) 	db		31h, 01h		;PWM8_SERVO_PERIOD_MSB_REG(DBB10DR1)
                                        (0047) 	db		32h, 00h		;PWM8_SERVO_COMPARE_MSB_REG(DBB10DR2)
                                        (0048) ;  Instance name PWM8_VASEN, User Module PWM8
                                        (0049) ;       Instance name PWM8_VASEN, Block Name PWM8(DBB00)
                                        (0050) 	db		23h, 00h		;PWM8_VASEN_CONTROL_REG(DBB00CR0)
                                        (0051) 	db		21h, c7h		;PWM8_VASEN_PERIOD_REG(DBB00DR1)
                                        (0052) 	db		22h, 00h		;PWM8_VASEN_COMPARE_REG(DBB00DR2)
                                        (0053) ;  Instance name Timer8, User Module Timer8
                                        (0054) ;       Instance name Timer8, Block Name TIMER8(DCB02)
                                        (0055) 	db		2bh, 04h		;Timer8_CONTROL_REG(DCB02CR0)
                                        (0056) 	db		29h, 13h		;Timer8_PERIOD_REG(DCB02DR1)
                                        (0057) 	db		2ah, 00h		;Timer8_COMPARE_REG(DCB02DR2)
                                        (0058) ;  Global Register values Bank 0
                                        (0059) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0060) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0061) 	db		63h, 15h		; AnalogReferenceControl register (ARF_CR)
                                        (0062) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0063) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0064) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0065) 	db		d6h, 00h		; I2CConfig register (I2CCFG)
                                        (0066) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0067) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0068) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0069) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0070) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0071) 	db		b5h, 11h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0072) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0073) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0074) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0075) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0076) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0077) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0078) 	db		bdh, 02h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0079) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0080) 	db		ffh
                                        (0081) LoadConfigTBL_robottiprojekti_Bank1:
                                        (0082) ;  Instance name Counter16_1, User Module Counter16
                                        (0083) ;       Instance name Counter16_1, Block Name CNTR16_LSB(DBB11)
                                        (0084) 	db		34h, 01h		;Counter16_1_FUNC_LSB_REG(DBB11FN)
                                        (0085) 	db		35h, f5h		;Counter16_1_INPUT_LSB_REG(DBB11IN)
                                        (0086) 	db		36h, 40h		;Counter16_1_OUTPUT_LSB_REG(DBB11OU)
                                        (0087) ;       Instance name Counter16_1, Block Name CNTR16_MSB(DCB12)
                                        (0088) 	db		38h, 21h		;Counter16_1_FUNC_MSB_REG(DCB12FN)
                                        (0089) 	db		39h, 35h		;Counter16_1_INPUT_MSB_REG(DCB12IN)
                                        (0090) 	db		3ah, 40h		;Counter16_1_OUTPUT_MSB_REG(DCB12OU)
                                        (0091) ;  Instance name LCD, User Module LCD
                                        (0092) ;  Instance name LED, User Module LED
                                        (0093) ;  Instance name PWM8_OIKEA, User Module PWM8
                                        (0094) ;       Instance name PWM8_OIKEA, Block Name PWM8(DBB01)
                                        (0095) 	db		24h, 29h		;PWM8_OIKEA_FUNC_REG(DBB01FN)
                                        (0096) 	db		25h, 16h		;PWM8_OIKEA_INPUT_REG(DBB01IN)
                                        (0097) 	db		26h, 45h		;PWM8_OIKEA_OUTPUT_REG(DBB01OU)
                                        (0098) ;  Instance name PWM8_SERVO, User Module PWM16
                                        (0099) ;       Instance name PWM8_SERVO, Block Name PWM16_LSB(DCB03)
                                        (0100) 	db		2ch, 01h		;PWM8_SERVO_FUNC_LSB_REG(DCB03FN)
                                        (0101) 	db		2dh, 11h		;PWM8_SERVO_INPUT_LSB_REG(DCB03IN)
                                        (0102) 	db		2eh, 40h		;PWM8_SERVO_OUTPUT_LSB_REG(DCB03OU)
                                        (0103) ;       Instance name PWM8_SERVO, Block Name PWM16_MSB(DBB10)
                                        (0104) 	db		30h, 21h		;PWM8_SERVO_FUNC_MSB_REG(DBB10FN)
                                        (0105) 	db		31h, 31h		;PWM8_SERVO_INPUT_MSB_REG(DBB10IN)
                                        (0106) 	db		32h, 44h		;PWM8_SERVO_OUTPUT_MSB_REG(DBB10OU)
                                        (0107) ;  Instance name PWM8_VASEN, User Module PWM8
                                        (0108) ;       Instance name PWM8_VASEN, Block Name PWM8(DBB00)
                                        (0109) 	db		20h, 29h		;PWM8_VASEN_FUNC_REG(DBB00FN)
                                        (0110) 	db		21h, 16h		;PWM8_VASEN_INPUT_REG(DBB00IN)
                                        (0111) 	db		22h, 44h		;PWM8_VASEN_OUTPUT_REG(DBB00OU)
                                        (0112) ;  Instance name Timer8, User Module Timer8
                                        (0113) ;       Instance name Timer8, Block Name TIMER8(DCB02)
                                        (0114) 	db		28h, 20h		;Timer8_FUNC_REG(DCB02FN)
                                        (0115) 	db		29h, 01h		;Timer8_INPUT_REG(DCB02IN)
                                        (0116) 	db		2ah, 40h		;Timer8_OUTPUT_REG(DCB02OU)
                                        (0117) ;  Global Register values Bank 1
                                        (0118) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0119) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0120) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0121) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0122) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0123) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0124) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0125) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0126) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0127) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0128) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0129) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0130) 	db		e1h, b9h		; OscillatorControl_1 register (OSC_CR1)
                                        (0131) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0132) 	db		dfh, 09h		; OscillatorControl_3 register (OSC_CR3)
                                        (0133) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0134) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0135) 	db		ffh
                                        (0136) AREA psoc_config(rom, rel)
                                        (0137) LoadConfigTBL_robottiprojekti_Ordered:
                                        (0138) ;  Ordered Global Register values
                                        (0139) 	M8C_SetBank0
022D: 62 00 00 MOV   REG[0x0],0x0       (0140) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
0230: 71 10    OR    F,0x10             
                                        (0141) 	M8C_SetBank1
0232: 62 00 53 MOV   REG[0x0],0x53      (0142) 	mov	reg[00h], 53h		; Port_0_DriveMode_0 register (PRT0DM0)
0235: 62 01 8C MOV   REG[0x1],0x8C      (0143) 	mov	reg[01h], 8ch		; Port_0_DriveMode_1 register (PRT0DM1)
0238: 70 EF    AND   F,0xEF             
                                        (0144) 	M8C_SetBank0
023A: 62 03 0C MOV   REG[0x3],0xC       (0145) 	mov	reg[03h], 0ch		; Port_0_DriveMode_2 register (PRT0DM2)
023D: 62 02 93 MOV   REG[0x2],0x93      (0146) 	mov	reg[02h], 93h		; Port_0_GlobalSelect register (PRT0GS)
0240: 71 10    OR    F,0x10             
                                        (0147) 	M8C_SetBank1
0242: 62 02 08 MOV   REG[0x2],0x8       (0148) 	mov	reg[02h], 08h		; Port_0_IntCtrl_0 register (PRT0IC0)
0245: 62 03 00 MOV   REG[0x3],0x0       (0149) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
0248: 70 EF    AND   F,0xEF             
                                        (0150) 	M8C_SetBank0
024A: 62 01 08 MOV   REG[0x1],0x8       (0151) 	mov	reg[01h], 08h		; Port_0_IntEn register (PRT0IE)
024D: 62 04 00 MOV   REG[0x4],0x0       (0152) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
0250: 71 10    OR    F,0x10             
                                        (0153) 	M8C_SetBank1
0252: 62 04 8F MOV   REG[0x4],0x8F      (0154) 	mov	reg[04h], 8fh		; Port_1_DriveMode_0 register (PRT1DM0)
0255: 62 05 50 MOV   REG[0x5],0x50      (0155) 	mov	reg[05h], 50h		; Port_1_DriveMode_1 register (PRT1DM1)
0258: 70 EF    AND   F,0xEF             
                                        (0156) 	M8C_SetBank0
025A: 62 07 50 MOV   REG[0x7],0x50      (0157) 	mov	reg[07h], 50h		; Port_1_DriveMode_2 register (PRT1DM2)
025D: 62 06 00 MOV   REG[0x6],0x0       (0158) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
0260: 71 10    OR    F,0x10             
                                        (0159) 	M8C_SetBank1
0262: 62 06 00 MOV   REG[0x6],0x0       (0160) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0265: 62 07 20 MOV   REG[0x7],0x20      (0161) 	mov	reg[07h], 20h		; Port_1_IntCtrl_1 register (PRT1IC1)
0268: 70 EF    AND   F,0xEF             
                                        (0162) 	M8C_SetBank0
026A: 62 05 20 MOV   REG[0x5],0x20      (0163) 	mov	reg[05h], 20h		; Port_1_IntEn register (PRT1IE)
026D: 62 08 00 MOV   REG[0x8],0x0       (0164) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0270: 71 10    OR    F,0x10             
                                        (0165) 	M8C_SetBank1
0272: 62 08 7F MOV   REG[0x8],0x7F      (0166) 	mov	reg[08h], 7fh		; Port_2_DriveMode_0 register (PRT2DM0)
0275: 62 09 80 MOV   REG[0x9],0x80      (0167) 	mov	reg[09h], 80h		; Port_2_DriveMode_1 register (PRT2DM1)
0278: 70 EF    AND   F,0xEF             
                                        (0168) 	M8C_SetBank0
027A: 62 0B 80 MOV   REG[0xB],0x80      (0169) 	mov	reg[0bh], 80h		; Port_2_DriveMode_2 register (PRT2DM2)
027D: 62 0A 00 MOV   REG[0xA],0x0       (0170) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
0280: 71 10    OR    F,0x10             
                                        (0171) 	M8C_SetBank1
0282: 62 0A 00 MOV   REG[0xA],0x0       (0172) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0285: 62 0B 00 MOV   REG[0xB],0x0       (0173) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0288: 70 EF    AND   F,0xEF             
                                        (0174) 	M8C_SetBank0
028A: 62 09 00 MOV   REG[0x9],0x0       (0175) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
028D: 62 0C 00 MOV   REG[0xC],0x0       (0176) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0290: 71 10    OR    F,0x10             
                                        (0177) 	M8C_SetBank1
0292: 62 0C 00 MOV   REG[0xC],0x0       (0178) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
0295: 62 0D 00 MOV   REG[0xD],0x0       (0179) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
0298: 70 EF    AND   F,0xEF             
                                        (0180) 	M8C_SetBank0
029A: 62 0F 00 MOV   REG[0xF],0x0       (0181) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
029D: 62 0E 00 MOV   REG[0xE],0x0       (0182) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
02A0: 71 10    OR    F,0x10             
                                        (0183) 	M8C_SetBank1
02A2: 62 0E 00 MOV   REG[0xE],0x0       (0184) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
02A5: 62 0F 00 MOV   REG[0xF],0x0       (0185) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
02A8: 70 EF    AND   F,0xEF             
                                        (0186) 	M8C_SetBank0
02AA: 62 0D 00 MOV   REG[0xD],0x0       (0187) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
02AD: 62 10 00 MOV   REG[0x10],0x0      (0188) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
02B0: 71 10    OR    F,0x10             
                                        (0189) 	M8C_SetBank1
02B2: 62 10 00 MOV   REG[0x10],0x0      (0190) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
02B5: 62 11 00 MOV   REG[0x11],0x0      (0191) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
02B8: 70 EF    AND   F,0xEF             
                                        (0192) 	M8C_SetBank0
02BA: 62 13 00 MOV   REG[0x13],0x0      (0193) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
02BD: 62 12 00 MOV   REG[0x12],0x0      (0194) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
02C0: 71 10    OR    F,0x10             
                                        (0195) 	M8C_SetBank1
02C2: 62 12 00 MOV   REG[0x12],0x0      (0196) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
02C5: 62 13 00 MOV   REG[0x13],0x0      (0197) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
02C8: 70 EF    AND   F,0xEF             
                                        (0198) 	M8C_SetBank0
02CA: 62 11 00 MOV   REG[0x11],0x0      (0199) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
02CD: 62 14 00 MOV   REG[0x14],0x0      (0200) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
02D0: 71 10    OR    F,0x10             
                                        (0201) 	M8C_SetBank1
02D2: 62 14 00 MOV   REG[0x14],0x0      (0202) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
02D5: 62 15 00 MOV   REG[0x15],0x0      (0203) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
02D8: 70 EF    AND   F,0xEF             
                                        (0204) 	M8C_SetBank0
02DA: 62 17 00 MOV   REG[0x17],0x0      (0205) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
02DD: 62 16 00 MOV   REG[0x16],0x0      (0206) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
02E0: 71 10    OR    F,0x10             
                                        (0207) 	M8C_SetBank1
02E2: 62 16 00 MOV   REG[0x16],0x0      (0208) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
02E5: 62 17 00 MOV   REG[0x17],0x0      (0209) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
02E8: 70 EF    AND   F,0xEF             
                                        (0210) 	M8C_SetBank0
02EA: 62 15 00 MOV   REG[0x15],0x0      (0211) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
02ED: 70 EF    AND   F,0xEF             
                                        (0212) 	M8C_SetBank0
02EF: 7F       RET                      (0213) 	ret
                                        (0214) 
                                        (0215) 
                                        (0216) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_robottiprojekti
                                        (0026) export _LoadConfig_robottiprojekti
                                        (0027) export Port_1_Data_SHADE
                                        (0028) export _Port_1_Data_SHADE
                                        (0029) export Port_2_Data_SHADE
                                        (0030) export _Port_2_Data_SHADE
                                        (0031) export Port_2_DriveMode_0_SHADE
                                        (0032) export _Port_2_DriveMode_0_SHADE
                                        (0033) export Port_2_DriveMode_1_SHADE
                                        (0034) export _Port_2_DriveMode_1_SHADE
                                        (0035) 
                                        (0036) 
                                        (0037) export NO_SHADOW
                                        (0038) export _NO_SHADOW
                                        (0039) 
                                        (0040) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0041) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0042) 
                                        (0043) AREA psoc_config(rom, rel)
                                        (0044) 
                                        (0045) ;---------------------------------------------------------------------------
                                        (0046) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0047) ;                  parameters handled by boot code, like CPU speed). This
                                        (0048) ;                  function can be called from user code, but typically it
                                        (0049) ;                  is only called from boot.
                                        (0050) ;
                                        (0051) ;       INPUTS: None.
                                        (0052) ;      RETURNS: Nothing.
                                        (0053) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0054) ;               In the large memory model currently only the page
                                        (0055) ;               pointer registers listed below are modified.  This does
                                        (0056) ;               not guarantee that in future implementations of this
                                        (0057) ;               function other page pointer registers will not be
                                        (0058) ;               modified.
                                        (0059) ;          
                                        (0060) ;               Page Pointer Registers Modified: 
                                        (0061) ;               CUR_PP
                                        (0062) ;
                                        (0063) _LoadConfigInit:
                                        (0064)  LoadConfigInit:
                                        (0065)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0066)     
02F0: 55 39 00 MOV   [0x39],0x0         (0067) 	mov		[Port_1_Data_SHADE], 0h
02F3: 55 3A 00 MOV   [0x3A],0x0         (0068) 	mov		[Port_2_Data_SHADE], 0h
02F6: 55 3B 7F MOV   [0x3B],0x7F        (0069) 	mov		[Port_2_DriveMode_0_SHADE], 7fh
02F9: 55 3C 80 MOV   [0x3C],0x80        (0070) 	mov		[Port_2_DriveMode_1_SHADE], 80h
                                        (0071) 
02FC: 7C 03 03 LCALL 0x0303             (0072) 	lcall	LoadConfig_robottiprojekti
02FF: 7C 02 2B LCALL 0x022B             (0073) 	lcall	LoadConfigTBL_robottiprojekti_Ordered
                                        (0074) 
                                        (0075) 
                                        (0076)     RAM_EPILOGUE RAM_USE_CLASS_4
0302: 7F       RET                      (0077)     ret
                                        (0078) 
                                        (0079) ;---------------------------------------------------------------------------
                                        (0080) ; Load Configuration robottiprojekti
                                        (0081) ;
                                        (0082) ;    Load configuration registers for robottiprojekti.
                                        (0083) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0084) ;
                                        (0085) ;       INPUTS: None.
                                        (0086) ;      RETURNS: Nothing.
                                        (0087) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0088) ;               modified as may the Page Pointer registers!
                                        (0089) ;               In the large memory model currently only the page
                                        (0090) ;               pointer registers listed below are modified.  This does
                                        (0091) ;               not guarantee that in future implementations of this
                                        (0092) ;               function other page pointer registers will not be
                                        (0093) ;               modified.
                                        (0094) ;          
                                        (0095) ;               Page Pointer Registers Modified: 
                                        (0096) ;               CUR_PP
                                        (0097) ;
                                        (0098) _LoadConfig_robottiprojekti:
                                        (0099)  LoadConfig_robottiprojekti:
                                        (0100)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0101) 
0303: 10       PUSH  X                  (0102) 	push	x
0304: 70 EF    AND   F,0xEF             
                                        (0103)     M8C_SetBank0                    ; Force bank 0
0306: 50 00    MOV   A,0x0              (0104)     mov     a, 0                    ; Specify bank 0
0308: 67       ASR   A                  (0105)     asr     a                       ; Store in carry flag
                                        (0106)                                     ; Load bank 0 table:
0309: 50 01    MOV   A,0x1              (0107)     mov     A, >LoadConfigTBL_robottiprojekti_Bank0
030B: 57 5F    MOV   X,0x5F             (0108)     mov     X, <LoadConfigTBL_robottiprojekti_Bank0
030D: 7C 03 1E LCALL 0x031E             (0109)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0110) 
0310: 50 01    MOV   A,0x1              (0111)     mov     a, 1                    ; Specify bank 1
0312: 67       ASR   A                  (0112)     asr     a                       ; Store in carry flag
                                        (0113)                                     ; Load bank 1 table:
0313: 50 01    MOV   A,0x1              (0114)     mov     A, >LoadConfigTBL_robottiprojekti_Bank1
0315: 57 B4    MOV   X,0xB4             (0115)     mov     X, <LoadConfigTBL_robottiprojekti_Bank1
0317: 7C 03 1E LCALL 0x031E             (0116)     lcall   LoadConfig              ; Load the bank 1 values
031A: 70 EF    AND   F,0xEF             
                                        (0117) 
                                        (0118)     M8C_SetBank0                    ; Force return to bank 0
031C: 20       POP   X                  (0119) 	pop		x
                                        (0120) 
                                        (0121)     RAM_EPILOGUE RAM_USE_CLASS_4
031D: 7F       RET                      (0122)     ret
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) 
                                        (0127) ;---------------------------------------------------------------------------
                                        (0128) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0129) ;              pairs. Terminate on address=0xFF.
                                        (0130) ;
                                        (0131) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0132) ;           Flag Register Carry bit encodes the Register Bank
                                        (0133) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0134) ;
                                        (0135) ;  RETURNS: nothing.
                                        (0136) ;
                                        (0137) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0138) ;                X-3 Temporary store for register address
                                        (0139) ;                X-2 LSB of config table address
                                        (0140) ;                X-1 MSB of config table address
                                        (0141) ;
                                        (0142) LoadConfig:
                                        (0143)     RAM_PROLOGUE RAM_USE_CLASS_2
031E: 38 02    ADD   SP,0x2             (0144)     add     SP, 2                   ; Set up local vars
0320: 10       PUSH  X                  (0145)     push    X                       ; Save config table address on stack
0321: 08       PUSH  A                  (0146)     push    A
0322: 4F       MOV   X,SP               (0147)     mov     X, SP
0323: 56 FC 00 MOV   [X-4],0x0          (0148)     mov     [X-4], 0                ; Set default Destination to Bank 0
0326: D0 04    JNC   0x032B             (0149)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0328: 56 FC 01 MOV   [X-4],0x1          (0150)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0151) .BankSelectSaved:
032B: 18       POP   A                  (0152)     pop     A
032C: 20       POP   X                  (0153)     pop     X
032D: 70 EF    AND   F,0xEF             
032F: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0154) 
                                        (0155) LoadConfigLp:
                                        (0156)     M8C_SetBank0                    ; Switch to bank 0
                                        (0157)     M8C_ClearWDT                    ; Clear the watchdog for long inits
0332: 10       PUSH  X                  (0158)     push    X                       ; Preserve the config table address
0333: 08       PUSH  A                  (0159)     push    A
0334: 28       ROMX                     (0160)     romx                            ; Load register address from table
0335: 39 FF    CMP   A,0xFF             (0161)     cmp     A, END_CONFIG_TABLE     ; End of table?
0337: A0 1F    JZ    0x0357             (0162)     jz      EndLoadConfig           ;   Yes, go wrap it up
0339: 4F       MOV   X,SP               (0163)     mov     X, SP                   ;
033A: 48 FC 01 TST   [X-4],0x1          (0164)     tst     [X-4], 1                ; Loading IO Bank 1?
033D: A0 03    JZ    0x0341             (0165)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
033F: 71 10    OR    F,0x10             
                                        (0166)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0167) .IOBankNowSet:
0341: 54 FD    MOV   [X-3],A            (0168)     mov     [X-3], A                ; Stash the register address
0343: 18       POP   A                  (0169)     pop     A                       ; Retrieve the table address
0344: 20       POP   X                  (0170)     pop     X
0345: 75       INC   X                  (0171)     inc     X                       ; Advance to the data byte
0346: 09 00    ADC   A,0x0              (0172)     adc     A, 0
0348: 10       PUSH  X                  (0173)     push    X                       ; Save the config table address again
0349: 08       PUSH  A                  (0174)     push    A
034A: 28       ROMX                     (0175)     romx                            ; load config data from the table
034B: 4F       MOV   X,SP               (0176)     mov     X, SP                   ; retrieve the register address
034C: 59 FD    MOV   X,[X-3]            (0177)     mov     X, [X-3]
034E: 61 00    MOV   REG[X+0x0],A       (0178)     mov     reg[X], A               ; Configure the register
0350: 18       POP   A                  (0179)     pop     A                       ; retrieve the table address
0351: 20       POP   X                  (0180)     pop     X
0352: 75       INC   X                  (0181)     inc     X                       ; advance to next table entry
0353: 09 00    ADC   A,0x0              (0182)     adc     A, 0
0355: 8F D7    JMP   0x032D             (0183)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0184) EndLoadConfig:
0357: 38 FC    ADD   SP,0xFC            (0185)     add     SP, -4
                                        (0186)     RAM_EPILOGUE RAM_USE_CLASS_2
0359: 7F       RET                      (0187)     ret
                                        (0188) 
                                        (0189) AREA InterruptRAM(ram, rel)
                                        (0190) 
                                        (0191) NO_SHADOW:
                                        (0192) _NO_SHADOW:
                                        (0193) ; write only register shadows
                                        (0194) _Port_1_Data_SHADE:
                                        (0195) Port_1_Data_SHADE:	BLK	1
                                        (0196) _Port_2_Data_SHADE:
                                        (0197) Port_2_Data_SHADE:	BLK	1
                                        (0198) _Port_2_DriveMode_0_SHADE:
                                        (0199) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0200) _Port_2_DriveMode_1_SHADE:
                                        (0201) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0202) 
FILE: lib\timer8int.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
035A: 08       PUSH  A                  (0003) ;;  FILENAME: Timer8INT.asm
                                        (0004) ;;   Version: 2.70, Updated on 2013/5/19 at 10:44:42
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
035B: 51 38    MOV   A,[__r0]           (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
035D: 08       PUSH  A                  (0010) ;;*****************************************************************************
035E: 51 37    MOV   A,[__r1]           (0011) ;;*****************************************************************************
0360: 08       PUSH  A                  (0012) 
0361: 51 36    MOV   A,[__r2]           (0013) include "m8c.inc"
0363: 08       PUSH  A                  (0014) include "memory.inc"
0364: 51 35    MOV   A,[__r3]           (0015) include "Timer8.inc"
0366: 08       PUSH  A                  (0016) 
0367: 51 34    MOV   A,[__r4]           (0017) 
0369: 08       PUSH  A                  (0018) ;-----------------------------------------------
036A: 51 33    MOV   A,[__r5]           (0019) ;  Global Symbols
036C: 08       PUSH  A                  (0020) ;-----------------------------------------------
036D: 51 32    MOV   A,[__r6]           (0021) export  _Timer8_ISR
036F: 08       PUSH  A                  (0022) 
0370: 51 31    MOV   A,[__r7]           (0023) 
0372: 08       PUSH  A                  (0024) AREA InterruptRAM (RAM,REL,CON)
0373: 51 30    MOV   A,[__r8]           (0025) 
0375: 08       PUSH  A                  (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
0376: 51 2F    MOV   A,[__r9]           (0027) ;---------------------------------------------------
0378: 08       PUSH  A                  (0028) ; Insert your custom declarations below this banner
0379: 51 2E    MOV   A,[__r10]          (0029) ;---------------------------------------------------
037B: 08       PUSH  A                  (0030) 
037C: 51 2D    MOV   A,[__r11]          (0031) ;------------------------
037E: 08       PUSH  A                  (0032) ; Includes
037F: 51 2C    MOV   A,[__rX]           (0033) ;------------------------
0381: 08       PUSH  A                  (0034) 
0382: 51 2B    MOV   A,[__rY]           (0035) 	
0384: 08       PUSH  A                  (0036) ;------------------------
0385: 51 2A    MOV   A,[__rZ]           (0037) ;  Constant Definitions
0387: 08       PUSH  A                  (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _Timer8_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _Timer8_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    PRESERVE_CPU_CONTEXT
0388: 7C 0D 14 LCALL _TimerInterrupt    (0081)    lcall _TimerInterrupt
038B: 18       POP   A                  
038C: 53 2A    MOV   [__rZ],A           
038E: 18       POP   A                  
038F: 53 2B    MOV   [__rY],A           
0391: 18       POP   A                  
0392: 53 2C    MOV   [__rX],A           
0394: 18       POP   A                  
0395: 53 2D    MOV   [__r11],A          
0397: 18       POP   A                  
0398: 53 2E    MOV   [__r10],A          
039A: 18       POP   A                  
039B: 53 2F    MOV   [__r9],A           
039D: 18       POP   A                  
039E: 53 30    MOV   [__r8],A           
03A0: 18       POP   A                  
03A1: 53 31    MOV   [__r7],A           
03A3: 18       POP   A                  
03A4: 53 32    MOV   [__r6],A           
03A6: 18       POP   A                  
03A7: 53 33    MOV   [__r5],A           
03A9: 18       POP   A                  
03AA: 53 34    MOV   [__r4],A           
03AC: 18       POP   A                  
03AD: 53 35    MOV   [__r3],A           
03AF: 18       POP   A                  
03B0: 53 36    MOV   [__r2],A           
03B2: 18       POP   A                  
03B3: 53 37    MOV   [__r1],A           
03B5: 18       POP   A                  
03B6: 53 38    MOV   [__r0],A           
03B8: 18       POP   A                  
                                        (0082)    RESTORE_CPU_CONTEXT
                                        (0083)    ;ljmp _TimerInterrupt
                                        (0084)    
                                        (0085)    ;---------------------------------------------------
                                        (0086)    ; Insert a lcall to a C function above this banner
                                        (0087)    ; and un-comment the lines between these banners
                                        (0088)    ;---------------------------------------------------
                                        (0089)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0090) 
03B9: 7E       RETI                     (0091)    reti
                                        (0092) 
                                        (0093) 
                                        (0094) ; end of file Timer8INT.asm
FILE: lib\timer8.asm                    (0001) ;;*****************************************************************************
03BA: 43 E1 04 OR    REG[0xE1],0x4      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer8.asm
                                        (0004) ;;   Version: 2.70, Updated on 2013/5/19 at 10:44:42
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Timer8.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Timer8_EnableInt
                                        (0030) export _Timer8_EnableInt
                                        (0031) export  Timer8_DisableInt
                                        (0032) export _Timer8_DisableInt
                                        (0033) export  Timer8_Start
                                        (0034) export _Timer8_Start
                                        (0035) export  Timer8_Stop
                                        (0036) export _Timer8_Stop
                                        (0037) export  Timer8_WritePeriod
                                        (0038) export _Timer8_WritePeriod
                                        (0039) export  Timer8_WriteCompareValue
                                        (0040) export _Timer8_WriteCompareValue
                                        (0041) export  Timer8_bReadCompareValue
                                        (0042) export _Timer8_bReadCompareValue
                                        (0043) export  Timer8_bReadTimer
                                        (0044) export _Timer8_bReadTimer
                                        (0045) export  Timer8_bReadTimerSaveCV
                                        (0046) export _Timer8_bReadTimerSaveCV
                                        (0047) 
                                        (0048) ; The following functions are deprecated and subject to omission in future releases
                                        (0049) ;
                                        (0050) export  bTimer8_ReadCompareValue  ; deprecated
                                        (0051) export _bTimer8_ReadCompareValue  ; deprecated
                                        (0052) export  bTimer8_ReadTimer         ; deprecated
                                        (0053) export _bTimer8_ReadTimer         ; deprecated
                                        (0054) export  bTimer8_ReadTimerSaveCV   ; deprecated
                                        (0055) export _bTimer8_ReadTimerSaveCV   ; deprecated
                                        (0056) 
                                        (0057) export  bTimer8_ReadCounter       ; obsolete
                                        (0058) export _bTimer8_ReadCounter       ; obsolete
                                        (0059) export  bTimer8_CaptureCounter    ; obsolete
                                        (0060) export _bTimer8_CaptureCounter    ; obsolete
                                        (0061) 
                                        (0062) 
                                        (0063) AREA robottiprojekti_RAM (RAM,REL)
                                        (0064) 
                                        (0065) ;-----------------------------------------------
                                        (0066) ;  Constant Definitions
                                        (0067) ;-----------------------------------------------
                                        (0068) 
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: Timer8_EnableInt
                                        (0080) ;
                                        (0081) ;  DESCRIPTION:
                                        (0082) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
                                        (0083) ;     associated with this User Module. This function has no effect until and
                                        (0084) ;     unless the global interrupts are enabled (for example by using the
                                        (0085) ;     macro M8C_EnableGInt).
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;
                                        (0088) ;  ARGUMENTS:    None.
                                        (0089) ;  RETURNS:      Nothing.
                                        (0090) ;  SIDE EFFECTS: 
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097)  Timer8_EnableInt:
                                        (0098) _Timer8_EnableInt:
                                        (0099)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0100)    Timer8_EnableInt_M
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
03BD: 7F       RET                      (0102)    ret
03BE: 41 E1 FB AND   REG[0xE1],0xFB     
                                        (0103) 
                                        (0104) .ENDSECTION
                                        (0105) 
                                        (0106) 
                                        (0107) .SECTION
                                        (0108) ;-----------------------------------------------------------------------------
                                        (0109) ;  FUNCTION NAME: Timer8_DisableInt
                                        (0110) ;
                                        (0111) ;  DESCRIPTION:
                                        (0112) ;     Disables this timer's interrupt by clearing the interrupt enable
                                        (0113) ;     mask bit associated with this User Module.
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None
                                        (0117) ;  RETURNS:      Nothing
                                        (0118) ;  SIDE EFFECTS: 
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  Timer8_DisableInt:
                                        (0126) _Timer8_DisableInt:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0128)    Timer8_DisableInt_M
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
03C1: 7F       RET                      (0130)    ret
03C2: 43 2B 01 OR    REG[0x2B],0x1      
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) 
                                        (0135) .SECTION
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;  FUNCTION NAME: Timer8_Start
                                        (0138) ;
                                        (0139) ;  DESCRIPTION:
                                        (0140) ;     Sets the start bit in the Control register of this user module.  The
                                        (0141) ;     timer will begin counting on the next input clock.
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:    None
                                        (0145) ;  RETURNS:      Nothing
                                        (0146) ;  SIDE EFFECTS: 
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  Timer8_Start:
                                        (0154) _Timer8_Start:
                                        (0155)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0156)    Timer8_Start_M
                                        (0157)    RAM_EPILOGUE RAM_USE_CLASS_1
03C5: 7F       RET                      (0158)    ret
03C6: 41 2B FE AND   REG[0x2B],0xFE     
                                        (0159) 
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: Timer8_Stop
                                        (0166) ;
                                        (0167) ;  DESCRIPTION:
                                        (0168) ;     Disables timer operation by clearing the start bit in the Control
                                        (0169) ;     register.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    None
                                        (0173) ;  RETURNS:      Nothing
                                        (0174) ;  SIDE EFFECTS: 
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;
                                        (0181)  Timer8_Stop:
                                        (0182) _Timer8_Stop:
                                        (0183)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0184)    Timer8_Stop_M
                                        (0185)    RAM_EPILOGUE RAM_USE_CLASS_1
03C9: 7F       RET                      (0186)    ret
                                        (0187) 
                                        (0188) .ENDSECTION
                                        (0189) 
                                        (0190) 
                                        (0191) .SECTION
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  FUNCTION NAME: Timer8_WritePeriod
                                        (0194) ;
                                        (0195) ;  DESCRIPTION:
                                        (0196) ;     Write the 8-bit period value into the Period register (DR1). If the
                                        (0197) ;     Timer user module is stopped, then this value will also be latched
                                        (0198) ;     into the Count register (DR0).
                                        (0199) ;-----------------------------------------------------------------------------
                                        (0200) ;
                                        (0201) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0202) ;  RETURNS:   Nothing
                                        (0203) ;  SIDE EFFECTS: 
                                        (0204) ;    The A and X registers may be modified by this or future implementations
                                        (0205) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0206) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0207) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0208) ;    functions.
                                        (0209) ;
                                        (0210)  Timer8_WritePeriod:
                                        (0211) _Timer8_WritePeriod:
                                        (0212)    RAM_PROLOGUE RAM_USE_CLASS_1
03CA: 60 29    MOV   REG[0x29],A        (0213)    mov   reg[Timer8_PERIOD_REG], A
                                        (0214)    RAM_EPILOGUE RAM_USE_CLASS_1
03CC: 7F       RET                      (0215)    ret
                                        (0216) 
                                        (0217) .ENDSECTION
                                        (0218) 
                                        (0219) 
                                        (0220) .SECTION
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;  FUNCTION NAME: Timer8_WriteCompareValue
                                        (0223) ;
                                        (0224) ;  DESCRIPTION:
                                        (0225) ;     Writes compare value into the Compare register (DR2).
                                        (0226) ;
                                        (0227) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                        (0228) ;           Compare register. (Call Timer8_Stop to disable).
                                        (0229) ;-----------------------------------------------------------------------------
                                        (0230) ;
                                        (0231) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0232) ;  RETURNS:      Nothing
                                        (0233) ;  SIDE EFFECTS: 
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240)  Timer8_WriteCompareValue:
                                        (0241) _Timer8_WriteCompareValue:
                                        (0242)    RAM_PROLOGUE RAM_USE_CLASS_1
03CD: 60 2A    MOV   REG[0x2A],A        (0243)    mov   reg[Timer8_COMPARE_REG], A
                                        (0244)    RAM_EPILOGUE RAM_USE_CLASS_1
03CF: 7F       RET                      (0245)    ret
                                        (0246) 
                                        (0247) .ENDSECTION
                                        (0248) 
                                        (0249) 
                                        (0250) .SECTION
                                        (0251) ;-----------------------------------------------------------------------------
                                        (0252) ;  FUNCTION NAME: Timer8_bReadCompareValue
                                        (0253) ;
                                        (0254) ;  DESCRIPTION:
                                        (0255) ;     Reads the Compare register.
                                        (0256) ;-----------------------------------------------------------------------------
                                        (0257) ;
                                        (0258) ;  ARGUMENTS:    None
                                        (0259) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0260) ;  SIDE EFFECTS: 
                                        (0261) ;    The A and X registers may be modified by this or future implementations
                                        (0262) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0263) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0264) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0265) ;    functions.
                                        (0266) ;
                                        (0267)  Timer8_bReadCompareValue:
                                        (0268) _Timer8_bReadCompareValue:
                                        (0269)  bTimer8_ReadCompareValue:                       ; this name deprecated
                                        (0270) _bTimer8_ReadCompareValue:                       ; this name deprecated
                                        (0271)    RAM_PROLOGUE RAM_USE_CLASS_1
03D0: 5D 2A    MOV   A,REG[0x2A]        (0272)    mov   A, reg[Timer8_COMPARE_REG]
                                        (0273)    RAM_EPILOGUE RAM_USE_CLASS_1
03D2: 7F       RET                      (0274)    ret
                                        (0275) 
                                        (0276) .ENDSECTION
                                        (0277) 
                                        (0278) 
                                        (0279) .SECTION
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;  FUNCTION NAME: Timer8_bReadTimerSaveCV
                                        (0282) ;
                                        (0283) ;  DESCRIPTION:
                                        (0284) ;     Returns the value in the Count register (DR0), preserving the
                                        (0285) ;     value in the compare register (DR2).
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS: None
                                        (0289) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0290) ;  SIDE EFFECTS:
                                        (0291) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                        (0292) ;     2) If enabled, Global interrupts are momentarily disabled.
                                        (0293) ;     3) The user module is stopped momentarily while the compare value is
                                        (0294) ;        restored.  This may cause the Count register to miss one or more
                                        (0295) ;        counts depending on the input clock speed.
                                        (0296) ;     4) The A and X registers may be modified by this or future implementations
                                        (0297) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0298) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0299) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0300) ;        functions.
                                        (0301) ;
                                        (0302) ;  THEORY of OPERATION:
                                        (0303) ;     1) Read and save the Compare register.
                                        (0304) ;     2) Read the Count register, causing its data to be latched into
                                        (0305) ;        the Compare register.
                                        (0306) ;     3) Read and save the Counter value, now in the Compare register,
                                        (0307) ;        to the buffer.
                                        (0308) ;     4) Disable global interrupts
                                        (0309) ;     5) Halt the timer
                                        (0310) ;     6) Restore the Compare register values
                                        (0311) ;     7) Start the Timer again
                                        (0312) ;     8) Restore global interrupt state
                                        (0313) ;
                                        (0314)  Timer8_bReadTimerSaveCV:
                                        (0315) _Timer8_bReadTimerSaveCV:
                                        (0316)  bTimer8_ReadTimerSaveCV:                        ; this name deprecated
                                        (0317) _bTimer8_ReadTimerSaveCV:                        ; this name deprecated
                                        (0318)  bTimer8_ReadCounter:                            ; this name deprecated
                                        (0319) _bTimer8_ReadCounter:                            ; this name deprecated
                                        (0320) 
                                        (0321) CpuFlags:      equ   0
                                        (0322) bCount:        equ   1
                                        (0323) 
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_2
03D3: 4F       MOV   X,SP               (0325)    mov   X, SP                                   ; X <- stack frame pointer
03D4: 38 02    ADD   SP,0x2             (0326)    add   SP, 2                                   ; Reserve space for flags, count
03D6: 5D 2B    MOV   A,REG[0x2B]        (0327)    mov   A, reg[Timer8_CONTROL_REG]              ; save the Control register
03D8: 08       PUSH  A                  (0328)    push  A
03D9: 5D 2A    MOV   A,REG[0x2A]        (0329)    mov   A, reg[Timer8_COMPARE_REG]              ; save the Compare register
03DB: 08       PUSH  A                  (0330)    push  A
03DC: 5D 28    MOV   A,REG[0x28]        (0331)    mov   A, reg[Timer8_COUNTER_REG]              ; synchronous copy DR2 <- DR0
                                        (0332)                                                  ; This may cause an interrupt!
03DE: 5D 2A    MOV   A,REG[0x2A]        (0333)    mov   A, reg[Timer8_COMPARE_REG]              ; Now grab DR2 (DR0) and save
03E0: 54 01    MOV   [X+1],A            (0334)    mov   [X+bCount], A
03E2: 50 00    MOV   A,0x0              (0335)    mov   A, 0                                    ; Guess the global interrupt state
03E4: 49 F7 01 TST   REG[0xF7],0x1      (0336)    tst   reg[CPU_F], FLAG_GLOBAL_IE              ; Currently Disabled?
03E7: A0 03    JZ    0x03EB             (0337)    jz    .SetupStatusFlag                        ;   Yes, guess was correct
03E9: 50 01    MOV   A,0x1              (0338)    mov   A, FLAG_GLOBAL_IE                       ;    No, modify our guess
                                        (0339) .SetupStatusFlag:                                ; and ...
03EB: 54 00    MOV   [X+0],A            (0340)    mov   [X+CpuFlags], A                         ;   StackFrame[0] <- Flag Reg image
03ED: 70 FE    AND   F,0xFE             
03EF: 41 2B FE AND   REG[0x2B],0xFE     
                                        (0341)    M8C_DisableGInt                               ; Disable interrupts globally
                                        (0342)    Timer8_Stop_M                                 ; Stop the timer
03F2: 18       POP   A                  (0343)    pop   A                                       ; Restore the Compare register
03F3: 60 2A    MOV   REG[0x2A],A        (0344)    mov   reg[Timer8_COMPARE_REG], A
03F5: 18       POP   A                  (0345)    pop   A                                       ; restore start state of the timer
03F6: 60 2B    MOV   REG[0x2B],A        (0346)    mov   reg[Timer8_CONTROL_REG], A
03F8: 18       POP   A                  (0347)    pop   A                                       ; Return result stored in stack frame
                                        (0348)    RAM_EPILOGUE RAM_USE_CLASS_2
03F9: 7E       RETI                     (0349)    reti                                          ; Flag Reg <- StackFrame[0]
                                        (0350) 
                                        (0351) .ENDSECTION
                                        (0352) 
                                        (0353) 
                                        (0354) .SECTION
                                        (0355) ;-----------------------------------------------------------------------------
                                        (0356) ;  FUNCTION NAME: Timer8_bReadTimer
                                        (0357) ;
                                        (0358) ;  DESCRIPTION:
                                        (0359) ;     Performs a software capture of the Count register.  A synchronous
                                        (0360) ;     read of the Count register is performed.  The timer is NOT stopped.
                                        (0361) ;
                                        (0362) ;     WARNING - this will cause loss of data in the Compare register.
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;
                                        (0365) ;  ARGUMENTS:    None
                                        (0366) ;  RETURNS:      fastcall16 BYTE bCount, (value of DR0 in the A register)
                                        (0367) ;  SIDE EFFECTS:
                                        (0368) ;    May cause an interrupt.
                                        (0369) ;
                                        (0370) ;    The A and X registers may be modified by this or future implementations
                                        (0371) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0372) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0373) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0374) ;    functions.
                                        (0375) ;
                                        (0376) ;  THEORY of OPERATION:
                                        (0377) ;     1) Read the Count register - this causes the count value to be
                                        (0378) ;        latched into the Compare register.
                                        (0379) ;     2) Read and return the Count register values from the Compare
                                        (0380) ;        registers into the return buffer.
                                        (0381) ;
                                        (0382)  Timer8_bReadTimer:
                                        (0383) _Timer8_bReadTimer:
                                        (0384)  bTimer8_ReadTimer:                              ; this name deprecated
                                        (0385) _bTimer8_ReadTimer:                              ; this name deprecated
                                        (0386)  bTimer8_CaptureCounter:                         ; this name deprecated
                                        (0387) _bTimer8_CaptureCounter:                         ; this name deprecated
                                        (0388) 
                                        (0389)    RAM_PROLOGUE RAM_USE_CLASS_1
03FA: 5D 28    MOV   A,REG[0x28]        (0390)    mov   A, reg[Timer8_COUNTER_REG]              ; synchronous copy DR2 <- DR0
                                        (0391)                                                  ; This may cause an interrupt!
03FC: 5D 2A    MOV   A,REG[0x2A]        (0392)    mov   A, reg[Timer8_COMPARE_REG]              ; Return DR2 (actually DR0)
                                        (0393)    RAM_EPILOGUE RAM_USE_CLASS_1
03FE: 7F       RET                      (0394)    ret
                                        (0395) 
                                        (0396) .ENDSECTION
                                        (0397) 
                                        (0398) ; End of File Timer8.asm
FILE: lib\pwm8_vasenint.asm             (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_VASENINT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8_VASEN.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8_VASEN_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8_VASEN_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8_VASEN_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
03FF: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM8_VASENINT.asm
FILE: lib\pwm8_vasen.asm                (0001) ;;*****************************************************************************
0400: 43 E1 01 OR    REG[0xE1],0x1      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_VASEN.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8_VASEN.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8_VASEN_EnableInt
                                        (0030) export _PWM8_VASEN_EnableInt
                                        (0031) export  PWM8_VASEN_DisableInt
                                        (0032) export _PWM8_VASEN_DisableInt
                                        (0033) export  PWM8_VASEN_Start
                                        (0034) export _PWM8_VASEN_Start
                                        (0035) export  PWM8_VASEN_Stop
                                        (0036) export _PWM8_VASEN_Stop
                                        (0037) export  PWM8_VASEN_WritePeriod
                                        (0038) export _PWM8_VASEN_WritePeriod
                                        (0039) export  PWM8_VASEN_WritePulseWidth
                                        (0040) export _PWM8_VASEN_WritePulseWidth
                                        (0041) export  PWM8_VASEN_bReadPulseWidth
                                        (0042) export _PWM8_VASEN_bReadPulseWidth
                                        (0043) export  PWM8_VASEN_bReadCounter
                                        (0044) export _PWM8_VASEN_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8_VASEN_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8_VASEN_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8_VASEN_ReadCounter       ; deprecated
                                        (0051) export _bPWM8_VASEN_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA robottiprojekti_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8_VASEN_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8_VASEN_EnableInt:
                                        (0091) _PWM8_VASEN_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8_VASEN_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
0403: 7F       RET                      (0095)    ret
0404: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8_VASEN_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8_VASEN_DisableInt:
                                        (0119) _PWM8_VASEN_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8_VASEN_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0407: 7F       RET                      (0123)    ret
0408: 43 23 01 OR    REG[0x23],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8_VASEN_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8_VASEN_Start:
                                        (0148) _PWM8_VASEN_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8_VASEN_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
040B: 7F       RET                      (0152)    ret
040C: 41 23 FE AND   REG[0x23],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8_VASEN_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8_VASEN_Stop:
                                        (0176) _PWM8_VASEN_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8_VASEN_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
040F: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8_VASEN_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8_VASEN_WritePeriod:
                                        (0206) _PWM8_VASEN_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
0410: 60 21    MOV   REG[0x21],A        (0208)    mov   reg[PWM8_VASEN_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
0412: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8_VASEN_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8_VASEN_WritePulseWidth:
                                        (0233) _PWM8_VASEN_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
0413: 60 22    MOV   REG[0x22],A        (0235)    mov   reg[PWM8_VASEN_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
0415: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8_VASEN_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8_VASEN_bReadPulseWidth:
                                        (0260) _PWM8_VASEN_bReadPulseWidth:
                                        (0261)  bPWM8_VASEN_ReadPulseWidth:                     ; this name deprecated
                                        (0262) _bPWM8_VASEN_ReadPulseWidth:                     ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
0416: 5D 22    MOV   A,REG[0x22]        (0264)    mov   A, reg[PWM8_VASEN_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
0418: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8_VASEN_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8_VASEN_bReadCounter:
                                        (0293) _PWM8_VASEN_bReadCounter:
                                        (0294)  bPWM8_VASEN_ReadCounter:                        ; this name deprecated
                                        (0295) _bPWM8_VASEN_ReadCounter:                        ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
0419: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
041A: 5D 22    MOV   A,REG[0x22]        (0304)    mov   A, reg[PWM8_VASEN_COMPARE_REG]          ; Save the Compare register on the stack
041C: 08       PUSH  A                  (0305)    push  A                                       ;
041D: 41 23 FE AND   REG[0x23],0xFE     
0420: 71 10    OR    F,0x10             
                                        (0306)    PWM8_VASEN_Stop_M                             ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
0422: 5D 21    MOV   A,REG[0x21]        (0308)    mov   A, reg[PWM8_VASEN_INPUT_REG]            ; save the clock input setting
0424: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
0425: 62 21 00 MOV   REG[0x21],0x0      (0311)    mov   reg[PWM8_VASEN_INPUT_REG], INPUT_REG_NULL
0428: 70 EF    AND   F,0xEF             
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
042A: 5D 20    MOV   A,REG[0x20]        (0314)    mov   A, reg[PWM8_VASEN_COUNTER_REG]          ; DR2 <- DR0
042C: 5D 22    MOV   A,REG[0x22]        (0315)    mov   A, reg[PWM8_VASEN_COMPARE_REG]          ; Stash the Count on the stack
042E: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
042F: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
0431: 60 22    MOV   REG[0x22],A        (0318)    mov   reg[PWM8_VASEN_COMPARE_REG], A
0433: 71 10    OR    F,0x10             
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
0435: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
0437: 60 21    MOV   REG[0x21],A        (0321)    mov   reg[PWM8_VASEN_INPUT_REG], A            ;
0439: 70 EF    AND   F,0xEF             
043B: 43 23 01 OR    REG[0x23],0x1      
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8_VASEN_Start_M                            ;   then re-enable the PWM.
043E: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
043F: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
0441: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8_VASEN.asm
FILE: lib\pwm8_servoint.asm             (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_SERVOINT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2013/5/19 at 10:44:6
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8_SERVO.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8_SERVO_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8_SERVO_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8_SERVO_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0442: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM8_SERVOINT.asm
FILE: lib\pwm8_servo.asm                (0001) ;;*****************************************************************************
0443: 43 E1 10 OR    REG[0xE1],0x10     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_SERVO.asm
                                        (0004) ;;   Version: 2.5, Updated on 2013/5/19 at 10:44:6
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8_SERVO.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8_SERVO_EnableInt
                                        (0030) export _PWM8_SERVO_EnableInt
                                        (0031) export  PWM8_SERVO_DisableInt
                                        (0032) export _PWM8_SERVO_DisableInt
                                        (0033) export  PWM8_SERVO_Start
                                        (0034) export _PWM8_SERVO_Start
                                        (0035) export  PWM8_SERVO_Stop
                                        (0036) export _PWM8_SERVO_Stop
                                        (0037) export  PWM8_SERVO_WritePeriod
                                        (0038) export _PWM8_SERVO_WritePeriod
                                        (0039) export  PWM8_SERVO_WritePulseWidth
                                        (0040) export _PWM8_SERVO_WritePulseWidth
                                        (0041) export  PWM8_SERVO_wReadPulseWidth
                                        (0042) export _PWM8_SERVO_wReadPulseWidth
                                        (0043) export  PWM8_SERVO_wReadCounter
                                        (0044) export _PWM8_SERVO_wReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  wPWM8_SERVO_ReadPulseWidth    ; deprecated
                                        (0049) export _wPWM8_SERVO_ReadPulseWidth    ; deprecated
                                        (0050) export  wPWM8_SERVO_ReadCounter       ; deprecated
                                        (0051) export _wPWM8_SERVO_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA robottiprojekti_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8_SERVO_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS: 
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8_SERVO_EnableInt:
                                        (0091) _PWM8_SERVO_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8_SERVO_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
0446: 7F       RET                      (0095)    ret
0447: 41 E1 EF AND   REG[0xE1],0xEF     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8_SERVO_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8_SERVO_DisableInt:
                                        (0119) _PWM8_SERVO_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8_SERVO_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
044A: 7F       RET                      (0123)    ret
044B: 43 2F 01 OR    REG[0x2F],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8_SERVO_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8_SERVO_Start:
                                        (0148) _PWM8_SERVO_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8_SERVO_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
044E: 7F       RET                      (0152)    ret
044F: 41 2F FE AND   REG[0x2F],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8_SERVO_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register of the LSB block.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8_SERVO_Stop:
                                        (0176) _PWM8_SERVO_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8_SERVO_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
0452: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8_SERVO_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 16-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count registers (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8_SERVO_WritePeriod:
                                        (0206) _PWM8_SERVO_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
0453: 60 2D    MOV   REG[0x2D],A        (0208)    mov   reg[PWM8_SERVO_PERIOD_LSB_REG], A
0455: 5B       MOV   A,X                (0209)    mov   A, X
0456: 60 31    MOV   REG[0x31],A        (0210)    mov   reg[PWM8_SERVO_PERIOD_MSB_REG], A
                                        (0211)    RAM_EPILOGUE RAM_USE_CLASS_1
0458: 7F       RET                      (0212)    ret
                                        (0213) 
                                        (0214) 
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) .SECTION
                                        (0218) ;-----------------------------------------------------------------------------
                                        (0219) ;  FUNCTION NAME: PWM8_SERVO_WritePulseWidth
                                        (0220) ;
                                        (0221) ;  DESCRIPTION:
                                        (0222) ;     Writes the pulse width value into the Compare register (DR2).
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;
                                        (0225) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0226) ;  RETURNS:      Nothing
                                        (0227) ;  SIDE EFFECTS:
                                        (0228) ;    The A and X registers may be modified by this or future implementations
                                        (0229) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0230) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0231) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0232) ;    functions.
                                        (0233) ;
                                        (0234)  PWM8_SERVO_WritePulseWidth:
                                        (0235) _PWM8_SERVO_WritePulseWidth:
                                        (0236)    RAM_PROLOGUE RAM_USE_CLASS_1
0459: 60 2E    MOV   REG[0x2E],A        (0237)    mov   reg[PWM8_SERVO_COMPARE_LSB_REG], A
045B: 5B       MOV   A,X                (0238)    mov   A, X
045C: 60 32    MOV   REG[0x32],A        (0239)    mov   reg[PWM8_SERVO_COMPARE_MSB_REG], A
                                        (0240)    RAM_EPILOGUE RAM_USE_CLASS_1
045E: 7F       RET                      (0241)    ret
                                        (0242) 
                                        (0243) 
                                        (0244) .ENDSECTION
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME: PWM8_SERVO_wReadPulseWidth
                                        (0249) ;
                                        (0250) ;  DESCRIPTION:
                                        (0251) ;     Reads the Compare register.
                                        (0252) ;-----------------------------------------------------------------------------
                                        (0253) ;
                                        (0254) ;  ARGUMENTS:    None
                                        (0255) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0256) ;  SIDE EFFECTS:
                                        (0257) ;    The A and X registers may be modified by this or future implementations
                                        (0258) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0259) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0260) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0261) ;    functions.
                                        (0262) ;
                                        (0263)  PWM8_SERVO_wReadPulseWidth:
                                        (0264) _PWM8_SERVO_wReadPulseWidth:
                                        (0265)  wPWM8_SERVO_ReadPulseWidth:                     ; this name deprecated
                                        (0266) _wPWM8_SERVO_ReadPulseWidth:                     ; this name deprecated
                                        (0267)    RAM_PROLOGUE RAM_USE_CLASS_1
045F: 5D 32    MOV   A,REG[0x32]        (0268)    mov   A, reg[PWM8_SERVO_COMPARE_MSB_REG]
0461: 5C       MOV   X,A                (0269)    mov   X, A
0462: 5D 2E    MOV   A,REG[0x2E]        (0270)    mov   A, reg[PWM8_SERVO_COMPARE_LSB_REG]
                                        (0271)    RAM_EPILOGUE RAM_USE_CLASS_1
0464: 7F       RET                      (0272)    ret
                                        (0273) 
                                        (0274) 
                                        (0275) .ENDSECTION
                                        (0276) 
                                        (0277) .SECTION
                                        (0278) ;-----------------------------------------------------------------------------
                                        (0279) ;  FUNCTION NAME: PWM8_SERVO_wReadCounter
                                        (0280) ;
                                        (0281) ;  DESCRIPTION:
                                        (0282) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0283) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0284) ;     from the Count to the Compare register by holding the clock low in
                                        (0285) ;     the MSB PSoC block.
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS: None
                                        (0289) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0290) ;  SIDE EFFECTS:
                                        (0291) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0292) ;     2) The A and X registers may be modified by this or future implementations
                                        (0293) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0294) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0295) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0296) ;        functions.
                                        (0297) ;
                                        (0298)  PWM8_SERVO_wReadCounter:
                                        (0299) _PWM8_SERVO_wReadCounter:
                                        (0300)  wPWM8_SERVO_ReadCounter:                        ; this name deprecated
                                        (0301) _wPWM8_SERVO_ReadCounter:                        ; this name deprecated
                                        (0302) 
                                        (0303)    bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
                                        (0304)    bOrigClockSetting:      EQU   2                  ; Frame offset to temp Input   store
                                        (0305)    wCounter:               EQU   3                  ; Frame offset to temp Count   store
                                        (0306)    STACK_FRAME_SIZE:       EQU   5                  ; max stack frame size is 5 bytes
                                        (0307) 
                                        (0308)    RAM_PROLOGUE RAM_USE_CLASS_2
0465: 4F       MOV   X,SP               (0309)    mov   X, SP                                      ; X <-  stack frame pointer
0466: 5D 32    MOV   A,REG[0x32]        (0310)    mov   A, reg[PWM8_SERVO_COMPARE_MSB_REG]      ; Save the Compare register on the stack
0468: 08       PUSH  A                  (0311)    push  A                                          ;
0469: 5D 2E    MOV   A,REG[0x2E]        (0312)    mov   A, reg[PWM8_SERVO_COMPARE_LSB_REG]      ;
046B: 08       PUSH  A                  (0313)    push  A                                          ;  -stack frame now 2 bytes-
046C: 41 2F FE AND   REG[0x2F],0xFE     
046F: 71 10    OR    F,0x10             
                                        (0314)    PWM8_SERVO_Stop_M                             ; Disable the PWM function
                                        (0315)    M8C_SetBank1                                     ;
0471: 5D 2D    MOV   A,REG[0x2D]        (0316)    mov   A, reg[PWM8_SERVO_INPUT_LSB_REG]        ; save the LSB clock input setting
0473: 08       PUSH  A                  (0317)    push  A                                          ;   on the stack (now 3 bytes) and ...
                                        (0318)                                                     ;   hold the clock low:
0474: 62 2D 00 MOV   REG[0x2D],0x0      (0319)    mov   reg[PWM8_SERVO_INPUT_LSB_REG], INPUT_REG_NULL
0477: 70 EF    AND   F,0xEF             
                                        (0320)    M8C_SetBank0                                     ; Extract the Count via DR2 register
0479: 5D 30    MOV   A,REG[0x30]        (0321)    mov   A, reg[PWM8_SERVO_COUNTER_MSB_REG]      ; DR2 <- DR0 (in the MSB block)
047B: 5D 32    MOV   A,REG[0x32]        (0322)    mov   A, reg[PWM8_SERVO_COMPARE_MSB_REG]      ; Stash the Count MSB on the stack
047D: 08       PUSH  A                  (0323)    push  A                                          ;  -stack frame is now 4 bytes
047E: 5D 2C    MOV   A,REG[0x2C]        (0324)    mov   A, reg[PWM8_SERVO_COUNTER_LSB_REG]      ; DR2 <- DR0 (in the LSB block)
0480: 5D 2E    MOV   A,REG[0x2E]        (0325)    mov   A, reg[PWM8_SERVO_COMPARE_LSB_REG]      ; Stash the Count LSB on the stack
0482: 08       PUSH  A                  (0326)    push  A                                          ;   -stack frame is now 5 bytes-
0483: 52 00    MOV   A,[X+0]            (0327)    mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
0485: 60 32    MOV   REG[0x32],A        (0328)    mov   reg[PWM8_SERVO_COMPARE_MSB_REG], A      ;
0487: 52 01    MOV   A,[X+1]            (0329)    mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
0489: 60 2E    MOV   REG[0x2E],A        (0330)    mov   reg[PWM8_SERVO_COMPARE_LSB_REG], A      ;
048B: 71 10    OR    F,0x10             
                                        (0331)    M8C_SetBank1                                     ; ---Restore the PWM operation
048D: 52 02    MOV   A,[X+2]            (0332)    mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
048F: 60 2D    MOV   REG[0x2D],A        (0333)    mov   reg[PWM8_SERVO_INPUT_LSB_REG], A        ;    and restore it
0491: 70 EF    AND   F,0xEF             
0493: 43 2F 01 OR    REG[0x2F],0x1      
                                        (0334)    M8C_SetBank0                                     ;
                                        (0335)    PWM8_SERVO_Start_M                            ; Now re-enable the PWM function
0496: 18       POP   A                  (0336)    pop   A                                          ; Setup the return value
0497: 20       POP   X                  (0337)    pop   X                                          ;
0498: 38 FD    ADD   SP,0xFD            (0338)    ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
                                        (0339)    RAM_EPILOGUE RAM_USE_CLASS_2
049A: 7F       RET                      (0340)    ret
                                        (0341) 
                                        (0342) .ENDSECTION
                                        (0343) 
                                        (0344) ; End of File PWM8_SERVO.asm
FILE: lib\pwm8_oikeaint.asm             (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_OIKEAINT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8_OIKEA.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8_OIKEA_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8_OIKEA_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8_OIKEA_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
049B: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM8_OIKEAINT.asm
FILE: lib\pwm8_oikea.asm                (0001) ;;*****************************************************************************
049C: 43 E1 02 OR    REG[0xE1],0x2      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_OIKEA.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8_OIKEA.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8_OIKEA_EnableInt
                                        (0030) export _PWM8_OIKEA_EnableInt
                                        (0031) export  PWM8_OIKEA_DisableInt
                                        (0032) export _PWM8_OIKEA_DisableInt
                                        (0033) export  PWM8_OIKEA_Start
                                        (0034) export _PWM8_OIKEA_Start
                                        (0035) export  PWM8_OIKEA_Stop
                                        (0036) export _PWM8_OIKEA_Stop
                                        (0037) export  PWM8_OIKEA_WritePeriod
                                        (0038) export _PWM8_OIKEA_WritePeriod
                                        (0039) export  PWM8_OIKEA_WritePulseWidth
                                        (0040) export _PWM8_OIKEA_WritePulseWidth
                                        (0041) export  PWM8_OIKEA_bReadPulseWidth
                                        (0042) export _PWM8_OIKEA_bReadPulseWidth
                                        (0043) export  PWM8_OIKEA_bReadCounter
                                        (0044) export _PWM8_OIKEA_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8_OIKEA_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8_OIKEA_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8_OIKEA_ReadCounter       ; deprecated
                                        (0051) export _bPWM8_OIKEA_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA robottiprojekti_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8_OIKEA_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8_OIKEA_EnableInt:
                                        (0091) _PWM8_OIKEA_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8_OIKEA_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
049F: 7F       RET                      (0095)    ret
04A0: 41 E1 FD AND   REG[0xE1],0xFD     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8_OIKEA_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8_OIKEA_DisableInt:
                                        (0119) _PWM8_OIKEA_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8_OIKEA_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
04A3: 7F       RET                      (0123)    ret
04A4: 43 27 01 OR    REG[0x27],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8_OIKEA_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8_OIKEA_Start:
                                        (0148) _PWM8_OIKEA_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8_OIKEA_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
04A7: 7F       RET                      (0152)    ret
04A8: 41 27 FE AND   REG[0x27],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8_OIKEA_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8_OIKEA_Stop:
                                        (0176) _PWM8_OIKEA_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8_OIKEA_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
04AB: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8_OIKEA_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8_OIKEA_WritePeriod:
                                        (0206) _PWM8_OIKEA_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
04AC: 60 25    MOV   REG[0x25],A        (0208)    mov   reg[PWM8_OIKEA_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
04AE: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8_OIKEA_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8_OIKEA_WritePulseWidth:
                                        (0233) _PWM8_OIKEA_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
04AF: 60 26    MOV   REG[0x26],A        (0235)    mov   reg[PWM8_OIKEA_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
04B1: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8_OIKEA_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8_OIKEA_bReadPulseWidth:
                                        (0260) _PWM8_OIKEA_bReadPulseWidth:
                                        (0261)  bPWM8_OIKEA_ReadPulseWidth:                     ; this name deprecated
                                        (0262) _bPWM8_OIKEA_ReadPulseWidth:                     ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
04B2: 5D 26    MOV   A,REG[0x26]        (0264)    mov   A, reg[PWM8_OIKEA_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
04B4: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8_OIKEA_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8_OIKEA_bReadCounter:
                                        (0293) _PWM8_OIKEA_bReadCounter:
                                        (0294)  bPWM8_OIKEA_ReadCounter:                        ; this name deprecated
                                        (0295) _bPWM8_OIKEA_ReadCounter:                        ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
04B5: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
04B6: 5D 26    MOV   A,REG[0x26]        (0304)    mov   A, reg[PWM8_OIKEA_COMPARE_REG]          ; Save the Compare register on the stack
04B8: 08       PUSH  A                  (0305)    push  A                                       ;
04B9: 41 27 FE AND   REG[0x27],0xFE     
04BC: 71 10    OR    F,0x10             
                                        (0306)    PWM8_OIKEA_Stop_M                             ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
04BE: 5D 25    MOV   A,REG[0x25]        (0308)    mov   A, reg[PWM8_OIKEA_INPUT_REG]            ; save the clock input setting
04C0: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
04C1: 62 25 00 MOV   REG[0x25],0x0      (0311)    mov   reg[PWM8_OIKEA_INPUT_REG], INPUT_REG_NULL
04C4: 70 EF    AND   F,0xEF             
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
04C6: 5D 24    MOV   A,REG[0x24]        (0314)    mov   A, reg[PWM8_OIKEA_COUNTER_REG]          ; DR2 <- DR0
04C8: 5D 26    MOV   A,REG[0x26]        (0315)    mov   A, reg[PWM8_OIKEA_COMPARE_REG]          ; Stash the Count on the stack
04CA: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
04CB: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
04CD: 60 26    MOV   REG[0x26],A        (0318)    mov   reg[PWM8_OIKEA_COMPARE_REG], A
04CF: 71 10    OR    F,0x10             
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
04D1: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
04D3: 60 25    MOV   REG[0x25],A        (0321)    mov   reg[PWM8_OIKEA_INPUT_REG], A            ;
04D5: 70 EF    AND   F,0xEF             
04D7: 43 27 01 OR    REG[0x27],0x1      
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8_OIKEA_Start_M                            ;   then re-enable the PWM.
04DA: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
04DB: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
04DD: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8_OIKEA.asm
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2013/5/19 at 10:43:48
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
04DE: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
04DF: 10       PUSH  X                  (0209)     push  X
04E0: 28       ROMX                     (0210)     romx                               ; Get character from ROM
04E1: B0 04    JNZ   0x04E6             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
04E3: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
04E4: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
04E5: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
04E6: 90 3C    CALL  LCD_Write_Data|_LCD_WriteData|_LCD_Write_Data|LCD_WriteData(0218)     call  LCD_WriteData                ; Write data to LCD
04E8: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
04E9: 18       POP   A                  (0220)     pop   A
04EA: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
04EB: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
04ED: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
04EE: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
0500: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
0501: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
0502: 67       ASR   A                  (0262)     asr   A
0503: 67       ASR   A                  (0263)     asr   A
0504: 67       ASR   A                  (0264)     asr   A
0505: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
0507: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
0509: 90 19    CALL  LCD_Write_Data|_LCD_WriteData|_LCD_Write_Data|LCD_WriteData(0267)     call  LCD_WriteData                ; Write data to screen
050B: 18       POP   A                  (0268)     pop   A                            ; Restore value
050C: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
050E: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
0510: 90 12    CALL  LCD_Write_Data|_LCD_WriteData|_LCD_Write_Data|LCD_WriteData(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
0512: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
0513: 4B       SWAP  A,X                (0305)     swap  A,X
0514: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
0516: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
0517: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
0519: 7F       RET                      (0310)     ret
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
051A: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
051C: A0 06    JZ    0x0523             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
051E: 90 04    CALL  LCD_Write_Data|_LCD_WriteData|_LCD_Write_Data|LCD_WriteData(0349)     call  LCD_WriteData                ; Write data to screen
0520: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
0521: 8F F8    JMP   _LCD_PrString      (0351)     jmp   .Loop_PrString               ; Go get next character
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
0523: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
0524: 90 5F    CALL  0x0585             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
0526: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
0527: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
0528: 67       ASR   A                  (0390)     asr   A
0529: 67       ASR   A                  (0391)     asr   A
052A: 67       ASR   A                  (0392)     asr   A
052B: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
052D: 90 38    CALL  0x0567             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
052F: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
0530: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
0532: 40       NOP                      (0397)     nop
0533: 40       NOP                      (0398)     nop
0534: 40       NOP                      (0399)     nop
0535: 90 30    CALL  0x0567             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
0537: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
0538: 90 4B    CALL  0x0585             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
053A: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
053B: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
053C: 67       ASR   A                  (0436)     asr   A
053D: 67       ASR   A                  (0437)     asr   A
053E: 67       ASR   A                  (0438)     asr   A
053F: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
0541: 90 09    CALL  0x054C             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
0543: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
0544: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
0546: 40       NOP                      (0443)     nop
0547: 40       NOP                      (0444)     nop
0548: 40       NOP                      (0445)     nop
0549: 90 01    CALL  0x054C             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
054B: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
054C: 08       PUSH  A                  (0477)     push  A
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
054D: 26 3A 80 AND   [0x3A],0x80        (0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0550: 51 3A    MOV   A,[0x3A]           (0480)     mov   A,[Port_2_Data_SHADE]
0552: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
0554: 18       POP   A                  (0483)     pop   A
0555: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
0557: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
0559: 2A 3A    OR    A,[0x3A]           (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
055B: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
055D: 53 3A    MOV   [0x3A],A           (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
055F: 40       NOP                      (0489)     nop
0560: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
0562: 53 3A    MOV   [0x3A],A           (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0564: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
0566: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
0567: 08       PUSH  A                  (0523)     push  A
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
0568: 26 3A 80 AND   [0x3A],0x80        (0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
056B: 2E 3A 20 OR    [0x3A],0x20        (0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
056E: 51 3A    MOV   A,[0x3A]           (0527)     mov   A,[Port_2_Data_SHADE]
0570: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
0572: 18       POP   A                  (0530)     pop   A
0573: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
0575: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
0577: 2A 3A    OR    A,[0x3A]           (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
0579: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
057B: 53 3A    MOV   [0x3A],A           (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
057D: 40       NOP                      (0536)     NOP
057E: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
0580: 53 3A    MOV   [0x3A],A           (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
0582: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
0584: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
0585: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
0586: 26 3A 80 AND   [0x3A],0x80        (0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
0589: 51 3A    MOV   A,[0x3A]           (0574)     mov   A,[Port_2_Data_SHADE]
058B: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
058D: 26 3B F0 AND   [0x3B],0xF0        (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
0590: 51 3B    MOV   A,[0x3B]           (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
0592: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
0594: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
0596: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
0598: 2E 3A 40 OR    [0x3A],0x40        (0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
059B: 51 3A    MOV   A,[0x3A]           (0584)     mov   A,[Port_2_Data_SHADE]
059D: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
059F: 40       NOP                      (0586)     NOP
                                        (0587) 
05A0: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
05A1: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
05A3: 2E 3A 50 OR    [0x3A],0x50        (0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
05A6: 51 3A    MOV   A,[0x3A]           (0593)     mov   A,[Port_2_Data_SHADE]
05A8: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
05AA: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
05AB: 40       NOP                      (0597)     nop
05AC: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
05AE: 08       PUSH  A                  (0610)     push  A
05AF: 26 3A C0 AND   [0x3A],0xC0        (0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
05B2: 51 3A    MOV   A,[0x3A]           (0612)     mov   A,[Port_2_Data_SHADE]
05B4: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
05B6: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
05B7: 40       NOP                      (0616)     nop                                    ; fastest PSoC
05B8: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
05B9: 2E 3A 50 OR    [0x3A],0x50        (0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
05BC: 51 3A    MOV   A,[0x3A]           (0620)     mov   A,[Port_2_Data_SHADE]
05BE: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
05C0: 40       NOP                      (0623)     nop
05C1: 40       NOP                      (0624)     nop
                                        (0625) 
05C2: 26 3A C0 AND   [0x3A],0xC0        (0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
05C5: 51 3A    MOV   A,[0x3A]           (0627)     mov   A,[Port_2_Data_SHADE]
05C7: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
05C9: 18       POP   A                  (0630)     pop   A
05CA: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
05CC: A0 04    JZ    0x05D1             (0633)     jz    .UNLOCK
05CE: 79       DEC   X                  (0634)     dec   X
05CF: BF D3    JNZ   0x05A3             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
05D1: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
05D2: 2E 3B 7F OR    [0x3B],0x7F        (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
05D5: 51 3B    MOV   A,[0x3B]           (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
05D7: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
05D9: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
05DB: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
05DD: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
05DE: 7F       RET                      (0646)     ret
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
05DF: 26 3B 80 AND   [0x3B],0x80        (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
05E2: 2E 3B 7F OR    [0x3B],0x7F        (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
05E5: 26 3C 80 AND   [0x3C],0x80        (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
05E8: 51 3B    MOV   A,[0x3B]           (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
05EA: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
05EC: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
05EE: 51 3C    MOV   A,[0x3C]           (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
05F0: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
05F2: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
05F4: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
05F6: 90 63    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
05F8: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
05FA: 90 5F    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
05FC: 50 03    MOV   A,0x3              (0701)     mov   A,03h
05FE: 9F 4C    CALL  0x054C             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
0600: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
0602: 90 57    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
0604: 50 03    MOV   A,0x3              (0707)     mov   A,03h
0606: 9F 44    CALL  0x054C             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
0608: 90 5F    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
060A: 90 5D    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
060C: 90 5B    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
060E: 50 03    MOV   A,0x3              (0714)     mov   A,03h
0610: 9F 3A    CALL  0x054C             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
0612: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0614: 90 45    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
0616: 50 02    MOV   A,0x2              (0720)     mov   A,02h
0618: 9F 32    CALL  0x054C             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
061A: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
061C: 90 3D    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
061E: 50 08    MOV   A,0x8              (0726)     mov   A,08h
0620: 9F 16    CALL  _LCD_Control       (0727)     call  LCD_Control
0622: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0624: 90 35    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
0626: 50 01    MOV   A,0x1              (0731)     mov   A,01h
0628: 9F 0E    CALL  _LCD_Control       (0732)     call  LCD_Control
062A: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
062C: 90 2D    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
062E: 50 06    MOV   A,0x6              (0736)     mov   A,06h
0630: 9F 06    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
0632: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
0634: 9F 02    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
0636: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
0638: 9E FE    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
063A: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
063C: 9E FA    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
063E: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
0640: 9E F6    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
0642: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
0644: 9E F2    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
0646: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0648: 90 11    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
064A: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
064F: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
0651: 10       PUSH  X                  (0791)     push  X                            ; Store COL
0652: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
0654: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
0655: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
0657: 20       POP   X                  (0795)     pop   X
                                        (0796) 
0658: 9E DE    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
065A: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
065B: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
065D: 78       DEC   A                  (0828)     dec   A
065E: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
0660: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
0669: 08       PUSH  A                  (0871)     push  A
066A: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
066C: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
066E: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
0670: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
0672: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
0674: D0 06    JNC   0x067B             (0877)     jnc   .Delay50u_End
0676: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
0678: 78       DEC   A                  (0880)     dec   A                              ; [4]
0679: BF FE    JNZ   0x0678             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
067B: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
067C: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
067D: 10       PUSH  X                  (0943)     push  X
067E: 59 00    MOV   X,[X+0]            (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
0680: 9F CD    CALL  _LCD_Position      (0945)     call  LCD_Position                 ; Set cursor position
0682: 20       POP   X                  (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
0683: 3D FE 00 CMP   [X-2],0x0          (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
0686: B0 05    JNZ   0x068C             (0950)     jnz   .LCD_CHECK1X
0688: 50 00    MOV   A,0x0              (0951)     mov   A,00h                         ; Load empty character
068A: 80 11    JMP   0x069C             (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
068C: 3D FE 06 CMP   [X-2],0x6          (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
068F: D0 07    JNC   0x0697             (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
0691: 52 FE    MOV   A,[X-2]            (0957)     mov   A,[X+BG_LENGTHX]
0693: 15 FE    SUB   [X-2],A            (0958)     sub   [X+BG_LENGTHX],A
0695: 80 06    JMP   0x069C             (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
0697: 50 06    MOV   A,0x6              (0962)     mov   A, 06h
0699: 17 FE 05 SUB   [X-2],0x5          (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
069C: 9E 86    CALL  LCD_Write_Data|_LCD_WriteData|_LCD_Write_Data|LCD_WriteData(0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
069E: 7B FF    DEC   [X-1]              (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
06A0: BF E2    JNZ   0x0683             (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
06A2: 7F       RET                      (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
06A3: 4F       MOV   X,SP               (1015)     mov   X, SP
06A4: 10       PUSH  X                  (1016)     push  X
06A5: 52 FD    MOV   A,[X-3]            (1017)     mov   A,[X+BG_ROW]                 ; Row in A
06A7: 59 FC    MOV   X,[X-4]            (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
06A9: 9F A4    CALL  _LCD_Position      (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
06AB: 20       POP   X                  (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
06AC: 3D FA 00 CMP   [X-6],0x0          (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
06AF: B0 05    JNZ   0x06B5             (1026)     jnz   .LCD_CHECK1
06B1: 50 00    MOV   A,0x0              (1027)     mov   A,00h                        ; Load empty character
06B3: 80 11    JMP   0x06C5             (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
06B5: 3D FA 06 CMP   [X-6],0x6          (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
06B8: D0 07    JNC   0x06C0             (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
06BA: 52 FA    MOV   A,[X-6]            (1033)     mov   A,[X+BG_LENGTH]
06BC: 15 FA    SUB   [X-6],A            (1034)     sub   [X+BG_LENGTH],A
06BE: 80 06    JMP   0x06C5             (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
06C0: 50 06    MOV   A,0x6              (1038)     mov   A, 06h
06C2: 17 FA 05 SUB   [X-6],0x5          (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
06C5: 9E 5D    CALL  LCD_Write_Data|_LCD_WriteData|_LCD_Write_Data|LCD_WriteData(1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
06C7: 7B FB    DEC   [X-5]              (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
06C9: BF E2    JNZ   0x06AC             (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
06CB: 7F       RET                      (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
06CC: 21 03    AND   A,0x3              (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
06CE: 08       PUSH  A                  (1098)     push  A
06CF: FF 7A    INDEX LCD_ROW_OFFSET     (1099)     index LCD_ROW_OFFSET  ; Get row offset
06D1: 03 00    ADD   A,[X+0]            (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
06D3: 9E 63    CALL  _LCD_Control       (1101)     call  LCD_Control                  ; Position Cursor
06D5: 3D FE 00 CMP   [X-2],0x0          (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
06D8: B0 05    JNZ   0x06DE             (1103)     jnz   .VBG_NZ_SEGX
06DA: 50 20    MOV   A,0x20             (1104)     mov   A,' '                        ; Load space character
06DC: 80 13    JMP   0x06F0             (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
06DE: 3D FE 09 CMP   [X-2],0x9          (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
06E1: D0 09    JNC   0x06EB             (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
06E3: 52 FE    MOV   A,[X-2]            (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
06E5: 78       DEC   A                  (1111)     dec   A
06E6: 56 FE 00 MOV   [X-2],0x0          (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
06E9: 80 06    JMP   0x06F0             (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
06EB: 17 FE 08 SUB   [X-2],0x8          (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
06EE: 50 07    MOV   A,0x7              (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
06F0: 9E 32    CALL  LCD_Write_Data|_LCD_WriteData|_LCD_Write_Data|LCD_WriteData(1120)     call  LCD_WriteData                ; Write value
06F2: 18       POP   A                  (1121)     pop   A
06F3: 78       DEC   A                  (1122)     dec   A
06F4: 7B FF    DEC   [X-1]              (1123)     dec   [X+VBG_CHAR_HEIGHTX]
06F6: BF D7    JNZ   0x06CE             (1124)     jnz   .VBG_LOOPX
06F8: 7F       RET                      (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
06F9: 4F       MOV   X,SP               (1168)     mov   X, SP
06FA: 52 FD    MOV   A,[X-3]            (1169)     mov   A, [X+VBG_ROW]
06FC: 21 03    AND   A,0x3              (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
06FE: 08       PUSH  A                  (1172)     push  A
06FF: FF 4A    INDEX LCD_ROW_OFFSET     (1173)     index LCD_ROW_OFFSET  ; Get row offset
0701: 03 FC    ADD   A,[X-4]            (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
0703: 9E 33    CALL  _LCD_Control       (1175)     call  LCD_Control                  ; Position Cursor
0705: 3D FA 00 CMP   [X-6],0x0          (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
0708: B0 05    JNZ   0x070E             (1177)     jnz   .VBG_NZ_SEG
070A: 50 20    MOV   A,0x20             (1178)     mov   A,' '                        ; Load space character
070C: 80 13    JMP   0x0720             (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
070E: 3D FA 09 CMP   [X-6],0x9          (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
0711: D0 09    JNC   0x071B             (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
0713: 52 FA    MOV   A,[X-6]            (1184)     mov   A,[X+VBG_SEG_HEIGHT]
0715: 78       DEC   A                  (1185)     dec   A
0716: 56 FA 00 MOV   [X-6],0x0          (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
0719: 80 06    JMP   0x0720             (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
071B: 17 FA 08 SUB   [X-6],0x8          (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
071E: 50 07    MOV   A,0x7              (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
0720: 9E 02    CALL  LCD_Write_Data|_LCD_WriteData|_LCD_Write_Data|LCD_WriteData(1194)     call  LCD_WriteData                ; Write value
0722: 18       POP   A                  (1195)     pop   A
0723: 78       DEC   A                  (1196)     dec   A
0724: 7B FB    DEC   [X-5]              (1197)     dec   [X+VBG_CHAR_HEIGHT]
0726: BF D7    JNZ   0x06FE             (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
0728: 7F       RET                      (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
0729: 4F       MOV   X,SP               (1238)     mov   X,SP                         ; Get location of stack
072A: 08       PUSH  A                  (1239)     push  A                            ; Create 2 locations
072B: 08       PUSH  A                  (1240)     push  A
                                        (1241) 
072C: 50 40    MOV   A,0x40             (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
072E: 9E 08    CALL  _LCD_Control       (1243)     call  LCD_Control                  ; Position the CG pointer
0730: 56 00 01 MOV   [X+0],0x1          (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
0733: 56 01 08 MOV   [X+1],0x8          (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
0736: 52 00    MOV   A,[X+0]            (1249)     mov   A,[X+VBGDATA_CTR]
0738: 3B 01    CMP   A,[X+1]            (1250)     cmp   A,[X+VBG_BYTES]
073A: D0 05    JNC   0x0740             (1251)     jnc   .VBG_SOLID
073C: 50 00    MOV   A,0x0              (1252)     mov   A,00h                        ; Empty line
073E: 80 03    JMP   0x0742             (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
0740: 50 FF    MOV   A,0xFF             (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
0742: 9D E0    CALL  LCD_Write_Data|_LCD_WriteData|_LCD_Write_Data|LCD_WriteData(1257)     call  LCD_WriteData                ; character data
0744: 7B 01    DEC   [X+1]              (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
0746: BF EF    JNZ   0x0736             (1259)     jnz   .VBG_Loop2                    ; End Loop 2
0748: 77 00    INC   [X+0]              (1260)     inc   [X+VBGDATA_CTR]
074A: 3D 00 09 CMP   [X+0],0x9          (1261)     cmp   [X+VBGDATA_CTR],09h
074D: BF E5    JNZ   0x0733             (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
074F: 18       POP   A                  (1264)     pop  A
0750: 18       POP   A                  (1265)     pop  A
0751: 50 0C    MOV   A,0xC              (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
0753: 9D E3    CALL  _LCD_Control       (1267)     call LCD_Control                   ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
0755: 7F       RET                      (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
0764: 4F       MOV   X,SP               (1319)     mov   X,SP                         ; Get location of stack
0765: 38 03    ADD   SP,0x3             (1320)     add   SP,3
0767: 54 02    MOV   [X+2],A            (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
0769: 50 40    MOV   A,0x40             (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
076B: 9D CB    CALL  _LCD_Control       (1324)     call  LCD_Control                  ; Position the CG pointer
076D: 56 00 00 MOV   [X+0],0x0          (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
0770: 56 01 08 MOV   [X+1],0x8          (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
0773: 52 00    MOV   A,[X+0]            (1330)     mov   A,[X+BGDATA_PTR]
0775: 3D 02 00 CMP   [X+2],0x0          (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
0778: B0 05    JNZ   0x077E             (1332)     jnz   .BG_OTHER
077A: FF DA    INDEX LCD_BG_TYPE1       (1333)     index LCD_BG_TYPE1
077C: 80 03    JMP   0x0780             (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
077E: FF DD    INDEX LCD_BG_TYPE2       (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
0780: 9D A2    CALL  LCD_Write_Data|_LCD_WriteData|_LCD_Write_Data|LCD_WriteData(1338)     call  LCD_WriteData
0782: 7B 01    DEC   [X+1]              (1339)     dec   [X+BGCHARS]                  ; Character builder counter
0784: BF EE    JNZ   0x0773             (1340)     jnz   .BG_Loop2
0786: 77 00    INC   [X+0]              (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
0788: 3D 00 07 CMP   [X+0],0x7          (1342)     cmp   [X+BGDATA_PTR],07h
078B: BF E4    JNZ   0x0770             (1343)     jnz   .BG_Loop1
                                        (1344) 
078D: 38 FD    ADD   SP,0xFD            (1345)     add   SP,-3
078F: 50 0C    MOV   A,0xC              (1346)     mov   A,LCD_DISP_ON
0791: 9D A5    CALL  _LCD_Control       (1347)     call  LCD_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
0793: 7F       RET                      (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: lib\counter16_1int.asm            (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
0794: 08       PUSH  A                  (0003) ;;  FILENAME: Counter16_1INT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2013/5/19 at 10:42:30
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
0795: 51 38    MOV   A,[__r0]           (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
0797: 08       PUSH  A                  (0010) ;;*****************************************************************************
0798: 51 37    MOV   A,[__r1]           (0011) ;;*****************************************************************************
079A: 08       PUSH  A                  (0012) 
079B: 51 36    MOV   A,[__r2]           (0013) include "m8c.inc"
079D: 08       PUSH  A                  (0014) include "memory.inc"
079E: 51 35    MOV   A,[__r3]           (0015) include "Counter16_1.inc"
07A0: 08       PUSH  A                  (0016) 
07A1: 51 34    MOV   A,[__r4]           (0017) 
07A3: 08       PUSH  A                  (0018) ;-----------------------------------------------
07A4: 51 33    MOV   A,[__r5]           (0019) ;  Global Symbols
07A6: 08       PUSH  A                  (0020) ;-----------------------------------------------
07A7: 51 32    MOV   A,[__r6]           (0021) export  _Counter16_1_ISR
07A9: 08       PUSH  A                  (0022) 
07AA: 51 31    MOV   A,[__r7]           (0023) 
07AC: 08       PUSH  A                  (0024) AREA InterruptRAM (RAM,REL,CON)
07AD: 51 30    MOV   A,[__r8]           (0025) 
07AF: 08       PUSH  A                  (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
07B0: 51 2F    MOV   A,[__r9]           (0027) ;---------------------------------------------------
07B2: 08       PUSH  A                  (0028) ; Insert your custom declarations below this banner
07B3: 51 2E    MOV   A,[__r10]          (0029) ;---------------------------------------------------
07B5: 08       PUSH  A                  (0030) 
07B6: 51 2D    MOV   A,[__r11]          (0031) ;------------------------
07B8: 08       PUSH  A                  (0032) ; Includes
07B9: 51 2C    MOV   A,[__rX]           (0033) ;------------------------
07BB: 08       PUSH  A                  (0034) 
07BC: 51 2B    MOV   A,[__rY]           (0035) 	
07BE: 08       PUSH  A                  (0036) ;------------------------
07BF: 51 2A    MOV   A,[__rZ]           (0037) ;  Constant Definitions
07C1: 08       PUSH  A                  (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _Counter16_1_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _Counter16_1_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    PRESERVE_CPU_CONTEXT
07C2: 7C 0D 55 LCALL _CounterISR        (0081)    lcall _CounterISR
07C5: 18       POP   A                  
07C6: 53 2A    MOV   [__rZ],A           
07C8: 18       POP   A                  
07C9: 53 2B    MOV   [__rY],A           
07CB: 18       POP   A                  
07CC: 53 2C    MOV   [__rX],A           
07CE: 18       POP   A                  
07CF: 53 2D    MOV   [__r11],A          
07D1: 18       POP   A                  
07D2: 53 2E    MOV   [__r10],A          
07D4: 18       POP   A                  
07D5: 53 2F    MOV   [__r9],A           
07D7: 18       POP   A                  
07D8: 53 30    MOV   [__r8],A           
07DA: 18       POP   A                  
07DB: 53 31    MOV   [__r7],A           
07DD: 18       POP   A                  
07DE: 53 32    MOV   [__r6],A           
07E0: 18       POP   A                  
07E1: 53 33    MOV   [__r5],A           
07E3: 18       POP   A                  
07E4: 53 34    MOV   [__r4],A           
07E6: 18       POP   A                  
07E7: 53 35    MOV   [__r3],A           
07E9: 18       POP   A                  
07EA: 53 36    MOV   [__r2],A           
07EC: 18       POP   A                  
07ED: 53 37    MOV   [__r1],A           
07EF: 18       POP   A                  
07F0: 53 38    MOV   [__r0],A           
07F2: 18       POP   A                  
                                        (0082)    RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
07F3: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file Counter16_1INT.asm
FILE: lib\counter16_1.asm               (0001) ;;*****************************************************************************
07F4: 43 E1 40 OR    REG[0xE1],0x40     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Counter16_1.asm
                                        (0004) ;;   Version: 2.5, Updated on 2013/5/19 at 10:42:30
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Counter16_1.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Counter16_1_EnableInt
                                        (0030) export _Counter16_1_EnableInt
                                        (0031) export  Counter16_1_DisableInt
                                        (0032) export _Counter16_1_DisableInt
                                        (0033) export  Counter16_1_Start
                                        (0034) export _Counter16_1_Start
                                        (0035) export  Counter16_1_Stop
                                        (0036) export _Counter16_1_Stop
                                        (0037) export  Counter16_1_WritePeriod
                                        (0038) export _Counter16_1_WritePeriod
                                        (0039) export  Counter16_1_WriteCompareValue
                                        (0040) export _Counter16_1_WriteCompareValue
                                        (0041) export  Counter16_1_wReadCompareValue
                                        (0042) export _Counter16_1_wReadCompareValue
                                        (0043) export  Counter16_1_wReadCounter
                                        (0044) export _Counter16_1_wReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  wCounter16_1_ReadCompareValue  ; deprecated
                                        (0049) export _wCounter16_1_ReadCompareValue  ; deprecated
                                        (0050) export  wCounter16_1_ReadCounter       ; deprecated
                                        (0051) export _wCounter16_1_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) ;-----------------------------------------------
                                        (0054) ;  Constant Definitions
                                        (0055) ;-----------------------------------------------
                                        (0056) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0057) 
                                        (0058) 
                                        (0059) AREA UserModules (ROM, REL)
                                        (0060) 
                                        (0061) .SECTION
                                        (0062) ;-----------------------------------------------------------------------------
                                        (0063) ;  FUNCTION NAME: Counter16_1_EnableInt
                                        (0064) ;
                                        (0065) ;  DESCRIPTION:
                                        (0066) ;     Enables this counter's interrupt by setting the interrupt enable mask bit
                                        (0067) ;     associated with this User Module. This function has no effect until and
                                        (0068) ;     unless the global interrupts are enabled (for example by using the
                                        (0069) ;     macro M8C_EnableGInt).
                                        (0070) ;-----------------------------------------------------------------------------
                                        (0071) ;
                                        (0072) ;  ARGUMENTS:    None.
                                        (0073) ;  RETURNS:      Nothing.
                                        (0074) ;  SIDE EFFECTS: 
                                        (0075) ;    The A and X registers may be modified by this or future implementations
                                        (0076) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0077) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0078) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0079) ;    functions.
                                        (0080) ;
                                        (0081)  Counter16_1_EnableInt:
                                        (0082) _Counter16_1_EnableInt:
                                        (0083)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0084)    Counter16_1_EnableInt_M
                                        (0085)    RAM_EPILOGUE RAM_USE_CLASS_1
07F7: 7F       RET                      (0086)    ret
07F8: 41 E1 BF AND   REG[0xE1],0xBF     
                                        (0087) 
                                        (0088) .ENDSECTION
                                        (0089) 
                                        (0090) .SECTION
                                        (0091) ;-----------------------------------------------------------------------------
                                        (0092) ;  FUNCTION NAME: Counter16_1_DisableInt
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;     Disables this counter's interrupt by clearing the interrupt enable
                                        (0096) ;     mask bit associated with this User Module.
                                        (0097) ;-----------------------------------------------------------------------------
                                        (0098) ;
                                        (0099) ;  ARGUMENTS:    None
                                        (0100) ;  RETURNS:      Nothing
                                        (0101) ;  SIDE EFFECTS: 
                                        (0102) ;    The A and X registers may be modified by this or future implementations
                                        (0103) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0104) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0105) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0106) ;    functions.
                                        (0107) ;
                                        (0108)  Counter16_1_DisableInt:
                                        (0109) _Counter16_1_DisableInt:
                                        (0110)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0111)    Counter16_1_DisableInt_M
                                        (0112)    RAM_EPILOGUE RAM_USE_CLASS_1
07FB: 7F       RET                      (0113)    ret
07FC: 43 37 01 OR    REG[0x37],0x1      
                                        (0114) 
                                        (0115) 
                                        (0116) .ENDSECTION
                                        (0117) 
                                        (0118) .SECTION
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120) ;  FUNCTION NAME: Counter16_1_Start
                                        (0121) ;
                                        (0122) ;  DESCRIPTION:
                                        (0123) ;     Sets the start bit in the Control register of this user module.  The
                                        (0124) ;     counter will begin counting on the next input clock as soon as the
                                        (0125) ;     enable input is asserted high.
                                        (0126) ;-----------------------------------------------------------------------------
                                        (0127) ;
                                        (0128) ;  ARGUMENTS:    None
                                        (0129) ;  RETURNS:      Nothing
                                        (0130) ;  SIDE EFFECTS: 
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137)  Counter16_1_Start:
                                        (0138) _Counter16_1_Start:
                                        (0139)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0140)    Counter16_1_Start_M
                                        (0141)    RAM_EPILOGUE RAM_USE_CLASS_1
07FF: 7F       RET                      (0142)    ret
0800: 41 37 FE AND   REG[0x37],0xFE     
                                        (0143) 
                                        (0144) 
                                        (0145) .ENDSECTION
                                        (0146) 
                                        (0147) .SECTION
                                        (0148) ;-----------------------------------------------------------------------------
                                        (0149) ;  FUNCTION NAME: Counter16_1_Stop
                                        (0150) ;
                                        (0151) ;  DESCRIPTION:
                                        (0152) ;     Disables counter operation by clearing the start bit in the Control
                                        (0153) ;     register of the LSB block.
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;
                                        (0156) ;  ARGUMENTS:    None
                                        (0157) ;  RETURNS:      Nothing
                                        (0158) ;  SIDE EFFECTS: 
                                        (0159) ;    The A and X registers may be modified by this or future implementations
                                        (0160) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0161) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0162) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0163) ;    functions.
                                        (0164) ;
                                        (0165)  Counter16_1_Stop:
                                        (0166) _Counter16_1_Stop:
                                        (0167)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0168)    Counter16_1_Stop_M
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_1
0803: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) 
                                        (0173) .ENDSECTION
                                        (0174) 
                                        (0175) .SECTION
                                        (0176) ;-----------------------------------------------------------------------------
                                        (0177) ;  FUNCTION NAME: Counter16_1_WritePeriod
                                        (0178) ;
                                        (0179) ;  DESCRIPTION:
                                        (0180) ;     Write the 16-bit period value into the Period register (DR1).
                                        (0181) ;-----------------------------------------------------------------------------
                                        (0182) ;
                                        (0183) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0184) ;  RETURNS:   Nothing
                                        (0185) ;  SIDE EFFECTS:
                                        (0186) ;    If the counter user module is stopped, then this value will also be
                                        (0187) ;    latched into the Count registers (DR0).
                                        (0188) ;     
                                        (0189) ;    The A and X registers may be modified by this or future implementations
                                        (0190) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0191) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0192) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0193) ;    functions.
                                        (0194) ;
                                        (0195)  Counter16_1_WritePeriod:
                                        (0196) _Counter16_1_WritePeriod:
                                        (0197)    RAM_PROLOGUE RAM_USE_CLASS_1
0804: 60 35    MOV   REG[0x35],A        (0198)    mov   reg[Counter16_1_PERIOD_LSB_REG], A
0806: 5B       MOV   A,X                (0199)    mov   A, X
0807: 60 39    MOV   REG[0x39],A        (0200)    mov   reg[Counter16_1_PERIOD_MSB_REG], A
                                        (0201)    RAM_EPILOGUE RAM_USE_CLASS_1
0809: 7F       RET                      (0202)    ret
                                        (0203) 
                                        (0204) 
                                        (0205) .ENDSECTION
                                        (0206) 
                                        (0207) .SECTION
                                        (0208) ;-----------------------------------------------------------------------------
                                        (0209) ;  FUNCTION NAME: Counter16_1_WriteCompareValue
                                        (0210) ;
                                        (0211) ;  DESCRIPTION:
                                        (0212) ;     Writes compare value into the Compare register (DR2).
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;
                                        (0215) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0216) ;  RETURNS:      Nothing
                                        (0217) ;  SIDE EFFECTS: 
                                        (0218) ;    The A and X registers may be modified by this or future implementations
                                        (0219) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0220) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0221) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0222) ;    functions.
                                        (0223) ;
                                        (0224)  Counter16_1_WriteCompareValue:
                                        (0225) _Counter16_1_WriteCompareValue:
                                        (0226)    RAM_PROLOGUE RAM_USE_CLASS_1
080A: 60 36    MOV   REG[0x36],A        (0227)    mov   reg[Counter16_1_COMPARE_LSB_REG], A
080C: 5B       MOV   A,X                (0228)    mov   A, X
080D: 60 3A    MOV   REG[0x3A],A        (0229)    mov   reg[Counter16_1_COMPARE_MSB_REG], A
                                        (0230)    RAM_EPILOGUE RAM_USE_CLASS_1
080F: 7F       RET                      (0231)    ret
                                        (0232) 
                                        (0233) 
                                        (0234) .ENDSECTION
                                        (0235) 
                                        (0236) .SECTION
                                        (0237) ;-----------------------------------------------------------------------------
                                        (0238) ;  FUNCTION NAME: Counter16_1_wReadCompareValue
                                        (0239) ;
                                        (0240) ;  DESCRIPTION:
                                        (0241) ;     Reads the Compare registers.
                                        (0242) ;-----------------------------------------------------------------------------
                                        (0243) ;
                                        (0244) ;  ARGUMENTS:    None
                                        (0245) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0246) ;  SIDE EFFECTS: 
                                        (0247) ;    The A and X registers may be modified by this or future implementations
                                        (0248) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0249) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0250) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0251) ;    functions.
                                        (0252) ;
                                        (0253)  Counter16_1_wReadCompareValue:
                                        (0254) _Counter16_1_wReadCompareValue:
                                        (0255)  wCounter16_1_ReadCompareValue:                  ; this name deprecated
                                        (0256) _wCounter16_1_ReadCompareValue:                  ; this name deprecated
                                        (0257)    RAM_PROLOGUE RAM_USE_CLASS_1
0810: 5D 3A    MOV   A,REG[0x3A]        (0258)    mov   A, reg[Counter16_1_COMPARE_MSB_REG]
0812: 5C       MOV   X,A                (0259)    mov   X, A
0813: 5D 36    MOV   A,REG[0x36]        (0260)    mov   A, reg[Counter16_1_COMPARE_LSB_REG]
                                        (0261)    RAM_EPILOGUE RAM_USE_CLASS_1
0815: 7F       RET                      (0262)    ret
                                        (0263) 
                                        (0264) 
                                        (0265) .ENDSECTION
                                        (0266) 
                                        (0267) .SECTION
                                        (0268) ;-----------------------------------------------------------------------------
                                        (0269) ;  FUNCTION NAME: Counter16_1_wReadCounter
                                        (0270) ;
                                        (0271) ;  DESCRIPTION:
                                        (0272) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0273) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0274) ;     from the Count to the Compare registers by holding the clock low in
                                        (0275) ;     the MSB PSoC block.
                                        (0276) ;-----------------------------------------------------------------------------
                                        (0277) ;
                                        (0278) ;  ARGUMENTS: None
                                        (0279) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0280) ;  SIDE EFFECTS:
                                        (0281) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0282) ;     2) The A and X registers may be modified by this or future implementations
                                        (0283) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0284) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0285) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0286) ;        functions.
                                        (0287) ;
                                        (0288)  Counter16_1_wReadCounter:
                                        (0289) _Counter16_1_wReadCounter:
                                        (0290)  wCounter16_1_ReadCounter:                       ; this name deprecated
                                        (0291) _wCounter16_1_ReadCounter:                       ; this name deprecated
                                        (0292) 
                                        (0293)    bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
                                        (0294)    bOrigControlReg:        EQU   2                  ; Frame offset to temp CR0     store
                                        (0295)    bOrigClockSetting:      EQU   3                  ; Frame offset to temp Input   store
                                        (0296)    wCounter:               EQU   4                  ; Frame offset to temp Count   store
                                        (0297)    STACK_FRAME_SIZE:       EQU   6                  ; max stack frame size is 6 bytes
                                        (0298) 
                                        (0299)    RAM_PROLOGUE RAM_USE_CLASS_2
0816: 4F       MOV   X,SP               (0300)    mov   X, SP                                      ; X <-  stack frame pointer
0817: 5D 3A    MOV   A,REG[0x3A]        (0301)    mov   A, reg[Counter16_1_COMPARE_MSB_REG]     ; Save the Compare register on the stack
0819: 08       PUSH  A                  (0302)    push  A                                          ;
081A: 5D 36    MOV   A,REG[0x36]        (0303)    mov   A, reg[Counter16_1_COMPARE_LSB_REG]     ;
081C: 08       PUSH  A                  (0304)    push  A                                          ;   -stack frame now 2 bytes-
081D: 5D 37    MOV   A,REG[0x37]        (0305)    mov   A, reg[Counter16_1_CONTROL_LSB_REG]     ; Save CR0 (running or stopped state)
081F: 08       PUSH  A                  (0306)    push  A                                          ;   -stack frame now 3 bytes-
0820: 41 37 FE AND   REG[0x37],0xFE     
0823: 71 10    OR    F,0x10             
                                        (0307)    Counter16_1_Stop_M                            ; Disable (stop) the Counter if running
                                        (0308)    M8C_SetBank1                                     ;
0825: 5D 35    MOV   A,REG[0x35]        (0309)    mov   A, reg[Counter16_1_INPUT_LSB_REG]       ; save the LSB clock input setting
0827: 08       PUSH  A                  (0310)    push  A                                          ;   on the stack (now 4 bytes) and ...
                                        (0311)                                                     ;   hold the clock low:
0828: 62 35 00 MOV   REG[0x35],0x0      (0312)    mov   reg[Counter16_1_INPUT_LSB_REG], INPUT_REG_NULL
082B: 70 EF    AND   F,0xEF             
                                        (0313)    M8C_SetBank0                                     ; Extract the Count via DR2 register
082D: 5D 38    MOV   A,REG[0x38]        (0314)    mov   A, reg[Counter16_1_COUNTER_MSB_REG]     ; DR2 <- DR0 (in the MSB block)
082F: 5D 3A    MOV   A,REG[0x3A]        (0315)    mov   A, reg[Counter16_1_COMPARE_MSB_REG]     ; Stash the Count MSB on the stack
0831: 08       PUSH  A                  (0316)    push  A                                          ;   -stack frame is now 5 bytes
0832: 5D 34    MOV   A,REG[0x34]        (0317)    mov   A, reg[Counter16_1_COUNTER_LSB_REG]     ; DR2 <- DR0 (in the LSB block)
0834: 5D 36    MOV   A,REG[0x36]        (0318)    mov   A, reg[Counter16_1_COMPARE_LSB_REG]     ; Stash the Count LSB on the stack
0836: 08       PUSH  A                  (0319)    push  A                                          ;   -stack frame is now 6 bytes-
0837: 52 00    MOV   A,[X+0]            (0320)    mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
0839: 60 3A    MOV   REG[0x3A],A        (0321)    mov   reg[Counter16_1_COMPARE_MSB_REG], A     ;
083B: 52 01    MOV   A,[X+1]            (0322)    mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
083D: 60 36    MOV   REG[0x36],A        (0323)    mov   reg[Counter16_1_COMPARE_LSB_REG], A     ;
083F: 71 10    OR    F,0x10             
                                        (0324)    M8C_SetBank1                                     ; ---Restore the counter operation
0841: 52 03    MOV   A,[X+3]            (0325)    mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
0843: 60 35    MOV   REG[0x35],A        (0326)    mov   reg[Counter16_1_INPUT_LSB_REG], A       ;   and restore it
0845: 70 EF    AND   F,0xEF             
                                        (0327)    M8C_SetBank0                                     ; Now re-enable (start) the counter
0847: 52 02    MOV   A,[X+2]            (0328)    mov   A, [X+bOrigControlReg]                     ;   if it was running when
0849: 60 37    MOV   REG[0x37],A        (0329)    mov   reg[Counter16_1_CONTROL_LSB_REG], A     ;   this function was first called
084B: 18       POP   A                  (0330)    pop   A                                          ; Setup the return value
084C: 20       POP   X                  (0331)    pop   X                                          ;
084D: 38 FC    ADD   SP,0xFC            (0332)    ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
                                        (0333)    RAM_EPILOGUE RAM_USE_CLASS_2
084F: 7F       RET                      (0334)    ret
                                        (0335) 
                                        (0336) .ENDSECTION
                                        (0337) 
                                        (0338) ; End of File Counter16_1.asm
FILE: .\delay.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: delay.asm
                                        (0004) ;;
                                        (0005) ;;  DESCRIPTION: Delay functions implementation file
                                        (0006) ;;
                                        (0007) ;;-----------------------------------------------------------------------------
                                        (0008) ;;  Copyright (c) Cypress MicroSystems 2002-2006. All Rights Reserved.
                                        (0009) ;;*****************************************************************************
                                        (0010) ;;*****************************************************************************
                                        (0011) 
                                        (0012) ;-----------------------------------------------------------------------------
                                        (0013) ;  Include Files
                                        (0014) ;-----------------------------------------------------------------------------
                                        (0015) include "m8c.inc"
                                        (0016) include "memory.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------------------------------------
                                        (0021) export  Delay50uTimes
                                        (0022) export _Delay50uTimes
                                        (0023) 
                                        (0024) export  Delay50u
                                        (0025) export _Delay50u
                                        (0026) 
                                        (0027) export  Delay10msTimes
                                        (0028) export _Delay10msTimes
                                        (0029) 
                                        (0030) 
                                        (0031) area text(rom)
                                        (0032) .SECTION
                                        (0033) ;-----------------------------------------------------------------------------
                                        (0034) ;  FUNCTION NAME: DelaySeconds
                                        (0035) ;
                                        (0036) ;  DESCRIPTION:
                                        (0037) ;     Delay increments of 10mSeconds
                                        (0038) ;
                                        (0039) ;-----------------------------------------------------------------------------
                                        (0040) ;
                                        (0041) ;  ARGUMENTS:
                                        (0042) ;     A contains the delay multiplier
                                        (0043) ;
                                        (0044) ;  RETURNS:
                                        (0045) ;
                                        (0046) ;  SIDE EFFECTS:
                                        (0047) ;    The A and X registers may be modified by this or future implementations
                                        (0048) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0049) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0050) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0051) ;    functions.
                                        (0052) 
                                        (0053) 
                                        (0054)  Delay10msTimes:
                                        (0055) _Delay10msTimes:
                                        (0056)     RAM_PROLOGUE RAM_USE_CLASS_1
0850: 08       PUSH  A                  (0057) 	push A
                                        (0058) 
0851: 50 C8    MOV   A,0xC8             (0059) 	mov A, 200
                                        (0060) 	DELAY50US:
0853: 90 16    CALL  _Delay50u          (0061)     call  Delay50u
0855: 78       DEC   A                  (0062)     dec   A
0856: BF FC    JNZ   0x0853             (0063)     jnz   DELAY50US
                                        (0064) 
0858: 18       POP   A                  (0065) 	pop A
0859: 78       DEC   A                  (0066) 	dec   A
085A: BF F5    JNZ   __UserModules_end|Delay10msTimes|__text_start|_Delay10msTimes(0067)     jnz   Delay10msTimes
                                        (0068) 
                                        (0069)     RAM_EPILOGUE RAM_USE_CLASS_1
085C: 7F       RET                      (0070)     ret
                                        (0071) .ENDSECTION
                                        (0072) 
                                        (0073) 
                                        (0074) 
                                        (0075) 
                                        (0076) .SECTION
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) ;  FUNCTION NAME: Delay50uTimes
                                        (0079) ;
                                        (0080) ;  DESCRIPTION:
                                        (0081) ;     Delay increments of 50uSeconds
                                        (0082) ;
                                        (0083) ;-----------------------------------------------------------------------------
                                        (0084) ;
                                        (0085) ;  ARGUMENTS:
                                        (0086) ;     A contains the delay multiplier
                                        (0087) ;
                                        (0088) ;  RETURNS:
                                        (0089) ;
                                        (0090) ;  SIDE EFFECTS:
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097) ;
                                        (0098) 
                                        (0099)  Delay50uTimes:
                                        (0100) _Delay50uTimes:
                                        (0101)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0102) 
085D: 90 0C    CALL  _Delay50u          (0103)     call  Delay50u
085F: 78       DEC   A                  (0104) 	dec A
0860: BF FC    JNZ   _Delay50uTimes     (0105)     jnz   Delay50uTimes
                                        (0106) 
                                        (0107) 	
                                        (0108)     RAM_EPILOGUE RAM_USE_CLASS_1
0862: 7F       RET                      (0109)     ret
                                        (0110) 
                                        (0111) .ENDSECTION
                                        (0112) 
                                        (0113) ;-----------------------------------------------------------------------------
                                        (0114) ;  FUNCTION NAME: Delay50u
                                        (0115) ;
                                        (0116) ;  DESCRIPTION:
                                        (0117) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0118) ;     Slower clock frequencies the delay will be;
                                        (0119) ;           1.5
                                        (0120) ;        -------------- * 50uSec
                                        (0121) ;        clock_freq(MHz)
                                        (0122) ;
                                        (0123) ;
                                        (0124) ;-----------------------------------------------------------------------------
                                        (0125) ;
                                        (0126) ;  ARGUMENTS: none
                                        (0127) ;
                                        (0128) ;  RETURNS: none
                                        (0129) ;
                                        (0130) ;  SIDE EFFECTS:
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137) ;  THEORY of OPERATION or PROCEDURE:
                                        (0138) ;
                                        (0139) .LITERAL
                                        (0140)  Delay50u_Table::
                                        (0141)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0142) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0143) .ENDLITERAL
                                        (0144) .SECTION
                                        (0145) 
                                        (0146)   Delay50u:
                                        (0147)  _Delay50u:                      ; [11]  Call
                                        (0148)     RAM_PROLOGUE RAM_USE_CLASS_1
086B: 08       PUSH  A                  (0149)     push  A
086C: 71 10    OR    F,0x10             
                                        (0150)     M8C_SetBank1                       ; [4]
086E: 5D E0    MOV   A,REG[0xE0]        (0151)     mov   A, reg[OSC_CR0]              ; [6] Get delay value
0870: 70 EF    AND   F,0xEF             
                                        (0152)     M8C_SetBank0                       ; [4]
0872: 21 07    AND   A,0x7              (0153)     and   A,07h                        ; [4] Mask off only the clock bits
0874: 39 05    CMP   A,0x5              (0154)     cmp   A,05h
0876: D0 06    JNC   0x087D             (0155)     jnc   Delay50u_End
0878: FF E9    INDEX Delay50u_Table     (0156)     index Delay50u_Table               ; [13] Get delay value
                                        (0157) Delay50u_Loop:                         ;
087A: 78       DEC   A                  (0158)     dec   A                            ; [4]
087B: BF FE    JNZ   0x087A             (0159)     jnz   Delay50u_Loop                ; [5]
                                        (0160) Delay50u_End:
087D: 18       POP   A                  (0161)     pop   A
                                        (0162)     RAM_EPILOGUE RAM_USE_CLASS_1
087E: 7F       RET                      (0163)     ret
FILE: Z:\robotti\Robor7\ROBOTT~1\ROBOTT~1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // Robotti Projekti
(0003) // Robor7 @ 2014
(0004) // Kasper Kiiskinen, Henri Sinokki, Eero Holopainen, Mikko Liira, Kari Lampi
(0005) //----------------------------------------------------------------------------
(0006) 
(0007) #include <m8c.h>        // part specific constants and macros
(0008) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0009) #include<stdio.h>
(0010) #include<stdlib.h>
(0011) #include "delay.h"
(0012) 
(0013) //Omat header filet
(0014) #include "MotorControl.h"
(0015) #include "UltraControl.h"
(0016) //#include "GyroControl.h"
(0017) 
(0018) #pragma interrupt_handler PinInterrupt
(0019) 
(0020) void Delay(int);
(0021) void TestLoop(void);
(0022) void CounterISR(void);
(0023) void CheckLeft(void);
(0024) void CheckRight(void);
(0025) 
(0026) //Kellot
(0027) volatile int timeT = 0;
(0028) int timeUltra = 0,timeUltraRead = 0;
(0029) volatile unsigned long int milliT = 0;
(0030) 
(0031) volatile int distanceCM = 0;
(0032) char buffer[10];
(0033) 
(0034) // Linefinder test
(0035) volatile int onBlackLine = 0, blackLineCounter = 0;
(0036) int once = 0;
(0037) int temp = 0;
(0038) int kaannokset = 0;
(0039) int maxKaannokset = 3; //Voi joutua korjaamaan
(0040) int lastTurn = 1; // muuttuja jolla pidetään kirjaa viimesimmästä käännöksestä. 1 = oikea ja 2 = vasen.
(0041) int vaihe = 0;
(0042) int left, right;
(0043) int etaisyysSeinasta = 0;
(0044) int timeForward = 50; //.... 4m täydellä vauhdilla 3.7s
(0045) int turnTime = 55; 	   //.... 90 asteen käännökseen meneväaika
(0046) int timeRobotWidth = 15; //.... Robotin leveyteen menevä aika ?
(0047) int ultraData = 0; //Ultraääni anturrista saatava arvo millisekunteina pitää jakaa jollain että saadaan senttimerejä
(0048) 
(0049) //Main Method
(0050) void main(void)
(0051) {
(0052) 	//Init**************************
(0053) 	
(0054) 	//Enables Global Interrupts
(0055) 	M8C_EnableGInt; 
_main:
    087F: 71 01    OR    F,0x1
(0056) 	M8C_EnableIntMask(INT_MSK0, INT_MSK0_GPIO);	//VITTU
    0881: 43 E0 20 OR    REG[0xE0],0x20
(0057) 	
(0058) 	//Start LCD
(0059) 	LCD_Start();
    0884: 10       PUSH  X
    0885: 7C 05 DF LCALL _LCD_Init|_LCD_Start|LCD_Init|LCD_Start
(0060) 	//InitializeTimer
(0061) 	Timer8_Start();
    0888: 7C 03 C2 LCALL _Timer8_Start
(0062) 	Timer8_EnableInt();
    088B: 7C 03 BA LCALL _Timer8_EnableInt
(0063) 		
(0064) 	Counter16_1_EnableInt();
    088E: 7C 07 F4 LCALL _Counter16_1_EnableInt
(0065) 	Counter16_1_Start();
    0891: 7C 07 FC LCALL _Counter16_1_Start
    0894: 20       POP   X
(0066) 	
(0067) 	//Start Motor PWMs
(0068) 	InitPWM();
    0895: 7C 0D F8 LCALL _InitPWM
(0069) 	
(0070) 	//Init Servo
(0071) 	InitUAServo();
    0898: 7C 12 C6 LCALL _InitUAServo
(0072) 		
(0073) 	Delay10msTimes(100);
    089B: 10       PUSH  X
    089C: 50 64    MOV   A,0x64
    089E: 7C 08 50 LCALL __UserModules_end|Delay10msTimes|__text_start|_Delay10msTimes
    08A1: 20       POP   X
(0074) 	vaihe = 1;
    08A2: 55 1B 01 MOV   [vaihe+1],0x1
    08A5: 55 1A 00 MOV   [vaihe],0x0
    08A8: 84 2B    JMP   0x0CD4
(0075) 	
(0076) 	//Testink
(0077) 	//TestLoop();
(0078) 
(0079) 	//MainLoop**********
(0080) 	//***********************
(0081) 	while(1)
(0082) 	{
(0083) 		
(0084) 		itoa(buffer, etaisyysSeinasta, 10);
    08AA: 50 00    MOV   A,0x0
    08AC: 08       PUSH  A
    08AD: 50 0A    MOV   A,0xA
    08AF: 08       PUSH  A
    08B0: 51 1C    MOV   A,[etaisyysSeinasta]
    08B2: 08       PUSH  A
    08B3: 51 1D    MOV   A,[etaisyysSeinasta+1]
    08B5: 08       PUSH  A
    08B6: 50 00    MOV   A,0x0
    08B8: 08       PUSH  A
    08B9: 50 41    MOV   A,0x41
    08BB: 08       PUSH  A
    08BC: 7C 17 8D LCALL _itoa
    08BF: 38 FA    ADD   SP,0xFA
(0085) 		LCD_Position(0,0);
    08C1: 10       PUSH  X
    08C2: 50 00    MOV   A,0x0
    08C4: 57 00    MOV   X,0x0
    08C6: 7C 06 4F LCALL _LCD_Position
(0086) 		LCD_PrString(buffer);		
    08C9: 50 00    MOV   A,0x0
    08CB: 08       PUSH  A
    08CC: 50 41    MOV   A,0x41
    08CE: 5C       MOV   X,A
    08CF: 18       POP   A
    08D0: 7C 05 1A LCALL _LCD_PrString
(0087) 		LCD_PrCString("          ");
    08D3: 50 01    MOV   A,0x1
    08D5: 08       PUSH  A
    08D6: 50 50    MOV   A,0x50
    08D8: 5C       MOV   X,A
    08D9: 18       POP   A
    08DA: 7C 04 DE LCALL _LCD_PrCString
    08DD: 20       POP   X
(0088) 		
(0089) 		itoa(buffer, vaihe, 10);
    08DE: 50 00    MOV   A,0x0
    08E0: 08       PUSH  A
    08E1: 50 0A    MOV   A,0xA
    08E3: 08       PUSH  A
    08E4: 51 1A    MOV   A,[vaihe]
    08E6: 08       PUSH  A
    08E7: 51 1B    MOV   A,[vaihe+1]
    08E9: 08       PUSH  A
    08EA: 50 00    MOV   A,0x0
    08EC: 08       PUSH  A
    08ED: 50 41    MOV   A,0x41
    08EF: 08       PUSH  A
    08F0: 7C 17 8D LCALL _itoa
    08F3: 38 FA    ADD   SP,0xFA
(0090) 		LCD_Position(1,0);
    08F5: 10       PUSH  X
    08F6: 57 00    MOV   X,0x0
    08F8: 50 01    MOV   A,0x1
    08FA: 7C 06 4F LCALL _LCD_Position
(0091) 		LCD_PrString(buffer);
    08FD: 50 00    MOV   A,0x0
    08FF: 08       PUSH  A
    0900: 50 41    MOV   A,0x41
    0902: 5C       MOV   X,A
    0903: 18       POP   A
    0904: 7C 05 1A LCALL _LCD_PrString
    0907: 20       POP   X
(0092) 		
(0093) 		// Eteenpäin ajo vaihe, ajetaan eteenpäin niin pitkään kunnes ollaan 20cm päästä seinästä.
(0094) 		if( vaihe == 1 )
    0908: 3C 1A 00 CMP   [vaihe],0x0
    090B: B2 AD    JNZ   0x0BB9
    090D: 3C 1B 01 CMP   [vaihe+1],0x1
    0910: B2 A8    JNZ   0x0BB9
(0095) 		{	
(0096) 			sendTrigPulse(&ultraData);
    0912: 50 00    MOV   A,0x0
    0914: 08       PUSH  A
    0915: 50 24    MOV   A,0x24
    0917: 08       PUSH  A
    0918: 7C 13 20 LCALL _sendTrigPulse
    091B: 38 FE    ADD   SP,0xFE
(0097) 			
(0098) 			distanceCM = ultraData * 2;	
    091D: 5F 37 25 MOV   [__r1],[ultraData+1]
    0920: 5F 38 24 MOV   [__r0],[ultraData]
    0923: 65 37    ASL   [__r1]
    0925: 6B 38    RLC   [__r0]
    0927: 5F 0B 37 MOV   [distanceCM+1],[__r1]
    092A: 5F 0A 38 MOV   [distanceCM],[__r0]
(0099) 
(0100) 			if (distanceCM >= 60)
    092D: 51 0B    MOV   A,[distanceCM+1]
    092F: 11 3C    SUB   A,0x3C
    0931: 51 0A    MOV   A,[distanceCM]
    0933: 31 80    XOR   A,0x80
    0935: 19 80    SBB   A,0x80
    0937: C2 4F    JC    0x0B87
(0101) 			{	
(0102) 				if (lastTurn == 2)
    0939: 3C 18 00 CMP   [lastTurn],0x0
    093C: B0 13    JNZ   0x0950
    093E: 3C 19 02 CMP   [lastTurn+1],0x2
    0941: B0 0E    JNZ   0x0950
(0103) 				{
(0104) 					CheckRight();				
    0943: 93 B1    CALL  _CheckRight
(0105) 					ControlServo(SERVO_MIDDLE_FROM_RIGHT);
    0945: 50 00    MOV   A,0x0
    0947: 08       PUSH  A
    0948: 50 1F    MOV   A,0x1F
    094A: 08       PUSH  A
    094B: 7C 13 40 LCALL _ControlServo
    094E: 38 FE    ADD   SP,0xFE
(0106) 				}				
(0107) 				if (lastTurn == 1)
    0950: 3C 18 00 CMP   [lastTurn],0x0
    0953: B0 13    JNZ   0x0967
    0955: 3C 19 01 CMP   [lastTurn+1],0x1
    0958: B0 0E    JNZ   0x0967
(0108) 				{
(0109) 					CheckLeft();
    095A: 93 7C    CALL  _CheckLeft
(0110) 					ControlServo(SERVO_MIDDLE_FROM_LEFT);
    095C: 50 00    MOV   A,0x0
    095E: 08       PUSH  A
    095F: 50 22    MOV   A,0x22
    0961: 08       PUSH  A
    0962: 7C 13 40 LCALL _ControlServo
    0965: 38 FE    ADD   SP,0xFE
(0111) 				}
(0112) 				etaisyysSeinasta = ultraData * 2;
    0967: 5F 37 25 MOV   [__r1],[ultraData+1]
    096A: 5F 38 24 MOV   [__r0],[ultraData]
    096D: 65 37    ASL   [__r1]
    096F: 6B 38    RLC   [__r0]
    0971: 5F 1D 37 MOV   [etaisyysSeinasta+1],[__r1]
    0974: 5F 1C 38 MOV   [etaisyysSeinasta],[__r0]
(0113) 				Delay10msTimes(20);
    0977: 10       PUSH  X
    0978: 50 14    MOV   A,0x14
    097A: 7C 08 50 LCALL __UserModules_end|Delay10msTimes|__text_start|_Delay10msTimes
    097D: 20       POP   X
(0114) 				
(0115) 				if (temp == 0)
    097E: 3C 12 00 CMP   [temp],0x0
    0981: B0 0C    JNZ   0x098E
    0983: 3C 13 00 CMP   [temp+1],0x0
    0986: B0 07    JNZ   0x098E
(0116) 				{
(0117) 					temp = etaisyysSeinasta; //koodi joka korjaisi vasta jos ajetaan vinossa seinää kohti.
    0988: 5F 13 1D MOV   [temp+1],[etaisyysSeinasta+1]
    098B: 5F 12 1C MOV   [temp],[etaisyysSeinasta]
(0118) 				}	
(0119) 				
(0120) 				if (etaisyysSeinasta < 14)
    098E: 51 1D    MOV   A,[etaisyysSeinasta+1]
    0990: 11 0E    SUB   A,0xE
    0992: 51 1C    MOV   A,[etaisyysSeinasta]
    0994: 31 80    XOR   A,0x80
    0996: 19 80    SBB   A,0x80
    0998: D0 D8    JNC   0x0A71
(0121) 				{					
(0122) 					if (lastTurn == 1)
    099A: 3C 18 00 CMP   [lastTurn],0x0
    099D: B0 50    JNZ   0x09EE
    099F: 3C 19 01 CMP   [lastTurn+1],0x1
    09A2: B0 4B    JNZ   0x09EE
(0123) 					{	
(0124) 						if (temp >= etaisyysSeinasta)
    09A4: 51 13    MOV   A,[temp+1]
    09A6: 12 1D    SUB   A,[etaisyysSeinasta+1]
    09A8: 51 1C    MOV   A,[etaisyysSeinasta]
    09AA: 31 80    XOR   A,0x80
    09AC: 53 2C    MOV   [__rX],A
    09AE: 51 12    MOV   A,[temp]
    09B0: 31 80    XOR   A,0x80
    09B2: 1A 2C    SBB   A,[__rX]
    09B4: C0 8D    JC    0x0A42
(0125) 						{	
(0126) 							//Lähinseinä oikea
(0127) 							TurnRight(TURN_SPEED);
    09B6: 50 00    MOV   A,0x0
    09B8: 08       PUSH  A
    09B9: 50 73    MOV   A,0x73
    09BB: 08       PUSH  A
    09BC: 7C 12 96 LCALL _TurnRight
    09BF: 38 FE    ADD   SP,0xFE
(0128) 							Delay10msTimes(8);
    09C1: 10       PUSH  X
    09C2: 50 08    MOV   A,0x8
    09C4: 7C 08 50 LCALL __UserModules_end|Delay10msTimes|__text_start|_Delay10msTimes
    09C7: 20       POP   X
(0129) 							MoveForward2(100, 0, 1);
    09C8: 50 3F    MOV   A,0x3F
    09CA: 08       PUSH  A
    09CB: 50 80    MOV   A,0x80
    09CD: 08       PUSH  A
    09CE: 50 00    MOV   A,0x0
    09D0: 08       PUSH  A
    09D1: 08       PUSH  A
    09D2: 08       PUSH  A
    09D3: 08       PUSH  A
    09D4: 08       PUSH  A
    09D5: 08       PUSH  A
    09D6: 08       PUSH  A
    09D7: 50 64    MOV   A,0x64
    09D9: 08       PUSH  A
    09DA: 7C 0F 22 LCALL _MoveForward2
    09DD: 38 F6    ADD   SP,0xF6
(0130) 							Delay10msTimes(20);
    09DF: 10       PUSH  X
    09E0: 50 14    MOV   A,0x14
    09E2: 7C 08 50 LCALL __UserModules_end|Delay10msTimes|__text_start|_Delay10msTimes
    09E5: 20       POP   X
(0131) 							temp = 0;
    09E6: 55 13 00 MOV   [temp+1],0x0
    09E9: 55 12 00 MOV   [temp],0x0
(0132) 						}	
(0133) 					}
    09EC: 80 55    JMP   0x0A42
(0134) 					else if (lastTurn == 2)
    09EE: 3C 18 00 CMP   [lastTurn],0x0
    09F1: B0 50    JNZ   0x0A42
    09F3: 3C 19 02 CMP   [lastTurn+1],0x2
    09F6: B0 4B    JNZ   0x0A42
(0135) 					{
(0136) 						if (temp >= etaisyysSeinasta)
    09F8: 51 13    MOV   A,[temp+1]
    09FA: 12 1D    SUB   A,[etaisyysSeinasta+1]
    09FC: 51 1C    MOV   A,[etaisyysSeinasta]
    09FE: 31 80    XOR   A,0x80
    0A00: 53 2C    MOV   [__rX],A
    0A02: 51 12    MOV   A,[temp]
    0A04: 31 80    XOR   A,0x80
    0A06: 1A 2C    SBB   A,[__rX]
    0A08: C0 39    JC    0x0A42
(0137) 						{	
(0138) 							//Lähinseinä vasen
(0139) 							TurnLeft(TURN_SPEED);
    0A0A: 50 00    MOV   A,0x0
    0A0C: 08       PUSH  A
    0A0D: 50 73    MOV   A,0x73
    0A0F: 08       PUSH  A
    0A10: 7C 12 7E LCALL _TurnLeft
    0A13: 38 FE    ADD   SP,0xFE
(0140) 							Delay10msTimes(8);
    0A15: 10       PUSH  X
    0A16: 50 08    MOV   A,0x8
    0A18: 7C 08 50 LCALL __UserModules_end|Delay10msTimes|__text_start|_Delay10msTimes
    0A1B: 20       POP   X
(0141) 							MoveForward2(100, 1, 0);
    0A1C: 50 00    MOV   A,0x0
    0A1E: 08       PUSH  A
    0A1F: 08       PUSH  A
    0A20: 08       PUSH  A
    0A21: 08       PUSH  A
    0A22: 50 3F    MOV   A,0x3F
    0A24: 08       PUSH  A
    0A25: 50 80    MOV   A,0x80
    0A27: 08       PUSH  A
    0A28: 50 00    MOV   A,0x0
    0A2A: 08       PUSH  A
    0A2B: 08       PUSH  A
    0A2C: 08       PUSH  A
    0A2D: 50 64    MOV   A,0x64
    0A2F: 08       PUSH  A
    0A30: 7C 0F 22 LCALL _MoveForward2
    0A33: 38 F6    ADD   SP,0xF6
(0142) 							Delay10msTimes(20);
    0A35: 10       PUSH  X
    0A36: 50 14    MOV   A,0x14
    0A38: 7C 08 50 LCALL __UserModules_end|Delay10msTimes|__text_start|_Delay10msTimes
    0A3B: 20       POP   X
(0143) 							temp = 0;
    0A3C: 55 13 00 MOV   [temp+1],0x0
    0A3F: 55 12 00 MOV   [temp],0x0
(0144) 						}	
(0145) 					}
(0146) 					
(0147) 					if (once == 0)
    0A42: 3C 10 00 CMP   [once],0x0
    0A45: B0 1E    JNZ   0x0A64
    0A47: 3C 11 00 CMP   [once+1],0x0
    0A4A: B0 19    JNZ   0x0A64
(0148) 					{	
(0149) 						once = 1;
    0A4C: 55 11 01 MOV   [once+1],0x1
    0A4F: 55 10 00 MOV   [once],0x0
(0150) 						MoveForward(100);
    0A52: 50 00    MOV   A,0x0
    0A54: 08       PUSH  A
    0A55: 50 64    MOV   A,0x64
    0A57: 08       PUSH  A
    0A58: 7C 0E 01 LCALL _MoveForward
    0A5B: 38 FE    ADD   SP,0xFE
(0151) 						Delay10msTimes(5);
    0A5D: 10       PUSH  X
    0A5E: 50 05    MOV   A,0x5
    0A60: 7C 08 50 LCALL __UserModules_end|Delay10msTimes|__text_start|_Delay10msTimes
    0A63: 20       POP   X
(0152) 					}
(0153) 					MoveForward(50);
    0A64: 50 00    MOV   A,0x0
    0A66: 08       PUSH  A
    0A67: 50 32    MOV   A,0x32
    0A69: 08       PUSH  A
    0A6A: 7C 0E 01 LCALL _MoveForward
    0A6D: 38 FE    ADD   SP,0xFE
(0154) 					
(0155) 					//MoveForward(HALF_SPEED);
(0156) 				}
    0A6F: 81 49    JMP   0x0BB9
(0157) 				else if (etaisyysSeinasta > 20)
    0A71: 50 14    MOV   A,0x14
    0A73: 12 1D    SUB   A,[etaisyysSeinasta+1]
    0A75: 51 1C    MOV   A,[etaisyysSeinasta]
    0A77: 31 80    XOR   A,0x80
    0A79: 53 2C    MOV   [__rX],A
    0A7B: 50 80    MOV   A,0x80
    0A7D: 1A 2C    SBB   A,[__rX]
    0A7F: D0 D8    JNC   0x0B58
(0158) 				{
(0159) 					if (lastTurn == 1)
    0A81: 3C 18 00 CMP   [lastTurn],0x0
    0A84: B0 52    JNZ   0x0AD7
    0A86: 3C 19 01 CMP   [lastTurn+1],0x1
    0A89: B0 4D    JNZ   0x0AD7
(0160) 					{
(0161) 						if (temp <= etaisyysSeinasta)
    0A8B: 51 1D    MOV   A,[etaisyysSeinasta+1]
    0A8D: 12 13    SUB   A,[temp+1]
    0A8F: 51 12    MOV   A,[temp]
    0A91: 31 80    XOR   A,0x80
    0A93: 53 2C    MOV   [__rX],A
    0A95: 51 1C    MOV   A,[etaisyysSeinasta]
    0A97: 31 80    XOR   A,0x80
    0A99: 1A 2C    SBB   A,[__rX]
    0A9B: C0 8D    JC    0x0B29
(0162) 						{	
(0163) 							//kauempi seinä vasen
(0164) 							TurnLeft(TURN_SPEED);
    0A9D: 50 00    MOV   A,0x0
    0A9F: 08       PUSH  A
    0AA0: 50 73    MOV   A,0x73
    0AA2: 08       PUSH  A
    0AA3: 7C 12 7E LCALL _TurnLeft
    0AA6: 38 FE    ADD   SP,0xFE
(0165) 							Delay10msTimes(8);
    0AA8: 10       PUSH  X
    0AA9: 50 08    MOV   A,0x8
    0AAB: 7C 08 50 LCALL __UserModules_end|Delay10msTimes|__text_start|_Delay10msTimes
    0AAE: 20       POP   X
(0166) 							MoveForward2(100, 1, 0);
    0AAF: 50 00    MOV   A,0x0
    0AB1: 08       PUSH  A
    0AB2: 08       PUSH  A
    0AB3: 08       PUSH  A
    0AB4: 08       PUSH  A
    0AB5: 50 3F    MOV   A,0x3F
    0AB7: 08       PUSH  A
    0AB8: 50 80    MOV   A,0x80
    0ABA: 08       PUSH  A
    0ABB: 50 00    MOV   A,0x0
    0ABD: 08       PUSH  A
    0ABE: 08       PUSH  A
    0ABF: 08       PUSH  A
    0AC0: 50 64    MOV   A,0x64
    0AC2: 08       PUSH  A
    0AC3: 7C 0F 22 LCALL _MoveForward2
    0AC6: 38 F6    ADD   SP,0xF6
(0167) 							Delay10msTimes(20);
    0AC8: 10       PUSH  X
    0AC9: 50 14    MOV   A,0x14
    0ACB: 7C 08 50 LCALL __UserModules_end|Delay10msTimes|__text_start|_Delay10msTimes
    0ACE: 20       POP   X
(0168) 							temp = 0;
    0ACF: 55 13 00 MOV   [temp+1],0x0
    0AD2: 55 12 00 MOV   [temp],0x0
(0169) 						}	
(0170) 					}
    0AD5: 80 53    JMP   0x0B29
(0171) 					else if (lastTurn == 2)
    0AD7: 3C 18 00 CMP   [lastTurn],0x0
    0ADA: B0 4E    JNZ   0x0B29
    0ADC: 3C 19 02 CMP   [lastTurn+1],0x2
    0ADF: B0 49    JNZ   0x0B29
(0172) 					{
(0173) 						if (temp <= etaisyysSeinasta)
    0AE1: 51 1D    MOV   A,[etaisyysSeinasta+1]
    0AE3: 12 13    SUB   A,[temp+1]
    0AE5: 51 12    MOV   A,[temp]
    0AE7: 31 80    XOR   A,0x80
    0AE9: 53 2C    MOV   [__rX],A
    0AEB: 51 1C    MOV   A,[etaisyysSeinasta]
    0AED: 31 80    XOR   A,0x80
    0AEF: 1A 2C    SBB   A,[__rX]
    0AF1: C0 37    JC    0x0B29
(0174) 						{	
(0175) 							//kauempi seinä oikea
(0176) 
(0177) 							TurnRight(TURN_SPEED);						
    0AF3: 50 00    MOV   A,0x0
    0AF5: 08       PUSH  A
    0AF6: 50 73    MOV   A,0x73
    0AF8: 08       PUSH  A
    0AF9: 7C 12 96 LCALL _TurnRight
    0AFC: 38 FE    ADD   SP,0xFE
(0178) 							Delay10msTimes(8);
    0AFE: 10       PUSH  X
    0AFF: 50 08    MOV   A,0x8
    0B01: 7C 08 50 LCALL __UserModules_end|Delay10msTimes|__text_start|_Delay10msTimes
    0B04: 20       POP   X
(0179) 							MoveForward2(100, 0, 1);
    0B05: 50 3F    MOV   A,0x3F
    0B07: 08       PUSH  A
    0B08: 50 80    MOV   A,0x80
    0B0A: 08       PUSH  A
    0B0B: 50 00    MOV   A,0x0
    0B0D: 08       PUSH  A
    0B0E: 08       PUSH  A
    0B0F: 08       PUSH  A
    0B10: 08       PUSH  A
    0B11: 08       PUSH  A
    0B12: 08       PUSH  A
    0B13: 08       PUSH  A
    0B14: 50 64    MOV   A,0x64
    0B16: 08       PUSH  A
    0B17: 7C 0F 22 LCALL _MoveForward2
    0B1A: 38 F6    ADD   SP,0xF6
(0180) 							Delay10msTimes(20);
    0B1C: 10       PUSH  X
    0B1D: 50 14    MOV   A,0x14
    0B1F: 7C 08 50 LCALL __UserModules_end|Delay10msTimes|__text_start|_Delay10msTimes
    0B22: 20       POP   X
(0181) 							temp = 0;
    0B23: 55 13 00 MOV   [temp+1],0x0
    0B26: 55 12 00 MOV   [temp],0x0
(0182) 						}	
(0183) 					}
(0184) 					if (once == 0)
    0B29: 3C 10 00 CMP   [once],0x0
    0B2C: B0 1E    JNZ   0x0B4B
    0B2E: 3C 11 00 CMP   [once+1],0x0
    0B31: B0 19    JNZ   0x0B4B
(0185) 					{	
(0186) 						once = 1;
    0B33: 55 11 01 MOV   [once+1],0x1
    0B36: 55 10 00 MOV   [once],0x0
(0187) 						MoveForward(100);
    0B39: 50 00    MOV   A,0x0
    0B3B: 08       PUSH  A
    0B3C: 50 64    MOV   A,0x64
    0B3E: 08       PUSH  A
    0B3F: 7C 0E 01 LCALL _MoveForward
    0B42: 38 FE    ADD   SP,0xFE
(0188) 						Delay10msTimes(5);
    0B44: 10       PUSH  X
    0B45: 50 05    MOV   A,0x5
    0B47: 7C 08 50 LCALL __UserModules_end|Delay10msTimes|__text_start|_Delay10msTimes
    0B4A: 20       POP   X
(0189) 					}
(0190) 					MoveForward(50);
    0B4B: 50 00    MOV   A,0x0
    0B4D: 08       PUSH  A
    0B4E: 50 32    MOV   A,0x32
    0B50: 08       PUSH  A
    0B51: 7C 0E 01 LCALL _MoveForward
    0B54: 38 FE    ADD   SP,0xFE
(0191) 					
(0192) 					//MoveForward(HALF_SPEED);
(0193) 				}
    0B56: 80 62    JMP   0x0BB9
(0194) 				else 
(0195) 				{
(0196) 					if (once == 0)
    0B58: 3C 10 00 CMP   [once],0x0
    0B5B: B0 1E    JNZ   0x0B7A
    0B5D: 3C 11 00 CMP   [once+1],0x0
    0B60: B0 19    JNZ   0x0B7A
(0197) 					{	
(0198) 						once = 1;
    0B62: 55 11 01 MOV   [once+1],0x1
    0B65: 55 10 00 MOV   [once],0x0
(0199) 						MoveForward(100);
    0B68: 50 00    MOV   A,0x0
    0B6A: 08       PUSH  A
    0B6B: 50 64    MOV   A,0x64
    0B6D: 08       PUSH  A
    0B6E: 7C 0E 01 LCALL _MoveForward
    0B71: 38 FE    ADD   SP,0xFE
(0200) 						Delay10msTimes(5);
    0B73: 10       PUSH  X
    0B74: 50 05    MOV   A,0x5
    0B76: 7C 08 50 LCALL __UserModules_end|Delay10msTimes|__text_start|_Delay10msTimes
    0B79: 20       POP   X
(0201) 					}
(0202) 					MoveForward(50);
    0B7A: 50 00    MOV   A,0x0
    0B7C: 08       PUSH  A
    0B7D: 50 32    MOV   A,0x32
    0B7F: 08       PUSH  A
    0B80: 7C 0E 01 LCALL _MoveForward
    0B83: 38 FE    ADD   SP,0xFE
(0203) 				}
(0204) 			}
    0B85: 80 33    JMP   0x0BB9
(0205) 			else if (distanceCM < 60 && distanceCM > 20) // Tarkastus kuinka kauas seinästä pysähdytään
    0B87: 51 0B    MOV   A,[distanceCM+1]
    0B89: 11 3C    SUB   A,0x3C
    0B8B: 51 0A    MOV   A,[distanceCM]
    0B8D: 31 80    XOR   A,0x80
    0B8F: 19 80    SBB   A,0x80
    0B91: D0 1E    JNC   0x0BB0
    0B93: 50 14    MOV   A,0x14
    0B95: 12 0B    SUB   A,[distanceCM+1]
    0B97: 51 0A    MOV   A,[distanceCM]
    0B99: 31 80    XOR   A,0x80
    0B9B: 53 2C    MOV   [__rX],A
    0B9D: 50 80    MOV   A,0x80
    0B9F: 1A 2C    SBB   A,[__rX]
    0BA1: D0 0E    JNC   0x0BB0
(0206) 			{
(0207) 				MoveForward(50);
    0BA3: 50 00    MOV   A,0x0
    0BA5: 08       PUSH  A
    0BA6: 50 32    MOV   A,0x32
    0BA8: 08       PUSH  A
    0BA9: 7C 0E 01 LCALL _MoveForward
    0BAC: 38 FE    ADD   SP,0xFE
(0208) 			}				
    0BAE: 80 0A    JMP   0x0BB9
(0209) 			else 
(0210) 			{
(0211) 				Stop();
    0BB0: 7C 12 6E LCALL _Stop
(0212) 				vaihe = 2;
    0BB3: 55 1B 02 MOV   [vaihe+1],0x2
    0BB6: 55 1A 00 MOV   [vaihe],0x0
(0213) 			}
(0214) 		}
(0215) 		// Vaiheessa ollaan pysähtyneenä ja katsomme vasemmalle ja oikealle ja teemme päätöksen kumpaan suuntaan käännymme.
(0216) 		if ( vaihe == 2 )
    0BB9: 3C 1A 00 CMP   [vaihe],0x0
    0BBC: B0 A3    JNZ   0x0C60
    0BBE: 3C 1B 02 CMP   [vaihe+1],0x2
    0BC1: B0 9E    JNZ   0x0C60
(0217) 		{
(0218) 				CheckLeft();
    0BC3: 91 13    CALL  _CheckLeft
(0219) 				left = ultraData * 2;
    0BC5: 5F 37 25 MOV   [__r1],[ultraData+1]
    0BC8: 5F 38 24 MOV   [__r0],[ultraData]
    0BCB: 65 37    ASL   [__r1]
    0BCD: 6B 38    RLC   [__r0]
    0BCF: 5F 40 37 MOV   [left+1],[__r1]
    0BD2: 5F 3F 38 MOV   [left],[__r0]
(0220) 				CheckRight();
    0BD5: 91 1F    CALL  _CheckRight
(0221) 				right = ultraData * 2;
    0BD7: 5F 37 25 MOV   [__r1],[ultraData+1]
    0BDA: 5F 38 24 MOV   [__r0],[ultraData]
    0BDD: 65 37    ASL   [__r1]
    0BDF: 6B 38    RLC   [__r0]
    0BE1: 5F 3E 37 MOV   [right+1],[__r1]
    0BE4: 5F 3D 38 MOV   [right],[__r0]
(0222) 			
(0223) 				if (right>left)
    0BE7: 51 40    MOV   A,[left+1]
    0BE9: 12 3E    SUB   A,[right+1]
    0BEB: 51 3D    MOV   A,[right]
    0BED: 31 80    XOR   A,0x80
    0BEF: 53 2C    MOV   [__rX],A
    0BF1: 51 3F    MOV   A,[left]
    0BF3: 31 80    XOR   A,0x80
    0BF5: 1A 2C    SBB   A,[__rX]
    0BF7: D0 29    JNC   0x0C21
(0224) 				{	//turn right
(0225) 					TurnRight(TURN_SPEED);
    0BF9: 50 00    MOV   A,0x0
    0BFB: 08       PUSH  A
    0BFC: 50 73    MOV   A,0x73
    0BFE: 08       PUSH  A
    0BFF: 7C 12 96 LCALL _TurnRight
    0C02: 38 FE    ADD   SP,0xFE
(0226) 					kaannokset++;
    0C04: 76 15    INC   [kaannokset+1]
    0C06: 0E 14 00 ADC   [kaannokset],0x0
(0227) 					Delay10msTimes(65);		//Voi joutua korjaamaan
    0C09: 10       PUSH  X
    0C0A: 50 41    MOV   A,0x41
    0C0C: 7C 08 50 LCALL __UserModules_end|Delay10msTimes|__text_start|_Delay10msTimes
    0C0F: 20       POP   X
(0228) 					Stop();
    0C10: 7C 12 6E LCALL _Stop
(0229) 					lastTurn = 1;
    0C13: 55 19 01 MOV   [lastTurn+1],0x1
    0C16: 55 18 00 MOV   [lastTurn],0x0
(0230) 					once = 0;
    0C19: 55 11 00 MOV   [once+1],0x0
    0C1C: 55 10 00 MOV   [once],0x0
(0231) 				}
    0C1F: 80 27    JMP   0x0C47
(0232) 				else 
(0233) 				{
(0234) 					//turnlefti
(0235) 					TurnLeft(TURN_SPEED);
    0C21: 50 00    MOV   A,0x0
    0C23: 08       PUSH  A
    0C24: 50 73    MOV   A,0x73
    0C26: 08       PUSH  A
    0C27: 7C 12 7E LCALL _TurnLeft
    0C2A: 38 FE    ADD   SP,0xFE
(0236) 					kaannokset++;
    0C2C: 76 15    INC   [kaannokset+1]
    0C2E: 0E 14 00 ADC   [kaannokset],0x0
(0237) 					Delay10msTimes(65);		//Voi joutua korjaamaan
    0C31: 10       PUSH  X
    0C32: 50 41    MOV   A,0x41
    0C34: 7C 08 50 LCALL __UserModules_end|Delay10msTimes|__text_start|_Delay10msTimes
    0C37: 20       POP   X
(0238) 					Stop();
    0C38: 7C 12 6E LCALL _Stop
(0239) 					lastTurn = 2;
    0C3B: 55 19 02 MOV   [lastTurn+1],0x2
    0C3E: 55 18 00 MOV   [lastTurn],0x0
(0240) 					once = 0;
    0C41: 55 11 00 MOV   [once+1],0x0
    0C44: 55 10 00 MOV   [once],0x0
(0241) 				}
(0242) 				ControlServo(SERVO_MIDDLE_FROM_RIGHT);
    0C47: 50 00    MOV   A,0x0
    0C49: 08       PUSH  A
    0C4A: 50 1F    MOV   A,0x1F
    0C4C: 08       PUSH  A
    0C4D: 7C 13 40 LCALL _ControlServo
(0243) 				
(0244) 				Delay(1000);
    0C50: 50 03    MOV   A,0x3
    0C52: 08       PUSH  A
    0C53: 50 E8    MOV   A,0xE8
    0C55: 08       PUSH  A
    0C56: 91 53    CALL  _Delay
    0C58: 38 FC    ADD   SP,0xFC
(0245) 				vaihe = 1;
    0C5A: 55 1B 01 MOV   [vaihe+1],0x1
    0C5D: 55 1A 00 MOV   [vaihe],0x0
(0246) 		}
(0247) 		
(0248) 		//Mustat miehet
(0249) 		if(kaannokset >= maxKaannokset && vaihe == 1)
    0C60: 51 15    MOV   A,[kaannokset+1]
    0C62: 12 17    SUB   A,[maxKaannokset+1]
    0C64: 51 16    MOV   A,[maxKaannokset]
    0C66: 31 80    XOR   A,0x80
    0C68: 53 2C    MOV   [__rX],A
    0C6A: 51 14    MOV   A,[kaannokset]
    0C6C: 31 80    XOR   A,0x80
    0C6E: 1A 2C    SBB   A,[__rX]
    0C70: C0 17    JC    0x0C88
    0C72: 3C 1A 00 CMP   [vaihe],0x0
    0C75: B0 12    JNZ   0x0C88
    0C77: 3C 1B 01 CMP   [vaihe+1],0x1
    0C7A: B0 0D    JNZ   0x0C88
(0250) 		{
(0251) 			blackLineCounter = 0;
    0C7C: 55 0F 00 MOV   [blackLineCounter+1],0x0
    0C7F: 55 0E 00 MOV   [blackLineCounter],0x0
(0252) 			vaihe = 3;
    0C82: 55 1B 03 MOV   [vaihe+1],0x3
    0C85: 55 1A 00 MOV   [vaihe],0x0
(0253) 		}
(0254) 		
(0255) 		//if (vaihe == 3 && blackLineCounter > 0 && blackLineCounter <= 2) //&&vaihe == 3
(0256) 			//vaihe = 4;
(0257) 		
(0258) 		if (vaihe == 3)
    0C88: 3C 1A 00 CMP   [vaihe],0x0
    0C8B: B0 48    JNZ   0x0CD4
    0C8D: 3C 1B 03 CMP   [vaihe+1],0x3
    0C90: B0 43    JNZ   0x0CD4
(0259) 		{
(0260) 			if (once == 0)
    0C92: 3C 10 00 CMP   [once],0x0
    0C95: B0 1E    JNZ   0x0CB4
    0C97: 3C 11 00 CMP   [once+1],0x0
    0C9A: B0 19    JNZ   0x0CB4
(0261) 			{	
(0262) 				once = 1;
    0C9C: 55 11 01 MOV   [once+1],0x1
    0C9F: 55 10 00 MOV   [once],0x0
(0263) 				MoveForward(100);
    0CA2: 50 00    MOV   A,0x0
    0CA4: 08       PUSH  A
    0CA5: 50 64    MOV   A,0x64
    0CA7: 08       PUSH  A
    0CA8: 7C 0E 01 LCALL _MoveForward
    0CAB: 38 FE    ADD   SP,0xFE
(0264) 				Delay10msTimes(5);
    0CAD: 10       PUSH  X
    0CAE: 50 05    MOV   A,0x5
    0CB0: 7C 08 50 LCALL __UserModules_end|Delay10msTimes|__text_start|_Delay10msTimes
    0CB3: 20       POP   X
(0265) 			}
(0266) 			MoveForward(50);
    0CB4: 50 00    MOV   A,0x0
    0CB6: 08       PUSH  A
    0CB7: 50 32    MOV   A,0x32
    0CB9: 08       PUSH  A
    0CBA: 7C 0E 01 LCALL _MoveForward
    0CBD: 38 FE    ADD   SP,0xFE
(0267) 		
(0268) 			if (blackLineCounter >= 4)
    0CBF: 51 0F    MOV   A,[blackLineCounter+1]
    0CC1: 11 04    SUB   A,0x4
    0CC3: 51 0E    MOV   A,[blackLineCounter]
    0CC5: 31 80    XOR   A,0x80
    0CC7: 19 80    SBB   A,0x80
    0CC9: C0 0A    JC    0x0CD4
(0269) 			{
(0270) 				Stop(); 
    0CCB: 7C 12 6E LCALL _Stop
(0271) 				vaihe = 5; 
    0CCE: 55 1B 05 MOV   [vaihe+1],0x5
    0CD1: 55 1A 00 MOV   [vaihe],0x0
(0272) 			}
(0273) 		}
(0274) 		
(0275) 	}
    0CD4: 8B D5    JMP   0x08AA
    0CD6: 8F FF    JMP   0x0CD6
(0276) }
(0277) 
(0278) void CheckLeft(void)
(0279) {
(0280) 	ControlServo(SERVO_LEFT);
_CheckLeft:
    0CD8: 50 00    MOV   A,0x0
    0CDA: 08       PUSH  A
    0CDB: 50 32    MOV   A,0x32
    0CDD: 08       PUSH  A
    0CDE: 7C 13 40 LCALL _ControlServo
    0CE1: 38 FE    ADD   SP,0xFE
(0281) 	Delay10msTimes(25);
    0CE3: 10       PUSH  X
    0CE4: 50 19    MOV   A,0x19
    0CE6: 7C 08 50 LCALL __UserModules_end|Delay10msTimes|__text_start|_Delay10msTimes
    0CE9: 20       POP   X
(0282) 	sendTrigPulse(&ultraData);
    0CEA: 50 00    MOV   A,0x0
    0CEC: 08       PUSH  A
    0CED: 50 24    MOV   A,0x24
    0CEF: 08       PUSH  A
    0CF0: 7C 13 20 LCALL _sendTrigPulse
    0CF3: 38 FE    ADD   SP,0xFE
    0CF5: 7F       RET   
(0283) }
(0284) 
(0285) void CheckRight(void)
(0286) {
(0287) 	ControlServo(SERVO_RIGHT);
_CheckRight:
    0CF6: 50 00    MOV   A,0x0
    0CF8: 08       PUSH  A
    0CF9: 50 11    MOV   A,0x11
    0CFB: 08       PUSH  A
    0CFC: 7C 13 40 LCALL _ControlServo
    0CFF: 38 FE    ADD   SP,0xFE
(0288) 	Delay10msTimes(25);
    0D01: 10       PUSH  X
    0D02: 50 19    MOV   A,0x19
    0D04: 7C 08 50 LCALL __UserModules_end|Delay10msTimes|__text_start|_Delay10msTimes
    0D07: 20       POP   X
(0289) 	sendTrigPulse(&ultraData);
    0D08: 50 00    MOV   A,0x0
    0D0A: 08       PUSH  A
    0D0B: 50 24    MOV   A,0x24
    0D0D: 08       PUSH  A
    0D0E: 7C 13 20 LCALL _sendTrigPulse
    0D11: 38 FE    ADD   SP,0xFE
    0D13: 7F       RET   
(0290) }
(0291) 
(0292) //Palauttaa eerolle millisekunnit siitä asti ku psoc on käynnistytnyt
(0293) //Kutsutaan joka 0.001s = 1ms välein.
(0294) void TimerInterrupt(void)
(0295) {
(0296)   timeT++;
_TimerInterrupt:
    0D14: 76 01    INC   [timeT+1]
    0D16: 0E 00 00 ADC   [timeT],0x0
(0297) 	
(0298)   //DO NOT TOUCH
(0299)   milliT++;
    0D19: 06 09 01 ADD   [milliT+3],0x1
    0D1C: 0E 08 00 ADC   [milliT+2],0x0
    0D1F: 0E 07 00 ADC   [milliT+1],0x0
    0D22: 0E 06 00 ADC   [milliT],0x0
(0300) 	
(0301) 	//Linefinder START
(0302) 	
(0303) 	if ((LineFinder_Data_ADDR & LineFinder_MASK) && (onBlackLine == 0)) {
    0D25: 5D 00    MOV   A,REG[0x0]
    0D27: 53 38    MOV   [__r0],A
    0D29: 47 38 20 TST   [__r0],0x20
    0D2C: A0 18    JZ    0x0D45
    0D2E: 3C 0C 00 CMP   [onBlackLine],0x0
    0D31: B0 13    JNZ   0x0D45
    0D33: 3C 0D 00 CMP   [onBlackLine+1],0x0
    0D36: B0 0E    JNZ   0x0D45
(0304) 		onBlackLine = 1;
    0D38: 55 0D 01 MOV   [onBlackLine+1],0x1
    0D3B: 55 0C 00 MOV   [onBlackLine],0x0
(0305) 		blackLineCounter++;
    0D3E: 76 0F    INC   [blackLineCounter+1]
    0D40: 0E 0E 00 ADC   [blackLineCounter],0x0
(0306) 	} else if (!(LineFinder_Data_ADDR & LineFinder_MASK)) { // tänne vaan jos EI olla mustalla viivalla atm
    0D43: 80 10    JMP   0x0D54
    0D45: 5D 00    MOV   A,REG[0x0]
    0D47: 53 38    MOV   [__r0],A
    0D49: 47 38 20 TST   [__r0],0x20
    0D4C: B0 07    JNZ   0x0D54
(0307) 		onBlackLine = 0;
    0D4E: 55 0D 00 MOV   [onBlackLine+1],0x0
    0D51: 55 0C 00 MOV   [onBlackLine],0x0
(0308) 	}
    0D54: 7F       RET   
(0309) 	//LineFinder STOP
(0310) }
(0311) 
(0312) 
(0313) 
(0314) //Counter INTERRUPT
(0315) void CounterISR(void)
(0316) {
(0317)   	ultraData++;
_CounterISR:
    0D55: 76 25    INC   [ultraData+1]
    0D57: 0E 24 00 ADC   [ultraData],0x0
    0D5A: 7F       RET   
(0318) }
(0319) 
(0320) // Pin interrupt
(0321) void PinInterrupt(void){}
_PinInterrupt:
    0D5B: 08       PUSH  A
    0D5C: 18       POP   A
    0D5D: 7E       RETI  
(0322) 
(0323) 
(0324) 
(0325) 
(0326) 
(0327) //For Testing
(0328) void TestLoop(void)
(0329) {
_TestLoop:
    0D5E: 80 49    JMP   0x0DA8
(0330) 	while(1)
(0331) 	{	
(0332) 		ControlServo(SERVO_LEFT);
    0D60: 50 00    MOV   A,0x0
    0D62: 08       PUSH  A
    0D63: 50 32    MOV   A,0x32
    0D65: 08       PUSH  A
    0D66: 7C 13 40 LCALL _ControlServo
    0D69: 38 FE    ADD   SP,0xFE
(0333) 		Delay10msTimes(250);
    0D6B: 10       PUSH  X
    0D6C: 50 FA    MOV   A,0xFA
    0D6E: 7C 08 50 LCALL __UserModules_end|Delay10msTimes|__text_start|_Delay10msTimes
    0D71: 20       POP   X
(0334) 		ControlServo(SERVO_MIDDLE_FROM_LEFT);
    0D72: 50 00    MOV   A,0x0
    0D74: 08       PUSH  A
    0D75: 50 22    MOV   A,0x22
    0D77: 08       PUSH  A
    0D78: 7C 13 40 LCALL _ControlServo
    0D7B: 38 FE    ADD   SP,0xFE
(0335) 		Delay10msTimes(250);
    0D7D: 10       PUSH  X
    0D7E: 50 FA    MOV   A,0xFA
    0D80: 7C 08 50 LCALL __UserModules_end|Delay10msTimes|__text_start|_Delay10msTimes
    0D83: 20       POP   X
(0336) 		ControlServo(SERVO_RIGHT);
    0D84: 50 00    MOV   A,0x0
    0D86: 08       PUSH  A
    0D87: 50 11    MOV   A,0x11
    0D89: 08       PUSH  A
    0D8A: 7C 13 40 LCALL _ControlServo
    0D8D: 38 FE    ADD   SP,0xFE
(0337) 		Delay10msTimes(250);
    0D8F: 10       PUSH  X
    0D90: 50 FA    MOV   A,0xFA
    0D92: 7C 08 50 LCALL __UserModules_end|Delay10msTimes|__text_start|_Delay10msTimes
    0D95: 20       POP   X
(0338) 		ControlServo(SERVO_MIDDLE_FROM_RIGHT);
    0D96: 50 00    MOV   A,0x0
    0D98: 08       PUSH  A
    0D99: 50 1F    MOV   A,0x1F
    0D9B: 08       PUSH  A
    0D9C: 7C 13 40 LCALL _ControlServo
    0D9F: 38 FE    ADD   SP,0xFE
(0339) 		Delay10msTimes(250);		
    0DA1: 10       PUSH  X
    0DA2: 50 FA    MOV   A,0xFA
    0DA4: 7C 08 50 LCALL __UserModules_end|Delay10msTimes|__text_start|_Delay10msTimes
    0DA7: 20       POP   X
(0340) 		
(0341) 		
(0342) 		
(0343) //		TurnRight(TURN_SPEED);
(0344) //		Delay10msTimes(75);
(0345) //		
(0346) //		Stop();
(0347) //		Delay10msTimes(250);
(0348) //		
(0349) //		TurnLeft(TURN_SPEED);
(0350) //		Delay10msTimes(75);
(0351) //		
(0352) //		Stop();
(0353) //		Delay10msTimes(250);
(0354) 		
(0355) 		/*sendTrigPulse(&ultraData);
(0356) 		
(0357) 		distanceCM = ultraData * 2;		
(0358) 	
(0359) 		itoa(buffer,distanceCM,10);
(0360) 		LCD_Position(0,0);
(0361) 		LCD_PrCString("     ");
(0362) 		LCD_Position(0,0);
(0363) 		LCD_PrString(buffer);
(0364) 		*/		
(0365) 	}
    0DA8: 8F B7    JMP   0x0D60
    0DAA: 7F       RET   
(0366) }
(0367) 
(0368) ////OMA Delay function 
(0369) void Delay(int delay)
(0370) {
_Delay:
  timme                --> X+0
  delay                --> X-5
    0DAB: 10       PUSH  X
    0DAC: 4F       MOV   X,SP
    0DAD: 38 04    ADD   SP,0x4
(0371) 	unsigned long int timme = milliT + delay;
    0DAF: 52 FC    MOV   A,[X-4]
    0DB1: 53 35    MOV   [__r3],A
    0DB3: 52 FB    MOV   A,[X-5]
    0DB5: 53 36    MOV   [__r2],A
    0DB7: 47 36 80 TST   [__r2],0x80
    0DBA: A0 09    JZ    0x0DC4
    0DBC: 55 37 FF MOV   [__r1],0xFF
    0DBF: 55 38 FF MOV   [__r0],0xFF
    0DC2: 80 07    JMP   0x0DCA
    0DC4: 55 37 00 MOV   [__r1],0x0
    0DC7: 55 38 00 MOV   [__r0],0x0
    0DCA: 51 09    MOV   A,[milliT+3]
    0DCC: 02 35    ADD   A,[__r3]
    0DCE: 54 03    MOV   [X+3],A
    0DD0: 51 08    MOV   A,[milliT+2]
    0DD2: 0A 36    ADC   A,[__r2]
    0DD4: 54 02    MOV   [X+2],A
    0DD6: 51 07    MOV   A,[milliT+1]
    0DD8: 0A 37    ADC   A,[__r1]
    0DDA: 54 01    MOV   [X+1],A
    0DDC: 51 06    MOV   A,[milliT]
    0DDE: 0A 38    ADC   A,[__r0]
    0DE0: 54 00    MOV   [X+0],A
(0372) 	while (milliT < timme){}
    0DE2: 51 09    MOV   A,[milliT+3]
    0DE4: 13 03    SUB   A,[X+3]
    0DE6: 51 08    MOV   A,[milliT+2]
    0DE8: 1B 02    SBB   A,[X+2]
    0DEA: 51 07    MOV   A,[milliT+1]
    0DEC: 1B 01    SBB   A,[X+1]
    0DEE: 51 06    MOV   A,[milliT]
    0DF0: 1B 00    SBB   A,[X+0]
    0DF2: CF EF    JC    0x0DE2
    0DF4: 38 FC    ADD   SP,0xFC
    0DF6: 20       POP   X
    0DF7: 7F       RET   
FILE: Z:\robotti\Robor7\ROBOTT~1\ROBOTT~1\motorcontrol.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) 
(0004) #define BACKWARD 	0b00000101; // Molemmat Eteen
(0005) #define FORWARD 	0b00001010; //Molemmat Taakse
(0006) #define LEFTBRIGHTF 0b00001001; // Vasen Eteen Oikea Taakse
(0007) #define LEFTFRIGHTB 0b00000110; // Vasen Taakse Oikea Eteen
(0008) #define NOLLAA 		0b11110000;		//Molemmat C/D pinnit 0
(0009) 
(0010) //Porttien osoitteet
(0011) //Port1_0 LEFTC      C = 1, D = 0 FORWARD
(0012) //Port1_1 LEFTD		 C = 0, D = 1 BACKWARD 
(0013) //Port1_2 RIGHTC
(0014) //Port1_3 RIGHTD
(0015) 
(0016) //Voi joutua korjaamaan
(0017) const float OIKEUSKERROIN = 0.90f; //Kerroin nopeammalle puolelle jotta robotti kulkisi suoraan
(0018) 
(0019) //Käynnistää PWM Moduulit
(0020) void InitPWM(void)
(0021) {
(0022) 	PWM8_VASEN_Start();
_InitPWM:
    0DF8: 10       PUSH  X
    0DF9: 7C 04 08 LCALL _PWM8_VASEN_Start
(0023) 	PWM8_OIKEA_Start();
    0DFC: 7C 04 A4 LCALL _PWM8_OIKEA_Start
    0DFF: 20       POP   X
    0E00: 7F       RET   
(0024) 	
(0025) 	//Port1_Data_ADDR = LEFTC_Data_ADDR;
(0026) 	//Port1_Data_ADDR &= NOLLAA;
(0027) }
(0028) 
(0029) //Kulkee eteenpäin arvolla..
(0030) void MoveForward(int pulse)
(0031) {				
_MoveForward:
  pulse                --> X-5
    0E01: 10       PUSH  X
    0E02: 4F       MOV   X,SP
    0E03: 38 02    ADD   SP,0x2
(0032) 	LEFTC_Data_ADDR &= NOLLAA;
    0E05: 41 04 F0 AND   REG[0x4],0xF0
(0033) 	LEFTC_Data_ADDR |= FORWARD;
    0E08: 43 04 0A OR    REG[0x4],0xA
(0034) 	
(0035) 	PWM8_VASEN_WritePulseWidth((BYTE)pulse);
    0E0B: 52 FC    MOV   A,[X-4]
    0E0D: 10       PUSH  X
    0E0E: 7C 04 13 LCALL _PWM8_VASEN_WritePulseWidth
    0E11: 20       POP   X
(0036) 	PWM8_OIKEA_WritePulseWidth((BYTE)(pulse * OIKEUSKERROIN));
    0E12: 55 37 5B MOV   [__r1],0x5B
    0E15: 50 01    MOV   A,0x1
    0E17: 10       PUSH  X
    0E18: 58 37    MOV   X,[__r1]
    0E1A: 08       PUSH  A
    0E1B: 28       ROMX  
    0E1C: 53 38    MOV   [__r0],A
    0E1E: 18       POP   A
    0E1F: 75       INC   X
    0E20: 09 00    ADC   A,0x0
    0E22: 08       PUSH  A
    0E23: 28       ROMX  
    0E24: 53 37    MOV   [__r1],A
    0E26: 18       POP   A
    0E27: 75       INC   X
    0E28: 09 00    ADC   A,0x0
    0E2A: 08       PUSH  A
    0E2B: 28       ROMX  
    0E2C: 53 36    MOV   [__r2],A
    0E2E: 18       POP   A
    0E2F: 75       INC   X
    0E30: 09 00    ADC   A,0x0
    0E32: 28       ROMX  
    0E33: 53 35    MOV   [__r3],A
    0E35: 20       POP   X
    0E36: 52 FC    MOV   A,[X-4]
    0E38: 53 31    MOV   [__r7],A
    0E3A: 52 FB    MOV   A,[X-5]
    0E3C: 53 32    MOV   [__r6],A
    0E3E: 47 32 80 TST   [__r6],0x80
    0E41: A0 09    JZ    0x0E4B
    0E43: 55 33 FF MOV   [__r5],0xFF
    0E46: 55 34 FF MOV   [__r4],0xFF
    0E49: 80 07    JMP   0x0E51
    0E4B: 55 33 00 MOV   [__r5],0x0
    0E4E: 55 34 00 MOV   [__r4],0x0
    0E51: 51 34    MOV   A,[__r4]
    0E53: 08       PUSH  A
    0E54: 51 33    MOV   A,[__r5]
    0E56: 08       PUSH  A
    0E57: 51 32    MOV   A,[__r6]
    0E59: 08       PUSH  A
    0E5A: 51 31    MOV   A,[__r7]
    0E5C: 08       PUSH  A
    0E5D: 7C 17 2F LCALL 0x172F
    0E60: 18       POP   A
    0E61: 53 31    MOV   [__r7],A
    0E63: 18       POP   A
    0E64: 53 32    MOV   [__r6],A
    0E66: 18       POP   A
    0E67: 53 33    MOV   [__r5],A
    0E69: 18       POP   A
    0E6A: 53 34    MOV   [__r4],A
    0E6C: 51 38    MOV   A,[__r0]
    0E6E: 08       PUSH  A
    0E6F: 51 37    MOV   A,[__r1]
    0E71: 08       PUSH  A
    0E72: 51 36    MOV   A,[__r2]
    0E74: 08       PUSH  A
    0E75: 51 35    MOV   A,[__r3]
    0E77: 08       PUSH  A
    0E78: 51 34    MOV   A,[__r4]
    0E7A: 08       PUSH  A
    0E7B: 51 33    MOV   A,[__r5]
    0E7D: 08       PUSH  A
    0E7E: 51 32    MOV   A,[__r6]
    0E80: 08       PUSH  A
    0E81: 51 31    MOV   A,[__r7]
    0E83: 08       PUSH  A
    0E84: 7C 15 9D LCALL 0x159D
    0E87: 18       POP   A
    0E88: 53 35    MOV   [__r3],A
    0E8A: 18       POP   A
    0E8B: 53 36    MOV   [__r2],A
    0E8D: 18       POP   A
    0E8E: 53 37    MOV   [__r1],A
    0E90: 18       POP   A
    0E91: 53 38    MOV   [__r0],A
    0E93: 38 FC    ADD   SP,0xFC
    0E95: 50 47    MOV   A,0x47
    0E97: 08       PUSH  A
    0E98: 50 00    MOV   A,0x0
    0E9A: 08       PUSH  A
    0E9B: 08       PUSH  A
    0E9C: 08       PUSH  A
    0E9D: 51 38    MOV   A,[__r0]
    0E9F: 08       PUSH  A
    0EA0: 51 37    MOV   A,[__r1]
    0EA2: 08       PUSH  A
    0EA3: 51 36    MOV   A,[__r2]
    0EA5: 08       PUSH  A
    0EA6: 51 35    MOV   A,[__r3]
    0EA8: 08       PUSH  A
    0EA9: 7C 15 4F LCALL 0x154F
    0EAC: 38 F8    ADD   SP,0xF8
    0EAE: 39 FF    CMP   A,0xFF
    0EB0: A0 47    JZ    0x0EF8
    0EB2: 50 47    MOV   A,0x47
    0EB4: 08       PUSH  A
    0EB5: 50 00    MOV   A,0x0
    0EB7: 08       PUSH  A
    0EB8: 08       PUSH  A
    0EB9: 08       PUSH  A
    0EBA: 51 38    MOV   A,[__r0]
    0EBC: 08       PUSH  A
    0EBD: 51 37    MOV   A,[__r1]
    0EBF: 08       PUSH  A
    0EC0: 51 36    MOV   A,[__r2]
    0EC2: 08       PUSH  A
    0EC3: 51 35    MOV   A,[__r3]
    0EC5: 08       PUSH  A
    0EC6: 7C 16 C1 LCALL 0x16C1
    0EC9: 18       POP   A
    0ECA: 53 31    MOV   [__r7],A
    0ECC: 18       POP   A
    0ECD: 53 32    MOV   [__r6],A
    0ECF: 18       POP   A
    0ED0: 53 33    MOV   [__r5],A
    0ED2: 18       POP   A
    0ED3: 38 FC    ADD   SP,0xFC
    0ED5: 08       PUSH  A
    0ED6: 51 33    MOV   A,[__r5]
    0ED8: 08       PUSH  A
    0ED9: 51 32    MOV   A,[__r6]
    0EDB: 08       PUSH  A
    0EDC: 51 31    MOV   A,[__r7]
    0EDE: 08       PUSH  A
    0EDF: 7C 13 58 LCALL 0x1358
    0EE2: 18       POP   A
    0EE3: 53 33    MOV   [__r5],A
    0EE5: 18       POP   A
    0EE6: 53 34    MOV   [__r4],A
    0EE8: 38 FE    ADD   SP,0xFE
    0EEA: 51 33    MOV   A,[__r5]
    0EEC: 01 00    ADD   A,0x0
    0EEE: 54 01    MOV   [X+1],A
    0EF0: 51 34    MOV   A,[__r4]
    0EF2: 09 80    ADC   A,0x80
    0EF4: 54 00    MOV   [X+0],A
    0EF6: 80 20    JMP   0x0F17
    0EF8: 51 38    MOV   A,[__r0]
    0EFA: 08       PUSH  A
    0EFB: 51 37    MOV   A,[__r1]
    0EFD: 08       PUSH  A
    0EFE: 51 36    MOV   A,[__r2]
    0F00: 08       PUSH  A
    0F01: 51 35    MOV   A,[__r3]
    0F03: 08       PUSH  A
    0F04: 7C 13 58 LCALL 0x1358
    0F07: 18       POP   A
    0F08: 53 37    MOV   [__r1],A
    0F0A: 18       POP   A
    0F0B: 53 38    MOV   [__r0],A
    0F0D: 38 FE    ADD   SP,0xFE
    0F0F: 51 37    MOV   A,[__r1]
    0F11: 54 01    MOV   [X+1],A
    0F13: 51 38    MOV   A,[__r0]
    0F15: 54 00    MOV   [X+0],A
    0F17: 52 01    MOV   A,[X+1]
    0F19: 10       PUSH  X
    0F1A: 7C 04 AF LCALL _PWM8_OIKEA_WritePulseWidth
    0F1D: 20       POP   X
    0F1E: 38 FE    ADD   SP,0xFE
    0F20: 20       POP   X
    0F21: 7F       RET   
FILE: Z:\robotti\Robor7\ROBOTT~1\ROBOTT~1\motorcontrol.c
(0041) {				
_MoveForward2:
  kerroinOikea         --> X-13
  kerroinVasen         --> X-9
  pulse                --> X-5
    0F22: 10       PUSH  X
    0F23: 4F       MOV   X,SP
    0F24: 38 04    ADD   SP,0x4
(0042) 	LEFTC_Data_ADDR &= NOLLAA;
    0F26: 41 04 F0 AND   REG[0x4],0xF0
(0043) 	LEFTC_Data_ADDR |= FORWARD;
    0F29: 43 04 0A OR    REG[0x4],0xA
(0044) 
(0045) 	PWM8_VASEN_WritePulseWidth((BYTE)(pulse * kerroinVasen));
    0F2C: 52 FC    MOV   A,[X-4]
    0F2E: 53 35    MOV   [__r3],A
    0F30: 52 FB    MOV   A,[X-5]
    0F32: 53 36    MOV   [__r2],A
    0F34: 47 36 80 TST   [__r2],0x80
    0F37: A0 09    JZ    0x0F41
    0F39: 55 37 FF MOV   [__r1],0xFF
    0F3C: 55 38 FF MOV   [__r0],0xFF
    0F3F: 80 07    JMP   0x0F47
    0F41: 55 37 00 MOV   [__r1],0x0
    0F44: 55 38 00 MOV   [__r0],0x0
    0F47: 51 38    MOV   A,[__r0]
    0F49: 08       PUSH  A
    0F4A: 51 37    MOV   A,[__r1]
    0F4C: 08       PUSH  A
    0F4D: 51 36    MOV   A,[__r2]
    0F4F: 08       PUSH  A
    0F50: 51 35    MOV   A,[__r3]
    0F52: 08       PUSH  A
    0F53: 7C 17 2F LCALL 0x172F
    0F56: 18       POP   A
    0F57: 53 35    MOV   [__r3],A
    0F59: 18       POP   A
    0F5A: 53 36    MOV   [__r2],A
    0F5C: 18       POP   A
    0F5D: 53 37    MOV   [__r1],A
    0F5F: 18       POP   A
    0F60: 53 38    MOV   [__r0],A
    0F62: 52 F7    MOV   A,[X-9]
    0F64: 08       PUSH  A
    0F65: 52 F8    MOV   A,[X-8]
    0F67: 08       PUSH  A
    0F68: 52 F9    MOV   A,[X-7]
    0F6A: 08       PUSH  A
    0F6B: 52 FA    MOV   A,[X-6]
    0F6D: 08       PUSH  A
    0F6E: 51 38    MOV   A,[__r0]
    0F70: 08       PUSH  A
    0F71: 51 37    MOV   A,[__r1]
    0F73: 08       PUSH  A
    0F74: 51 36    MOV   A,[__r2]
    0F76: 08       PUSH  A
    0F77: 51 35    MOV   A,[__r3]
    0F79: 08       PUSH  A
    0F7A: 7C 15 9D LCALL 0x159D
    0F7D: 18       POP   A
    0F7E: 53 35    MOV   [__r3],A
    0F80: 18       POP   A
    0F81: 53 36    MOV   [__r2],A
    0F83: 18       POP   A
    0F84: 53 37    MOV   [__r1],A
    0F86: 18       POP   A
    0F87: 53 38    MOV   [__r0],A
    0F89: 38 FC    ADD   SP,0xFC
    0F8B: 50 47    MOV   A,0x47
    0F8D: 08       PUSH  A
    0F8E: 50 00    MOV   A,0x0
    0F90: 08       PUSH  A
    0F91: 08       PUSH  A
    0F92: 08       PUSH  A
    0F93: 51 38    MOV   A,[__r0]
    0F95: 08       PUSH  A
    0F96: 51 37    MOV   A,[__r1]
    0F98: 08       PUSH  A
    0F99: 51 36    MOV   A,[__r2]
    0F9B: 08       PUSH  A
    0F9C: 51 35    MOV   A,[__r3]
    0F9E: 08       PUSH  A
    0F9F: 7C 15 4F LCALL 0x154F
    0FA2: 38 F8    ADD   SP,0xF8
    0FA4: 39 FF    CMP   A,0xFF
    0FA6: A0 47    JZ    0x0FEE
    0FA8: 50 47    MOV   A,0x47
    0FAA: 08       PUSH  A
    0FAB: 50 00    MOV   A,0x0
    0FAD: 08       PUSH  A
    0FAE: 08       PUSH  A
    0FAF: 08       PUSH  A
    0FB0: 51 38    MOV   A,[__r0]
    0FB2: 08       PUSH  A
    0FB3: 51 37    MOV   A,[__r1]
    0FB5: 08       PUSH  A
    0FB6: 51 36    MOV   A,[__r2]
    0FB8: 08       PUSH  A
    0FB9: 51 35    MOV   A,[__r3]
    0FBB: 08       PUSH  A
    0FBC: 7C 16 C1 LCALL 0x16C1
    0FBF: 18       POP   A
    0FC0: 53 31    MOV   [__r7],A
    0FC2: 18       POP   A
    0FC3: 53 32    MOV   [__r6],A
    0FC5: 18       POP   A
    0FC6: 53 33    MOV   [__r5],A
    0FC8: 18       POP   A
    0FC9: 38 FC    ADD   SP,0xFC
    0FCB: 08       PUSH  A
    0FCC: 51 33    MOV   A,[__r5]
    0FCE: 08       PUSH  A
    0FCF: 51 32    MOV   A,[__r6]
    0FD1: 08       PUSH  A
    0FD2: 51 31    MOV   A,[__r7]
    0FD4: 08       PUSH  A
    0FD5: 7C 13 58 LCALL 0x1358
    0FD8: 18       POP   A
    0FD9: 53 33    MOV   [__r5],A
    0FDB: 18       POP   A
    0FDC: 53 34    MOV   [__r4],A
    0FDE: 38 FE    ADD   SP,0xFE
    0FE0: 51 33    MOV   A,[__r5]
    0FE2: 01 00    ADD   A,0x0
    0FE4: 54 01    MOV   [X+1],A
    0FE6: 51 34    MOV   A,[__r4]
    0FE8: 09 80    ADC   A,0x80
    0FEA: 54 00    MOV   [X+0],A
    0FEC: 80 20    JMP   0x100D
    0FEE: 51 38    MOV   A,[__r0]
    0FF0: 08       PUSH  A
    0FF1: 51 37    MOV   A,[__r1]
    0FF3: 08       PUSH  A
    0FF4: 51 36    MOV   A,[__r2]
    0FF6: 08       PUSH  A
    0FF7: 51 35    MOV   A,[__r3]
    0FF9: 08       PUSH  A
    0FFA: 7C 13 58 LCALL 0x1358
    0FFD: 18       POP   A
    0FFE: 53 37    MOV   [__r1],A
    1000: 18       POP   A
    1001: 53 38    MOV   [__r0],A
    1003: 38 FE    ADD   SP,0xFE
    1005: 51 37    MOV   A,[__r1]
    1007: 54 01    MOV   [X+1],A
    1009: 51 38    MOV   A,[__r0]
    100B: 54 00    MOV   [X+0],A
    100D: 52 01    MOV   A,[X+1]
    100F: 10       PUSH  X
    1010: 7C 04 13 LCALL _PWM8_VASEN_WritePulseWidth
    1013: 20       POP   X
(0046) 	PWM8_OIKEA_WritePulseWidth((BYTE)(pulse * kerroinOikea * OIKEUSKERROIN));
    1014: 55 37 5B MOV   [__r1],0x5B
    1017: 50 01    MOV   A,0x1
    1019: 10       PUSH  X
    101A: 58 37    MOV   X,[__r1]
    101C: 08       PUSH  A
    101D: 28       ROMX  
    101E: 53 38    MOV   [__r0],A
    1020: 18       POP   A
    1021: 75       INC   X
    1022: 09 00    ADC   A,0x0
    1024: 08       PUSH  A
    1025: 28       ROMX  
    1026: 53 37    MOV   [__r1],A
    1028: 18       POP   A
    1029: 75       INC   X
    102A: 09 00    ADC   A,0x0
    102C: 08       PUSH  A
    102D: 28       ROMX  
    102E: 53 36    MOV   [__r2],A
    1030: 18       POP   A
    1031: 75       INC   X
    1032: 09 00    ADC   A,0x0
    1034: 28       ROMX  
    1035: 53 35    MOV   [__r3],A
    1037: 20       POP   X
    1038: 52 FC    MOV   A,[X-4]
    103A: 53 31    MOV   [__r7],A
    103C: 52 FB    MOV   A,[X-5]
    103E: 53 32    MOV   [__r6],A
    1040: 47 32 80 TST   [__r6],0x80
    1043: A0 09    JZ    0x104D
    1045: 55 33 FF MOV   [__r5],0xFF
    1048: 55 34 FF MOV   [__r4],0xFF
    104B: 80 07    JMP   0x1053
    104D: 55 33 00 MOV   [__r5],0x0
    1050: 55 34 00 MOV   [__r4],0x0
    1053: 51 34    MOV   A,[__r4]
    1055: 08       PUSH  A
    1056: 51 33    MOV   A,[__r5]
    1058: 08       PUSH  A
    1059: 51 32    MOV   A,[__r6]
    105B: 08       PUSH  A
    105C: 51 31    MOV   A,[__r7]
    105E: 08       PUSH  A
    105F: 7C 17 2F LCALL 0x172F
    1062: 18       POP   A
    1063: 53 31    MOV   [__r7],A
    1065: 18       POP   A
    1066: 53 32    MOV   [__r6],A
    1068: 18       POP   A
    1069: 53 33    MOV   [__r5],A
    106B: 18       POP   A
    106C: 53 34    MOV   [__r4],A
    106E: 52 F3    MOV   A,[X-13]
    1070: 08       PUSH  A
    1071: 52 F4    MOV   A,[X-12]
    1073: 08       PUSH  A
    1074: 52 F5    MOV   A,[X-11]
    1076: 08       PUSH  A
    1077: 52 F6    MOV   A,[X-10]
    1079: 08       PUSH  A
    107A: 51 34    MOV   A,[__r4]
    107C: 08       PUSH  A
    107D: 51 33    MOV   A,[__r5]
    107F: 08       PUSH  A
    1080: 51 32    MOV   A,[__r6]
    1082: 08       PUSH  A
    1083: 51 31    MOV   A,[__r7]
    1085: 08       PUSH  A
    1086: 7C 15 9D LCALL 0x159D
    1089: 18       POP   A
    108A: 53 31    MOV   [__r7],A
    108C: 18       POP   A
    108D: 53 32    MOV   [__r6],A
    108F: 18       POP   A
    1090: 53 33    MOV   [__r5],A
    1092: 18       POP   A
    1093: 53 34    MOV   [__r4],A
    1095: 38 FC    ADD   SP,0xFC
    1097: 51 38    MOV   A,[__r0]
    1099: 08       PUSH  A
    109A: 51 37    MOV   A,[__r1]
    109C: 08       PUSH  A
    109D: 51 36    MOV   A,[__r2]
    109F: 08       PUSH  A
    10A0: 51 35    MOV   A,[__r3]
    10A2: 08       PUSH  A
    10A3: 51 34    MOV   A,[__r4]
    10A5: 08       PUSH  A
    10A6: 51 33    MOV   A,[__r5]
    10A8: 08       PUSH  A
    10A9: 51 32    MOV   A,[__r6]
    10AB: 08       PUSH  A
    10AC: 51 31    MOV   A,[__r7]
    10AE: 08       PUSH  A
    10AF: 7C 15 9D LCALL 0x159D
    10B2: 18       POP   A
    10B3: 53 35    MOV   [__r3],A
    10B5: 18       POP   A
    10B6: 53 36    MOV   [__r2],A
    10B8: 18       POP   A
    10B9: 53 37    MOV   [__r1],A
    10BB: 18       POP   A
    10BC: 53 38    MOV   [__r0],A
    10BE: 38 FC    ADD   SP,0xFC
    10C0: 50 47    MOV   A,0x47
    10C2: 08       PUSH  A
    10C3: 50 00    MOV   A,0x0
    10C5: 08       PUSH  A
    10C6: 08       PUSH  A
    10C7: 08       PUSH  A
    10C8: 51 38    MOV   A,[__r0]
    10CA: 08       PUSH  A
    10CB: 51 37    MOV   A,[__r1]
    10CD: 08       PUSH  A
    10CE: 51 36    MOV   A,[__r2]
    10D0: 08       PUSH  A
    10D1: 51 35    MOV   A,[__r3]
    10D3: 08       PUSH  A
    10D4: 7C 15 4F LCALL 0x154F
    10D7: 38 F8    ADD   SP,0xF8
    10D9: 39 FF    CMP   A,0xFF
    10DB: A0 47    JZ    0x1123
    10DD: 50 47    MOV   A,0x47
    10DF: 08       PUSH  A
    10E0: 50 00    MOV   A,0x0
    10E2: 08       PUSH  A
    10E3: 08       PUSH  A
    10E4: 08       PUSH  A
    10E5: 51 38    MOV   A,[__r0]
    10E7: 08       PUSH  A
    10E8: 51 37    MOV   A,[__r1]
    10EA: 08       PUSH  A
    10EB: 51 36    MOV   A,[__r2]
    10ED: 08       PUSH  A
    10EE: 51 35    MOV   A,[__r3]
    10F0: 08       PUSH  A
    10F1: 7C 16 C1 LCALL 0x16C1
    10F4: 18       POP   A
    10F5: 53 31    MOV   [__r7],A
    10F7: 18       POP   A
    10F8: 53 32    MOV   [__r6],A
    10FA: 18       POP   A
    10FB: 53 33    MOV   [__r5],A
    10FD: 18       POP   A
    10FE: 38 FC    ADD   SP,0xFC
    1100: 08       PUSH  A
    1101: 51 33    MOV   A,[__r5]
    1103: 08       PUSH  A
    1104: 51 32    MOV   A,[__r6]
    1106: 08       PUSH  A
    1107: 51 31    MOV   A,[__r7]
    1109: 08       PUSH  A
    110A: 7C 13 58 LCALL 0x1358
    110D: 18       POP   A
    110E: 53 33    MOV   [__r5],A
    1110: 18       POP   A
    1111: 53 34    MOV   [__r4],A
    1113: 38 FE    ADD   SP,0xFE
    1115: 51 33    MOV   A,[__r5]
    1117: 01 00    ADD   A,0x0
    1119: 54 03    MOV   [X+3],A
    111B: 51 34    MOV   A,[__r4]
    111D: 09 80    ADC   A,0x80
    111F: 54 02    MOV   [X+2],A
    1121: 80 20    JMP   0x1142
    1123: 51 38    MOV   A,[__r0]
    1125: 08       PUSH  A
    1126: 51 37    MOV   A,[__r1]
    1128: 08       PUSH  A
    1129: 51 36    MOV   A,[__r2]
    112B: 08       PUSH  A
    112C: 51 35    MOV   A,[__r3]
    112E: 08       PUSH  A
    112F: 7C 13 58 LCALL 0x1358
    1132: 18       POP   A
    1133: 53 37    MOV   [__r1],A
    1135: 18       POP   A
    1136: 53 38    MOV   [__r0],A
    1138: 38 FE    ADD   SP,0xFE
    113A: 51 37    MOV   A,[__r1]
    113C: 54 03    MOV   [X+3],A
    113E: 51 38    MOV   A,[__r0]
    1140: 54 02    MOV   [X+2],A
    1142: 52 03    MOV   A,[X+3]
    1144: 10       PUSH  X
    1145: 7C 04 AF LCALL _PWM8_OIKEA_WritePulseWidth
    1148: 20       POP   X
    1149: 38 FC    ADD   SP,0xFC
    114B: 20       POP   X
    114C: 7F       RET   
FILE: Z:\robotti\Robor7\ROBOTT~1\ROBOTT~1\motorcontrol.c
(0051) {
_MoveBackward:
  pulse                --> X-5
    114D: 10       PUSH  X
    114E: 4F       MOV   X,SP
    114F: 38 02    ADD   SP,0x2
(0052) 	LEFTC_Data_ADDR &= NOLLAA;
    1151: 41 04 F0 AND   REG[0x4],0xF0
(0053) 	LEFTC_Data_ADDR |= BACKWARD;
    1154: 43 04 05 OR    REG[0x4],0x5
(0054) 	
(0055) 	PWM8_VASEN_WritePulseWidth((BYTE)pulse);
    1157: 52 FC    MOV   A,[X-4]
    1159: 10       PUSH  X
    115A: 7C 04 13 LCALL _PWM8_VASEN_WritePulseWidth
    115D: 20       POP   X
(0056) 	PWM8_OIKEA_WritePulseWidth((BYTE)(pulse * OIKEUSKERROIN));
    115E: 55 37 5B MOV   [__r1],0x5B
    1161: 50 01    MOV   A,0x1
    1163: 10       PUSH  X
    1164: 58 37    MOV   X,[__r1]
    1166: 08       PUSH  A
    1167: 28       ROMX  
    1168: 53 38    MOV   [__r0],A
    116A: 18       POP   A
    116B: 75       INC   X
    116C: 09 00    ADC   A,0x0
    116E: 08       PUSH  A
    116F: 28       ROMX  
    1170: 53 37    MOV   [__r1],A
    1172: 18       POP   A
    1173: 75       INC   X
    1174: 09 00    ADC   A,0x0
    1176: 08       PUSH  A
    1177: 28       ROMX  
    1178: 53 36    MOV   [__r2],A
    117A: 18       POP   A
    117B: 75       INC   X
    117C: 09 00    ADC   A,0x0
    117E: 28       ROMX  
    117F: 53 35    MOV   [__r3],A
    1181: 20       POP   X
    1182: 52 FC    MOV   A,[X-4]
    1184: 53 31    MOV   [__r7],A
    1186: 52 FB    MOV   A,[X-5]
    1188: 53 32    MOV   [__r6],A
    118A: 47 32 80 TST   [__r6],0x80
    118D: A0 09    JZ    0x1197
    118F: 55 33 FF MOV   [__r5],0xFF
    1192: 55 34 FF MOV   [__r4],0xFF
    1195: 80 07    JMP   0x119D
    1197: 55 33 00 MOV   [__r5],0x0
    119A: 55 34 00 MOV   [__r4],0x0
    119D: 51 34    MOV   A,[__r4]
    119F: 08       PUSH  A
    11A0: 51 33    MOV   A,[__r5]
    11A2: 08       PUSH  A
    11A3: 51 32    MOV   A,[__r6]
    11A5: 08       PUSH  A
    11A6: 51 31    MOV   A,[__r7]
    11A8: 08       PUSH  A
    11A9: 7C 17 2F LCALL 0x172F
    11AC: 18       POP   A
    11AD: 53 31    MOV   [__r7],A
    11AF: 18       POP   A
    11B0: 53 32    MOV   [__r6],A
    11B2: 18       POP   A
    11B3: 53 33    MOV   [__r5],A
    11B5: 18       POP   A
    11B6: 53 34    MOV   [__r4],A
    11B8: 51 38    MOV   A,[__r0]
    11BA: 08       PUSH  A
    11BB: 51 37    MOV   A,[__r1]
    11BD: 08       PUSH  A
    11BE: 51 36    MOV   A,[__r2]
    11C0: 08       PUSH  A
    11C1: 51 35    MOV   A,[__r3]
    11C3: 08       PUSH  A
    11C4: 51 34    MOV   A,[__r4]
    11C6: 08       PUSH  A
    11C7: 51 33    MOV   A,[__r5]
    11C9: 08       PUSH  A
    11CA: 51 32    MOV   A,[__r6]
    11CC: 08       PUSH  A
    11CD: 51 31    MOV   A,[__r7]
    11CF: 08       PUSH  A
    11D0: 7C 15 9D LCALL 0x159D
    11D3: 18       POP   A
    11D4: 53 35    MOV   [__r3],A
    11D6: 18       POP   A
    11D7: 53 36    MOV   [__r2],A
    11D9: 18       POP   A
    11DA: 53 37    MOV   [__r1],A
    11DC: 18       POP   A
    11DD: 53 38    MOV   [__r0],A
    11DF: 38 FC    ADD   SP,0xFC
    11E1: 50 47    MOV   A,0x47
    11E3: 08       PUSH  A
    11E4: 50 00    MOV   A,0x0
    11E6: 08       PUSH  A
    11E7: 08       PUSH  A
    11E8: 08       PUSH  A
    11E9: 51 38    MOV   A,[__r0]
    11EB: 08       PUSH  A
    11EC: 51 37    MOV   A,[__r1]
    11EE: 08       PUSH  A
    11EF: 51 36    MOV   A,[__r2]
    11F1: 08       PUSH  A
    11F2: 51 35    MOV   A,[__r3]
    11F4: 08       PUSH  A
    11F5: 7C 15 4F LCALL 0x154F
    11F8: 38 F8    ADD   SP,0xF8
    11FA: 39 FF    CMP   A,0xFF
    11FC: A0 47    JZ    0x1244
    11FE: 50 47    MOV   A,0x47
    1200: 08       PUSH  A
    1201: 50 00    MOV   A,0x0
    1203: 08       PUSH  A
    1204: 08       PUSH  A
    1205: 08       PUSH  A
    1206: 51 38    MOV   A,[__r0]
    1208: 08       PUSH  A
    1209: 51 37    MOV   A,[__r1]
    120B: 08       PUSH  A
    120C: 51 36    MOV   A,[__r2]
    120E: 08       PUSH  A
    120F: 51 35    MOV   A,[__r3]
    1211: 08       PUSH  A
    1212: 7C 16 C1 LCALL 0x16C1
    1215: 18       POP   A
    1216: 53 31    MOV   [__r7],A
    1218: 18       POP   A
    1219: 53 32    MOV   [__r6],A
    121B: 18       POP   A
    121C: 53 33    MOV   [__r5],A
    121E: 18       POP   A
    121F: 38 FC    ADD   SP,0xFC
    1221: 08       PUSH  A
    1222: 51 33    MOV   A,[__r5]
    1224: 08       PUSH  A
    1225: 51 32    MOV   A,[__r6]
    1227: 08       PUSH  A
    1228: 51 31    MOV   A,[__r7]
    122A: 08       PUSH  A
    122B: 7C 13 58 LCALL 0x1358
    122E: 18       POP   A
    122F: 53 33    MOV   [__r5],A
    1231: 18       POP   A
    1232: 53 34    MOV   [__r4],A
    1234: 38 FE    ADD   SP,0xFE
    1236: 51 33    MOV   A,[__r5]
    1238: 01 00    ADD   A,0x0
    123A: 54 01    MOV   [X+1],A
    123C: 51 34    MOV   A,[__r4]
    123E: 09 80    ADC   A,0x80
    1240: 54 00    MOV   [X+0],A
    1242: 80 20    JMP   0x1263
    1244: 51 38    MOV   A,[__r0]
    1246: 08       PUSH  A
    1247: 51 37    MOV   A,[__r1]
    1249: 08       PUSH  A
    124A: 51 36    MOV   A,[__r2]
    124C: 08       PUSH  A
    124D: 51 35    MOV   A,[__r3]
    124F: 08       PUSH  A
    1250: 7C 13 58 LCALL 0x1358
    1253: 18       POP   A
    1254: 53 37    MOV   [__r1],A
    1256: 18       POP   A
    1257: 53 38    MOV   [__r0],A
    1259: 38 FE    ADD   SP,0xFE
    125B: 51 37    MOV   A,[__r1]
    125D: 54 01    MOV   [X+1],A
    125F: 51 38    MOV   A,[__r0]
    1261: 54 00    MOV   [X+0],A
    1263: 52 01    MOV   A,[X+1]
    1265: 10       PUSH  X
    1266: 7C 04 AF LCALL _PWM8_OIKEA_WritePulseWidth
    1269: 20       POP   X
    126A: 38 FE    ADD   SP,0xFE
    126C: 20       POP   X
    126D: 7F       RET   
FILE: Z:\robotti\Robor7\ROBOTT~1\ROBOTT~1\motorcontrol.c
(0061) {
(0062) 	PWM8_OIKEA_WritePulseWidth(0);
_Stop:
    126E: 10       PUSH  X
    126F: 50 00    MOV   A,0x0
    1271: 7C 04 AF LCALL _PWM8_OIKEA_WritePulseWidth
(0063) 	PWM8_VASEN_WritePulseWidth(0);
    1274: 50 00    MOV   A,0x0
    1276: 7C 04 13 LCALL _PWM8_VASEN_WritePulseWidth
    1279: 20       POP   X
(0064) 	
(0065) 	LEFTC_Data_ADDR &= NOLLAA;
    127A: 41 04 F0 AND   REG[0x4],0xF0
    127D: 7F       RET   
(0066) }
(0067) 
(0068) //Kääntyy vasemmalle
(0069) void TurnLeft(int pulse)
(0070) {
_TurnLeft:
  pulse                --> X-5
    127E: 10       PUSH  X
    127F: 4F       MOV   X,SP
(0071) 	LEFTC_Data_ADDR &= NOLLAA;
    1280: 41 04 F0 AND   REG[0x4],0xF0
(0072) 	LEFTC_Data_ADDR |= LEFTFRIGHTB
    1283: 43 04 06 OR    REG[0x4],0x6
(0073) 		
(0074) 	PWM8_VASEN_WritePulseWidth((BYTE)pulse);
    1286: 52 FC    MOV   A,[X-4]
    1288: 10       PUSH  X
    1289: 7C 04 13 LCALL _PWM8_VASEN_WritePulseWidth
    128C: 20       POP   X
(0075) 	PWM8_OIKEA_WritePulseWidth((BYTE)pulse);
    128D: 52 FC    MOV   A,[X-4]
    128F: 10       PUSH  X
    1290: 7C 04 AF LCALL _PWM8_OIKEA_WritePulseWidth
    1293: 20       POP   X
    1294: 20       POP   X
    1295: 7F       RET   
(0076) }
(0077) 
(0078) //Kääntyy oikealle
(0079) void TurnRight(int pulse)
(0080) {		
_TurnRight:
  pulse                --> X-5
    1296: 10       PUSH  X
    1297: 4F       MOV   X,SP
(0081) 	LEFTC_Data_ADDR &= NOLLAA;
    1298: 41 04 F0 AND   REG[0x4],0xF0
(0082) 	LEFTC_Data_ADDR |= LEFTBRIGHTF;
    129B: 43 04 09 OR    REG[0x4],0x9
(0083) 	
(0084) 	PWM8_VASEN_WritePulseWidth((BYTE)pulse);
    129E: 52 FC    MOV   A,[X-4]
    12A0: 10       PUSH  X
    12A1: 7C 04 13 LCALL _PWM8_VASEN_WritePulseWidth
    12A4: 20       POP   X
(0085) 	PWM8_OIKEA_WritePulseWidth((BYTE)pulse);
    12A5: 52 FC    MOV   A,[X-4]
    12A7: 10       PUSH  X
    12A8: 7C 04 AF LCALL _PWM8_OIKEA_WritePulseWidth
    12AB: 20       POP   X
    12AC: 20       POP   X
    12AD: 7F       RET   
(0086) }
(0087) 
(0088) 
(0089) //TEST LEFTTURN
(0090) void TestTurnLeft(int pulse)
(0091) {
_TestTurnLeft:
  pulse                --> X-5
    12AE: 10       PUSH  X
    12AF: 4F       MOV   X,SP
(0092) 	LEFTC_Data_ADDR &= NOLLAA;
    12B0: 41 04 F0 AND   REG[0x4],0xF0
(0093) 	LEFTC_Data_ADDR |= 0b00000001;
    12B3: 43 04 01 OR    REG[0x4],0x1
(0094) 	
(0095) 	PWM8_VASEN_WritePulseWidth(0);
    12B6: 10       PUSH  X
    12B7: 50 00    MOV   A,0x0
    12B9: 7C 04 13 LCALL _PWM8_VASEN_WritePulseWidth
    12BC: 20       POP   X
(0096) 	PWM8_OIKEA_WritePulseWidth((BYTE)pulse);
    12BD: 52 FC    MOV   A,[X-4]
    12BF: 10       PUSH  X
    12C0: 7C 04 AF LCALL _PWM8_OIKEA_WritePulseWidth
    12C3: 20       POP   X
    12C4: 20       POP   X
    12C5: 7F       RET   
FILE: Z:\robotti\Robor7\ROBOTT~1\ROBOTT~1\ultracontrol.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"
(0003) #include<stdio.h>
(0004) #include<stdlib.h>
(0005) #include "delay.h"
(0006) 
(0007) //----------------------------------------------------
(0008)   //PORT0_6 TRIGGER
(0009)   //PORT0_7 ECHO
(0010) //
(0011) 
(0012) //PORT0_4 SERVO PWM
(0013) 
(0014) float distanceToCm = 0.033f;
(0015) 
(0016) //Init PGA AND ADC
(0017) void InitUAServo(void)
(0018) {
(0019) 	PWM8_SERVO_Start();
_InitUAServo:
    12C6: 10       PUSH  X
    12C7: 7C 04 4B LCALL _PWM8_SERVO_Start
(0020) 	PWM8_SERVO_WritePulseWidth(33);
    12CA: 57 00    MOV   X,0x0
    12CC: 50 21    MOV   A,0x21
    12CE: 7C 04 59 LCALL _PWM8_SERVO_WritePulseWidth
    12D1: 20       POP   X
    12D2: 7F       RET   
(0021) }
(0022) 
(0023) 
(0024) //Return distance from Ultrasonic sensor in centimeters 
(0025) int getDataUA(void)
(0026) {
(0027) 	/*if(ADCINC_fIsDataAvailable() != 0)
(0028) 	{		
(0029) 		return (int)(ADCINC_iGetData() * distanceToCm);
(0030) 	}
(0031) 	else 
(0032) 		return 0;*/
(0033) 	return 0;
_getDataUA:
    12D3: 55 37 00 MOV   [__r1],0x0
    12D6: 55 38 00 MOV   [__r0],0x0
    12D9: 7F       RET   
(0034) }
(0035) 
(0036) //Sends Trigger pulse
(0037) void ControlTrigger(int *time)
(0038) {		
_ControlTrigger:
  time                 --> X-5
    12DA: 10       PUSH  X
    12DB: 4F       MOV   X,SP
(0039) 	//Wait 60ms and send pulse again
(0040) 	if (*time >= 80)
    12DC: 52 FC    MOV   A,[X-4]
    12DE: 53 37    MOV   [__r1],A
    12E0: 3E 37    MVI   A,[__r1]
    12E2: 53 38    MOV   [__r0],A
    12E4: 3E 37    MVI   A,[__r1]
    12E6: 11 50    SUB   A,0x50
    12E8: 51 38    MOV   A,[__r0]
    12EA: 31 80    XOR   A,0x80
    12EC: 19 80    SBB   A,0x80
    12EE: C0 0B    JC    0x12FA
(0041) 	{
(0042) 		*time = 0;
    12F0: 52 FC    MOV   A,[X-4]
    12F2: 53 37    MOV   [__r1],A
    12F4: 50 00    MOV   A,0x0
    12F6: 3F 37    MVI   [__r1],A
    12F8: 3F 37    MVI   [__r1],A
(0043) 	}
(0044) 	
(0045) 	//Send Trigger Pulse every 1ms 
(0046) 	if (*time <= 1)
    12FA: 52 FC    MOV   A,[X-4]
    12FC: 53 37    MOV   [__r1],A
    12FE: 3E 37    MVI   A,[__r1]
    1300: 53 38    MOV   [__r0],A
    1302: 3E 37    MVI   A,[__r1]
    1304: 53 37    MOV   [__r1],A
    1306: 50 01    MOV   A,0x1
    1308: 12 37    SUB   A,[__r1]
    130A: 51 38    MOV   A,[__r0]
    130C: 31 80    XOR   A,0x80
    130E: 53 2C    MOV   [__rX],A
    1310: 50 80    MOV   A,0x80
    1312: 1A 2C    SBB   A,[__rX]
    1314: C0 06    JC    0x131B
(0047) 	{
(0048) 		UATrig_Data_ADDR |= UATrig_MASK;
    1316: 43 00 40 OR    REG[0x0],0x40
(0049) 	}
    1319: 80 04    JMP   0x131E
(0050) 	else 	
(0051) 		UATrig_Data_ADDR &= ~UATrig_MASK;
    131B: 41 00 BF AND   REG[0x0],0xBF
    131E: 20       POP   X
    131F: 7F       RET   
(0052) 	
(0053) }
(0054) 
(0055) void sendTrigPulse(int *ultraData)
(0056) {	
_sendTrigPulse:
  ultraData            --> X-5
    1320: 10       PUSH  X
    1321: 4F       MOV   X,SP
(0057) 	*ultraData = 0;
    1322: 52 FC    MOV   A,[X-4]
    1324: 53 37    MOV   [__r1],A
    1326: 50 00    MOV   A,0x0
    1328: 3F 37    MVI   [__r1],A
    132A: 3F 37    MVI   [__r1],A
(0058) 	UATrig_Data_ADDR |= UATrig_MASK;	
    132C: 43 00 40 OR    REG[0x0],0x40
(0059) 	Delay50u();
    132F: 10       PUSH  X
    1330: 7C 08 6B LCALL _Delay50u
    1333: 20       POP   X
(0060) 	UATrig_Data_ADDR &= ~UATrig_MASK;
    1334: 41 00 BF AND   REG[0x0],0xBF
(0061) 	Delay10msTimes(7);
    1337: 10       PUSH  X
    1338: 50 07    MOV   A,0x7
    133A: 7C 08 50 LCALL __UserModules_end|Delay10msTimes|__text_start|_Delay10msTimes
    133D: 20       POP   X
    133E: 20       POP   X
    133F: 7F       RET   
(0062) }	
(0063) 
(0064) //Control PWM to move sensor
(0065) void ControlServo(int pulse)
(0066) {
_ControlServo:
  pulse                --> X-5
    1340: 10       PUSH  X
    1341: 4F       MOV   X,SP
(0067) 	PWM8_SERVO_WritePulseWidth((BYTE)pulse);	
    1342: 52 FC    MOV   A,[X-4]
    1344: 10       PUSH  X
    1345: 57 00    MOV   X,0x0
    1347: 7C 04 59 LCALL _PWM8_SERVO_WritePulseWidth
    134A: 20       POP   X
    134B: 20       POP   X
    134C: 7F       RET   
FILE: lib\psocgpioint.asm               (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;;*****************************************************************************
                                        (0004) ;;*****************************************************************************
                                        (0005) ;;  FILENAME: PSoCGPIOINT.asm
                                        (0006) ;;   Version: 2.0.0.20, Updated on 2003/07/17 at 12:10:35
                                        (0007) ;;  @PSOC_VERSION
                                        (0008) ;;
                                        (0009) ;;  DESCRIPTION: PSoC GPIO Interrupt Service Routine
                                        (0010) ;;-----------------------------------------------------------------------------
                                        (0011) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0012) ;;*****************************************************************************
                                        (0013) ;;*****************************************************************************
                                        (0014) 
                                        (0015) include "m8c.inc"
                                        (0016) include "PSoCGPIOINT.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export   PSoC_GPIO_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) ;-----------------------------------------------
                                        (0025) ;  Constant Definitions
                                        (0026) ;-----------------------------------------------
                                        (0027) 
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ; Variable Allocation
                                        (0031) ;-----------------------------------------------
                                        (0032) 	
                                        (0033) 
                                        (0034) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0035) ;---------------------------------------------------
                                        (0036) ; Insert your custom declarations below this banner
                                        (0037) ;---------------------------------------------------
                                        (0038) 
                                        (0039) ;---------------------------------------------------
                                        (0040) ; Insert your custom declarations above this banner
                                        (0041) ;---------------------------------------------------
                                        (0042) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0043) 
                                        (0044) 
                                        (0045) ;-----------------------------------------------------------------------------
                                        (0046) ;  FUNCTION NAME: PSoC_GPIO_ISR
                                        (0047) ;
                                        (0048) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0049) ;
                                        (0050) ;-----------------------------------------------------------------------------
                                        (0051) ;
                                        (0052) PSoC_GPIO_ISR:
                                        (0053) 
                                        (0054) 
                                        (0055)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0056)    ;---------------------------------------------------
                                        (0057)    ; Insert your custom code below this banner
                                        (0058)    ;---------------------------------------------------
134D: 7D 0D 5B LJMP  _PinInterrupt      (0059)    ljmp _PinInterrupt
                                        (0060)    ;---------------------------------------------------
                                        (0061)    ; Insert your custom code above this banner
                                        (0062)    ;---------------------------------------------------
                                        (0063)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0064) 
1350: 7E       RETI                     (0065)    reti
                                        (0066) 
                                        (0067) 
                                        (0068) ; end of file PSoCGPIOINT.asm
_itoa:
    178D: 10       PUSH  X
    178E: 4F       MOV   X,SP
    178F: 38 09    ADD   SP,0x9
    1791: 52 FA    MOV   A,[X-6]
    1793: 54 03    MOV   [X+3],A
    1795: 52 F9    MOV   A,[X-7]
    1797: 54 02    MOV   [X+2],A
    1799: 3D F9 00 CMP   [X-7],0x0
    179C: B0 22    JNZ   0x17BF
    179E: 3D FA 00 CMP   [X-6],0x0
    17A1: B0 1D    JNZ   0x17BF
    17A3: 52 FC    MOV   A,[X-4]
    17A5: 53 37    MOV   [__r1],A
    17A7: 50 30    MOV   A,0x30
    17A9: 3F 37    MVI   [__r1],A
    17AB: 52 FC    MOV   A,[X-4]
    17AD: 01 01    ADD   A,0x1
    17AF: 53 37    MOV   [__r1],A
    17B1: 50 00    MOV   A,0x0
    17B3: 3F 37    MVI   [__r1],A
    17B5: 52 FC    MOV   A,[X-4]
    17B7: 53 37    MOV   [__r1],A
    17B9: 52 FB    MOV   A,[X-5]
    17BB: 53 38    MOV   [__r0],A
    17BD: 81 48    JMP   0x1906
    17BF: 52 FA    MOV   A,[X-6]
    17C1: 11 00    SUB   A,0x0
    17C3: 52 F9    MOV   A,[X-7]
    17C5: 31 80    XOR   A,0x80
    17C7: 19 80    SBB   A,0x80
    17C9: D0 26    JNC   0x17F0
    17CB: 3D F7 00 CMP   [X-9],0x0
    17CE: B0 21    JNZ   0x17F0
    17D0: 3D F8 0A CMP   [X-8],0xA
    17D3: B0 1C    JNZ   0x17F0
    17D5: 56 06 01 MOV   [X+6],0x1
    17D8: 52 03    MOV   A,[X+3]
    17DA: 73       CPL   A
    17DB: 53 37    MOV   [__r1],A
    17DD: 52 02    MOV   A,[X+2]
    17DF: 73       CPL   A
    17E0: 53 38    MOV   [__r0],A
    17E2: 51 37    MOV   A,[__r1]
    17E4: 01 01    ADD   A,0x1
    17E6: 54 03    MOV   [X+3],A
    17E8: 51 38    MOV   A,[__r0]
    17EA: 09 00    ADC   A,0x0
    17EC: 54 02    MOV   [X+2],A
    17EE: 80 04    JMP   0x17F3
    17F0: 56 06 00 MOV   [X+6],0x0
    17F3: 52 FC    MOV   A,[X-4]
    17F5: 54 01    MOV   [X+1],A
    17F7: 52 F7    MOV   A,[X-9]
    17F9: 08       PUSH  A
    17FA: 52 F8    MOV   A,[X-8]
    17FC: 08       PUSH  A
    17FD: 52 02    MOV   A,[X+2]
    17FF: 08       PUSH  A
    1800: 52 03    MOV   A,[X+3]
    1802: 08       PUSH  A
    1803: 7C 13 51 LCALL 0x1351
    1806: 38 FE    ADD   SP,0xFE
    1808: 18       POP   A
    1809: 53 37    MOV   [__r1],A
    180B: 18       POP   A
    180C: 53 38    MOV   [__r0],A
    180E: 51 37    MOV   A,[__r1]
    1810: 54 08    MOV   [X+8],A
    1812: 51 38    MOV   A,[__r0]
    1814: 54 07    MOV   [X+7],A
    1816: 50 09    MOV   A,0x9
    1818: 13 08    SUB   A,[X+8]
    181A: 52 07    MOV   A,[X+7]
    181C: 31 80    XOR   A,0x80
    181E: 53 2C    MOV   [__rX],A
    1820: 50 80    MOV   A,0x80
    1822: 1A 2C    SBB   A,[__rX]
    1824: C0 1D    JC    0x1842
    1826: 52 01    MOV   A,[X+1]
    1828: 53 37    MOV   [__r1],A
    182A: 52 00    MOV   A,[X+0]
    182C: 53 38    MOV   [__r0],A
    182E: 51 37    MOV   A,[__r1]
    1830: 01 01    ADD   A,0x1
    1832: 54 01    MOV   [X+1],A
    1834: 51 38    MOV   A,[__r0]
    1836: 09 00    ADC   A,0x0
    1838: 54 00    MOV   [X+0],A
    183A: 52 08    MOV   A,[X+8]
    183C: 01 30    ADD   A,0x30
    183E: 3F 37    MVI   [__r1],A
    1840: 80 1B    JMP   0x185C
    1842: 52 01    MOV   A,[X+1]
    1844: 53 37    MOV   [__r1],A
    1846: 52 00    MOV   A,[X+0]
    1848: 53 38    MOV   [__r0],A
    184A: 51 37    MOV   A,[__r1]
    184C: 01 01    ADD   A,0x1
    184E: 54 01    MOV   [X+1],A
    1850: 51 38    MOV   A,[__r0]
    1852: 09 00    ADC   A,0x0
    1854: 54 00    MOV   [X+0],A
    1856: 52 08    MOV   A,[X+8]
    1858: 01 57    ADD   A,0x57
    185A: 3F 37    MVI   [__r1],A
    185C: 52 F7    MOV   A,[X-9]
    185E: 08       PUSH  A
    185F: 52 F8    MOV   A,[X-8]
    1861: 08       PUSH  A
    1862: 52 02    MOV   A,[X+2]
    1864: 08       PUSH  A
    1865: 52 03    MOV   A,[X+3]
    1867: 08       PUSH  A
    1868: 7C 13 51 LCALL 0x1351
    186B: 18       POP   A
    186C: 54 03    MOV   [X+3],A
    186E: 18       POP   A
    186F: 54 02    MOV   [X+2],A
    1871: 38 FE    ADD   SP,0xFE
    1873: 3D 02 00 CMP   [X+2],0x0
    1876: BF 80    JNZ   0x17F7
    1878: 3D 03 00 CMP   [X+3],0x0
    187B: BF 7B    JNZ   0x17F7
    187D: 3D 06 00 CMP   [X+6],0x0
    1880: A0 19    JZ    0x189A
    1882: 52 01    MOV   A,[X+1]
    1884: 53 37    MOV   [__r1],A
    1886: 52 00    MOV   A,[X+0]
    1888: 53 38    MOV   [__r0],A
    188A: 51 37    MOV   A,[__r1]
    188C: 01 01    ADD   A,0x1
    188E: 54 01    MOV   [X+1],A
    1890: 51 38    MOV   A,[__r0]
    1892: 09 00    ADC   A,0x0
    1894: 54 00    MOV   [X+0],A
    1896: 50 2D    MOV   A,0x2D
    1898: 3F 37    MVI   [__r1],A
    189A: 52 01    MOV   A,[X+1]
    189C: 53 37    MOV   [__r1],A
    189E: 52 00    MOV   A,[X+0]
    18A0: 53 38    MOV   [__r0],A
    18A2: 51 37    MOV   A,[__r1]
    18A4: 01 FF    ADD   A,0xFF
    18A6: 54 01    MOV   [X+1],A
    18A8: 51 38    MOV   A,[__r0]
    18AA: 09 FF    ADC   A,0xFF
    18AC: 54 00    MOV   [X+0],A
    18AE: 50 00    MOV   A,0x0
    18B0: 3F 37    MVI   [__r1],A
    18B2: 52 FC    MOV   A,[X-4]
    18B4: 54 05    MOV   [X+5],A
    18B6: 80 3D    JMP   0x18F4
    18B8: 52 05    MOV   A,[X+5]
    18BA: 53 37    MOV   [__r1],A
    18BC: 3E 37    MVI   A,[__r1]
    18BE: 54 06    MOV   [X+6],A
    18C0: 52 05    MOV   A,[X+5]
    18C2: 53 37    MOV   [__r1],A
    18C4: 52 04    MOV   A,[X+4]
    18C6: 53 38    MOV   [__r0],A
    18C8: 51 37    MOV   A,[__r1]
    18CA: 01 01    ADD   A,0x1
    18CC: 54 05    MOV   [X+5],A
    18CE: 51 38    MOV   A,[__r0]
    18D0: 09 00    ADC   A,0x0
    18D2: 54 04    MOV   [X+4],A
    18D4: 52 01    MOV   A,[X+1]
    18D6: 53 35    MOV   [__r3],A
    18D8: 3E 35    MVI   A,[__r3]
    18DA: 3F 37    MVI   [__r1],A
    18DC: 52 01    MOV   A,[X+1]
    18DE: 53 37    MOV   [__r1],A
    18E0: 52 00    MOV   A,[X+0]
    18E2: 53 38    MOV   [__r0],A
    18E4: 51 37    MOV   A,[__r1]
    18E6: 01 FF    ADD   A,0xFF
    18E8: 54 01    MOV   [X+1],A
    18EA: 51 38    MOV   A,[__r0]
    18EC: 09 FF    ADC   A,0xFF
    18EE: 54 00    MOV   [X+0],A
    18F0: 52 06    MOV   A,[X+6]
    18F2: 3F 37    MVI   [__r1],A
    18F4: 52 01    MOV   A,[X+1]
    18F6: 53 38    MOV   [__r0],A
    18F8: 52 05    MOV   A,[X+5]
    18FA: 3A 38    CMP   A,[__r0]
    18FC: CF BB    JC    0x18B8
    18FE: 52 FC    MOV   A,[X-4]
    1900: 53 37    MOV   [__r1],A
    1902: 52 FB    MOV   A,[X-5]
    1904: 53 38    MOV   [__r0],A
    1906: 38 F7    ADD   SP,0xF7
    1908: 20       POP   X
    1909: 7F       RET   
