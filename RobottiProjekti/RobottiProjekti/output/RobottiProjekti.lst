FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C27xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
001C: 7D 0E 0C LJMP  PSoC_GPIO_ISR      (0145)     ljmp	PSoC_GPIO_ISR
001F: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 03 C6 LJMP  _PWM8_VASEN_ISR    (0149)     ljmp	_PWM8_VASEN_ISR
0023: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0024: 7D 04 4C LJMP  _PWM8_OIKEA_ISR    (0153)     ljmp	_PWM8_OIKEA_ISR
0027: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 03 21 LJMP  _Timer8_ISR        (0157)     ljmp	_Timer8_ISR
002B: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0161)     // call	void_handler
002C: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
0030: 7D 04 09 LJMP  _PWM8_SERVO_ISR    (0165)     ljmp	_PWM8_SERVO_ISR
0033: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0181)     // call	void_handler
0060: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0185)     // call	void_handler
0064: 7E       RETI                     (0186)     reti
0068: 71 10    OR    F,0x10             
                                        (0187)     ;---------------------------------------------------
                                        (0188)     ; Insert your custom code above this banner
                                        (0189)     ;---------------------------------------------------
                                        (0190)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0191) 
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  Start of Execution.
                                        (0194) ;-----------------------------------------------------------------------------
                                        (0195) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0196) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0197) ;
                                        (0198) 
                                        (0199) IF	(TOOLCHAIN & HITECH)
                                        (0200)  	AREA PD_startup(CODE, REL, CON)
                                        (0201) ELSE
                                        (0202)     org 68h
                                        (0203) ENDIF
                                        (0204) __Start:
                                        (0205) 
                                        (0206)     ; initialize SMP values for voltage stabilization, if required,
                                        (0207)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0208)     ; least for now. 
                                        (0209)     ;
                                        (0210)     M8C_SetBank1
006A: 62 E3 87 MOV   REG[0xE3],0x87     (0211)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0212)     M8C_SetBank0
                                        (0213) 
                                        (0214) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0215) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0216)     M8C_EnableWatchDog
                                        (0217) ENDIF
                                        (0218) 
                                        (0219) IF ( SELECT_32K )
                                        (0220)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0221) ELSE
0072: 41 FE FB AND   REG[0xFE],0xFB     (0222)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0223) ENDIF
                                        (0224) 
                                        (0225) IF	(TOOLCHAIN & HITECH) 
                                        (0226)     ;---------------------------
                                        (0227)     ; Set up the Temporary stack
                                        (0228)     ;---------------------------
                                        (0229)     ; A temporary stack is set up for the SSC instructions.
                                        (0230)     ; The real stack start will be assigned later.
                                        (0231)     ;
                                        (0232) 	global		__Lstackps
                                        (0233) 	mov     a,low __Lstackps
                                        (0234) 	swap    a,sp
                                        (0235) ELSE
                                        (0236)     ;------------------
                                        (0237)     ; Set up the stack
                                        (0238)     ;------------------
0075: 50 3C    MOV   A,0x3C             (0239)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0240)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0241) ENDIF
                                        (0242) 
                                        (0243)     ;-----------------------------------------------
                                        (0244)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0245)     ;-----------------------------------------------
                                        (0246) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0247) IF ( SUPPLY_VOLTAGE )         ; 1 means 5.0V
                                        (0248)  IF ( AGND_BYPASS )
                                        (0249)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0250)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0251)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0252)     ; value using the proper trim values.
                                        (0253)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0254)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0255)  ENDIF
                                        (0256) ELSE    ; 3.3 V Operation, not 5.0V
                                        (0257)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0258) ENDIF ;(SUPPLY_VOLTAGE)
                                        (0259) 
007B: 55 F8 00 MOV   [_ramareas_end+188],0x0(0260)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
007E: 55 F9 00 MOV   [_ramareas_end+189],0x0(0261)     mov  [bSSC_KEYSP], 0
0081: 71 10    OR    F,0x10             
                                        (0262) 
                                        (0263)     ;---------------------------------------
                                        (0264)     ; Initialize Crystal Oscillator and PLL
                                        (0265)     ;---------------------------------------
                                        (0266) 
                                        (0267) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0268)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0269)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0270)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0271)     ; the ECO to stabilize.
                                        (0272)     ;
                                        (0273)     M8C_SetBank1
                                        (0274)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0275)     M8C_SetBank0
                                        (0276)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0277)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0278)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0279) .WaitFor1s:
                                        (0280)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0281)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0282)                                           ;   since interrupts are not globally enabled
                                        (0283) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0284)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0285)     M8C_SetBank1
0083: 62 E0 02 MOV   REG[0xE0],0x2      (0286)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0086: 70 EF    AND   F,0xEF             
0088: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0287)     M8C_SetBank0
                                        (0288)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0289) 
                                        (0290) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0291) 
                                        (0292) IF ( PLL_MODE )
                                        (0293)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0294)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0295)     ;
                                        (0296)     M8C_SetBank1
                                        (0297)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0298)     M8C_SetBank0
                                        (0299)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0300)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0301) 
                                        (0302) .WaitFor16ms:
                                        (0303)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0304)     jz   .WaitFor16ms
                                        (0305)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0306)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0307)     M8C_SetBank0
                                        (0308) 
                                        (0309) IF      ( WAIT_FOR_32K )
                                        (0310) ELSE ; !( WAIT_FOR_32K )
                                        (0311)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0312)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0313) ENDIF ;(WAIT_FOR_32K)
                                        (0314) ENDIF ;(PLL_MODE)
                                        (0315) 
                                        (0316) 	;-------------------------------------------------------
                                        (0317)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0318)     ;-------------------------------------------------------
                                        (0319) 
                                        (0320)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0321) 
                                        (0322) IF (SYSCLK_SOURCE)
                                        (0323)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0324) ENDIF
                                        (0325)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0326) 
                                        (0327)     ;------------------------
                                        (0328)     ; Close CT leakage path.
                                        (0329)     ;------------------------
008B: 62 71 05 MOV   REG[0x71],0x5      (0330)     mov   reg[ACB00CR0], 05h
008E: 62 75 05 MOV   REG[0x75],0x5      (0331)     mov   reg[ACB01CR0], 05h
0091: 62 79 05 MOV   REG[0x79],0x5      (0332)     mov   reg[ACB02CR0], 05h
0094: 62 7D 05 MOV   REG[0x7D],0x5      (0333)     mov   reg[ACB03CR0], 05h
                                        (0334) 
                                        (0335)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0336)     ;---------------------------------------------------
                                        (0337)     ; Insert your custom code below this banner
                                        (0338)     ;---------------------------------------------------
                                        (0339) 
                                        (0340)     ;---------------------------------------------------
                                        (0341)     ; Insert your custom code above this banner
                                        (0342)     ;---------------------------------------------------
                                        (0343)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0344) 
                                        (0345)     ;-------------------------
                                        (0346)     ; Load Base Configuration
                                        (0347)     ;-------------------------
                                        (0348)     ; Load global parameter settings and load the user modules in the
                                        (0349)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0350)     ; to minimize start up time; (2) We may still need to play with the
                                        (0351)     ; Sleep Timer.
                                        (0352)     ;
0097: 7C 02 B7 LCALL 0x02B7             (0353)     lcall LoadConfigInit
                                        (0354) 
                                        (0355)     ;-----------------------------------
                                        (0356)     ; Initialize C Run-Time Environment
                                        (0357)     ;-----------------------------------
                                        (0358) IF ( C_LANGUAGE_SUPPORT )
009A: 50 00    MOV   A,0x0              (0359)     mov  A,0                           ; clear the 'bss' segment to zero
009C: 55 28 2D MOV   [__r0],0x2D        (0360)     mov  [__r0],<__bss_start
                                        (0361) BssLoop:
009F: 3C 28 3C CMP   [__r0],0x3C        (0362)     cmp  [__r0],<__bss_end
00A2: A0 05    JZ    0x00A8             (0363)     jz   BssDone
00A4: 3F 28    MVI   [__r0],A           (0364)     mvi  [__r0],A
00A6: 8F F8    JMP   0x009F             (0365)     jmp  BssLoop
                                        (0366) BssDone:
00A8: 50 01    MOV   A,0x1              (0367)     mov  A,>__idata_start              ; copy idata to data segment
00AA: 57 D8    MOV   X,0xD8             (0368)     mov  X,<__idata_start
00AC: 55 28 00 MOV   [__r0],0x0         (0369)     mov  [__r0],<__data_start
                                        (0370) IDataLoop:
00AF: 3C 28 1A CMP   [__r0],0x1A        (0371)     cmp  [__r0],<__data_end
00B2: A0 0B    JZ    0x00BE             (0372)     jz   C_RTE_Done
00B4: 08       PUSH  A                  (0373)     push A
00B5: 28       ROMX                     (0374)     romx
00B6: 3F 28    MVI   [__r0],A           (0375)     mvi  [__r0],A
00B8: 18       POP   A                  (0376)     pop  A
00B9: 75       INC   X                  (0377)     inc  X
00BA: 09 00    ADC   A,0x0              (0378)     adc  A,0
00BC: 8F F2    JMP   0x00AF             (0379)     jmp  IDataLoop
00BE: 71 10    OR    F,0x10             
00C0: 70 EF    AND   F,0xEF             
                                        (0380) 
                                        (0381) C_RTE_Done:
                                        (0382) 
                                        (0383) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0384) 
                                        (0385)     ;-------------------------------
                                        (0386)     ; Voltage Stabilization for SMP
                                        (0387)     ;-------------------------------
                                        (0388) 
                                        (0389) IF ( SUPPLY_VOLTAGE )                  ; 1 Means 5 Volts
                                        (0390) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0391)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0392)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0393)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0394)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0395)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0396)     M8C_SetBank1
                                        (0397)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0398)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0399)     M8C_SetBank0
                                        (0400)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0401)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0402) .WaitFor2ms:
                                        (0403)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0404)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0405) ENDIF ; ( SWITCH_MODE_PUMP ^ 1 )
                                        (0406) ENDIF ; ( SUPPLY_VOLTAGE )
                                        (0407) 
                                        (0408)     ;-------------------------------
                                        (0409)     ; Set Power-On Reset (POR) Level
                                        (0410)     ;-------------------------------
                                        (0411)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0412)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0413)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0414)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0415)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0416) 
                                        (0417)     M8C_SetBank1
                                        (0418) 
                                        (0419) IF ( SUPPLY_VOLTAGE )                       ; 1 Means 5 Volts
                                        (0420)  IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )  ;    Also 24MHz?
                                        (0421)                                             ;       no, set 4.5V POR in user code, if desired
                                        (0422)  ELSE ; 24HMz                               ;
                                        (0423)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0424)  ENDIF ; OSC_CRO_CPU_24MHz
                                        (0425) ENDIF ; 5V
                                        (0426) 
                                        (0427)     M8C_SetBank0
                                        (0428) 
                                        (0429)     ;----------------------------
                                        (0430)     ; Wrap up and invoke "main"
                                        (0431)     ;----------------------------
                                        (0432) 
                                        (0433)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0434)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0435)     ;
00C2: 62 E0 00 MOV   REG[0xE0],0x0      (0436)     mov  reg[INT_MSK0],0
00C5: 71 10    OR    F,0x10             
                                        (0437) 
                                        (0438)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0439)     ;
                                        (0440)     M8C_SetBank1
00C7: 62 E0 00 MOV   REG[0xE0],0x0      (0441)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
00CA: 70 EF    AND   F,0xEF             
                                        (0442)     M8C_SetBank0
                                        (0443) 
                                        (0444)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0445)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0446)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0447)     ;
00CC: 62 E2 00 MOV   REG[0xE2],0x0      (0448)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0449)                                    ; have been set during the boot process.
                                        (0450) IF	(TOOLCHAIN & HITECH)
                                        (0451) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0452) ELSE
                                        (0453) IF ENABLE_LJMP_TO_MAIN
                                        (0454)     ljmp  _main                    ; goto main (no return)
                                        (0455) ELSE
00CF: 7C 07 6E LCALL __UserModules_end|__text_start|_main|_main(0456)     lcall _main                    ; call main
                                        (0457) .Exit:
00D2: 8F FF    JMP   0x00D2             (0458)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0459) ENDIF
                                        (0460) ENDIF ; TOOLCHAIN
                                        (0461) 
                                        (0462)     ;---------------------------------
                                        (0463)     ; Library Access to Global Parms
                                        (0464)     ;---------------------------------
                                        (0465)     ;
                                        (0466)  bGetPowerSetting:
                                        (0467) _bGetPowerSetting:
                                        (0468)     ; Synthesize the "power setting" value used by chips with SlowIMO mode.
                                        (0469)     ; Returns value of POWER_SETTING in the A register.
                                        (0470)     ; No inputs. No Side Effects.
                                        (0471)     ;
                                        (0472) IF ( SUPPLY_VOLTAGE )            ; 1 means 5.0V
00D4: 50 10    MOV   A,0x10             (0473)     mov   A, POWER_SET_5V0_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0474) ELSE        
                                        (0475)     mov   A, POWER_SET_3V3_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0476) ENDIF
00D6: 7F       RET                      (0477)     ret
                                        (0478) 
                                        (0479) IF	(TOOLCHAIN & HITECH)
                                        (0480) ELSE
                                        (0481)     ;---------------------------------
                                        (0482)     ; Order Critical RAM & ROM AREAs
                                        (0483)     ;---------------------------------
                                        (0484)     ;  'TOP' is all that has been defined so far...
                                        (0485) 
                                        (0486)     ;  ROM AREAs for C CONST, static & global items
                                        (0487)     ;
                                        (0488)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0489)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0490) __idata_start:
                                        (0491) 
                                        (0492)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0493) __func_lit_start:
                                        (0494) 
                                        (0495)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0496)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0497) 
                                        (0498)     ; CODE segment for general use
                                        (0499)     ;
                                        (0500)     AREA text (ROM, REL, CON)
                                        (0501) __text_start:
                                        (0502) 
                                        (0503)     ; RAM area usage
                                        (0504)     ;
                                        (0505)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0506) __data_start:
                                        (0507) 
                                        (0508)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0509)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0510)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0511) __bss_start:
                                        (0512) 
                                        (0513) ENDIF ; TOOLCHAIN
                                        (0514) 
                                        (0515) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.2946
01F2: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_robottiprojekti_Bank1
                                        (0019) export LoadConfigTBL_robottiprojekti_Bank0
                                        (0020) export LoadConfigTBL_robottiprojekti_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_robottiprojekti_Bank0:
                                        (0023) ;  Instance name LCD, User Module LCD
                                        (0024) ;  Instance name LED, User Module LED
                                        (0025) ;  Instance name PWM8_OIKEA, User Module PWM8
                                        (0026) ;       Instance name PWM8_OIKEA, Block Name PWM8(DBB01)
                                        (0027) 	db		27h, 00h		;PWM8_OIKEA_CONTROL_REG(DBB01CR0)
                                        (0028) 	db		25h, c7h		;PWM8_OIKEA_PERIOD_REG(DBB01DR1)
                                        (0029) 	db		26h, 00h		;PWM8_OIKEA_COMPARE_REG(DBB01DR2)
                                        (0030) ;  Instance name PWM8_SERVO, User Module PWM8
                                        (0031) ;       Instance name PWM8_SERVO, Block Name PWM8(DBB10)
                                        (0032) 	db		33h, 00h		;PWM8_SERVO_CONTROL_REG(DBB10CR0)
                                        (0033) 	db		31h, c7h		;PWM8_SERVO_PERIOD_REG(DBB10DR1)
                                        (0034) 	db		32h, 00h		;PWM8_SERVO_COMPARE_REG(DBB10DR2)
                                        (0035) ;  Instance name PWM8_VASEN, User Module PWM8
                                        (0036) ;       Instance name PWM8_VASEN, Block Name PWM8(DBB00)
                                        (0037) 	db		23h, 00h		;PWM8_VASEN_CONTROL_REG(DBB00CR0)
                                        (0038) 	db		21h, c7h		;PWM8_VASEN_PERIOD_REG(DBB00DR1)
                                        (0039) 	db		22h, 00h		;PWM8_VASEN_COMPARE_REG(DBB00DR2)
                                        (0040) ;  Instance name Timer8, User Module Timer8
                                        (0041) ;       Instance name Timer8, Block Name TIMER8(DCB02)
                                        (0042) 	db		2bh, 04h		;Timer8_CONTROL_REG(DCB02CR0)
                                        (0043) 	db		29h, 09h		;Timer8_PERIOD_REG(DCB02DR1)
                                        (0044) 	db		2ah, 00h		;Timer8_COMPARE_REG(DCB02DR2)
                                        (0045) ;  Global Register values Bank 0
                                        (0046) 	db		60h, 2bh		; AnalogColumnInputSelect register (AMX_IN)
                                        (0047) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0048) 	db		63h, 15h		; AnalogReferenceControl register (ARF_CR)
                                        (0049) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0050) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0051) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0052) 	db		d6h, 00h		; I2CConfig register (I2CCFG)
                                        (0053) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0054) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0055) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0056) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0057) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0058) 	db		b5h, 11h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0059) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0060) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0061) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0062) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0063) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0064) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0065) 	db		bdh, 02h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0066) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0067) 	db		ffh
                                        (0068) LoadConfigTBL_robottiprojekti_Bank1:
                                        (0069) ;  Instance name LCD, User Module LCD
                                        (0070) ;  Instance name LED, User Module LED
                                        (0071) ;  Instance name PWM8_OIKEA, User Module PWM8
                                        (0072) ;       Instance name PWM8_OIKEA, Block Name PWM8(DBB01)
                                        (0073) 	db		24h, 29h		;PWM8_OIKEA_FUNC_REG(DBB01FN)
                                        (0074) 	db		25h, 16h		;PWM8_OIKEA_INPUT_REG(DBB01IN)
                                        (0075) 	db		26h, 45h		;PWM8_OIKEA_OUTPUT_REG(DBB01OU)
                                        (0076) ;  Instance name PWM8_SERVO, User Module PWM8
                                        (0077) ;       Instance name PWM8_SERVO, Block Name PWM8(DBB10)
                                        (0078) 	db		30h, 29h		;PWM8_SERVO_FUNC_REG(DBB10FN)
                                        (0079) 	db		31h, 11h		;PWM8_SERVO_INPUT_REG(DBB10IN)
                                        (0080) 	db		32h, 44h		;PWM8_SERVO_OUTPUT_REG(DBB10OU)
                                        (0081) ;  Instance name PWM8_VASEN, User Module PWM8
                                        (0082) ;       Instance name PWM8_VASEN, Block Name PWM8(DBB00)
                                        (0083) 	db		20h, 29h		;PWM8_VASEN_FUNC_REG(DBB00FN)
                                        (0084) 	db		21h, 16h		;PWM8_VASEN_INPUT_REG(DBB00IN)
                                        (0085) 	db		22h, 44h		;PWM8_VASEN_OUTPUT_REG(DBB00OU)
                                        (0086) ;  Instance name Timer8, User Module Timer8
                                        (0087) ;       Instance name Timer8, Block Name TIMER8(DCB02)
                                        (0088) 	db		28h, 20h		;Timer8_FUNC_REG(DCB02FN)
                                        (0089) 	db		29h, 01h		;Timer8_INPUT_REG(DCB02IN)
                                        (0090) 	db		2ah, 40h		;Timer8_OUTPUT_REG(DCB02OU)
                                        (0091) ;  Global Register values Bank 1
                                        (0092) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0093) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0094) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0095) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0096) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0097) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0098) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0099) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0100) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0101) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0102) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0103) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0104) 	db		e1h, b9h		; OscillatorControl_1 register (OSC_CR1)
                                        (0105) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0106) 	db		dfh, 13h		; OscillatorControl_3 register (OSC_CR3)
                                        (0107) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0108) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0109) 	db		ffh
                                        (0110) AREA psoc_config(rom, rel)
                                        (0111) LoadConfigTBL_robottiprojekti_Ordered:
                                        (0112) ;  Ordered Global Register values
                                        (0113) 	M8C_SetBank0
01F4: 62 00 80 MOV   REG[0x0],0x80      (0114) 	mov	reg[00h], 80h		; Port_0_Data register (PRT0DR)
01F7: 71 10    OR    F,0x10             
                                        (0115) 	M8C_SetBank1
01F9: 62 00 D3 MOV   REG[0x0],0xD3      (0116) 	mov	reg[00h], d3h		; Port_0_DriveMode_0 register (PRT0DM0)
01FC: 62 01 AC MOV   REG[0x1],0xAC      (0117) 	mov	reg[01h], ach		; Port_0_DriveMode_1 register (PRT0DM1)
01FF: 70 EF    AND   F,0xEF             
                                        (0118) 	M8C_SetBank0
0201: 62 03 2C MOV   REG[0x3],0x2C      (0119) 	mov	reg[03h], 2ch		; Port_0_DriveMode_2 register (PRT0DM2)
0204: 62 02 13 MOV   REG[0x2],0x13      (0120) 	mov	reg[02h], 13h		; Port_0_GlobalSelect register (PRT0GS)
0207: 71 10    OR    F,0x10             
                                        (0121) 	M8C_SetBank1
0209: 62 02 08 MOV   REG[0x2],0x8       (0122) 	mov	reg[02h], 08h		; Port_0_IntCtrl_0 register (PRT0IC0)
020C: 62 03 80 MOV   REG[0x3],0x80      (0123) 	mov	reg[03h], 80h		; Port_0_IntCtrl_1 register (PRT0IC1)
020F: 70 EF    AND   F,0xEF             
                                        (0124) 	M8C_SetBank0
0211: 62 01 88 MOV   REG[0x1],0x88      (0125) 	mov	reg[01h], 88h		; Port_0_IntEn register (PRT0IE)
0214: 62 04 00 MOV   REG[0x4],0x0       (0126) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
0217: 71 10    OR    F,0x10             
                                        (0127) 	M8C_SetBank1
0219: 62 04 8F MOV   REG[0x4],0x8F      (0128) 	mov	reg[04h], 8fh		; Port_1_DriveMode_0 register (PRT1DM0)
021C: 62 05 70 MOV   REG[0x5],0x70      (0129) 	mov	reg[05h], 70h		; Port_1_DriveMode_1 register (PRT1DM1)
021F: 70 EF    AND   F,0xEF             
                                        (0130) 	M8C_SetBank0
0221: 62 07 70 MOV   REG[0x7],0x70      (0131) 	mov	reg[07h], 70h		; Port_1_DriveMode_2 register (PRT1DM2)
0224: 62 06 00 MOV   REG[0x6],0x0       (0132) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
0227: 71 10    OR    F,0x10             
                                        (0133) 	M8C_SetBank1
0229: 62 06 00 MOV   REG[0x6],0x0       (0134) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
022C: 62 07 00 MOV   REG[0x7],0x0       (0135) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
022F: 70 EF    AND   F,0xEF             
                                        (0136) 	M8C_SetBank0
0231: 62 05 00 MOV   REG[0x5],0x0       (0137) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0234: 62 08 00 MOV   REG[0x8],0x0       (0138) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0237: 71 10    OR    F,0x10             
                                        (0139) 	M8C_SetBank1
0239: 62 08 7F MOV   REG[0x8],0x7F      (0140) 	mov	reg[08h], 7fh		; Port_2_DriveMode_0 register (PRT2DM0)
023C: 62 09 80 MOV   REG[0x9],0x80      (0141) 	mov	reg[09h], 80h		; Port_2_DriveMode_1 register (PRT2DM1)
023F: 70 EF    AND   F,0xEF             
                                        (0142) 	M8C_SetBank0
0241: 62 0B 80 MOV   REG[0xB],0x80      (0143) 	mov	reg[0bh], 80h		; Port_2_DriveMode_2 register (PRT2DM2)
0244: 62 0A 00 MOV   REG[0xA],0x0       (0144) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
0247: 71 10    OR    F,0x10             
                                        (0145) 	M8C_SetBank1
0249: 62 0A 00 MOV   REG[0xA],0x0       (0146) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
024C: 62 0B 00 MOV   REG[0xB],0x0       (0147) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
024F: 70 EF    AND   F,0xEF             
                                        (0148) 	M8C_SetBank0
0251: 62 09 00 MOV   REG[0x9],0x0       (0149) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0254: 62 0C 00 MOV   REG[0xC],0x0       (0150) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0257: 71 10    OR    F,0x10             
                                        (0151) 	M8C_SetBank1
0259: 62 0C 00 MOV   REG[0xC],0x0       (0152) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
025C: 62 0D 00 MOV   REG[0xD],0x0       (0153) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
025F: 70 EF    AND   F,0xEF             
                                        (0154) 	M8C_SetBank0
0261: 62 0F 00 MOV   REG[0xF],0x0       (0155) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
0264: 62 0E 00 MOV   REG[0xE],0x0       (0156) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
0267: 71 10    OR    F,0x10             
                                        (0157) 	M8C_SetBank1
0269: 62 0E 00 MOV   REG[0xE],0x0       (0158) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
026C: 62 0F 00 MOV   REG[0xF],0x0       (0159) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
026F: 70 EF    AND   F,0xEF             
                                        (0160) 	M8C_SetBank0
0271: 62 0D 00 MOV   REG[0xD],0x0       (0161) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
0274: 62 10 00 MOV   REG[0x10],0x0      (0162) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
0277: 71 10    OR    F,0x10             
                                        (0163) 	M8C_SetBank1
0279: 62 10 00 MOV   REG[0x10],0x0      (0164) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
027C: 62 11 00 MOV   REG[0x11],0x0      (0165) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
027F: 70 EF    AND   F,0xEF             
                                        (0166) 	M8C_SetBank0
0281: 62 13 00 MOV   REG[0x13],0x0      (0167) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
0284: 62 12 00 MOV   REG[0x12],0x0      (0168) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
0287: 71 10    OR    F,0x10             
                                        (0169) 	M8C_SetBank1
0289: 62 12 00 MOV   REG[0x12],0x0      (0170) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
028C: 62 13 00 MOV   REG[0x13],0x0      (0171) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
028F: 70 EF    AND   F,0xEF             
                                        (0172) 	M8C_SetBank0
0291: 62 11 00 MOV   REG[0x11],0x0      (0173) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
0294: 62 14 00 MOV   REG[0x14],0x0      (0174) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
0297: 71 10    OR    F,0x10             
                                        (0175) 	M8C_SetBank1
0299: 62 14 00 MOV   REG[0x14],0x0      (0176) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
029C: 62 15 00 MOV   REG[0x15],0x0      (0177) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
029F: 70 EF    AND   F,0xEF             
                                        (0178) 	M8C_SetBank0
02A1: 62 17 00 MOV   REG[0x17],0x0      (0179) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
02A4: 62 16 00 MOV   REG[0x16],0x0      (0180) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
02A7: 71 10    OR    F,0x10             
                                        (0181) 	M8C_SetBank1
02A9: 62 16 00 MOV   REG[0x16],0x0      (0182) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
02AC: 62 17 00 MOV   REG[0x17],0x0      (0183) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
02AF: 70 EF    AND   F,0xEF             
                                        (0184) 	M8C_SetBank0
02B1: 62 15 00 MOV   REG[0x15],0x0      (0185) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
02B4: 70 EF    AND   F,0xEF             
                                        (0186) 	M8C_SetBank0
02B6: 7F       RET                      (0187) 	ret
                                        (0188) 
                                        (0189) 
                                        (0190) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_robottiprojekti
                                        (0026) export _LoadConfig_robottiprojekti
                                        (0027) export Port_1_Data_SHADE
                                        (0028) export _Port_1_Data_SHADE
                                        (0029) export Port_2_Data_SHADE
                                        (0030) export _Port_2_Data_SHADE
                                        (0031) export Port_2_DriveMode_0_SHADE
                                        (0032) export _Port_2_DriveMode_0_SHADE
                                        (0033) export Port_2_DriveMode_1_SHADE
                                        (0034) export _Port_2_DriveMode_1_SHADE
                                        (0035) 
                                        (0036) 
                                        (0037) export NO_SHADOW
                                        (0038) export _NO_SHADOW
                                        (0039) 
                                        (0040) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0041) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0042) 
                                        (0043) AREA psoc_config(rom, rel)
                                        (0044) 
                                        (0045) ;---------------------------------------------------------------------------
                                        (0046) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0047) ;                  parameters handled by boot code, like CPU speed). This
                                        (0048) ;                  function can be called from user code, but typically it
                                        (0049) ;                  is only called from boot.
                                        (0050) ;
                                        (0051) ;       INPUTS: None.
                                        (0052) ;      RETURNS: Nothing.
                                        (0053) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0054) ;               In the large memory model currently only the page
                                        (0055) ;               pointer registers listed below are modified.  This does
                                        (0056) ;               not guarantee that in future implementations of this
                                        (0057) ;               function other page pointer registers will not be
                                        (0058) ;               modified.
                                        (0059) ;          
                                        (0060) ;               Page Pointer Registers Modified: 
                                        (0061) ;               CUR_PP
                                        (0062) ;
                                        (0063) _LoadConfigInit:
                                        (0064)  LoadConfigInit:
                                        (0065)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0066)     
02B7: 55 29 00 MOV   [0x29],0x0         (0067) 	mov		[Port_1_Data_SHADE], 0h
02BA: 55 2A 00 MOV   [0x2A],0x0         (0068) 	mov		[Port_2_Data_SHADE], 0h
02BD: 55 2B 7F MOV   [0x2B],0x7F        (0069) 	mov		[Port_2_DriveMode_0_SHADE], 7fh
02C0: 55 2C 80 MOV   [0x2C],0x80        (0070) 	mov		[Port_2_DriveMode_1_SHADE], 80h
                                        (0071) 
02C3: 7C 02 CA LCALL 0x02CA             (0072) 	lcall	LoadConfig_robottiprojekti
02C6: 7C 01 F2 LCALL 0x01F2             (0073) 	lcall	LoadConfigTBL_robottiprojekti_Ordered
                                        (0074) 
                                        (0075) 
                                        (0076)     RAM_EPILOGUE RAM_USE_CLASS_4
02C9: 7F       RET                      (0077)     ret
                                        (0078) 
                                        (0079) ;---------------------------------------------------------------------------
                                        (0080) ; Load Configuration robottiprojekti
                                        (0081) ;
                                        (0082) ;    Load configuration registers for robottiprojekti.
                                        (0083) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0084) ;
                                        (0085) ;       INPUTS: None.
                                        (0086) ;      RETURNS: Nothing.
                                        (0087) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0088) ;               modified as may the Page Pointer registers!
                                        (0089) ;               In the large memory model currently only the page
                                        (0090) ;               pointer registers listed below are modified.  This does
                                        (0091) ;               not guarantee that in future implementations of this
                                        (0092) ;               function other page pointer registers will not be
                                        (0093) ;               modified.
                                        (0094) ;          
                                        (0095) ;               Page Pointer Registers Modified: 
                                        (0096) ;               CUR_PP
                                        (0097) ;
                                        (0098) _LoadConfig_robottiprojekti:
                                        (0099)  LoadConfig_robottiprojekti:
                                        (0100)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0101) 
02CA: 10       PUSH  X                  (0102) 	push	x
02CB: 70 EF    AND   F,0xEF             
                                        (0103)     M8C_SetBank0                    ; Force bank 0
02CD: 50 00    MOV   A,0x0              (0104)     mov     a, 0                    ; Specify bank 0
02CF: 67       ASR   A                  (0105)     asr     a                       ; Store in carry flag
                                        (0106)                                     ; Load bank 0 table:
02D0: 50 01    MOV   A,0x1              (0107)     mov     A, >LoadConfigTBL_robottiprojekti_Bank0
02D2: 57 5A    MOV   X,0x5A             (0108)     mov     X, <LoadConfigTBL_robottiprojekti_Bank0
02D4: 7C 02 E5 LCALL 0x02E5             (0109)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0110) 
02D7: 50 01    MOV   A,0x1              (0111)     mov     a, 1                    ; Specify bank 1
02D9: 67       ASR   A                  (0112)     asr     a                       ; Store in carry flag
                                        (0113)                                     ; Load bank 1 table:
02DA: 50 01    MOV   A,0x1              (0114)     mov     A, >LoadConfigTBL_robottiprojekti_Bank1
02DC: 57 9D    MOV   X,0x9D             (0115)     mov     X, <LoadConfigTBL_robottiprojekti_Bank1
02DE: 7C 02 E5 LCALL 0x02E5             (0116)     lcall   LoadConfig              ; Load the bank 1 values
02E1: 70 EF    AND   F,0xEF             
                                        (0117) 
                                        (0118)     M8C_SetBank0                    ; Force return to bank 0
02E3: 20       POP   X                  (0119) 	pop		x
                                        (0120) 
                                        (0121)     RAM_EPILOGUE RAM_USE_CLASS_4
02E4: 7F       RET                      (0122)     ret
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) 
                                        (0127) ;---------------------------------------------------------------------------
                                        (0128) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0129) ;              pairs. Terminate on address=0xFF.
                                        (0130) ;
                                        (0131) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0132) ;           Flag Register Carry bit encodes the Register Bank
                                        (0133) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0134) ;
                                        (0135) ;  RETURNS: nothing.
                                        (0136) ;
                                        (0137) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0138) ;                X-3 Temporary store for register address
                                        (0139) ;                X-2 LSB of config table address
                                        (0140) ;                X-1 MSB of config table address
                                        (0141) ;
                                        (0142) LoadConfig:
                                        (0143)     RAM_PROLOGUE RAM_USE_CLASS_2
02E5: 38 02    ADD   SP,0x2             (0144)     add     SP, 2                   ; Set up local vars
02E7: 10       PUSH  X                  (0145)     push    X                       ; Save config table address on stack
02E8: 08       PUSH  A                  (0146)     push    A
02E9: 4F       MOV   X,SP               (0147)     mov     X, SP
02EA: 56 FC 00 MOV   [X-4],0x0          (0148)     mov     [X-4], 0                ; Set default Destination to Bank 0
02ED: D0 04    JNC   0x02F2             (0149)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
02EF: 56 FC 01 MOV   [X-4],0x1          (0150)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0151) .BankSelectSaved:
02F2: 18       POP   A                  (0152)     pop     A
02F3: 20       POP   X                  (0153)     pop     X
02F4: 70 EF    AND   F,0xEF             
02F6: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0154) 
                                        (0155) LoadConfigLp:
                                        (0156)     M8C_SetBank0                    ; Switch to bank 0
                                        (0157)     M8C_ClearWDT                    ; Clear the watchdog for long inits
02F9: 10       PUSH  X                  (0158)     push    X                       ; Preserve the config table address
02FA: 08       PUSH  A                  (0159)     push    A
02FB: 28       ROMX                     (0160)     romx                            ; Load register address from table
02FC: 39 FF    CMP   A,0xFF             (0161)     cmp     A, END_CONFIG_TABLE     ; End of table?
02FE: A0 1F    JZ    0x031E             (0162)     jz      EndLoadConfig           ;   Yes, go wrap it up
0300: 4F       MOV   X,SP               (0163)     mov     X, SP                   ;
0301: 48 FC 01 TST   [X-4],0x1          (0164)     tst     [X-4], 1                ; Loading IO Bank 1?
0304: A0 03    JZ    0x0308             (0165)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
0306: 71 10    OR    F,0x10             
                                        (0166)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0167) .IOBankNowSet:
0308: 54 FD    MOV   [X-3],A            (0168)     mov     [X-3], A                ; Stash the register address
030A: 18       POP   A                  (0169)     pop     A                       ; Retrieve the table address
030B: 20       POP   X                  (0170)     pop     X
030C: 75       INC   X                  (0171)     inc     X                       ; Advance to the data byte
030D: 09 00    ADC   A,0x0              (0172)     adc     A, 0
030F: 10       PUSH  X                  (0173)     push    X                       ; Save the config table address again
0310: 08       PUSH  A                  (0174)     push    A
0311: 28       ROMX                     (0175)     romx                            ; load config data from the table
0312: 4F       MOV   X,SP               (0176)     mov     X, SP                   ; retrieve the register address
0313: 59 FD    MOV   X,[X-3]            (0177)     mov     X, [X-3]
0315: 61 00    MOV   REG[X+0x0],A       (0178)     mov     reg[X], A               ; Configure the register
0317: 18       POP   A                  (0179)     pop     A                       ; retrieve the table address
0318: 20       POP   X                  (0180)     pop     X
0319: 75       INC   X                  (0181)     inc     X                       ; advance to next table entry
031A: 09 00    ADC   A,0x0              (0182)     adc     A, 0
031C: 8F D7    JMP   0x02F4             (0183)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0184) EndLoadConfig:
031E: 38 FC    ADD   SP,0xFC            (0185)     add     SP, -4
                                        (0186)     RAM_EPILOGUE RAM_USE_CLASS_2
0320: 7F       RET                      (0187)     ret
                                        (0188) 
                                        (0189) AREA InterruptRAM(ram, rel)
                                        (0190) 
                                        (0191) NO_SHADOW:
                                        (0192) _NO_SHADOW:
                                        (0193) ; write only register shadows
                                        (0194) _Port_1_Data_SHADE:
                                        (0195) Port_1_Data_SHADE:	BLK	1
                                        (0196) _Port_2_Data_SHADE:
                                        (0197) Port_2_Data_SHADE:	BLK	1
                                        (0198) _Port_2_DriveMode_0_SHADE:
                                        (0199) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0200) _Port_2_DriveMode_1_SHADE:
                                        (0201) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0202) 
FILE: lib\timer8int.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
0321: 08       PUSH  A                  (0003) ;;  FILENAME: Timer8INT.asm
                                        (0004) ;;   Version: 2.70, Updated on 2013/5/19 at 10:44:42
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
0322: 51 28    MOV   A,[__r0]           (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
0324: 08       PUSH  A                  (0010) ;;*****************************************************************************
0325: 51 27    MOV   A,[__r1]           (0011) ;;*****************************************************************************
0327: 08       PUSH  A                  (0012) 
0328: 51 26    MOV   A,[__r2]           (0013) include "m8c.inc"
032A: 08       PUSH  A                  (0014) include "memory.inc"
032B: 51 25    MOV   A,[__r3]           (0015) include "Timer8.inc"
032D: 08       PUSH  A                  (0016) 
032E: 51 24    MOV   A,[__r4]           (0017) 
0330: 08       PUSH  A                  (0018) ;-----------------------------------------------
0331: 51 23    MOV   A,[__r5]           (0019) ;  Global Symbols
0333: 08       PUSH  A                  (0020) ;-----------------------------------------------
0334: 51 22    MOV   A,[__r6]           (0021) export  _Timer8_ISR
0336: 08       PUSH  A                  (0022) 
0337: 51 21    MOV   A,[__r7]           (0023) 
0339: 08       PUSH  A                  (0024) AREA InterruptRAM (RAM,REL,CON)
033A: 51 20    MOV   A,[__r8]           (0025) 
033C: 08       PUSH  A                  (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
033D: 51 1F    MOV   A,[__r9]           (0027) ;---------------------------------------------------
033F: 08       PUSH  A                  (0028) ; Insert your custom declarations below this banner
0340: 51 1E    MOV   A,[__r10]          (0029) ;---------------------------------------------------
0342: 08       PUSH  A                  (0030) 
0343: 51 1D    MOV   A,[__r11]          (0031) ;------------------------
0345: 08       PUSH  A                  (0032) ; Includes
0346: 51 1C    MOV   A,[__rX]           (0033) ;------------------------
0348: 08       PUSH  A                  (0034) 
0349: 51 1B    MOV   A,[__rY]           (0035) 	
034B: 08       PUSH  A                  (0036) ;------------------------
034C: 51 1A    MOV   A,[__rZ]           (0037) ;  Constant Definitions
034E: 08       PUSH  A                  (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _Timer8_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _Timer8_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    PRESERVE_CPU_CONTEXT
034F: 7C 07 E7 LCALL _TimerInterrupt    (0081)    lcall _TimerInterrupt
0352: 18       POP   A                  
0353: 53 1A    MOV   [__rZ],A           
0355: 18       POP   A                  
0356: 53 1B    MOV   [__rY],A           
0358: 18       POP   A                  
0359: 53 1C    MOV   [__rX],A           
035B: 18       POP   A                  
035C: 53 1D    MOV   [__r11],A          
035E: 18       POP   A                  
035F: 53 1E    MOV   [__r10],A          
0361: 18       POP   A                  
0362: 53 1F    MOV   [__r9],A           
0364: 18       POP   A                  
0365: 53 20    MOV   [__r8],A           
0367: 18       POP   A                  
0368: 53 21    MOV   [__r7],A           
036A: 18       POP   A                  
036B: 53 22    MOV   [__r6],A           
036D: 18       POP   A                  
036E: 53 23    MOV   [__r5],A           
0370: 18       POP   A                  
0371: 53 24    MOV   [__r4],A           
0373: 18       POP   A                  
0374: 53 25    MOV   [__r3],A           
0376: 18       POP   A                  
0377: 53 26    MOV   [__r2],A           
0379: 18       POP   A                  
037A: 53 27    MOV   [__r1],A           
037C: 18       POP   A                  
037D: 53 28    MOV   [__r0],A           
037F: 18       POP   A                  
                                        (0082)    RESTORE_CPU_CONTEXT
                                        (0083)    ;ljmp _TimerInterrupt
                                        (0084)    
                                        (0085)    ;---------------------------------------------------
                                        (0086)    ; Insert a lcall to a C function above this banner
                                        (0087)    ; and un-comment the lines between these banners
                                        (0088)    ;---------------------------------------------------
                                        (0089)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0090) 
0380: 7E       RETI                     (0091)    reti
                                        (0092) 
                                        (0093) 
                                        (0094) ; end of file Timer8INT.asm
FILE: lib\timer8.asm                    (0001) ;;*****************************************************************************
0381: 43 E1 04 OR    REG[0xE1],0x4      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer8.asm
                                        (0004) ;;   Version: 2.70, Updated on 2013/5/19 at 10:44:42
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Timer8.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Timer8_EnableInt
                                        (0030) export _Timer8_EnableInt
                                        (0031) export  Timer8_DisableInt
                                        (0032) export _Timer8_DisableInt
                                        (0033) export  Timer8_Start
                                        (0034) export _Timer8_Start
                                        (0035) export  Timer8_Stop
                                        (0036) export _Timer8_Stop
                                        (0037) export  Timer8_WritePeriod
                                        (0038) export _Timer8_WritePeriod
                                        (0039) export  Timer8_WriteCompareValue
                                        (0040) export _Timer8_WriteCompareValue
                                        (0041) export  Timer8_bReadCompareValue
                                        (0042) export _Timer8_bReadCompareValue
                                        (0043) export  Timer8_bReadTimer
                                        (0044) export _Timer8_bReadTimer
                                        (0045) export  Timer8_bReadTimerSaveCV
                                        (0046) export _Timer8_bReadTimerSaveCV
                                        (0047) 
                                        (0048) ; The following functions are deprecated and subject to omission in future releases
                                        (0049) ;
                                        (0050) export  bTimer8_ReadCompareValue  ; deprecated
                                        (0051) export _bTimer8_ReadCompareValue  ; deprecated
                                        (0052) export  bTimer8_ReadTimer         ; deprecated
                                        (0053) export _bTimer8_ReadTimer         ; deprecated
                                        (0054) export  bTimer8_ReadTimerSaveCV   ; deprecated
                                        (0055) export _bTimer8_ReadTimerSaveCV   ; deprecated
                                        (0056) 
                                        (0057) export  bTimer8_ReadCounter       ; obsolete
                                        (0058) export _bTimer8_ReadCounter       ; obsolete
                                        (0059) export  bTimer8_CaptureCounter    ; obsolete
                                        (0060) export _bTimer8_CaptureCounter    ; obsolete
                                        (0061) 
                                        (0062) 
                                        (0063) AREA robottiprojekti_RAM (RAM,REL)
                                        (0064) 
                                        (0065) ;-----------------------------------------------
                                        (0066) ;  Constant Definitions
                                        (0067) ;-----------------------------------------------
                                        (0068) 
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: Timer8_EnableInt
                                        (0080) ;
                                        (0081) ;  DESCRIPTION:
                                        (0082) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
                                        (0083) ;     associated with this User Module. This function has no effect until and
                                        (0084) ;     unless the global interrupts are enabled (for example by using the
                                        (0085) ;     macro M8C_EnableGInt).
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;
                                        (0088) ;  ARGUMENTS:    None.
                                        (0089) ;  RETURNS:      Nothing.
                                        (0090) ;  SIDE EFFECTS: 
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097)  Timer8_EnableInt:
                                        (0098) _Timer8_EnableInt:
                                        (0099)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0100)    Timer8_EnableInt_M
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
0384: 7F       RET                      (0102)    ret
0385: 41 E1 FB AND   REG[0xE1],0xFB     
                                        (0103) 
                                        (0104) .ENDSECTION
                                        (0105) 
                                        (0106) 
                                        (0107) .SECTION
                                        (0108) ;-----------------------------------------------------------------------------
                                        (0109) ;  FUNCTION NAME: Timer8_DisableInt
                                        (0110) ;
                                        (0111) ;  DESCRIPTION:
                                        (0112) ;     Disables this timer's interrupt by clearing the interrupt enable
                                        (0113) ;     mask bit associated with this User Module.
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None
                                        (0117) ;  RETURNS:      Nothing
                                        (0118) ;  SIDE EFFECTS: 
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  Timer8_DisableInt:
                                        (0126) _Timer8_DisableInt:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0128)    Timer8_DisableInt_M
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
0388: 7F       RET                      (0130)    ret
0389: 43 2B 01 OR    REG[0x2B],0x1      
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) 
                                        (0135) .SECTION
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;  FUNCTION NAME: Timer8_Start
                                        (0138) ;
                                        (0139) ;  DESCRIPTION:
                                        (0140) ;     Sets the start bit in the Control register of this user module.  The
                                        (0141) ;     timer will begin counting on the next input clock.
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:    None
                                        (0145) ;  RETURNS:      Nothing
                                        (0146) ;  SIDE EFFECTS: 
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  Timer8_Start:
                                        (0154) _Timer8_Start:
                                        (0155)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0156)    Timer8_Start_M
                                        (0157)    RAM_EPILOGUE RAM_USE_CLASS_1
038C: 7F       RET                      (0158)    ret
038D: 41 2B FE AND   REG[0x2B],0xFE     
                                        (0159) 
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: Timer8_Stop
                                        (0166) ;
                                        (0167) ;  DESCRIPTION:
                                        (0168) ;     Disables timer operation by clearing the start bit in the Control
                                        (0169) ;     register.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    None
                                        (0173) ;  RETURNS:      Nothing
                                        (0174) ;  SIDE EFFECTS: 
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;
                                        (0181)  Timer8_Stop:
                                        (0182) _Timer8_Stop:
                                        (0183)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0184)    Timer8_Stop_M
                                        (0185)    RAM_EPILOGUE RAM_USE_CLASS_1
0390: 7F       RET                      (0186)    ret
                                        (0187) 
                                        (0188) .ENDSECTION
                                        (0189) 
                                        (0190) 
                                        (0191) .SECTION
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  FUNCTION NAME: Timer8_WritePeriod
                                        (0194) ;
                                        (0195) ;  DESCRIPTION:
                                        (0196) ;     Write the 8-bit period value into the Period register (DR1). If the
                                        (0197) ;     Timer user module is stopped, then this value will also be latched
                                        (0198) ;     into the Count register (DR0).
                                        (0199) ;-----------------------------------------------------------------------------
                                        (0200) ;
                                        (0201) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0202) ;  RETURNS:   Nothing
                                        (0203) ;  SIDE EFFECTS: 
                                        (0204) ;    The A and X registers may be modified by this or future implementations
                                        (0205) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0206) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0207) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0208) ;    functions.
                                        (0209) ;
                                        (0210)  Timer8_WritePeriod:
                                        (0211) _Timer8_WritePeriod:
                                        (0212)    RAM_PROLOGUE RAM_USE_CLASS_1
0391: 60 29    MOV   REG[0x29],A        (0213)    mov   reg[Timer8_PERIOD_REG], A
                                        (0214)    RAM_EPILOGUE RAM_USE_CLASS_1
0393: 7F       RET                      (0215)    ret
                                        (0216) 
                                        (0217) .ENDSECTION
                                        (0218) 
                                        (0219) 
                                        (0220) .SECTION
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;  FUNCTION NAME: Timer8_WriteCompareValue
                                        (0223) ;
                                        (0224) ;  DESCRIPTION:
                                        (0225) ;     Writes compare value into the Compare register (DR2).
                                        (0226) ;
                                        (0227) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                        (0228) ;           Compare register. (Call Timer8_Stop to disable).
                                        (0229) ;-----------------------------------------------------------------------------
                                        (0230) ;
                                        (0231) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0232) ;  RETURNS:      Nothing
                                        (0233) ;  SIDE EFFECTS: 
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240)  Timer8_WriteCompareValue:
                                        (0241) _Timer8_WriteCompareValue:
                                        (0242)    RAM_PROLOGUE RAM_USE_CLASS_1
0394: 60 2A    MOV   REG[0x2A],A        (0243)    mov   reg[Timer8_COMPARE_REG], A
                                        (0244)    RAM_EPILOGUE RAM_USE_CLASS_1
0396: 7F       RET                      (0245)    ret
                                        (0246) 
                                        (0247) .ENDSECTION
                                        (0248) 
                                        (0249) 
                                        (0250) .SECTION
                                        (0251) ;-----------------------------------------------------------------------------
                                        (0252) ;  FUNCTION NAME: Timer8_bReadCompareValue
                                        (0253) ;
                                        (0254) ;  DESCRIPTION:
                                        (0255) ;     Reads the Compare register.
                                        (0256) ;-----------------------------------------------------------------------------
                                        (0257) ;
                                        (0258) ;  ARGUMENTS:    None
                                        (0259) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0260) ;  SIDE EFFECTS: 
                                        (0261) ;    The A and X registers may be modified by this or future implementations
                                        (0262) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0263) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0264) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0265) ;    functions.
                                        (0266) ;
                                        (0267)  Timer8_bReadCompareValue:
                                        (0268) _Timer8_bReadCompareValue:
                                        (0269)  bTimer8_ReadCompareValue:                       ; this name deprecated
                                        (0270) _bTimer8_ReadCompareValue:                       ; this name deprecated
                                        (0271)    RAM_PROLOGUE RAM_USE_CLASS_1
0397: 5D 2A    MOV   A,REG[0x2A]        (0272)    mov   A, reg[Timer8_COMPARE_REG]
                                        (0273)    RAM_EPILOGUE RAM_USE_CLASS_1
0399: 7F       RET                      (0274)    ret
                                        (0275) 
                                        (0276) .ENDSECTION
                                        (0277) 
                                        (0278) 
                                        (0279) .SECTION
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;  FUNCTION NAME: Timer8_bReadTimerSaveCV
                                        (0282) ;
                                        (0283) ;  DESCRIPTION:
                                        (0284) ;     Returns the value in the Count register (DR0), preserving the
                                        (0285) ;     value in the compare register (DR2).
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS: None
                                        (0289) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0290) ;  SIDE EFFECTS:
                                        (0291) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                        (0292) ;     2) If enabled, Global interrupts are momentarily disabled.
                                        (0293) ;     3) The user module is stopped momentarily while the compare value is
                                        (0294) ;        restored.  This may cause the Count register to miss one or more
                                        (0295) ;        counts depending on the input clock speed.
                                        (0296) ;     4) The A and X registers may be modified by this or future implementations
                                        (0297) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0298) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0299) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0300) ;        functions.
                                        (0301) ;
                                        (0302) ;  THEORY of OPERATION:
                                        (0303) ;     1) Read and save the Compare register.
                                        (0304) ;     2) Read the Count register, causing its data to be latched into
                                        (0305) ;        the Compare register.
                                        (0306) ;     3) Read and save the Counter value, now in the Compare register,
                                        (0307) ;        to the buffer.
                                        (0308) ;     4) Disable global interrupts
                                        (0309) ;     5) Halt the timer
                                        (0310) ;     6) Restore the Compare register values
                                        (0311) ;     7) Start the Timer again
                                        (0312) ;     8) Restore global interrupt state
                                        (0313) ;
                                        (0314)  Timer8_bReadTimerSaveCV:
                                        (0315) _Timer8_bReadTimerSaveCV:
                                        (0316)  bTimer8_ReadTimerSaveCV:                        ; this name deprecated
                                        (0317) _bTimer8_ReadTimerSaveCV:                        ; this name deprecated
                                        (0318)  bTimer8_ReadCounter:                            ; this name deprecated
                                        (0319) _bTimer8_ReadCounter:                            ; this name deprecated
                                        (0320) 
                                        (0321) CpuFlags:      equ   0
                                        (0322) bCount:        equ   1
                                        (0323) 
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_2
039A: 4F       MOV   X,SP               (0325)    mov   X, SP                                   ; X <- stack frame pointer
039B: 38 02    ADD   SP,0x2             (0326)    add   SP, 2                                   ; Reserve space for flags, count
039D: 5D 2B    MOV   A,REG[0x2B]        (0327)    mov   A, reg[Timer8_CONTROL_REG]              ; save the Control register
039F: 08       PUSH  A                  (0328)    push  A
03A0: 5D 2A    MOV   A,REG[0x2A]        (0329)    mov   A, reg[Timer8_COMPARE_REG]              ; save the Compare register
03A2: 08       PUSH  A                  (0330)    push  A
03A3: 5D 28    MOV   A,REG[0x28]        (0331)    mov   A, reg[Timer8_COUNTER_REG]              ; synchronous copy DR2 <- DR0
                                        (0332)                                                  ; This may cause an interrupt!
03A5: 5D 2A    MOV   A,REG[0x2A]        (0333)    mov   A, reg[Timer8_COMPARE_REG]              ; Now grab DR2 (DR0) and save
03A7: 54 01    MOV   [X+1],A            (0334)    mov   [X+bCount], A
03A9: 50 00    MOV   A,0x0              (0335)    mov   A, 0                                    ; Guess the global interrupt state
03AB: 49 F7 01 TST   REG[0xF7],0x1      (0336)    tst   reg[CPU_F], FLAG_GLOBAL_IE              ; Currently Disabled?
03AE: A0 03    JZ    0x03B2             (0337)    jz    .SetupStatusFlag                        ;   Yes, guess was correct
03B0: 50 01    MOV   A,0x1              (0338)    mov   A, FLAG_GLOBAL_IE                       ;    No, modify our guess
                                        (0339) .SetupStatusFlag:                                ; and ...
03B2: 54 00    MOV   [X+0],A            (0340)    mov   [X+CpuFlags], A                         ;   StackFrame[0] <- Flag Reg image
03B4: 70 FE    AND   F,0xFE             
03B6: 41 2B FE AND   REG[0x2B],0xFE     
                                        (0341)    M8C_DisableGInt                               ; Disable interrupts globally
                                        (0342)    Timer8_Stop_M                                 ; Stop the timer
03B9: 18       POP   A                  (0343)    pop   A                                       ; Restore the Compare register
03BA: 60 2A    MOV   REG[0x2A],A        (0344)    mov   reg[Timer8_COMPARE_REG], A
03BC: 18       POP   A                  (0345)    pop   A                                       ; restore start state of the timer
03BD: 60 2B    MOV   REG[0x2B],A        (0346)    mov   reg[Timer8_CONTROL_REG], A
03BF: 18       POP   A                  (0347)    pop   A                                       ; Return result stored in stack frame
                                        (0348)    RAM_EPILOGUE RAM_USE_CLASS_2
03C0: 7E       RETI                     (0349)    reti                                          ; Flag Reg <- StackFrame[0]
                                        (0350) 
                                        (0351) .ENDSECTION
                                        (0352) 
                                        (0353) 
                                        (0354) .SECTION
                                        (0355) ;-----------------------------------------------------------------------------
                                        (0356) ;  FUNCTION NAME: Timer8_bReadTimer
                                        (0357) ;
                                        (0358) ;  DESCRIPTION:
                                        (0359) ;     Performs a software capture of the Count register.  A synchronous
                                        (0360) ;     read of the Count register is performed.  The timer is NOT stopped.
                                        (0361) ;
                                        (0362) ;     WARNING - this will cause loss of data in the Compare register.
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;
                                        (0365) ;  ARGUMENTS:    None
                                        (0366) ;  RETURNS:      fastcall16 BYTE bCount, (value of DR0 in the A register)
                                        (0367) ;  SIDE EFFECTS:
                                        (0368) ;    May cause an interrupt.
                                        (0369) ;
                                        (0370) ;    The A and X registers may be modified by this or future implementations
                                        (0371) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0372) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0373) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0374) ;    functions.
                                        (0375) ;
                                        (0376) ;  THEORY of OPERATION:
                                        (0377) ;     1) Read the Count register - this causes the count value to be
                                        (0378) ;        latched into the Compare register.
                                        (0379) ;     2) Read and return the Count register values from the Compare
                                        (0380) ;        registers into the return buffer.
                                        (0381) ;
                                        (0382)  Timer8_bReadTimer:
                                        (0383) _Timer8_bReadTimer:
                                        (0384)  bTimer8_ReadTimer:                              ; this name deprecated
                                        (0385) _bTimer8_ReadTimer:                              ; this name deprecated
                                        (0386)  bTimer8_CaptureCounter:                         ; this name deprecated
                                        (0387) _bTimer8_CaptureCounter:                         ; this name deprecated
                                        (0388) 
                                        (0389)    RAM_PROLOGUE RAM_USE_CLASS_1
03C1: 5D 28    MOV   A,REG[0x28]        (0390)    mov   A, reg[Timer8_COUNTER_REG]              ; synchronous copy DR2 <- DR0
                                        (0391)                                                  ; This may cause an interrupt!
03C3: 5D 2A    MOV   A,REG[0x2A]        (0392)    mov   A, reg[Timer8_COMPARE_REG]              ; Return DR2 (actually DR0)
                                        (0393)    RAM_EPILOGUE RAM_USE_CLASS_1
03C5: 7F       RET                      (0394)    ret
                                        (0395) 
                                        (0396) .ENDSECTION
                                        (0397) 
                                        (0398) ; End of File Timer8.asm
FILE: lib\pwm8_vasenint.asm             (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_VASENINT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8_VASEN.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8_VASEN_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8_VASEN_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8_VASEN_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
03C6: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM8_VASENINT.asm
FILE: lib\pwm8_vasen.asm                (0001) ;;*****************************************************************************
03C7: 43 E1 01 OR    REG[0xE1],0x1      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_VASEN.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8_VASEN.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8_VASEN_EnableInt
                                        (0030) export _PWM8_VASEN_EnableInt
                                        (0031) export  PWM8_VASEN_DisableInt
                                        (0032) export _PWM8_VASEN_DisableInt
                                        (0033) export  PWM8_VASEN_Start
                                        (0034) export _PWM8_VASEN_Start
                                        (0035) export  PWM8_VASEN_Stop
                                        (0036) export _PWM8_VASEN_Stop
                                        (0037) export  PWM8_VASEN_WritePeriod
                                        (0038) export _PWM8_VASEN_WritePeriod
                                        (0039) export  PWM8_VASEN_WritePulseWidth
                                        (0040) export _PWM8_VASEN_WritePulseWidth
                                        (0041) export  PWM8_VASEN_bReadPulseWidth
                                        (0042) export _PWM8_VASEN_bReadPulseWidth
                                        (0043) export  PWM8_VASEN_bReadCounter
                                        (0044) export _PWM8_VASEN_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8_VASEN_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8_VASEN_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8_VASEN_ReadCounter       ; deprecated
                                        (0051) export _bPWM8_VASEN_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA robottiprojekti_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8_VASEN_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8_VASEN_EnableInt:
                                        (0091) _PWM8_VASEN_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8_VASEN_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
03CA: 7F       RET                      (0095)    ret
03CB: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8_VASEN_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8_VASEN_DisableInt:
                                        (0119) _PWM8_VASEN_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8_VASEN_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
03CE: 7F       RET                      (0123)    ret
03CF: 43 23 01 OR    REG[0x23],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8_VASEN_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8_VASEN_Start:
                                        (0148) _PWM8_VASEN_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8_VASEN_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
03D2: 7F       RET                      (0152)    ret
03D3: 41 23 FE AND   REG[0x23],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8_VASEN_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8_VASEN_Stop:
                                        (0176) _PWM8_VASEN_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8_VASEN_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
03D6: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8_VASEN_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8_VASEN_WritePeriod:
                                        (0206) _PWM8_VASEN_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
03D7: 60 21    MOV   REG[0x21],A        (0208)    mov   reg[PWM8_VASEN_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
03D9: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8_VASEN_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8_VASEN_WritePulseWidth:
                                        (0233) _PWM8_VASEN_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
03DA: 60 22    MOV   REG[0x22],A        (0235)    mov   reg[PWM8_VASEN_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
03DC: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8_VASEN_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8_VASEN_bReadPulseWidth:
                                        (0260) _PWM8_VASEN_bReadPulseWidth:
                                        (0261)  bPWM8_VASEN_ReadPulseWidth:                     ; this name deprecated
                                        (0262) _bPWM8_VASEN_ReadPulseWidth:                     ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
03DD: 5D 22    MOV   A,REG[0x22]        (0264)    mov   A, reg[PWM8_VASEN_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
03DF: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8_VASEN_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8_VASEN_bReadCounter:
                                        (0293) _PWM8_VASEN_bReadCounter:
                                        (0294)  bPWM8_VASEN_ReadCounter:                        ; this name deprecated
                                        (0295) _bPWM8_VASEN_ReadCounter:                        ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
03E0: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
03E1: 5D 22    MOV   A,REG[0x22]        (0304)    mov   A, reg[PWM8_VASEN_COMPARE_REG]          ; Save the Compare register on the stack
03E3: 08       PUSH  A                  (0305)    push  A                                       ;
03E4: 41 23 FE AND   REG[0x23],0xFE     
03E7: 71 10    OR    F,0x10             
                                        (0306)    PWM8_VASEN_Stop_M                             ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
03E9: 5D 21    MOV   A,REG[0x21]        (0308)    mov   A, reg[PWM8_VASEN_INPUT_REG]            ; save the clock input setting
03EB: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
03EC: 62 21 00 MOV   REG[0x21],0x0      (0311)    mov   reg[PWM8_VASEN_INPUT_REG], INPUT_REG_NULL
03EF: 70 EF    AND   F,0xEF             
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
03F1: 5D 20    MOV   A,REG[0x20]        (0314)    mov   A, reg[PWM8_VASEN_COUNTER_REG]          ; DR2 <- DR0
03F3: 5D 22    MOV   A,REG[0x22]        (0315)    mov   A, reg[PWM8_VASEN_COMPARE_REG]          ; Stash the Count on the stack
03F5: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
03F6: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
03F8: 60 22    MOV   REG[0x22],A        (0318)    mov   reg[PWM8_VASEN_COMPARE_REG], A
03FA: 71 10    OR    F,0x10             
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
03FC: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
03FE: 60 21    MOV   REG[0x21],A        (0321)    mov   reg[PWM8_VASEN_INPUT_REG], A            ;
0400: 70 EF    AND   F,0xEF             
0402: 43 23 01 OR    REG[0x23],0x1      
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8_VASEN_Start_M                            ;   then re-enable the PWM.
0405: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
0406: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
0408: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8_VASEN.asm
FILE: lib\pwm8_servoint.asm             (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_SERVOINT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8_SERVO.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8_SERVO_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8_SERVO_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8_SERVO_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0409: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM8_SERVOINT.asm
FILE: lib\pwm8_servo.asm                (0001) ;;*****************************************************************************
040A: 43 E1 10 OR    REG[0xE1],0x10     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_SERVO.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8_SERVO.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8_SERVO_EnableInt
                                        (0030) export _PWM8_SERVO_EnableInt
                                        (0031) export  PWM8_SERVO_DisableInt
                                        (0032) export _PWM8_SERVO_DisableInt
                                        (0033) export  PWM8_SERVO_Start
                                        (0034) export _PWM8_SERVO_Start
                                        (0035) export  PWM8_SERVO_Stop
                                        (0036) export _PWM8_SERVO_Stop
                                        (0037) export  PWM8_SERVO_WritePeriod
                                        (0038) export _PWM8_SERVO_WritePeriod
                                        (0039) export  PWM8_SERVO_WritePulseWidth
                                        (0040) export _PWM8_SERVO_WritePulseWidth
                                        (0041) export  PWM8_SERVO_bReadPulseWidth
                                        (0042) export _PWM8_SERVO_bReadPulseWidth
                                        (0043) export  PWM8_SERVO_bReadCounter
                                        (0044) export _PWM8_SERVO_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8_SERVO_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8_SERVO_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8_SERVO_ReadCounter       ; deprecated
                                        (0051) export _bPWM8_SERVO_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA robottiprojekti_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8_SERVO_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8_SERVO_EnableInt:
                                        (0091) _PWM8_SERVO_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8_SERVO_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
040D: 7F       RET                      (0095)    ret
040E: 41 E1 EF AND   REG[0xE1],0xEF     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8_SERVO_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8_SERVO_DisableInt:
                                        (0119) _PWM8_SERVO_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8_SERVO_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0411: 7F       RET                      (0123)    ret
0412: 43 33 01 OR    REG[0x33],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8_SERVO_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8_SERVO_Start:
                                        (0148) _PWM8_SERVO_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8_SERVO_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
0415: 7F       RET                      (0152)    ret
0416: 41 33 FE AND   REG[0x33],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8_SERVO_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8_SERVO_Stop:
                                        (0176) _PWM8_SERVO_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8_SERVO_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
0419: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8_SERVO_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8_SERVO_WritePeriod:
                                        (0206) _PWM8_SERVO_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
041A: 60 31    MOV   REG[0x31],A        (0208)    mov   reg[PWM8_SERVO_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
041C: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8_SERVO_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8_SERVO_WritePulseWidth:
                                        (0233) _PWM8_SERVO_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
041D: 60 32    MOV   REG[0x32],A        (0235)    mov   reg[PWM8_SERVO_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
041F: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8_SERVO_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8_SERVO_bReadPulseWidth:
                                        (0260) _PWM8_SERVO_bReadPulseWidth:
                                        (0261)  bPWM8_SERVO_ReadPulseWidth:                     ; this name deprecated
                                        (0262) _bPWM8_SERVO_ReadPulseWidth:                     ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
0420: 5D 32    MOV   A,REG[0x32]        (0264)    mov   A, reg[PWM8_SERVO_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
0422: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8_SERVO_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8_SERVO_bReadCounter:
                                        (0293) _PWM8_SERVO_bReadCounter:
                                        (0294)  bPWM8_SERVO_ReadCounter:                        ; this name deprecated
                                        (0295) _bPWM8_SERVO_ReadCounter:                        ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
0423: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
0424: 5D 32    MOV   A,REG[0x32]        (0304)    mov   A, reg[PWM8_SERVO_COMPARE_REG]          ; Save the Compare register on the stack
0426: 08       PUSH  A                  (0305)    push  A                                       ;
0427: 41 33 FE AND   REG[0x33],0xFE     
042A: 71 10    OR    F,0x10             
                                        (0306)    PWM8_SERVO_Stop_M                             ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
042C: 5D 31    MOV   A,REG[0x31]        (0308)    mov   A, reg[PWM8_SERVO_INPUT_REG]            ; save the clock input setting
042E: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
042F: 62 31 00 MOV   REG[0x31],0x0      (0311)    mov   reg[PWM8_SERVO_INPUT_REG], INPUT_REG_NULL
0432: 70 EF    AND   F,0xEF             
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
0434: 5D 30    MOV   A,REG[0x30]        (0314)    mov   A, reg[PWM8_SERVO_COUNTER_REG]          ; DR2 <- DR0
0436: 5D 32    MOV   A,REG[0x32]        (0315)    mov   A, reg[PWM8_SERVO_COMPARE_REG]          ; Stash the Count on the stack
0438: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
0439: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
043B: 60 32    MOV   REG[0x32],A        (0318)    mov   reg[PWM8_SERVO_COMPARE_REG], A
043D: 71 10    OR    F,0x10             
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
043F: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
0441: 60 31    MOV   REG[0x31],A        (0321)    mov   reg[PWM8_SERVO_INPUT_REG], A            ;
0443: 70 EF    AND   F,0xEF             
0445: 43 33 01 OR    REG[0x33],0x1      
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8_SERVO_Start_M                            ;   then re-enable the PWM.
0448: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
0449: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
044B: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8_SERVO.asm
FILE: lib\pwm8_oikeaint.asm             (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_OIKEAINT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8_OIKEA.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8_OIKEA_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8_OIKEA_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8_OIKEA_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
044C: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM8_OIKEAINT.asm
FILE: lib\pwm8_oikea.asm                (0001) ;;*****************************************************************************
044D: 43 E1 02 OR    REG[0xE1],0x2      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_OIKEA.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8_OIKEA.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8_OIKEA_EnableInt
                                        (0030) export _PWM8_OIKEA_EnableInt
                                        (0031) export  PWM8_OIKEA_DisableInt
                                        (0032) export _PWM8_OIKEA_DisableInt
                                        (0033) export  PWM8_OIKEA_Start
                                        (0034) export _PWM8_OIKEA_Start
                                        (0035) export  PWM8_OIKEA_Stop
                                        (0036) export _PWM8_OIKEA_Stop
                                        (0037) export  PWM8_OIKEA_WritePeriod
                                        (0038) export _PWM8_OIKEA_WritePeriod
                                        (0039) export  PWM8_OIKEA_WritePulseWidth
                                        (0040) export _PWM8_OIKEA_WritePulseWidth
                                        (0041) export  PWM8_OIKEA_bReadPulseWidth
                                        (0042) export _PWM8_OIKEA_bReadPulseWidth
                                        (0043) export  PWM8_OIKEA_bReadCounter
                                        (0044) export _PWM8_OIKEA_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8_OIKEA_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8_OIKEA_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8_OIKEA_ReadCounter       ; deprecated
                                        (0051) export _bPWM8_OIKEA_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA robottiprojekti_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8_OIKEA_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8_OIKEA_EnableInt:
                                        (0091) _PWM8_OIKEA_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8_OIKEA_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
0450: 7F       RET                      (0095)    ret
0451: 41 E1 FD AND   REG[0xE1],0xFD     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8_OIKEA_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8_OIKEA_DisableInt:
                                        (0119) _PWM8_OIKEA_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8_OIKEA_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0454: 7F       RET                      (0123)    ret
0455: 43 27 01 OR    REG[0x27],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8_OIKEA_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8_OIKEA_Start:
                                        (0148) _PWM8_OIKEA_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8_OIKEA_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
0458: 7F       RET                      (0152)    ret
0459: 41 27 FE AND   REG[0x27],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8_OIKEA_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8_OIKEA_Stop:
                                        (0176) _PWM8_OIKEA_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8_OIKEA_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
045C: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8_OIKEA_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8_OIKEA_WritePeriod:
                                        (0206) _PWM8_OIKEA_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
045D: 60 25    MOV   REG[0x25],A        (0208)    mov   reg[PWM8_OIKEA_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
045F: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8_OIKEA_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8_OIKEA_WritePulseWidth:
                                        (0233) _PWM8_OIKEA_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
0460: 60 26    MOV   REG[0x26],A        (0235)    mov   reg[PWM8_OIKEA_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
0462: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8_OIKEA_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8_OIKEA_bReadPulseWidth:
                                        (0260) _PWM8_OIKEA_bReadPulseWidth:
                                        (0261)  bPWM8_OIKEA_ReadPulseWidth:                     ; this name deprecated
                                        (0262) _bPWM8_OIKEA_ReadPulseWidth:                     ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
0463: 5D 26    MOV   A,REG[0x26]        (0264)    mov   A, reg[PWM8_OIKEA_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
0465: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8_OIKEA_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8_OIKEA_bReadCounter:
                                        (0293) _PWM8_OIKEA_bReadCounter:
                                        (0294)  bPWM8_OIKEA_ReadCounter:                        ; this name deprecated
                                        (0295) _bPWM8_OIKEA_ReadCounter:                        ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
0466: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
0467: 5D 26    MOV   A,REG[0x26]        (0304)    mov   A, reg[PWM8_OIKEA_COMPARE_REG]          ; Save the Compare register on the stack
0469: 08       PUSH  A                  (0305)    push  A                                       ;
046A: 41 27 FE AND   REG[0x27],0xFE     
046D: 71 10    OR    F,0x10             
                                        (0306)    PWM8_OIKEA_Stop_M                             ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
046F: 5D 25    MOV   A,REG[0x25]        (0308)    mov   A, reg[PWM8_OIKEA_INPUT_REG]            ; save the clock input setting
0471: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
0472: 62 25 00 MOV   REG[0x25],0x0      (0311)    mov   reg[PWM8_OIKEA_INPUT_REG], INPUT_REG_NULL
0475: 70 EF    AND   F,0xEF             
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
0477: 5D 24    MOV   A,REG[0x24]        (0314)    mov   A, reg[PWM8_OIKEA_COUNTER_REG]          ; DR2 <- DR0
0479: 5D 26    MOV   A,REG[0x26]        (0315)    mov   A, reg[PWM8_OIKEA_COMPARE_REG]          ; Stash the Count on the stack
047B: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
047C: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
047E: 60 26    MOV   REG[0x26],A        (0318)    mov   reg[PWM8_OIKEA_COMPARE_REG], A
0480: 71 10    OR    F,0x10             
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
0482: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
0484: 60 25    MOV   REG[0x25],A        (0321)    mov   reg[PWM8_OIKEA_INPUT_REG], A            ;
0486: 70 EF    AND   F,0xEF             
0488: 43 27 01 OR    REG[0x27],0x1      
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8_OIKEA_Start_M                            ;   then re-enable the PWM.
048B: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
048C: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
048E: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8_OIKEA.asm
FILE: lib\led.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LED.asm
                                        (0004) ;;  Version: 1.40, Updated on 2013/5/19 at 10:43:48
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED user module.
                                        (0008) ;;
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "LED.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) export _LED_Start
                                        (0027) export  LED_Start
                                        (0028) 
                                        (0029) export _LED_Stop
                                        (0030) export  LED_Stop
                                        (0031) 
                                        (0032) export _LED_On
                                        (0033) export  LED_On
                                        (0034) 
                                        (0035) export _LED_Off
                                        (0036) export  LED_Off
                                        (0037) 
                                        (0038) export _LED_Switch
                                        (0039) export  LED_Switch
                                        (0040) 
                                        (0041) export _LED_Invert
                                        (0042) export  LED_Invert
                                        (0043) 
                                        (0044) export _LED_GetState
                                        (0045) export  LED_GetState
                                        (0046) 
                                        (0047) 
                                        (0048) AREA UserModules (ROM, REL)
                                        (0049) 
                                        (0050) 
                                        (0051) .SECTION
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: LED_Start(void)
                                        (0054) ;  FUNCTION NAME: LED_Stop(void)
                                        (0055) ;
                                        (0056) ;  FUNCTION NAME: LED_Switch(void)
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: ( Switch )
                                        (0059) ;     Turn LED on or off     
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: ( Start, Stop )
                                        (0062) ;     Turn LED off                       
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS:  ( Switch )
                                        (0067) ;     A => If 0, turn off LED, if > 0 turn on LED
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  ( Start, Stop )
                                        (0070) ;      None
                                        (0071) ;
                                        (0072) ;  RETURNS:  none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0076) ;
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) _LED_On:
                                        (0079)  LED_On:
048F: 50 01    MOV   A,0x1              (0080)    mov  A,0x01
0491: 80 03    JMP   _LED_Switch        (0081)    jmp  LED_Switch 
                                        (0082) 
                                        (0083) _LED_Start:
                                        (0084)  LED_Start:
                                        (0085) _LED_Stop:
                                        (0086)  LED_Stop:
                                        (0087) _LED_Off:
                                        (0088)  LED_Off:
0493: 50 00    MOV   A,0x0              (0089)    mov  A,0x00
                                        (0090) 
                                        (0091) _LED_Switch:
                                        (0092)  LED_Switch:
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0094)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0095)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0096) 
0495: 29 00    OR    A,0x0              (0097)    or   A,0x00                                   ; Check mode
0497: A0 06    JZ    0x049E             (0098)    jz   .Turn_Off_LED
                                        (0099) 
                                        (0100) .Turn_On_LED:
                                        (0101) IF(0)                                            ; Active High Digit Drive
                                        (0102)    or   [Port_1_Data_SHADE],LED_PinMask
                                        (0103) ELSE                                             ; Active Low Digit Drive
0499: 26 29 7F AND   [0x29],0x7F        (0104)    and  [Port_1_Data_SHADE],~LED_PinMask
                                        (0105) ENDIF
049C: 80 04    JMP   0x04A1             (0106)    jmp  .Switch_LED
                                        (0107) 
                                        (0108) .Turn_Off_LED:
                                        (0109) IF(0)                      ; Active High Digit Drive
                                        (0110)    and  [Port_1_Data_SHADE],~LED_PinMask
                                        (0111) ELSE                              ; Active Low Digit Drive
049E: 2E 29 80 OR    [0x29],0x80        (0112)    or   [Port_1_Data_SHADE],LED_PinMask
                                        (0113) ENDIF
                                        (0114) 
                                        (0115) .Switch_LED:
04A1: 51 29    MOV   A,[0x29]           (0116)    mov  A,[Port_1_Data_SHADE]
04A3: 60 04    MOV   REG[0x4],A         (0117)    mov  reg[LED_PortDR],A
                                        (0118) 
                                        (0119)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_4
04A5: 7F       RET                      (0121)    ret
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: LED_Invert(void)
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;     Invert state of LED                               
                                        (0132) ;
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;
                                        (0135) ;  ARGUMENTS: none
                                        (0136) ;
                                        (0137) ;  RETURNS:  none
                                        (0138) ;
                                        (0139) ;  SIDE EFFECTS:
                                        (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) _LED_Invert:
                                        (0144)  LED_Invert:
                                        (0145)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0147)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0148) 
04A6: 36 29 80 XOR   [0x29],0x80        (0149)    xor  [Port_1_Data_SHADE],LED_PinMask
04A9: 51 29    MOV   A,[0x29]           (0150)    mov  A,[Port_1_Data_SHADE]
04AB: 60 04    MOV   REG[0x4],A         (0151)    mov  reg[LED_PortDR],A
                                        (0152) 
                                        (0153)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0154)    RAM_EPILOGUE RAM_USE_CLASS_4
04AD: 7F       RET                      (0155)    ret
                                        (0156) .ENDSECTION
                                        (0157) 
                                        (0158) .SECTION
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;  FUNCTION NAME: LED_GetState(void)
                                        (0161) ;
                                        (0162) ;  DESCRIPTION:
                                        (0163) ;     Get state of LED
                                        (0164) ;
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;
                                        (0167) ;  ARGUMENTS: none
                                        (0168) ;
                                        (0169) ;  RETURNS:  
                                        (0170) ;    State of LED   1 = ON,  0 = OFF
                                        (0171) ;
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0174) ;
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) _LED_GetState:
                                        (0177)  LED_GetState:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0179)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0180)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0181) 
04AE: 51 29    MOV   A,[0x29]           (0182)    mov   A,[Port_1_Data_SHADE]         ; Get shade value
                                        (0183) IF(0)                                  ; Active High Digit Drive
                                        (0184)    // Nothing for now
                                        (0185) ELSE                                   ; Active Low Digit Drive
04B0: 73       CPL   A                  (0186)    cpl   A                             ; Invert bit if Active low
                                        (0187) ENDIF
04B1: 21 80    AND   A,0x80             (0188)    and   A,LED_PinMask                 ; Mask off the trash
04B3: A0 03    JZ    0x04B7             (0189)    jz    .End_LED_GS                   ; If zero, we're done
04B5: 50 01    MOV   A,0x1              (0190)    mov   A,0x01                        ; Return a 1 no mater what the mask is.
                                        (0191) 
                                        (0192) .End_LED_GS:
                                        (0193)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
04B7: 7F       RET                      (0195)    ret
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2013/5/19 at 10:43:48
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
04B8: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
04B9: 10       PUSH  X                  (0209)     push  X
04BA: 28       ROMX                     (0210)     romx                               ; Get character from ROM
04BB: B0 04    JNZ   0x04C0             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
04BD: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
04BE: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
04BF: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
04C0: 90 3C    CALL  LCD_Write_Data|LCD_WriteData|_LCD_WriteData|_LCD_Write_Data(0218)     call  LCD_WriteData                ; Write data to LCD
04C2: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
04C3: 18       POP   A                  (0220)     pop   A
04C4: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
04C5: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
04C7: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
04C8: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
04DA: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
04DB: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
04DC: 67       ASR   A                  (0262)     asr   A
04DD: 67       ASR   A                  (0263)     asr   A
04DE: 67       ASR   A                  (0264)     asr   A
04DF: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
04E1: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
04E3: 90 19    CALL  LCD_Write_Data|LCD_WriteData|_LCD_WriteData|_LCD_Write_Data(0267)     call  LCD_WriteData                ; Write data to screen
04E5: 18       POP   A                  (0268)     pop   A                            ; Restore value
04E6: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
04E8: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
04EA: 90 12    CALL  LCD_Write_Data|LCD_WriteData|_LCD_WriteData|_LCD_Write_Data(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
04EC: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
04ED: 4B       SWAP  A,X                (0305)     swap  A,X
04EE: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
04F0: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
04F1: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
04F3: 7F       RET                      (0310)     ret
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
04F4: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
04F6: A0 06    JZ    0x04FD             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
04F8: 90 04    CALL  LCD_Write_Data|LCD_WriteData|_LCD_WriteData|_LCD_Write_Data(0349)     call  LCD_WriteData                ; Write data to screen
04FA: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
04FB: 8F F8    JMP   _LCD_PrString      (0351)     jmp   .Loop_PrString               ; Go get next character
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
04FD: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
04FE: 90 5F    CALL  0x055F             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
0500: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
0501: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
0502: 67       ASR   A                  (0390)     asr   A
0503: 67       ASR   A                  (0391)     asr   A
0504: 67       ASR   A                  (0392)     asr   A
0505: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
0507: 90 38    CALL  0x0541             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
0509: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
050A: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
050C: 40       NOP                      (0397)     nop
050D: 40       NOP                      (0398)     nop
050E: 40       NOP                      (0399)     nop
050F: 90 30    CALL  0x0541             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
0511: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
0512: 90 4B    CALL  0x055F             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
0514: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
0515: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
0516: 67       ASR   A                  (0436)     asr   A
0517: 67       ASR   A                  (0437)     asr   A
0518: 67       ASR   A                  (0438)     asr   A
0519: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
051B: 90 09    CALL  0x0526             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
051D: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
051E: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
0520: 40       NOP                      (0443)     nop
0521: 40       NOP                      (0444)     nop
0522: 40       NOP                      (0445)     nop
0523: 90 01    CALL  0x0526             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
0525: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
0526: 08       PUSH  A                  (0477)     push  A
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
0527: 26 2A 80 AND   [0x2A],0x80        (0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
052A: 51 2A    MOV   A,[0x2A]           (0480)     mov   A,[Port_2_Data_SHADE]
052C: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
052E: 18       POP   A                  (0483)     pop   A
052F: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
0531: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
0533: 2A 2A    OR    A,[0x2A]           (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
0535: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
0537: 53 2A    MOV   [0x2A],A           (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0539: 40       NOP                      (0489)     nop
053A: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
053C: 53 2A    MOV   [0x2A],A           (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
053E: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
0540: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
0541: 08       PUSH  A                  (0523)     push  A
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
0542: 26 2A 80 AND   [0x2A],0x80        (0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0545: 2E 2A 20 OR    [0x2A],0x20        (0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
0548: 51 2A    MOV   A,[0x2A]           (0527)     mov   A,[Port_2_Data_SHADE]
054A: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
054C: 18       POP   A                  (0530)     pop   A
054D: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
054F: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
0551: 2A 2A    OR    A,[0x2A]           (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
0553: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
0555: 53 2A    MOV   [0x2A],A           (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
0557: 40       NOP                      (0536)     NOP
0558: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
055A: 53 2A    MOV   [0x2A],A           (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
055C: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
055E: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
055F: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
0560: 26 2A 80 AND   [0x2A],0x80        (0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
0563: 51 2A    MOV   A,[0x2A]           (0574)     mov   A,[Port_2_Data_SHADE]
0565: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
0567: 26 2B F0 AND   [0x2B],0xF0        (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
056A: 51 2B    MOV   A,[0x2B]           (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
056C: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
056E: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
0570: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
0572: 2E 2A 40 OR    [0x2A],0x40        (0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
0575: 51 2A    MOV   A,[0x2A]           (0584)     mov   A,[Port_2_Data_SHADE]
0577: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
0579: 40       NOP                      (0586)     NOP
                                        (0587) 
057A: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
057B: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
057D: 2E 2A 50 OR    [0x2A],0x50        (0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
0580: 51 2A    MOV   A,[0x2A]           (0593)     mov   A,[Port_2_Data_SHADE]
0582: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
0584: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
0585: 40       NOP                      (0597)     nop
0586: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
0588: 08       PUSH  A                  (0610)     push  A
0589: 26 2A C0 AND   [0x2A],0xC0        (0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
058C: 51 2A    MOV   A,[0x2A]           (0612)     mov   A,[Port_2_Data_SHADE]
058E: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
0590: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
0591: 40       NOP                      (0616)     nop                                    ; fastest PSoC
0592: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
0593: 2E 2A 50 OR    [0x2A],0x50        (0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
0596: 51 2A    MOV   A,[0x2A]           (0620)     mov   A,[Port_2_Data_SHADE]
0598: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
059A: 40       NOP                      (0623)     nop
059B: 40       NOP                      (0624)     nop
                                        (0625) 
059C: 26 2A C0 AND   [0x2A],0xC0        (0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
059F: 51 2A    MOV   A,[0x2A]           (0627)     mov   A,[Port_2_Data_SHADE]
05A1: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
05A3: 18       POP   A                  (0630)     pop   A
05A4: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
05A6: A0 04    JZ    0x05AB             (0633)     jz    .UNLOCK
05A8: 79       DEC   X                  (0634)     dec   X
05A9: BF D3    JNZ   0x057D             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
05AB: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
05AC: 2E 2B 7F OR    [0x2B],0x7F        (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
05AF: 51 2B    MOV   A,[0x2B]           (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
05B1: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
05B3: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
05B5: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
05B7: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
05B8: 7F       RET                      (0646)     ret
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
05B9: 26 2B 80 AND   [0x2B],0x80        (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
05BC: 2E 2B 7F OR    [0x2B],0x7F        (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
05BF: 26 2C 80 AND   [0x2C],0x80        (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
05C2: 51 2B    MOV   A,[0x2B]           (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
05C4: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
05C6: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
05C8: 51 2C    MOV   A,[0x2C]           (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
05CA: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
05CC: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
05CE: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
05D0: 90 63    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
05D2: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
05D4: 90 5F    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
05D6: 50 03    MOV   A,0x3              (0701)     mov   A,03h
05D8: 9F 4C    CALL  0x0526             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
05DA: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
05DC: 90 57    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
05DE: 50 03    MOV   A,0x3              (0707)     mov   A,03h
05E0: 9F 44    CALL  0x0526             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
05E2: 90 5F    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
05E4: 90 5D    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
05E6: 90 5B    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
05E8: 50 03    MOV   A,0x3              (0714)     mov   A,03h
05EA: 9F 3A    CALL  0x0526             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
05EC: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
05EE: 90 45    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
05F0: 50 02    MOV   A,0x2              (0720)     mov   A,02h
05F2: 9F 32    CALL  0x0526             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
05F4: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
05F6: 90 3D    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
05F8: 50 08    MOV   A,0x8              (0726)     mov   A,08h
05FA: 9F 16    CALL  _LCD_Control       (0727)     call  LCD_Control
05FC: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
05FE: 90 35    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
0600: 50 01    MOV   A,0x1              (0731)     mov   A,01h
0602: 9F 0E    CALL  _LCD_Control       (0732)     call  LCD_Control
0604: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0606: 90 2D    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
0608: 50 06    MOV   A,0x6              (0736)     mov   A,06h
060A: 9F 06    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
060C: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
060E: 9F 02    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
0610: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
0612: 9E FE    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
0614: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
0616: 9E FA    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
0618: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
061A: 9E F6    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
061C: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
061E: 9E F2    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
0620: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0622: 90 11    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
0624: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
0629: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
062B: 10       PUSH  X                  (0791)     push  X                            ; Store COL
062C: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
062E: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
062F: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
0631: 20       POP   X                  (0795)     pop   X
                                        (0796) 
0632: 9E DE    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
0634: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
0635: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
0637: 78       DEC   A                  (0828)     dec   A
0638: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
063A: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
0643: 08       PUSH  A                  (0871)     push  A
0644: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
0646: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
0648: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
064A: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
064C: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
064E: D0 06    JNC   0x0655             (0877)     jnc   .Delay50u_End
0650: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
0652: 78       DEC   A                  (0880)     dec   A                              ; [4]
0653: BF FE    JNZ   0x0652             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
0655: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
0656: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
0657: 10       PUSH  X                  (0943)     push  X
0658: 59 00    MOV   X,[X+0]            (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
065A: 9F CD    CALL  _LCD_Position      (0945)     call  LCD_Position                 ; Set cursor position
065C: 20       POP   X                  (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
065D: 3D FE 00 CMP   [X-2],0x0          (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
0660: B0 05    JNZ   0x0666             (0950)     jnz   .LCD_CHECK1X
0662: 50 00    MOV   A,0x0              (0951)     mov   A,00h                         ; Load empty character
0664: 80 11    JMP   0x0676             (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
0666: 3D FE 06 CMP   [X-2],0x6          (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
0669: D0 07    JNC   0x0671             (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
066B: 52 FE    MOV   A,[X-2]            (0957)     mov   A,[X+BG_LENGTHX]
066D: 15 FE    SUB   [X-2],A            (0958)     sub   [X+BG_LENGTHX],A
066F: 80 06    JMP   0x0676             (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
0671: 50 06    MOV   A,0x6              (0962)     mov   A, 06h
0673: 17 FE 05 SUB   [X-2],0x5          (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
0676: 9E 86    CALL  LCD_Write_Data|LCD_WriteData|_LCD_WriteData|_LCD_Write_Data(0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
0678: 7B FF    DEC   [X-1]              (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
067A: BF E2    JNZ   0x065D             (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
067C: 7F       RET                      (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
067D: 4F       MOV   X,SP               (1015)     mov   X, SP
067E: 10       PUSH  X                  (1016)     push  X
067F: 52 FD    MOV   A,[X-3]            (1017)     mov   A,[X+BG_ROW]                 ; Row in A
0681: 59 FC    MOV   X,[X-4]            (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
0683: 9F A4    CALL  _LCD_Position      (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
0685: 20       POP   X                  (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
0686: 3D FA 00 CMP   [X-6],0x0          (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
0689: B0 05    JNZ   0x068F             (1026)     jnz   .LCD_CHECK1
068B: 50 00    MOV   A,0x0              (1027)     mov   A,00h                        ; Load empty character
068D: 80 11    JMP   0x069F             (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
068F: 3D FA 06 CMP   [X-6],0x6          (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
0692: D0 07    JNC   0x069A             (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
0694: 52 FA    MOV   A,[X-6]            (1033)     mov   A,[X+BG_LENGTH]
0696: 15 FA    SUB   [X-6],A            (1034)     sub   [X+BG_LENGTH],A
0698: 80 06    JMP   0x069F             (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
069A: 50 06    MOV   A,0x6              (1038)     mov   A, 06h
069C: 17 FA 05 SUB   [X-6],0x5          (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
069F: 9E 5D    CALL  LCD_Write_Data|LCD_WriteData|_LCD_WriteData|_LCD_Write_Data(1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
06A1: 7B FB    DEC   [X-5]              (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
06A3: BF E2    JNZ   0x0686             (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
06A5: 7F       RET                      (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
06A6: 21 03    AND   A,0x3              (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
06A8: 08       PUSH  A                  (1098)     push  A
06A9: FF 7A    INDEX LCD_ROW_OFFSET     (1099)     index LCD_ROW_OFFSET  ; Get row offset
06AB: 03 00    ADD   A,[X+0]            (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
06AD: 9E 63    CALL  _LCD_Control       (1101)     call  LCD_Control                  ; Position Cursor
06AF: 3D FE 00 CMP   [X-2],0x0          (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
06B2: B0 05    JNZ   0x06B8             (1103)     jnz   .VBG_NZ_SEGX
06B4: 50 20    MOV   A,0x20             (1104)     mov   A,' '                        ; Load space character
06B6: 80 13    JMP   0x06CA             (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
06B8: 3D FE 09 CMP   [X-2],0x9          (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
06BB: D0 09    JNC   0x06C5             (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
06BD: 52 FE    MOV   A,[X-2]            (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
06BF: 78       DEC   A                  (1111)     dec   A
06C0: 56 FE 00 MOV   [X-2],0x0          (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
06C3: 80 06    JMP   0x06CA             (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
06C5: 17 FE 08 SUB   [X-2],0x8          (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
06C8: 50 07    MOV   A,0x7              (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
06CA: 9E 32    CALL  LCD_Write_Data|LCD_WriteData|_LCD_WriteData|_LCD_Write_Data(1120)     call  LCD_WriteData                ; Write value
06CC: 18       POP   A                  (1121)     pop   A
06CD: 78       DEC   A                  (1122)     dec   A
06CE: 7B FF    DEC   [X-1]              (1123)     dec   [X+VBG_CHAR_HEIGHTX]
06D0: BF D7    JNZ   0x06A8             (1124)     jnz   .VBG_LOOPX
06D2: 7F       RET                      (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
06D3: 4F       MOV   X,SP               (1168)     mov   X, SP
06D4: 52 FD    MOV   A,[X-3]            (1169)     mov   A, [X+VBG_ROW]
06D6: 21 03    AND   A,0x3              (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
06D8: 08       PUSH  A                  (1172)     push  A
06D9: FF 4A    INDEX LCD_ROW_OFFSET     (1173)     index LCD_ROW_OFFSET  ; Get row offset
06DB: 03 FC    ADD   A,[X-4]            (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
06DD: 9E 33    CALL  _LCD_Control       (1175)     call  LCD_Control                  ; Position Cursor
06DF: 3D FA 00 CMP   [X-6],0x0          (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
06E2: B0 05    JNZ   0x06E8             (1177)     jnz   .VBG_NZ_SEG
06E4: 50 20    MOV   A,0x20             (1178)     mov   A,' '                        ; Load space character
06E6: 80 13    JMP   0x06FA             (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
06E8: 3D FA 09 CMP   [X-6],0x9          (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
06EB: D0 09    JNC   0x06F5             (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
06ED: 52 FA    MOV   A,[X-6]            (1184)     mov   A,[X+VBG_SEG_HEIGHT]
06EF: 78       DEC   A                  (1185)     dec   A
06F0: 56 FA 00 MOV   [X-6],0x0          (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
06F3: 80 06    JMP   0x06FA             (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
06F5: 17 FA 08 SUB   [X-6],0x8          (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
06F8: 50 07    MOV   A,0x7              (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
06FA: 9E 02    CALL  LCD_Write_Data|LCD_WriteData|_LCD_WriteData|_LCD_Write_Data(1194)     call  LCD_WriteData                ; Write value
06FC: 18       POP   A                  (1195)     pop   A
06FD: 78       DEC   A                  (1196)     dec   A
06FE: 7B FB    DEC   [X-5]              (1197)     dec   [X+VBG_CHAR_HEIGHT]
0700: BF D7    JNZ   0x06D8             (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
0702: 7F       RET                      (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
0703: 4F       MOV   X,SP               (1238)     mov   X,SP                         ; Get location of stack
0704: 08       PUSH  A                  (1239)     push  A                            ; Create 2 locations
0705: 08       PUSH  A                  (1240)     push  A
                                        (1241) 
0706: 50 40    MOV   A,0x40             (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
0708: 9E 08    CALL  _LCD_Control       (1243)     call  LCD_Control                  ; Position the CG pointer
070A: 56 00 01 MOV   [X+0],0x1          (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
070D: 56 01 08 MOV   [X+1],0x8          (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
0710: 52 00    MOV   A,[X+0]            (1249)     mov   A,[X+VBGDATA_CTR]
0712: 3B 01    CMP   A,[X+1]            (1250)     cmp   A,[X+VBG_BYTES]
0714: D0 05    JNC   0x071A             (1251)     jnc   .VBG_SOLID
0716: 50 00    MOV   A,0x0              (1252)     mov   A,00h                        ; Empty line
0718: 80 03    JMP   0x071C             (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
071A: 50 FF    MOV   A,0xFF             (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
071C: 9D E0    CALL  LCD_Write_Data|LCD_WriteData|_LCD_WriteData|_LCD_Write_Data(1257)     call  LCD_WriteData                ; character data
071E: 7B 01    DEC   [X+1]              (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
0720: BF EF    JNZ   0x0710             (1259)     jnz   .VBG_Loop2                    ; End Loop 2
0722: 77 00    INC   [X+0]              (1260)     inc   [X+VBGDATA_CTR]
0724: 3D 00 09 CMP   [X+0],0x9          (1261)     cmp   [X+VBGDATA_CTR],09h
0727: BF E5    JNZ   0x070D             (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
0729: 18       POP   A                  (1264)     pop  A
072A: 18       POP   A                  (1265)     pop  A
072B: 50 0C    MOV   A,0xC              (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
072D: 9D E3    CALL  _LCD_Control       (1267)     call LCD_Control                   ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
072F: 7F       RET                      (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
073E: 4F       MOV   X,SP               (1319)     mov   X,SP                         ; Get location of stack
073F: 38 03    ADD   SP,0x3             (1320)     add   SP,3
0741: 54 02    MOV   [X+2],A            (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
0743: 50 40    MOV   A,0x40             (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
0745: 9D CB    CALL  _LCD_Control       (1324)     call  LCD_Control                  ; Position the CG pointer
0747: 56 00 00 MOV   [X+0],0x0          (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
074A: 56 01 08 MOV   [X+1],0x8          (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
074D: 52 00    MOV   A,[X+0]            (1330)     mov   A,[X+BGDATA_PTR]
074F: 3D 02 00 CMP   [X+2],0x0          (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
0752: B0 05    JNZ   0x0758             (1332)     jnz   .BG_OTHER
0754: FF DA    INDEX LCD_BG_TYPE1       (1333)     index LCD_BG_TYPE1
0756: 80 03    JMP   0x075A             (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
0758: FF DD    INDEX LCD_BG_TYPE2       (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
075A: 9D A2    CALL  LCD_Write_Data|LCD_WriteData|_LCD_WriteData|_LCD_Write_Data(1338)     call  LCD_WriteData
075C: 7B 01    DEC   [X+1]              (1339)     dec   [X+BGCHARS]                  ; Character builder counter
075E: BF EE    JNZ   0x074D             (1340)     jnz   .BG_Loop2
0760: 77 00    INC   [X+0]              (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
0762: 3D 00 07 CMP   [X+0],0x7          (1342)     cmp   [X+BGDATA_PTR],07h
0765: BF E4    JNZ   0x074A             (1343)     jnz   .BG_Loop1
                                        (1344) 
0767: 38 FD    ADD   SP,0xFD            (1345)     add   SP,-3
0769: 50 0C    MOV   A,0xC              (1346)     mov   A,LCD_DISP_ON
076B: 9D A5    CALL  _LCD_Control       (1347)     call  LCD_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
076D: 7F       RET                      (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: Z:\LOLLOL~1\ROBOTT~1\ROBOTT~1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // Robotti Projekti
(0003) // Robor7 @ 2014
(0004) // Kasper Kiiskinen, Henri Sinokki, Eero Holopainen, Mikko Liira, Kari Lampi
(0005) //----------------------------------------------------------------------------
(0006) 
(0007) #include <m8c.h>        // part specific constants and macros
(0008) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0009) #include<stdio.h>
(0010) #include<stdlib.h>
(0011) 
(0012) //Omat header filet
(0013) #include "MotorControl.h"
(0014) #include "UltraControl.h"
(0015) //#include "GyroControl.h"
(0016) 
(0017) #pragma interrupt_handler PinInterrupt
(0018) 
(0019) //Kellot
(0020) volatile int timeT = 0;
(0021) int timeUltra = 0,timeUltraRead = 0;
(0022) volatile unsigned long int milliT = 0;
(0023) 
(0024) //Test
(0025) volatile int a = 0;
(0026) char buffer[10];
(0027) 
(0028) int timeForward = 50; //.... 4m täydellä vauhdilla 3.7s
(0029) int turnTime = 55; 	   //.... 90 asteen käännökseen meneväaika
(0030) int timeRobotWidth = 15; //.... Robotin leveyteen menevä aika ?
(0031) int ultraData = 0; //Ultraääni anturrista saatava arvo millisekunteina pitää jakaa jollain että saadaan senttimerejä
(0032) 
(0033) //Main Method
(0034) void main(void)
(0035) {
(0036) 	//Init**************************
(0037) 	
(0038) 	//Enables Global Interrupts
(0039) 	M8C_EnableGInt; 
__UserModules_end|__text_start|_main|_main:
    076E: 71 01    OR    F,0x1
(0040) 	M8C_EnableIntMask(INT_MSK0, INT_MSK0_GPIO);	//VITTU
    0770: 43 E0 20 OR    REG[0xE0],0x20
(0041) 	
(0042) 	//Start LCD
(0043) 	LED_Start();
    0773: 10       PUSH  X
    0774: 7C 04 93 LCALL _LED_Stop|_LED_Start|LED_Start|LED_Off|LED_Stop|_LED_Off
(0044) 	LCD_Start();
    0777: 7C 05 B9 LCALL _LCD_Init|_LCD_Start|LCD_Start
(0045) 	LED_Switch(1);
    077A: 50 01    MOV   A,0x1
    077C: 7C 04 95 LCALL _LED_Switch
(0046) 	//InitializeTimer
(0047) 	Timer8_Start();
    077F: 7C 03 89 LCALL _Timer8_Start
(0048) 	Timer8_EnableInt();
    0782: 7C 03 81 LCALL _Timer8_EnableInt
    0785: 20       POP   X
(0049) 		
(0050) 	//Start Motor PWMs
(0051) 	InitPWM();
    0786: 7C 09 4A LCALL _InitPWM
(0052) 	
(0053) 	//Init Servo
(0054) 	InitUAServo();
    0789: 7C 0D AF LCALL _InitUAServo
(0055) 		
(0056) 	Delay(500);
    078C: 50 01    MOV   A,0x1
    078E: 08       PUSH  A
    078F: 50 F4    MOV   A,0xF4
    0791: 08       PUSH  A
    0792: 90 06    CALL  _Delay
    0794: 38 FE    ADD   SP,0xFE
(0057) 	
(0058) 	//Counter8_Start();
(0059) 	
(0060) 	//Testink
(0061) 	TestLoop();
    0796: 91 05    CALL  _TestLoop
    0798: 8F FF    JMP   0x0798
(0062) 
(0063) 	//MainLoop**********
(0064) 	//***********************
(0065) 	/*while(1)
(0066) 	{
(0067) 		//Controlls the ultraSonic trigger
(0068) 		ControlTrigger(&timeUltra);	
(0069) 			
(0070) 		//Gets the data
(0071) 		//ultraData = getDataUA();
(0072) 		
(0073) 	}*/
(0074) }
(0075) 
(0076) //Delay function
(0077) void Delay(int dealy)
(0078) {
_Delay:
  timme                --> X+0
  dealy                --> X-5
    079A: 10       PUSH  X
    079B: 4F       MOV   X,SP
    079C: 38 04    ADD   SP,0x4
(0079) 	unsigned long int timme = milliT + dealy;
    079E: 52 FC    MOV   A,[X-4]
    07A0: 53 25    MOV   [__r3],A
    07A2: 52 FB    MOV   A,[X-5]
    07A4: 53 26    MOV   [__r2],A
    07A6: 47 26 80 TST   [__r2],0x80
    07A9: A0 09    JZ    0x07B3
    07AB: 55 27 FF MOV   [__r1],0xFF
    07AE: 55 28 FF MOV   [__r0],0xFF
    07B1: 80 07    JMP   0x07B9
    07B3: 55 27 00 MOV   [__r1],0x0
    07B6: 55 28 00 MOV   [__r0],0x0
    07B9: 51 09    MOV   A,[milliT+3]
    07BB: 02 25    ADD   A,[__r3]
    07BD: 54 03    MOV   [X+3],A
    07BF: 51 08    MOV   A,[milliT+2]
    07C1: 0A 26    ADC   A,[__r2]
    07C3: 54 02    MOV   [X+2],A
    07C5: 51 07    MOV   A,[milliT+1]
    07C7: 0A 27    ADC   A,[__r1]
    07C9: 54 01    MOV   [X+1],A
    07CB: 51 06    MOV   A,[milliT]
    07CD: 0A 28    ADC   A,[__r0]
    07CF: 54 00    MOV   [X+0],A
(0080) 	while (milliT < timme){}
    07D1: 51 09    MOV   A,[milliT+3]
    07D3: 13 03    SUB   A,[X+3]
    07D5: 51 08    MOV   A,[milliT+2]
    07D7: 1B 02    SBB   A,[X+2]
    07D9: 51 07    MOV   A,[milliT+1]
    07DB: 1B 01    SBB   A,[X+1]
    07DD: 51 06    MOV   A,[milliT]
    07DF: 1B 00    SBB   A,[X+0]
    07E1: CF EF    JC    0x07D1
    07E3: 38 FC    ADD   SP,0xFC
    07E5: 20       POP   X
    07E6: 7F       RET   
(0081) }
(0082) 
(0083) //Palauttaa eerolle millisekunnit siitä asti ku psoc on käynnistytnyt
(0084) //Kutsutaan joka 0.001s = 1ms välein.
(0085) void TimerInterrupt()
(0086) {
(0087)   timeT++;
_TimerInterrupt:
    07E7: 76 01    INC   [nousevaReuna]
    07E9: 0E 00 00 ADC   [timeT|port0_prevValue],0x0
(0088) 	
(0089)   //DO NOT TOUCH
(0090)   milliT++;
    07EC: 06 09 01 ADD   [milliT+3],0x1
    07EF: 0E 08 00 ADC   [milliT+2],0x0
    07F2: 0E 07 00 ADC   [milliT+1],0x0
    07F5: 0E 06 00 ADC   [milliT],0x0
(0091)   timeUltra++;
    07F8: 76 03    INC   [j]
    07FA: 0E 02 00 ADC   [timeUltra],0x0
(0092)   timeUltraRead++;
    07FD: 76 05    INC   [timeUltraRead+1]
    07FF: 0E 04 00 ADC   [timeUltraRead],0x0
    0802: 7F       RET   
(0093) }
(0094) 
(0095) 
(0096) void PinInterrupt()
(0097) {
_PinInterrupt:
    0803: 08       PUSH  A
    0804: 51 28    MOV   A,[__r0]
    0806: 08       PUSH  A
    0807: 51 27    MOV   A,[__r1]
    0809: 08       PUSH  A
    080A: 51 26    MOV   A,[__r2]
    080C: 08       PUSH  A
    080D: 51 25    MOV   A,[__r3]
    080F: 08       PUSH  A
    0810: 51 24    MOV   A,[__r4]
    0812: 08       PUSH  A
    0813: 51 23    MOV   A,[__r5]
    0815: 08       PUSH  A
    0816: 51 22    MOV   A,[__r6]
    0818: 08       PUSH  A
    0819: 51 21    MOV   A,[__r7]
    081B: 08       PUSH  A
    081C: 51 20    MOV   A,[__r8]
    081E: 08       PUSH  A
    081F: 51 1F    MOV   A,[__r9]
    0821: 08       PUSH  A
    0822: 51 1E    MOV   A,[__r10]
    0824: 08       PUSH  A
    0825: 51 1D    MOV   A,[__r11]
    0827: 08       PUSH  A
    0828: 51 1C    MOV   A,[__rX]
    082A: 08       PUSH  A
    082B: 51 1B    MOV   A,[__rY]
    082D: 08       PUSH  A
    082E: 51 1A    MOV   A,[__rZ]
    0830: 08       PUSH  A
(0098) 	static BYTE port0_prevValue;
(0099) 	static nousevaReuna;
(0100) 	LED_Switch(0);
    0831: 10       PUSH  X
    0832: 50 00    MOV   A,0x0
    0834: 7C 04 95 LCALL _LED_Switch
    0837: 20       POP   X
(0101) 	
(0102) 	a++;
    0838: 76 0B    INC   [a+1]
    083A: 0E 0A 00 ADC   [a],0x0
(0103) 	
(0104) 	//UÅ ECHO 
(0105) 	/* Check if interrupt because of P0_7 change from read */
(0106) 	if ((PRT0DR ^ port0_prevValue)==0x80)
    083D: 5D 00    MOV   A,REG[0x0]
    083F: 53 28    MOV   [__r0],A
    0841: 51 2D    MOV   A,[0x2D]
    0843: 34 28    XOR   [__r0],A
    0845: 3C 28 80 CMP   [__r0],0x80
    0848: B0 1F    JNZ   0x0868
(0107) 	{
(0108) 	
(0109) 		if (nousevaReuna == 0)
    084A: 3C 2E 00 CMP   [0x2E],0x0
    084D: B0 14    JNZ   0x0862
    084F: 3C 2F 00 CMP   [0x2F],0x0
    0852: B0 0F    JNZ   0x0862
(0110) 		{
(0111) 			timeUltraRead = 0;
    0854: 55 05 00 MOV   [timeUltraRead+1],0x0
    0857: 55 04 00 MOV   [timeUltraRead],0x0
(0112) 			nousevaReuna = 1;
    085A: 55 2F 01 MOV   [0x2F],0x1
    085D: 55 2E 00 MOV   [0x2E],0x0
(0113) 			//Counter8_Start();
(0114) 			//a = 1;
(0115) 		}
    0860: 80 07    JMP   0x0868
(0116) 		else 
(0117) 		{
(0118) 			nousevaReuna = 0;
    0862: 55 2F 00 MOV   [0x2F],0x0
    0865: 55 2E 00 MOV   [0x2E],0x0
(0119) 			//ultraData = Counter8_wReadCounter();
(0120) 			//Counter8_Stop();
(0121) 			//a = 0;
(0122) 			//ultraData = timeUltraRead;
(0123) 		}
(0124) 	}
(0125) 
(0126) 	/* Store values of P0_40 for next ISR */
(0127) 	port0_prevValue = PRT0DR & 0x80;
    0868: 5D 00    MOV   A,REG[0x0]
    086A: 21 80    AND   A,0x80
    086C: 53 2D    MOV   [0x2D],A
    086E: 18       POP   A
    086F: 53 1A    MOV   [__rZ],A
    0871: 18       POP   A
    0872: 53 1B    MOV   [__rY],A
    0874: 18       POP   A
    0875: 53 1C    MOV   [__rX],A
    0877: 18       POP   A
    0878: 53 1D    MOV   [__r11],A
    087A: 18       POP   A
    087B: 53 1E    MOV   [__r10],A
    087D: 18       POP   A
    087E: 53 1F    MOV   [__r9],A
    0880: 18       POP   A
    0881: 53 20    MOV   [__r8],A
    0883: 18       POP   A
    0884: 53 21    MOV   [__r7],A
    0886: 18       POP   A
    0887: 53 22    MOV   [__r6],A
    0889: 18       POP   A
    088A: 53 23    MOV   [__r5],A
    088C: 18       POP   A
    088D: 53 24    MOV   [__r4],A
    088F: 18       POP   A
    0890: 53 25    MOV   [__r3],A
    0892: 18       POP   A
    0893: 53 26    MOV   [__r2],A
    0895: 18       POP   A
    0896: 53 27    MOV   [__r1],A
    0898: 18       POP   A
    0899: 53 28    MOV   [__r0],A
    089B: 18       POP   A
    089C: 7E       RETI  
(0128) 	
(0129) }
(0130) 
(0131) 
(0132) //For Testing
(0133) void TestLoop()
(0134) {
_TestLoop:
    089D: 80 A9    JMP   0x0947
(0135) 	static int t =0,j;
(0136) 	while(1)
(0137) 	{
(0138) 		ControlTrigger(&timeUltra);	
    089F: 50 00    MOV   A,0x0
    08A1: 08       PUSH  A
    08A2: 50 02    MOV   A,0x2
    08A4: 08       PUSH  A
    08A5: 7C 0D BB LCALL _ControlTrigger
(0139) 		
(0140) 
(0141) 		itoa(buffer,a,10);
    08A8: 50 00    MOV   A,0x0
    08AA: 08       PUSH  A
    08AB: 50 0A    MOV   A,0xA
    08AD: 08       PUSH  A
    08AE: 51 0A    MOV   A,[a]
    08B0: 08       PUSH  A
    08B1: 51 0B    MOV   A,[a+1]
    08B3: 08       PUSH  A
    08B4: 50 00    MOV   A,0x0
    08B6: 08       PUSH  A
    08B7: 50 32    MOV   A,0x32
    08B9: 08       PUSH  A
    08BA: 7C 12 4C LCALL _itoa
    08BD: 38 F8    ADD   SP,0xF8
(0142) 		LCD_Position(0,0);
    08BF: 10       PUSH  X
    08C0: 50 00    MOV   A,0x0
    08C2: 57 00    MOV   X,0x0
    08C4: 7C 06 29 LCALL _LCD_Position
(0143) 		LCD_PrCString("     ");
    08C7: 50 01    MOV   A,0x1
    08C9: 08       PUSH  A
    08CA: 50 50    MOV   A,0x50
    08CC: 5C       MOV   X,A
    08CD: 18       POP   A
    08CE: 7C 04 B8 LCALL _LCD_PrCString
(0144) 		LCD_Position(0,0);
    08D1: 50 00    MOV   A,0x0
    08D3: 57 00    MOV   X,0x0
    08D5: 7C 06 29 LCALL _LCD_Position
(0145) 		LCD_PrString(buffer);
    08D8: 50 00    MOV   A,0x0
    08DA: 08       PUSH  A
    08DB: 50 32    MOV   A,0x32
    08DD: 5C       MOV   X,A
    08DE: 18       POP   A
    08DF: 7C 04 F4 LCALL _LCD_PrString
    08E2: 20       POP   X
(0146) 		
(0147) 		itoa(buffer,t++,10);
    08E3: 50 00    MOV   A,0x0
    08E5: 08       PUSH  A
    08E6: 50 0A    MOV   A,0xA
    08E8: 08       PUSH  A
    08E9: 5F 27 15 MOV   [__r1],[t+1]
    08EC: 5F 28 14 MOV   [__r0],[t]
    08EF: 51 27    MOV   A,[__r1]
    08F1: 01 01    ADD   A,0x1
    08F3: 53 15    MOV   [t+1],A
    08F5: 51 28    MOV   A,[__r0]
    08F7: 09 00    ADC   A,0x0
    08F9: 53 14    MOV   [t],A
    08FB: 51 28    MOV   A,[__r0]
    08FD: 08       PUSH  A
    08FE: 51 27    MOV   A,[__r1]
    0900: 08       PUSH  A
    0901: 50 00    MOV   A,0x0
    0903: 08       PUSH  A
    0904: 50 32    MOV   A,0x32
    0906: 08       PUSH  A
    0907: 7C 12 4C LCALL _itoa
    090A: 38 FA    ADD   SP,0xFA
(0148) 		LCD_Position(1,0);
    090C: 10       PUSH  X
    090D: 57 00    MOV   X,0x0
    090F: 50 01    MOV   A,0x1
    0911: 7C 06 29 LCALL _LCD_Position
(0149) 		LCD_PrCString("     ");
    0914: 50 01    MOV   A,0x1
    0916: 08       PUSH  A
    0917: 50 50    MOV   A,0x50
    0919: 5C       MOV   X,A
    091A: 18       POP   A
    091B: 7C 04 B8 LCALL _LCD_PrCString
(0150) 		LCD_Position(1,0);
    091E: 57 00    MOV   X,0x0
    0920: 50 01    MOV   A,0x1
    0922: 7C 06 29 LCALL _LCD_Position
(0151) 		LCD_PrString(buffer);
    0925: 50 00    MOV   A,0x0
    0927: 08       PUSH  A
    0928: 50 32    MOV   A,0x32
    092A: 5C       MOV   X,A
    092B: 18       POP   A
    092C: 7C 04 F4 LCALL _LCD_PrString
    092F: 20       POP   X
(0152) 		for (j=0;j<9000;j++);
    0930: 55 31 00 MOV   [0x31],0x0
    0933: 55 30 00 MOV   [0x30],0x0
    0936: 76 31    INC   [0x31]
    0938: 0E 30 00 ADC   [0x30],0x0
    093B: 51 31    MOV   A,[0x31]
    093D: 11 28    SUB   A,0x28
    093F: 51 30    MOV   A,[0x30]
    0941: 31 80    XOR   A,0x80
    0943: 19 A3    SBB   A,0xA3
    0945: CF F0    JC    0x0936
(0153) 			
(0154) 		//Test 4m
(0155) 		/*
(0156) 		if (timeT < 250)
(0157) 			TurnLeft(FULL_SPEED);
(0158) 		else if (timeT < 500)
(0159) 			TurnRight(HALF_SPEED);
(0160) 		else 
(0161) 			Stop();
(0162) 		*/
(0163) 	
(0164) 		//About 90
(0165) 		/*if (timeT < 2000)
(0166) 			ControlServo(8);
(0167) 		else if(timeT < 4000)
(0168) 			ControlServo(15);
(0169) 		else if(timeT < 6000)
(0170) 			ControlServo(25);
(0171) 		else
(0172) 			Stop();
(0173) 		*/	
(0174) 		//Test 90 degree Turn
(0175) 		/*	
(0176) 			if(timeT <= 100) //1.0s
(0177) 				TurnRight(FULL_SPEED);
(0178) 			else if(timeT <= 400)
(0179) 				timeT = 0;
(0180) 		*/
(0181) 		
(0182) 	}
    0947: 8F 57    JMP   0x089F
(0183) }
(0184) 
FILE: Z:\LOLLOL~1\ROBOTT~1\ROBOTT~1\motorcontrol.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) 
(0004) #define BACKWARD 	0b00000101; // Molemmat Eteen
(0005) #define FORWARD 	0b00001010; //Molemmat Taakse
(0006) #define LEFTBRIGHTF 0b00001001; // Vasen Eteen Oikea Taakse
(0007) #define LEFTFRIGHTB 0b00000110; // Vasen Taakse Oikea Eteen
(0008) #define NOLLAA 		0b11110000;		//Molemmat C/D pinnit 0
(0009) 
(0010) //Porttien osoitteet
(0011) //Port1_0 LEFTC      C = 1, D = 0 FORWARD
(0012) //Port1_1 LEFTD		 C = 0, D = 1 BACKWARD 
(0013) //Port1_2 RIGHTC
(0014) //Port1_3 RIGHTD
(0015) 
(0016) const float OIKEUSKERROIN = 1.0f; //Kerroin vasemalle puolelle jotta robotti kulkisi suoraan
(0017) 
(0018) //Käynnistää PWM Moduulit
(0019) void InitPWM()
(0020) {
(0021) 	PWM8_VASEN_Start();
_InitPWM:
    094A: 10       PUSH  X
    094B: 7C 03 CF LCALL _PWM8_VASEN_Start
(0022) 	PWM8_OIKEA_Start();
    094E: 7C 04 55 LCALL _PWM8_OIKEA_Start
    0951: 20       POP   X
    0952: 7F       RET   
(0023) 	
(0024) 	//Port1_Data_ADDR = LEFTC_Data_ADDR;
(0025) 	//Port1_Data_ADDR &= NOLLAA;
(0026) }
(0027) 
(0028) //Kulkee eteenpäin arvolla..
(0029) void MoveForward(int pulse)
(0030) {				
_MoveForward:
  pulse                --> X-5
    0953: 10       PUSH  X
    0954: 4F       MOV   X,SP
    0955: 38 02    ADD   SP,0x2
(0031) 	LEFTC_Data_ADDR &= NOLLAA;
    0957: 41 04 F0 AND   REG[0x4],0xF0
(0032) 	LEFTC_Data_ADDR |= FORWARD;
    095A: 43 04 0A OR    REG[0x4],0xA
(0033) 
(0034) 	PWM8_VASEN_WritePulseWidth((BYTE)(pulse * OIKEUSKERROIN));
    095D: 55 27 56 MOV   [__r1],0x56
FILE: Z:\LOLLOL~1\ROBOTT~1\ROBOTT~1\motorcontrol.c
(0035) 	PWM8_OIKEA_WritePulseWidth((BYTE)pulse);
    0A69: 52 FC    MOV   A,[X-4]
    0A6B: 10       PUSH  X
    0A6C: 7C 04 60 LCALL _PWM8_OIKEA_WritePulseWidth
    0A6F: 20       POP   X
    0A70: 38 FE    ADD   SP,0xFE
    0A72: 20       POP   X
    0A73: 7F       RET   
(0036) }
(0037) 
(0038) //Kulkee taaksepäin arvolla
(0039) void MoveBackward(int pulse)
(0040) {
_MoveBackward:
  pulse                --> X-5
    0A74: 10       PUSH  X
    0A75: 4F       MOV   X,SP
    0A76: 38 02    ADD   SP,0x2
(0041) 	LEFTC_Data_ADDR &= NOLLAA;
    0A78: 41 04 F0 AND   REG[0x4],0xF0
(0042) 	LEFTC_Data_ADDR |= BACKWARD;
    0A7B: 43 04 05 OR    REG[0x4],0x5
(0043) 	
(0044) 	PWM8_VASEN_WritePulseWidth((BYTE)(pulse * OIKEUSKERROIN));
    0A7E: 55 27 56 MOV   [__r1],0x56
FILE: Z:\LOLLOL~1\ROBOTT~1\ROBOTT~1\motorcontrol.c
(0045) 	PWM8_OIKEA_WritePulseWidth((BYTE)pulse);
    0B8A: 52 FC    MOV   A,[X-4]
    0B8C: 10       PUSH  X
    0B8D: 7C 04 60 LCALL _PWM8_OIKEA_WritePulseWidth
    0B90: 20       POP   X
    0B91: 38 FE    ADD   SP,0xFE
    0B93: 20       POP   X
    0B94: 7F       RET   
(0046) }
(0047) 
(0048) //Pysäyttää Moottorit
(0049) void Stop()
(0050) {
(0051) 	PWM8_OIKEA_WritePulseWidth(0);
_Stop:
    0B95: 10       PUSH  X
    0B96: 50 00    MOV   A,0x0
    0B98: 7C 04 60 LCALL _PWM8_OIKEA_WritePulseWidth
(0052) 	PWM8_VASEN_WritePulseWidth(0);
    0B9B: 50 00    MOV   A,0x0
    0B9D: 7C 03 DA LCALL _PWM8_VASEN_WritePulseWidth
    0BA0: 20       POP   X
(0053) 	
(0054) 	LEFTC_Data_ADDR &= NOLLAA;
    0BA1: 41 04 F0 AND   REG[0x4],0xF0
    0BA4: 7F       RET   
(0055) }
(0056) 
(0057) //Kääntyy vasemmalle
(0058) void TurnLeft(int pulse)
(0059) {
_TurnLeft:
  pulse                --> X-5
    0BA5: 10       PUSH  X
    0BA6: 4F       MOV   X,SP
    0BA7: 38 02    ADD   SP,0x2
(0060) 	LEFTC_Data_ADDR &= NOLLAA;
    0BA9: 41 04 F0 AND   REG[0x4],0xF0
(0061) 	LEFTC_Data_ADDR |= LEFTFRIGHTB
    0BAC: 43 04 06 OR    REG[0x4],0x6
(0062) 		
(0063) 	PWM8_VASEN_WritePulseWidth((BYTE)pulse);
    0BAF: 52 FC    MOV   A,[X-4]
    0BB1: 10       PUSH  X
    0BB2: 7C 03 DA LCALL _PWM8_VASEN_WritePulseWidth
    0BB5: 20       POP   X
(0064) 	PWM8_OIKEA_WritePulseWidth((BYTE)(pulse * 0.8f));
    0BB6: 52 FC    MOV   A,[X-4]
    0BB8: 53 25    MOV   [__r3],A
    0BBA: 52 FB    MOV   A,[X-5]
    0BBC: 53 26    MOV   [__r2],A
    0BBE: 47 26 80 TST   [__r2],0x80
    0BC1: A0 09    JZ    0x0BCB
    0BC3: 55 27 FF MOV   [__r1],0xFF
    0BC6: 55 28 FF MOV   [__r0],0xFF
    0BC9: 80 07    JMP   0x0BD1
    0BCB: 55 27 00 MOV   [__r1],0x0
    0BCE: 55 28 00 MOV   [__r0],0x0
    0BD1: 51 28    MOV   A,[__r0]
    0BD3: 08       PUSH  A
    0BD4: 51 27    MOV   A,[__r1]
    0BD6: 08       PUSH  A
    0BD7: 51 26    MOV   A,[__r2]
    0BD9: 08       PUSH  A
    0BDA: 51 25    MOV   A,[__r3]
    0BDC: 08       PUSH  A
    0BDD: 7C 11 EE LCALL 0x11EE
    0BE0: 18       POP   A
    0BE1: 53 25    MOV   [__r3],A
    0BE3: 18       POP   A
    0BE4: 53 26    MOV   [__r2],A
    0BE6: 18       POP   A
    0BE7: 53 27    MOV   [__r1],A
    0BE9: 18       POP   A
    0BEA: 08       PUSH  A
    0BEB: 51 27    MOV   A,[__r1]
    0BED: 08       PUSH  A
    0BEE: 51 26    MOV   A,[__r2]
    0BF0: 08       PUSH  A
    0BF1: 51 25    MOV   A,[__r3]
    0BF3: 08       PUSH  A
    0BF4: 50 3F    MOV   A,0x3F
    0BF6: 08       PUSH  A
    0BF7: 50 4C    MOV   A,0x4C
    0BF9: 08       PUSH  A
    0BFA: 50 CC    MOV   A,0xCC
    0BFC: 08       PUSH  A
    0BFD: 50 CD    MOV   A,0xCD
    0BFF: 08       PUSH  A
    0C00: 7C 10 5C LCALL 0x105C
    0C03: 18       POP   A
    0C04: 53 25    MOV   [__r3],A
    0C06: 18       POP   A
    0C07: 53 26    MOV   [__r2],A
    0C09: 18       POP   A
    0C0A: 53 27    MOV   [__r1],A
    0C0C: 18       POP   A
    0C0D: 53 28    MOV   [__r0],A
    0C0F: 38 FC    ADD   SP,0xFC
    0C11: 50 47    MOV   A,0x47
    0C13: 08       PUSH  A
    0C14: 50 00    MOV   A,0x0
    0C16: 08       PUSH  A
    0C17: 08       PUSH  A
    0C18: 08       PUSH  A
    0C19: 51 28    MOV   A,[__r0]
    0C1B: 08       PUSH  A
    0C1C: 51 27    MOV   A,[__r1]
    0C1E: 08       PUSH  A
    0C1F: 51 26    MOV   A,[__r2]
    0C21: 08       PUSH  A
    0C22: 51 25    MOV   A,[__r3]
    0C24: 08       PUSH  A
    0C25: 7C 10 0E LCALL 0x100E
    0C28: 38 F8    ADD   SP,0xF8
    0C2A: 39 FF    CMP   A,0xFF
    0C2C: A0 47    JZ    0x0C74
    0C2E: 50 47    MOV   A,0x47
    0C30: 08       PUSH  A
    0C31: 50 00    MOV   A,0x0
    0C33: 08       PUSH  A
    0C34: 08       PUSH  A
    0C35: 08       PUSH  A
    0C36: 51 28    MOV   A,[__r0]
    0C38: 08       PUSH  A
    0C39: 51 27    MOV   A,[__r1]
    0C3B: 08       PUSH  A
    0C3C: 51 26    MOV   A,[__r2]
    0C3E: 08       PUSH  A
    0C3F: 51 25    MOV   A,[__r3]
    0C41: 08       PUSH  A
    0C42: 7C 11 80 LCALL 0x1180
    0C45: 18       POP   A
    0C46: 53 21    MOV   [__r7],A
    0C48: 18       POP   A
    0C49: 53 22    MOV   [__r6],A
    0C4B: 18       POP   A
    0C4C: 53 23    MOV   [__r5],A
    0C4E: 18       POP   A
    0C4F: 38 FC    ADD   SP,0xFC
    0C51: 08       PUSH  A
    0C52: 51 23    MOV   A,[__r5]
    0C54: 08       PUSH  A
    0C55: 51 22    MOV   A,[__r6]
    0C57: 08       PUSH  A
    0C58: 51 21    MOV   A,[__r7]
    0C5A: 08       PUSH  A
    0C5B: 7C 0E 17 LCALL 0x0E17
    0C5E: 18       POP   A
    0C5F: 53 23    MOV   [__r5],A
    0C61: 18       POP   A
    0C62: 53 24    MOV   [__r4],A
    0C64: 38 FE    ADD   SP,0xFE
    0C66: 51 23    MOV   A,[__r5]
    0C68: 01 00    ADD   A,0x0
    0C6A: 54 01    MOV   [X+1],A
    0C6C: 51 24    MOV   A,[__r4]
    0C6E: 09 80    ADC   A,0x80
    0C70: 54 00    MOV   [X+0],A
    0C72: 80 20    JMP   0x0C93
    0C74: 51 28    MOV   A,[__r0]
    0C76: 08       PUSH  A
    0C77: 51 27    MOV   A,[__r1]
    0C79: 08       PUSH  A
    0C7A: 51 26    MOV   A,[__r2]
    0C7C: 08       PUSH  A
    0C7D: 51 25    MOV   A,[__r3]
    0C7F: 08       PUSH  A
    0C80: 7C 0E 17 LCALL 0x0E17
    0C83: 18       POP   A
    0C84: 53 27    MOV   [__r1],A
    0C86: 18       POP   A
    0C87: 53 28    MOV   [__r0],A
    0C89: 38 FE    ADD   SP,0xFE
    0C8B: 51 27    MOV   A,[__r1]
    0C8D: 54 01    MOV   [X+1],A
    0C8F: 51 28    MOV   A,[__r0]
    0C91: 54 00    MOV   [X+0],A
    0C93: 52 01    MOV   A,[X+1]
    0C95: 10       PUSH  X
    0C96: 7C 04 60 LCALL _PWM8_OIKEA_WritePulseWidth
    0C99: 20       POP   X
    0C9A: 38 FE    ADD   SP,0xFE
    0C9C: 20       POP   X
    0C9D: 7F       RET   
(0065) }
(0066) 
(0067) //Kääntyy oikealle
(0068) void TurnRight(int pulse)
(0069) {		
_TurnRight:
  pulse                --> X-5
    0C9E: 10       PUSH  X
    0C9F: 4F       MOV   X,SP
    0CA0: 38 02    ADD   SP,0x2
(0070) 	LEFTC_Data_ADDR &= NOLLAA;
    0CA2: 41 04 F0 AND   REG[0x4],0xF0
(0071) 	LEFTC_Data_ADDR |= LEFTBRIGHTF;
    0CA5: 43 04 09 OR    REG[0x4],0x9
(0072) 	
(0073) 	PWM8_VASEN_WritePulseWidth((BYTE)(pulse * 0.8f));
    0CA8: 52 FC    MOV   A,[X-4]
    0CAA: 53 25    MOV   [__r3],A
    0CAC: 52 FB    MOV   A,[X-5]
    0CAE: 53 26    MOV   [__r2],A
    0CB0: 47 26 80 TST   [__r2],0x80
    0CB3: A0 09    JZ    0x0CBD
    0CB5: 55 27 FF MOV   [__r1],0xFF
    0CB8: 55 28 FF MOV   [__r0],0xFF
    0CBB: 80 07    JMP   0x0CC3
    0CBD: 55 27 00 MOV   [__r1],0x0
    0CC0: 55 28 00 MOV   [__r0],0x0
    0CC3: 51 28    MOV   A,[__r0]
    0CC5: 08       PUSH  A
    0CC6: 51 27    MOV   A,[__r1]
    0CC8: 08       PUSH  A
    0CC9: 51 26    MOV   A,[__r2]
    0CCB: 08       PUSH  A
    0CCC: 51 25    MOV   A,[__r3]
    0CCE: 08       PUSH  A
    0CCF: 7C 11 EE LCALL 0x11EE
    0CD2: 18       POP   A
    0CD3: 53 25    MOV   [__r3],A
    0CD5: 18       POP   A
    0CD6: 53 26    MOV   [__r2],A
    0CD8: 18       POP   A
    0CD9: 53 27    MOV   [__r1],A
    0CDB: 18       POP   A
    0CDC: 08       PUSH  A
    0CDD: 51 27    MOV   A,[__r1]
    0CDF: 08       PUSH  A
    0CE0: 51 26    MOV   A,[__r2]
    0CE2: 08       PUSH  A
    0CE3: 51 25    MOV   A,[__r3]
    0CE5: 08       PUSH  A
    0CE6: 50 3F    MOV   A,0x3F
    0CE8: 08       PUSH  A
    0CE9: 50 4C    MOV   A,0x4C
    0CEB: 08       PUSH  A
    0CEC: 50 CC    MOV   A,0xCC
    0CEE: 08       PUSH  A
    0CEF: 50 CD    MOV   A,0xCD
    0CF1: 08       PUSH  A
    0CF2: 7C 10 5C LCALL 0x105C
    0CF5: 18       POP   A
    0CF6: 53 25    MOV   [__r3],A
    0CF8: 18       POP   A
    0CF9: 53 26    MOV   [__r2],A
    0CFB: 18       POP   A
    0CFC: 53 27    MOV   [__r1],A
    0CFE: 18       POP   A
    0CFF: 53 28    MOV   [__r0],A
    0D01: 38 FC    ADD   SP,0xFC
    0D03: 50 47    MOV   A,0x47
    0D05: 08       PUSH  A
    0D06: 50 00    MOV   A,0x0
    0D08: 08       PUSH  A
    0D09: 08       PUSH  A
    0D0A: 08       PUSH  A
    0D0B: 51 28    MOV   A,[__r0]
    0D0D: 08       PUSH  A
    0D0E: 51 27    MOV   A,[__r1]
    0D10: 08       PUSH  A
    0D11: 51 26    MOV   A,[__r2]
    0D13: 08       PUSH  A
    0D14: 51 25    MOV   A,[__r3]
    0D16: 08       PUSH  A
    0D17: 7C 10 0E LCALL 0x100E
    0D1A: 38 F8    ADD   SP,0xF8
    0D1C: 39 FF    CMP   A,0xFF
    0D1E: A0 47    JZ    0x0D66
    0D20: 50 47    MOV   A,0x47
    0D22: 08       PUSH  A
    0D23: 50 00    MOV   A,0x0
    0D25: 08       PUSH  A
    0D26: 08       PUSH  A
    0D27: 08       PUSH  A
    0D28: 51 28    MOV   A,[__r0]
    0D2A: 08       PUSH  A
    0D2B: 51 27    MOV   A,[__r1]
    0D2D: 08       PUSH  A
    0D2E: 51 26    MOV   A,[__r2]
    0D30: 08       PUSH  A
    0D31: 51 25    MOV   A,[__r3]
    0D33: 08       PUSH  A
    0D34: 7C 11 80 LCALL 0x1180
    0D37: 18       POP   A
    0D38: 53 21    MOV   [__r7],A
    0D3A: 18       POP   A
    0D3B: 53 22    MOV   [__r6],A
    0D3D: 18       POP   A
    0D3E: 53 23    MOV   [__r5],A
    0D40: 18       POP   A
    0D41: 38 FC    ADD   SP,0xFC
    0D43: 08       PUSH  A
    0D44: 51 23    MOV   A,[__r5]
    0D46: 08       PUSH  A
    0D47: 51 22    MOV   A,[__r6]
    0D49: 08       PUSH  A
    0D4A: 51 21    MOV   A,[__r7]
    0D4C: 08       PUSH  A
    0D4D: 7C 0E 17 LCALL 0x0E17
    0D50: 18       POP   A
    0D51: 53 23    MOV   [__r5],A
    0D53: 18       POP   A
    0D54: 53 24    MOV   [__r4],A
    0D56: 38 FE    ADD   SP,0xFE
    0D58: 51 23    MOV   A,[__r5]
    0D5A: 01 00    ADD   A,0x0
    0D5C: 54 01    MOV   [X+1],A
    0D5E: 51 24    MOV   A,[__r4]
    0D60: 09 80    ADC   A,0x80
    0D62: 54 00    MOV   [X+0],A
    0D64: 80 20    JMP   0x0D85
    0D66: 51 28    MOV   A,[__r0]
    0D68: 08       PUSH  A
    0D69: 51 27    MOV   A,[__r1]
    0D6B: 08       PUSH  A
    0D6C: 51 26    MOV   A,[__r2]
    0D6E: 08       PUSH  A
    0D6F: 51 25    MOV   A,[__r3]
    0D71: 08       PUSH  A
    0D72: 7C 0E 17 LCALL 0x0E17
    0D75: 18       POP   A
    0D76: 53 27    MOV   [__r1],A
    0D78: 18       POP   A
    0D79: 53 28    MOV   [__r0],A
    0D7B: 38 FE    ADD   SP,0xFE
    0D7D: 51 27    MOV   A,[__r1]
    0D7F: 54 01    MOV   [X+1],A
    0D81: 51 28    MOV   A,[__r0]
    0D83: 54 00    MOV   [X+0],A
    0D85: 52 01    MOV   A,[X+1]
    0D87: 10       PUSH  X
    0D88: 7C 03 DA LCALL _PWM8_VASEN_WritePulseWidth
    0D8B: 20       POP   X
(0074) 	PWM8_OIKEA_WritePulseWidth((BYTE)pulse);
    0D8C: 52 FC    MOV   A,[X-4]
    0D8E: 10       PUSH  X
    0D8F: 7C 04 60 LCALL _PWM8_OIKEA_WritePulseWidth
    0D92: 20       POP   X
    0D93: 38 FE    ADD   SP,0xFE
    0D95: 20       POP   X
    0D96: 7F       RET   
(0075) }
(0076) 
(0077) 
(0078) //TEST LEFTTURN
(0079) void TestTurnLeft(int pulse)
(0080) {
_TestTurnLeft:
  pulse                --> X-5
    0D97: 10       PUSH  X
    0D98: 4F       MOV   X,SP
(0081) 	LEFTC_Data_ADDR &= NOLLAA;
    0D99: 41 04 F0 AND   REG[0x4],0xF0
(0082) 	LEFTC_Data_ADDR |= 0b00000001;
    0D9C: 43 04 01 OR    REG[0x4],0x1
(0083) 	
(0084) 	PWM8_VASEN_WritePulseWidth(0);
    0D9F: 10       PUSH  X
    0DA0: 50 00    MOV   A,0x0
    0DA2: 7C 03 DA LCALL _PWM8_VASEN_WritePulseWidth
    0DA5: 20       POP   X
(0085) 	PWM8_OIKEA_WritePulseWidth((BYTE)pulse);
    0DA6: 52 FC    MOV   A,[X-4]
    0DA8: 10       PUSH  X
    0DA9: 7C 04 60 LCALL _PWM8_OIKEA_WritePulseWidth
    0DAC: 20       POP   X
    0DAD: 20       POP   X
    0DAE: 7F       RET   
FILE: Z:\LOLLOL~1\ROBOTT~1\ROBOTT~1\ultracontrol.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"
(0003) #include<stdio.h>
(0004) #include<stdlib.h>
(0005) 
(0006) //----------------------------------------------------
(0007)   //PORT0_6 TRIGGER
(0008)   //PORT0_7 ECHO
(0009) //
(0010) 
(0011) //PORT0_4 SERVO PWM
(0012) 
(0013) float distanceToCm = 0.033f;
(0014) 
(0015) //Init PGA AND ADC
(0016) void InitUAServo(void)
(0017) {
(0018) 	PWM8_SERVO_Start();
_InitUAServo:
    0DAF: 10       PUSH  X
    0DB0: 7C 04 12 LCALL _PWM8_SERVO_Start
(0019) 	PWM8_SERVO_WritePulseWidth(15);
    0DB3: 50 0F    MOV   A,0xF
    0DB5: 7C 04 1D LCALL _PWM8_SERVO_WritePulseWidth
    0DB8: 20       POP   X
    0DB9: 7F       RET   
(0020) }
(0021) 
(0022) 
(0023) //Return distance from Ultrasonic sensor in centimeters 
(0024) int getDataUA(void)
(0025) {
_getDataUA:
    0DBA: 7F       RET   
(0026) 	/*if(ADCINC_fIsDataAvailable() != 0)
(0027) 	{		
(0028) 		return (int)(ADCINC_iGetData() * distanceToCm);
(0029) 	}
(0030) 	else 
(0031) 		return 0;*/
(0032) }
(0033) 
(0034) //Sends Trigger pulse
(0035) void ControlTrigger(int *time)
(0036) {
_ControlTrigger:
  time                 --> X-5
    0DBB: 10       PUSH  X
    0DBC: 4F       MOV   X,SP
(0037) 	//Wait 60ms and send pulse again
(0038) 	if (*time >= 80)
    0DBD: 52 FC    MOV   A,[X-4]
    0DBF: 53 27    MOV   [__r1],A
    0DC1: 3E 27    MVI   A,[__r1]
    0DC3: 53 28    MOV   [__r0],A
    0DC5: 3E 27    MVI   A,[__r1]
    0DC7: 11 50    SUB   A,0x50
    0DC9: 51 28    MOV   A,[__r0]
    0DCB: 31 80    XOR   A,0x80
    0DCD: 19 80    SBB   A,0x80
    0DCF: C0 0B    JC    0x0DDB
(0039) 	{
(0040) 		*time = 0;
    0DD1: 52 FC    MOV   A,[X-4]
    0DD3: 53 27    MOV   [__r1],A
    0DD5: 50 00    MOV   A,0x0
    0DD7: 3F 27    MVI   [__r1],A
    0DD9: 3F 27    MVI   [__r1],A
(0041) 	}
(0042) 	
(0043) 	//Send Trigger Pulse every 1ms 
(0044) 	if (*time <= 1)
    0DDB: 52 FC    MOV   A,[X-4]
    0DDD: 53 27    MOV   [__r1],A
    0DDF: 3E 27    MVI   A,[__r1]
    0DE1: 53 28    MOV   [__r0],A
    0DE3: 3E 27    MVI   A,[__r1]
    0DE5: 53 27    MOV   [__r1],A
    0DE7: 50 01    MOV   A,0x1
    0DE9: 12 27    SUB   A,[__r1]
    0DEB: 51 28    MOV   A,[__r0]
    0DED: 31 80    XOR   A,0x80
    0DEF: 53 1C    MOV   [__rX],A
    0DF1: 50 80    MOV   A,0x80
    0DF3: 1A 1C    SBB   A,[__rX]
    0DF5: C0 06    JC    0x0DFC
(0045) 	{
(0046) 		UATrig_Data_ADDR |= UATrig_MASK;
    0DF7: 43 00 40 OR    REG[0x0],0x40
(0047) 	}
    0DFA: 80 04    JMP   0x0DFF
(0048) 	else 	
(0049) 		UATrig_Data_ADDR &= ~UATrig_MASK;
    0DFC: 41 00 BF AND   REG[0x0],0xBF
    0DFF: 20       POP   X
    0E00: 7F       RET   
(0050) 	
(0051) }
(0052) 
(0053) //Control PWM to move sensor
(0054) void ControlServo(int pulse)
(0055) {
_ControlServo:
  pulse                --> X-5
    0E01: 10       PUSH  X
    0E02: 4F       MOV   X,SP
(0056) 	PWM8_SERVO_WritePulseWidth((BYTE)pulse);	
    0E03: 52 FC    MOV   A,[X-4]
    0E05: 10       PUSH  X
    0E06: 7C 04 1D LCALL _PWM8_SERVO_WritePulseWidth
    0E09: 20       POP   X
    0E0A: 20       POP   X
    0E0B: 7F       RET   
FILE: lib\psocgpioint.asm               (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;;*****************************************************************************
                                        (0004) ;;*****************************************************************************
                                        (0005) ;;  FILENAME: PSoCGPIOINT.asm
                                        (0006) ;;   Version: 2.0.0.20, Updated on 2003/07/17 at 12:10:35
                                        (0007) ;;  @PSOC_VERSION
                                        (0008) ;;
                                        (0009) ;;  DESCRIPTION: PSoC GPIO Interrupt Service Routine
                                        (0010) ;;-----------------------------------------------------------------------------
                                        (0011) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0012) ;;*****************************************************************************
                                        (0013) ;;*****************************************************************************
                                        (0014) 
                                        (0015) include "m8c.inc"
                                        (0016) include "PSoCGPIOINT.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export   PSoC_GPIO_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) ;-----------------------------------------------
                                        (0025) ;  Constant Definitions
                                        (0026) ;-----------------------------------------------
                                        (0027) 
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ; Variable Allocation
                                        (0031) ;-----------------------------------------------
                                        (0032) 	
                                        (0033) 
                                        (0034) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0035) ;---------------------------------------------------
                                        (0036) ; Insert your custom declarations below this banner
                                        (0037) ;---------------------------------------------------
                                        (0038) 
                                        (0039) ;---------------------------------------------------
                                        (0040) ; Insert your custom declarations above this banner
                                        (0041) ;---------------------------------------------------
                                        (0042) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0043) 
                                        (0044) 
                                        (0045) ;-----------------------------------------------------------------------------
                                        (0046) ;  FUNCTION NAME: PSoC_GPIO_ISR
                                        (0047) ;
                                        (0048) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0049) ;
                                        (0050) ;-----------------------------------------------------------------------------
                                        (0051) ;
                                        (0052) PSoC_GPIO_ISR:
                                        (0053) 
                                        (0054) 
                                        (0055)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0056)    ;---------------------------------------------------
                                        (0057)    ; Insert your custom code below this banner
                                        (0058)    ;---------------------------------------------------
0E0C: 7D 08 03 LJMP  _PinInterrupt      (0059)    ljmp _PinInterrupt
                                        (0060)    ;---------------------------------------------------
                                        (0061)    ; Insert your custom code above this banner
                                        (0062)    ;---------------------------------------------------
                                        (0063)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0064) 
0E0F: 7E       RETI                     (0065)    reti
                                        (0066) 
                                        (0067) 
                                        (0068) ; end of file PSoCGPIOINT.asm
_itoa:
    124C: 10       PUSH  X
    124D: 4F       MOV   X,SP
    124E: 38 09    ADD   SP,0x9
    1250: 52 FA    MOV   A,[X-6]
    1252: 54 03    MOV   [X+3],A
    1254: 52 F9    MOV   A,[X-7]
    1256: 54 02    MOV   [X+2],A
    1258: 3D F9 00 CMP   [X-7],0x0
    125B: B0 22    JNZ   0x127E
    125D: 3D FA 00 CMP   [X-6],0x0
    1260: B0 1D    JNZ   0x127E
    1262: 52 FC    MOV   A,[X-4]
    1264: 53 27    MOV   [__r1],A
    1266: 50 30    MOV   A,0x30
    1268: 3F 27    MVI   [__r1],A
    126A: 52 FC    MOV   A,[X-4]
    126C: 01 01    ADD   A,0x1
    126E: 53 27    MOV   [__r1],A
    1270: 50 00    MOV   A,0x0
    1272: 3F 27    MVI   [__r1],A
    1274: 52 FC    MOV   A,[X-4]
    1276: 53 27    MOV   [__r1],A
    1278: 52 FB    MOV   A,[X-5]
    127A: 53 28    MOV   [__r0],A
    127C: 81 48    JMP   0x13C5
    127E: 52 FA    MOV   A,[X-6]
    1280: 11 00    SUB   A,0x0
    1282: 52 F9    MOV   A,[X-7]
    1284: 31 80    XOR   A,0x80
    1286: 19 80    SBB   A,0x80
    1288: D0 26    JNC   0x12AF
    128A: 3D F7 00 CMP   [X-9],0x0
    128D: B0 21    JNZ   0x12AF
    128F: 3D F8 0A CMP   [X-8],0xA
    1292: B0 1C    JNZ   0x12AF
    1294: 56 06 01 MOV   [X+6],0x1
    1297: 52 03    MOV   A,[X+3]
    1299: 73       CPL   A
    129A: 53 27    MOV   [__r1],A
    129C: 52 02    MOV   A,[X+2]
    129E: 73       CPL   A
    129F: 53 28    MOV   [__r0],A
    12A1: 51 27    MOV   A,[__r1]
    12A3: 01 01    ADD   A,0x1
    12A5: 54 03    MOV   [X+3],A
    12A7: 51 28    MOV   A,[__r0]
    12A9: 09 00    ADC   A,0x0
    12AB: 54 02    MOV   [X+2],A
    12AD: 80 04    JMP   0x12B2
    12AF: 56 06 00 MOV   [X+6],0x0
    12B2: 52 FC    MOV   A,[X-4]
    12B4: 54 01    MOV   [X+1],A
    12B6: 52 F7    MOV   A,[X-9]
    12B8: 08       PUSH  A
    12B9: 52 F8    MOV   A,[X-8]
    12BB: 08       PUSH  A
    12BC: 52 02    MOV   A,[X+2]
    12BE: 08       PUSH  A
    12BF: 52 03    MOV   A,[X+3]
    12C1: 08       PUSH  A
    12C2: 7C 0E 10 LCALL 0x0E10
    12C5: 38 FE    ADD   SP,0xFE
    12C7: 18       POP   A
    12C8: 53 27    MOV   [__r1],A
    12CA: 18       POP   A
    12CB: 53 28    MOV   [__r0],A
    12CD: 51 27    MOV   A,[__r1]
    12CF: 54 08    MOV   [X+8],A
    12D1: 51 28    MOV   A,[__r0]
    12D3: 54 07    MOV   [X+7],A
    12D5: 50 09    MOV   A,0x9
    12D7: 13 08    SUB   A,[X+8]
    12D9: 52 07    MOV   A,[X+7]
    12DB: 31 80    XOR   A,0x80
    12DD: 53 1C    MOV   [__rX],A
    12DF: 50 80    MOV   A,0x80
    12E1: 1A 1C    SBB   A,[__rX]
    12E3: C0 1D    JC    0x1301
    12E5: 52 01    MOV   A,[X+1]
    12E7: 53 27    MOV   [__r1],A
    12E9: 52 00    MOV   A,[X+0]
    12EB: 53 28    MOV   [__r0],A
    12ED: 51 27    MOV   A,[__r1]
    12EF: 01 01    ADD   A,0x1
    12F1: 54 01    MOV   [X+1],A
    12F3: 51 28    MOV   A,[__r0]
    12F5: 09 00    ADC   A,0x0
    12F7: 54 00    MOV   [X+0],A
    12F9: 52 08    MOV   A,[X+8]
    12FB: 01 30    ADD   A,0x30
    12FD: 3F 27    MVI   [__r1],A
    12FF: 80 1B    JMP   0x131B
    1301: 52 01    MOV   A,[X+1]
    1303: 53 27    MOV   [__r1],A
    1305: 52 00    MOV   A,[X+0]
    1307: 53 28    MOV   [__r0],A
    1309: 51 27    MOV   A,[__r1]
    130B: 01 01    ADD   A,0x1
    130D: 54 01    MOV   [X+1],A
    130F: 51 28    MOV   A,[__r0]
    1311: 09 00    ADC   A,0x0
    1313: 54 00    MOV   [X+0],A
    1315: 52 08    MOV   A,[X+8]
    1317: 01 57    ADD   A,0x57
    1319: 3F 27    MVI   [__r1],A
    131B: 52 F7    MOV   A,[X-9]
    131D: 08       PUSH  A
    131E: 52 F8    MOV   A,[X-8]
    1320: 08       PUSH  A
    1321: 52 02    MOV   A,[X+2]
    1323: 08       PUSH  A
    1324: 52 03    MOV   A,[X+3]
    1326: 08       PUSH  A
    1327: 7C 0E 10 LCALL 0x0E10
    132A: 18       POP   A
    132B: 54 03    MOV   [X+3],A
    132D: 18       POP   A
    132E: 54 02    MOV   [X+2],A
    1330: 38 FE    ADD   SP,0xFE
    1332: 3D 02 00 CMP   [X+2],0x0
    1335: BF 80    JNZ   0x12B6
    1337: 3D 03 00 CMP   [X+3],0x0
    133A: BF 7B    JNZ   0x12B6
    133C: 3D 06 00 CMP   [X+6],0x0
    133F: A0 19    JZ    0x1359
    1341: 52 01    MOV   A,[X+1]
    1343: 53 27    MOV   [__r1],A
    1345: 52 00    MOV   A,[X+0]
    1347: 53 28    MOV   [__r0],A
    1349: 51 27    MOV   A,[__r1]
    134B: 01 01    ADD   A,0x1
    134D: 54 01    MOV   [X+1],A
    134F: 51 28    MOV   A,[__r0]
    1351: 09 00    ADC   A,0x0
    1353: 54 00    MOV   [X+0],A
    1355: 50 2D    MOV   A,0x2D
    1357: 3F 27    MVI   [__r1],A
    1359: 52 01    MOV   A,[X+1]
    135B: 53 27    MOV   [__r1],A
    135D: 52 00    MOV   A,[X+0]
    135F: 53 28    MOV   [__r0],A
    1361: 51 27    MOV   A,[__r1]
    1363: 01 FF    ADD   A,0xFF
    1365: 54 01    MOV   [X+1],A
    1367: 51 28    MOV   A,[__r0]
    1369: 09 FF    ADC   A,0xFF
    136B: 54 00    MOV   [X+0],A
    136D: 50 00    MOV   A,0x0
    136F: 3F 27    MVI   [__r1],A
    1371: 52 FC    MOV   A,[X-4]
    1373: 54 05    MOV   [X+5],A
    1375: 80 3D    JMP   0x13B3
    1377: 52 05    MOV   A,[X+5]
    1379: 53 27    MOV   [__r1],A
    137B: 3E 27    MVI   A,[__r1]
    137D: 54 06    MOV   [X+6],A
    137F: 52 05    MOV   A,[X+5]
    1381: 53 27    MOV   [__r1],A
    1383: 52 04    MOV   A,[X+4]
    1385: 53 28    MOV   [__r0],A
    1387: 51 27    MOV   A,[__r1]
    1389: 01 01    ADD   A,0x1
    138B: 54 05    MOV   [X+5],A
    138D: 51 28    MOV   A,[__r0]
    138F: 09 00    ADC   A,0x0
    1391: 54 04    MOV   [X+4],A
    1393: 52 01    MOV   A,[X+1]
    1395: 53 25    MOV   [__r3],A
    1397: 3E 25    MVI   A,[__r3]
    1399: 3F 27    MVI   [__r1],A
    139B: 52 01    MOV   A,[X+1]
    139D: 53 27    MOV   [__r1],A
    139F: 52 00    MOV   A,[X+0]
    13A1: 53 28    MOV   [__r0],A
    13A3: 51 27    MOV   A,[__r1]
    13A5: 01 FF    ADD   A,0xFF
    13A7: 54 01    MOV   [X+1],A
    13A9: 51 28    MOV   A,[__r0]
    13AB: 09 FF    ADC   A,0xFF
    13AD: 54 00    MOV   [X+0],A
    13AF: 52 06    MOV   A,[X+6]
    13B1: 3F 27    MVI   [__r1],A
    13B3: 52 01    MOV   A,[X+1]
    13B5: 53 28    MOV   [__r0],A
    13B7: 52 05    MOV   A,[X+5]
    13B9: 3A 28    CMP   A,[__r0]
    13BB: CF BB    JC    0x1377
    13BD: 52 FC    MOV   A,[X-4]
    13BF: 53 27    MOV   [__r1],A
    13C1: 52 FB    MOV   A,[X-5]
    13C3: 53 28    MOV   [__r0],A
    13C5: 38 F7    ADD   SP,0xF7
    13C7: 20       POP   X
    13C8: 7F       RET   
