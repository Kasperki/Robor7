FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C27xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
001C: 7D 0E 07 LJMP  PSoC_GPIO_ISR      (0145)     ljmp	PSoC_GPIO_ISR
001F: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 03 DC LJMP  _PWM8_VASEN_ISR    (0149)     ljmp	_PWM8_VASEN_ISR
0023: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0024: 7D 04 62 LJMP  _PWM8_OIKEA_ISR    (0153)     ljmp	_PWM8_OIKEA_ISR
0027: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 03 37 LJMP  _Timer8_ISR        (0157)     ljmp	_Timer8_ISR
002B: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0161)     // call	void_handler
002C: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
0030: 7D 04 1F LJMP  _PWM8_SERVO_ISR    (0165)     ljmp	_PWM8_SERVO_ISR
0033: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
0038: 7D 07 5B LJMP  _Counter16_1_ISR   (0173)     ljmp	_Counter16_1_ISR
003B: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0181)     // call	void_handler
0060: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0185)     // call	void_handler
0064: 7E       RETI                     (0186)     reti
0068: 71 10    OR    F,0x10             
                                        (0187)     ;---------------------------------------------------
                                        (0188)     ; Insert your custom code above this banner
                                        (0189)     ;---------------------------------------------------
                                        (0190)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0191) 
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  Start of Execution.
                                        (0194) ;-----------------------------------------------------------------------------
                                        (0195) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0196) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0197) ;
                                        (0198) 
                                        (0199) IF	(TOOLCHAIN & HITECH)
                                        (0200)  	AREA PD_startup(CODE, REL, CON)
                                        (0201) ELSE
                                        (0202)     org 68h
                                        (0203) ENDIF
                                        (0204) __Start:
                                        (0205) 
                                        (0206)     ; initialize SMP values for voltage stabilization, if required,
                                        (0207)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0208)     ; least for now. 
                                        (0209)     ;
                                        (0210)     M8C_SetBank1
006A: 62 E3 87 MOV   REG[0xE3],0x87     (0211)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0212)     M8C_SetBank0
                                        (0213) 
                                        (0214) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0215) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0216)     M8C_EnableWatchDog
                                        (0217) ENDIF
                                        (0218) 
                                        (0219) IF ( SELECT_32K )
                                        (0220)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0221) ELSE
0072: 41 FE FB AND   REG[0xFE],0xFB     (0222)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0223) ENDIF
                                        (0224) 
                                        (0225) IF	(TOOLCHAIN & HITECH) 
                                        (0226)     ;---------------------------
                                        (0227)     ; Set up the Temporary stack
                                        (0228)     ;---------------------------
                                        (0229)     ; A temporary stack is set up for the SSC instructions.
                                        (0230)     ; The real stack start will be assigned later.
                                        (0231)     ;
                                        (0232) 	global		__Lstackps
                                        (0233) 	mov     a,low __Lstackps
                                        (0234) 	swap    a,sp
                                        (0235) ELSE
                                        (0236)     ;------------------
                                        (0237)     ; Set up the stack
                                        (0238)     ;------------------
0075: 50 35    MOV   A,0x35             (0239)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0240)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0241) ENDIF
                                        (0242) 
                                        (0243)     ;-----------------------------------------------
                                        (0244)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0245)     ;-----------------------------------------------
                                        (0246) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0247) IF ( SUPPLY_VOLTAGE )         ; 1 means 5.0V
                                        (0248)  IF ( AGND_BYPASS )
                                        (0249)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0250)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0251)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0252)     ; value using the proper trim values.
                                        (0253)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0254)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0255)  ENDIF
                                        (0256) ELSE    ; 3.3 V Operation, not 5.0V
                                        (0257)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0258) ENDIF ;(SUPPLY_VOLTAGE)
                                        (0259) 
007B: 55 F8 00 MOV   [_ramareas_end+195],0x0(0260)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
007E: 55 F9 00 MOV   [_ramareas_end+196],0x0(0261)     mov  [bSSC_KEYSP], 0
0081: 71 10    OR    F,0x10             
                                        (0262) 
                                        (0263)     ;---------------------------------------
                                        (0264)     ; Initialize Crystal Oscillator and PLL
                                        (0265)     ;---------------------------------------
                                        (0266) 
                                        (0267) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0268)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0269)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0270)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0271)     ; the ECO to stabilize.
                                        (0272)     ;
                                        (0273)     M8C_SetBank1
                                        (0274)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0275)     M8C_SetBank0
                                        (0276)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0277)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0278)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0279) .WaitFor1s:
                                        (0280)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0281)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0282)                                           ;   since interrupts are not globally enabled
                                        (0283) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0284)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0285)     M8C_SetBank1
0083: 62 E0 02 MOV   REG[0xE0],0x2      (0286)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0086: 70 EF    AND   F,0xEF             
0088: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0287)     M8C_SetBank0
                                        (0288)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0289) 
                                        (0290) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0291) 
                                        (0292) IF ( PLL_MODE )
                                        (0293)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0294)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0295)     ;
                                        (0296)     M8C_SetBank1
                                        (0297)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0298)     M8C_SetBank0
                                        (0299)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0300)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0301) 
                                        (0302) .WaitFor16ms:
                                        (0303)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0304)     jz   .WaitFor16ms
                                        (0305)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0306)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0307)     M8C_SetBank0
                                        (0308) 
                                        (0309) IF      ( WAIT_FOR_32K )
                                        (0310) ELSE ; !( WAIT_FOR_32K )
                                        (0311)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0312)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0313) ENDIF ;(WAIT_FOR_32K)
                                        (0314) ENDIF ;(PLL_MODE)
                                        (0315) 
                                        (0316) 	;-------------------------------------------------------
                                        (0317)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0318)     ;-------------------------------------------------------
                                        (0319) 
                                        (0320)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0321) 
                                        (0322) IF (SYSCLK_SOURCE)
                                        (0323)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0324) ENDIF
                                        (0325)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0326) 
                                        (0327)     ;------------------------
                                        (0328)     ; Close CT leakage path.
                                        (0329)     ;------------------------
008B: 62 71 05 MOV   REG[0x71],0x5      (0330)     mov   reg[ACB00CR0], 05h
008E: 62 75 05 MOV   REG[0x75],0x5      (0331)     mov   reg[ACB01CR0], 05h
0091: 62 79 05 MOV   REG[0x79],0x5      (0332)     mov   reg[ACB02CR0], 05h
0094: 62 7D 05 MOV   REG[0x7D],0x5      (0333)     mov   reg[ACB03CR0], 05h
                                        (0334) 
                                        (0335)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0336)     ;---------------------------------------------------
                                        (0337)     ; Insert your custom code below this banner
                                        (0338)     ;---------------------------------------------------
                                        (0339) 
                                        (0340)     ;---------------------------------------------------
                                        (0341)     ; Insert your custom code above this banner
                                        (0342)     ;---------------------------------------------------
                                        (0343)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0344) 
                                        (0345)     ;-------------------------
                                        (0346)     ; Load Base Configuration
                                        (0347)     ;-------------------------
                                        (0348)     ; Load global parameter settings and load the user modules in the
                                        (0349)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0350)     ; to minimize start up time; (2) We may still need to play with the
                                        (0351)     ; Sleep Timer.
                                        (0352)     ;
0097: 7C 02 CD LCALL 0x02CD             (0353)     lcall LoadConfigInit
                                        (0354) 
                                        (0355)     ;-----------------------------------
                                        (0356)     ; Initialize C Run-Time Environment
                                        (0357)     ;-----------------------------------
                                        (0358) IF ( C_LANGUAGE_SUPPORT )
009A: 50 00    MOV   A,0x0              (0359)     mov  A,0                           ; clear the 'bss' segment to zero
009C: 55 26 2B MOV   [__r0],0x2B        (0360)     mov  [__r0],<__bss_start
                                        (0361) BssLoop:
009F: 3C 26 35 CMP   [__r0],0x35        (0362)     cmp  [__r0],<__bss_end
00A2: A0 05    JZ    0x00A8             (0363)     jz   BssDone
00A4: 3F 26    MVI   [__r0],A           (0364)     mvi  [__r0],A
00A6: 8F F8    JMP   0x009F             (0365)     jmp  BssLoop
                                        (0366) BssDone:
00A8: 50 01    MOV   A,0x1              (0367)     mov  A,>__idata_start              ; copy idata to data segment
00AA: 57 F0    MOV   X,0xF0             (0368)     mov  X,<__idata_start
00AC: 55 26 00 MOV   [__r0],0x0         (0369)     mov  [__r0],<__data_start
                                        (0370) IDataLoop:
00AF: 3C 26 18 CMP   [__r0],0x18        (0371)     cmp  [__r0],<__data_end
00B2: A0 0B    JZ    0x00BE             (0372)     jz   C_RTE_Done
00B4: 08       PUSH  A                  (0373)     push A
00B5: 28       ROMX                     (0374)     romx
00B6: 3F 26    MVI   [__r0],A           (0375)     mvi  [__r0],A
00B8: 18       POP   A                  (0376)     pop  A
00B9: 75       INC   X                  (0377)     inc  X
00BA: 09 00    ADC   A,0x0              (0378)     adc  A,0
00BC: 8F F2    JMP   0x00AF             (0379)     jmp  IDataLoop
00BE: 71 10    OR    F,0x10             
00C0: 70 EF    AND   F,0xEF             
                                        (0380) 
                                        (0381) C_RTE_Done:
                                        (0382) 
                                        (0383) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0384) 
                                        (0385)     ;-------------------------------
                                        (0386)     ; Voltage Stabilization for SMP
                                        (0387)     ;-------------------------------
                                        (0388) 
                                        (0389) IF ( SUPPLY_VOLTAGE )                  ; 1 Means 5 Volts
                                        (0390) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0391)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0392)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0393)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0394)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0395)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0396)     M8C_SetBank1
                                        (0397)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0398)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0399)     M8C_SetBank0
                                        (0400)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0401)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0402) .WaitFor2ms:
                                        (0403)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0404)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0405) ENDIF ; ( SWITCH_MODE_PUMP ^ 1 )
                                        (0406) ENDIF ; ( SUPPLY_VOLTAGE )
                                        (0407) 
                                        (0408)     ;-------------------------------
                                        (0409)     ; Set Power-On Reset (POR) Level
                                        (0410)     ;-------------------------------
                                        (0411)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0412)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0413)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0414)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0415)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0416) 
                                        (0417)     M8C_SetBank1
                                        (0418) 
                                        (0419) IF ( SUPPLY_VOLTAGE )                       ; 1 Means 5 Volts
                                        (0420)  IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )  ;    Also 24MHz?
                                        (0421)                                             ;       no, set 4.5V POR in user code, if desired
                                        (0422)  ELSE ; 24HMz                               ;
                                        (0423)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0424)  ENDIF ; OSC_CRO_CPU_24MHz
                                        (0425) ENDIF ; 5V
                                        (0426) 
                                        (0427)     M8C_SetBank0
                                        (0428) 
                                        (0429)     ;----------------------------
                                        (0430)     ; Wrap up and invoke "main"
                                        (0431)     ;----------------------------
                                        (0432) 
                                        (0433)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0434)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0435)     ;
00C2: 62 E0 00 MOV   REG[0xE0],0x0      (0436)     mov  reg[INT_MSK0],0
00C5: 71 10    OR    F,0x10             
                                        (0437) 
                                        (0438)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0439)     ;
                                        (0440)     M8C_SetBank1
00C7: 62 E0 00 MOV   REG[0xE0],0x0      (0441)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
00CA: 70 EF    AND   F,0xEF             
                                        (0442)     M8C_SetBank0
                                        (0443) 
                                        (0444)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0445)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0446)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0447)     ;
00CC: 62 E2 00 MOV   REG[0xE2],0x0      (0448)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0449)                                    ; have been set during the boot process.
                                        (0450) IF	(TOOLCHAIN & HITECH)
                                        (0451) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0452) ELSE
                                        (0453) IF ENABLE_LJMP_TO_MAIN
                                        (0454)     ljmp  _main                    ; goto main (no return)
                                        (0455) ELSE
00CF: 7C 08 46 LCALL _main              (0456)     lcall _main                    ; call main
                                        (0457) .Exit:
00D2: 8F FF    JMP   0x00D2             (0458)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0459) ENDIF
                                        (0460) ENDIF ; TOOLCHAIN
                                        (0461) 
                                        (0462)     ;---------------------------------
                                        (0463)     ; Library Access to Global Parms
                                        (0464)     ;---------------------------------
                                        (0465)     ;
                                        (0466)  bGetPowerSetting:
                                        (0467) _bGetPowerSetting:
                                        (0468)     ; Synthesize the "power setting" value used by chips with SlowIMO mode.
                                        (0469)     ; Returns value of POWER_SETTING in the A register.
                                        (0470)     ; No inputs. No Side Effects.
                                        (0471)     ;
                                        (0472) IF ( SUPPLY_VOLTAGE )            ; 1 means 5.0V
00D4: 50 10    MOV   A,0x10             (0473)     mov   A, POWER_SET_5V0_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0474) ELSE        
                                        (0475)     mov   A, POWER_SET_3V3_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0476) ENDIF
00D6: 7F       RET                      (0477)     ret
                                        (0478) 
                                        (0479) IF	(TOOLCHAIN & HITECH)
                                        (0480) ELSE
                                        (0481)     ;---------------------------------
                                        (0482)     ; Order Critical RAM & ROM AREAs
                                        (0483)     ;---------------------------------
                                        (0484)     ;  'TOP' is all that has been defined so far...
                                        (0485) 
                                        (0486)     ;  ROM AREAs for C CONST, static & global items
                                        (0487)     ;
                                        (0488)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0489)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0490) __idata_start:
                                        (0491) 
                                        (0492)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0493) __func_lit_start:
                                        (0494) 
                                        (0495)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0496)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0497) 
                                        (0498)     ; CODE segment for general use
                                        (0499)     ;
                                        (0500)     AREA text (ROM, REL, CON)
                                        (0501) __text_start:
                                        (0502) 
                                        (0503)     ; RAM area usage
                                        (0504)     ;
                                        (0505)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0506) __data_start:
                                        (0507) 
                                        (0508)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0509)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0510)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0511) __bss_start:
                                        (0512) 
                                        (0513) ENDIF ; TOOLCHAIN
                                        (0514) 
                                        (0515) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.2946
0208: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_robottiprojekti_Bank1
                                        (0019) export LoadConfigTBL_robottiprojekti_Bank0
                                        (0020) export LoadConfigTBL_robottiprojekti_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_robottiprojekti_Bank0:
                                        (0023) ;  Instance name Counter16_1, User Module Counter16
                                        (0024) ;       Instance name Counter16_1, Block Name CNTR16_LSB(DBB11)
                                        (0025) 	db		37h, 00h		;Counter16_1_CONTROL_LSB_REG(DBB11CR0)
                                        (0026) 	db		35h, 13h		;Counter16_1_PERIOD_LSB_REG(DBB11DR1)
                                        (0027) 	db		36h, 00h		;Counter16_1_COMPARE_LSB_REG(DBB11DR2)
                                        (0028) ;       Instance name Counter16_1, Block Name CNTR16_MSB(DCB12)
                                        (0029) 	db		3bh, 00h		;Counter16_1_CONTROL_MSB_REG(DCB12CR0)
                                        (0030) 	db		39h, 00h		;Counter16_1_PERIOD_MSB_REG(DCB12DR1)
                                        (0031) 	db		3ah, 00h		;Counter16_1_COMPARE_MSB_REG(DCB12DR2)
                                        (0032) ;  Instance name LCD, User Module LCD
                                        (0033) ;  Instance name LED, User Module LED
                                        (0034) ;  Instance name PWM8_OIKEA, User Module PWM8
                                        (0035) ;       Instance name PWM8_OIKEA, Block Name PWM8(DBB01)
                                        (0036) 	db		27h, 00h		;PWM8_OIKEA_CONTROL_REG(DBB01CR0)
                                        (0037) 	db		25h, c7h		;PWM8_OIKEA_PERIOD_REG(DBB01DR1)
                                        (0038) 	db		26h, 00h		;PWM8_OIKEA_COMPARE_REG(DBB01DR2)
                                        (0039) ;  Instance name PWM8_SERVO, User Module PWM8
                                        (0040) ;       Instance name PWM8_SERVO, Block Name PWM8(DBB10)
                                        (0041) 	db		33h, 00h		;PWM8_SERVO_CONTROL_REG(DBB10CR0)
                                        (0042) 	db		31h, c7h		;PWM8_SERVO_PERIOD_REG(DBB10DR1)
                                        (0043) 	db		32h, 00h		;PWM8_SERVO_COMPARE_REG(DBB10DR2)
                                        (0044) ;  Instance name PWM8_VASEN, User Module PWM8
                                        (0045) ;       Instance name PWM8_VASEN, Block Name PWM8(DBB00)
                                        (0046) 	db		23h, 00h		;PWM8_VASEN_CONTROL_REG(DBB00CR0)
                                        (0047) 	db		21h, c7h		;PWM8_VASEN_PERIOD_REG(DBB00DR1)
                                        (0048) 	db		22h, 00h		;PWM8_VASEN_COMPARE_REG(DBB00DR2)
                                        (0049) ;  Instance name Timer8, User Module Timer8
                                        (0050) ;       Instance name Timer8, Block Name TIMER8(DCB02)
                                        (0051) 	db		2bh, 04h		;Timer8_CONTROL_REG(DCB02CR0)
                                        (0052) 	db		29h, 09h		;Timer8_PERIOD_REG(DCB02DR1)
                                        (0053) 	db		2ah, 00h		;Timer8_COMPARE_REG(DCB02DR2)
                                        (0054) ;  Global Register values Bank 0
                                        (0055) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0056) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0057) 	db		63h, 15h		; AnalogReferenceControl register (ARF_CR)
                                        (0058) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0059) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0060) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0061) 	db		d6h, 00h		; I2CConfig register (I2CCFG)
                                        (0062) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0063) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0064) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0065) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0066) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0067) 	db		b5h, 11h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0068) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0069) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0070) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0071) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0072) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0073) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0074) 	db		bdh, 02h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0075) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0076) 	db		ffh
                                        (0077) LoadConfigTBL_robottiprojekti_Bank1:
                                        (0078) ;  Instance name Counter16_1, User Module Counter16
                                        (0079) ;       Instance name Counter16_1, Block Name CNTR16_LSB(DBB11)
                                        (0080) 	db		34h, 01h		;Counter16_1_FUNC_LSB_REG(DBB11FN)
                                        (0081) 	db		35h, f5h		;Counter16_1_INPUT_LSB_REG(DBB11IN)
                                        (0082) 	db		36h, 40h		;Counter16_1_OUTPUT_LSB_REG(DBB11OU)
                                        (0083) ;       Instance name Counter16_1, Block Name CNTR16_MSB(DCB12)
                                        (0084) 	db		38h, 21h		;Counter16_1_FUNC_MSB_REG(DCB12FN)
                                        (0085) 	db		39h, 35h		;Counter16_1_INPUT_MSB_REG(DCB12IN)
                                        (0086) 	db		3ah, 40h		;Counter16_1_OUTPUT_MSB_REG(DCB12OU)
                                        (0087) ;  Instance name LCD, User Module LCD
                                        (0088) ;  Instance name LED, User Module LED
                                        (0089) ;  Instance name PWM8_OIKEA, User Module PWM8
                                        (0090) ;       Instance name PWM8_OIKEA, Block Name PWM8(DBB01)
                                        (0091) 	db		24h, 29h		;PWM8_OIKEA_FUNC_REG(DBB01FN)
                                        (0092) 	db		25h, 16h		;PWM8_OIKEA_INPUT_REG(DBB01IN)
                                        (0093) 	db		26h, 45h		;PWM8_OIKEA_OUTPUT_REG(DBB01OU)
                                        (0094) ;  Instance name PWM8_SERVO, User Module PWM8
                                        (0095) ;       Instance name PWM8_SERVO, Block Name PWM8(DBB10)
                                        (0096) 	db		30h, 29h		;PWM8_SERVO_FUNC_REG(DBB10FN)
                                        (0097) 	db		31h, 11h		;PWM8_SERVO_INPUT_REG(DBB10IN)
                                        (0098) 	db		32h, 44h		;PWM8_SERVO_OUTPUT_REG(DBB10OU)
                                        (0099) ;  Instance name PWM8_VASEN, User Module PWM8
                                        (0100) ;       Instance name PWM8_VASEN, Block Name PWM8(DBB00)
                                        (0101) 	db		20h, 29h		;PWM8_VASEN_FUNC_REG(DBB00FN)
                                        (0102) 	db		21h, 16h		;PWM8_VASEN_INPUT_REG(DBB00IN)
                                        (0103) 	db		22h, 44h		;PWM8_VASEN_OUTPUT_REG(DBB00OU)
                                        (0104) ;  Instance name Timer8, User Module Timer8
                                        (0105) ;       Instance name Timer8, Block Name TIMER8(DCB02)
                                        (0106) 	db		28h, 20h		;Timer8_FUNC_REG(DCB02FN)
                                        (0107) 	db		29h, 01h		;Timer8_INPUT_REG(DCB02IN)
                                        (0108) 	db		2ah, 40h		;Timer8_OUTPUT_REG(DCB02OU)
                                        (0109) ;  Global Register values Bank 1
                                        (0110) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0111) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0112) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0113) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0114) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0115) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0116) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0117) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0118) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0119) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0120) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0121) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0122) 	db		e1h, b9h		; OscillatorControl_1 register (OSC_CR1)
                                        (0123) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0124) 	db		dfh, 13h		; OscillatorControl_3 register (OSC_CR3)
                                        (0125) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0126) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0127) 	db		ffh
                                        (0128) AREA psoc_config(rom, rel)
                                        (0129) LoadConfigTBL_robottiprojekti_Ordered:
                                        (0130) ;  Ordered Global Register values
                                        (0131) 	M8C_SetBank0
020A: 62 00 00 MOV   REG[0x0],0x0       (0132) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
020D: 71 10    OR    F,0x10             
                                        (0133) 	M8C_SetBank1
020F: 62 00 53 MOV   REG[0x0],0x53      (0134) 	mov	reg[00h], 53h		; Port_0_DriveMode_0 register (PRT0DM0)
0212: 62 01 AC MOV   REG[0x1],0xAC      (0135) 	mov	reg[01h], ach		; Port_0_DriveMode_1 register (PRT0DM1)
0215: 70 EF    AND   F,0xEF             
                                        (0136) 	M8C_SetBank0
0217: 62 03 2C MOV   REG[0x3],0x2C      (0137) 	mov	reg[03h], 2ch		; Port_0_DriveMode_2 register (PRT0DM2)
021A: 62 02 93 MOV   REG[0x2],0x93      (0138) 	mov	reg[02h], 93h		; Port_0_GlobalSelect register (PRT0GS)
021D: 71 10    OR    F,0x10             
                                        (0139) 	M8C_SetBank1
021F: 62 02 08 MOV   REG[0x2],0x8       (0140) 	mov	reg[02h], 08h		; Port_0_IntCtrl_0 register (PRT0IC0)
0222: 62 03 00 MOV   REG[0x3],0x0       (0141) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
0225: 70 EF    AND   F,0xEF             
                                        (0142) 	M8C_SetBank0
0227: 62 01 08 MOV   REG[0x1],0x8       (0143) 	mov	reg[01h], 08h		; Port_0_IntEn register (PRT0IE)
022A: 62 04 00 MOV   REG[0x4],0x0       (0144) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
022D: 71 10    OR    F,0x10             
                                        (0145) 	M8C_SetBank1
022F: 62 04 8F MOV   REG[0x4],0x8F      (0146) 	mov	reg[04h], 8fh		; Port_1_DriveMode_0 register (PRT1DM0)
0232: 62 05 50 MOV   REG[0x5],0x50      (0147) 	mov	reg[05h], 50h		; Port_1_DriveMode_1 register (PRT1DM1)
0235: 70 EF    AND   F,0xEF             
                                        (0148) 	M8C_SetBank0
0237: 62 07 50 MOV   REG[0x7],0x50      (0149) 	mov	reg[07h], 50h		; Port_1_DriveMode_2 register (PRT1DM2)
023A: 62 06 00 MOV   REG[0x6],0x0       (0150) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
023D: 71 10    OR    F,0x10             
                                        (0151) 	M8C_SetBank1
023F: 62 06 00 MOV   REG[0x6],0x0       (0152) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0242: 62 07 20 MOV   REG[0x7],0x20      (0153) 	mov	reg[07h], 20h		; Port_1_IntCtrl_1 register (PRT1IC1)
0245: 70 EF    AND   F,0xEF             
                                        (0154) 	M8C_SetBank0
0247: 62 05 20 MOV   REG[0x5],0x20      (0155) 	mov	reg[05h], 20h		; Port_1_IntEn register (PRT1IE)
024A: 62 08 00 MOV   REG[0x8],0x0       (0156) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
024D: 71 10    OR    F,0x10             
                                        (0157) 	M8C_SetBank1
024F: 62 08 7F MOV   REG[0x8],0x7F      (0158) 	mov	reg[08h], 7fh		; Port_2_DriveMode_0 register (PRT2DM0)
0252: 62 09 80 MOV   REG[0x9],0x80      (0159) 	mov	reg[09h], 80h		; Port_2_DriveMode_1 register (PRT2DM1)
0255: 70 EF    AND   F,0xEF             
                                        (0160) 	M8C_SetBank0
0257: 62 0B 80 MOV   REG[0xB],0x80      (0161) 	mov	reg[0bh], 80h		; Port_2_DriveMode_2 register (PRT2DM2)
025A: 62 0A 00 MOV   REG[0xA],0x0       (0162) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
025D: 71 10    OR    F,0x10             
                                        (0163) 	M8C_SetBank1
025F: 62 0A 00 MOV   REG[0xA],0x0       (0164) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0262: 62 0B 00 MOV   REG[0xB],0x0       (0165) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0265: 70 EF    AND   F,0xEF             
                                        (0166) 	M8C_SetBank0
0267: 62 09 00 MOV   REG[0x9],0x0       (0167) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
026A: 62 0C 00 MOV   REG[0xC],0x0       (0168) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
026D: 71 10    OR    F,0x10             
                                        (0169) 	M8C_SetBank1
026F: 62 0C 00 MOV   REG[0xC],0x0       (0170) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
0272: 62 0D 00 MOV   REG[0xD],0x0       (0171) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
0275: 70 EF    AND   F,0xEF             
                                        (0172) 	M8C_SetBank0
0277: 62 0F 00 MOV   REG[0xF],0x0       (0173) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
027A: 62 0E 00 MOV   REG[0xE],0x0       (0174) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
027D: 71 10    OR    F,0x10             
                                        (0175) 	M8C_SetBank1
027F: 62 0E 00 MOV   REG[0xE],0x0       (0176) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
0282: 62 0F 00 MOV   REG[0xF],0x0       (0177) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
0285: 70 EF    AND   F,0xEF             
                                        (0178) 	M8C_SetBank0
0287: 62 0D 00 MOV   REG[0xD],0x0       (0179) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
028A: 62 10 00 MOV   REG[0x10],0x0      (0180) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
028D: 71 10    OR    F,0x10             
                                        (0181) 	M8C_SetBank1
028F: 62 10 00 MOV   REG[0x10],0x0      (0182) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
0292: 62 11 00 MOV   REG[0x11],0x0      (0183) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
0295: 70 EF    AND   F,0xEF             
                                        (0184) 	M8C_SetBank0
0297: 62 13 00 MOV   REG[0x13],0x0      (0185) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
029A: 62 12 00 MOV   REG[0x12],0x0      (0186) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
029D: 71 10    OR    F,0x10             
                                        (0187) 	M8C_SetBank1
029F: 62 12 00 MOV   REG[0x12],0x0      (0188) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
02A2: 62 13 00 MOV   REG[0x13],0x0      (0189) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
02A5: 70 EF    AND   F,0xEF             
                                        (0190) 	M8C_SetBank0
02A7: 62 11 00 MOV   REG[0x11],0x0      (0191) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
02AA: 62 14 00 MOV   REG[0x14],0x0      (0192) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
02AD: 71 10    OR    F,0x10             
                                        (0193) 	M8C_SetBank1
02AF: 62 14 00 MOV   REG[0x14],0x0      (0194) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
02B2: 62 15 00 MOV   REG[0x15],0x0      (0195) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
02B5: 70 EF    AND   F,0xEF             
                                        (0196) 	M8C_SetBank0
02B7: 62 17 00 MOV   REG[0x17],0x0      (0197) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
02BA: 62 16 00 MOV   REG[0x16],0x0      (0198) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
02BD: 71 10    OR    F,0x10             
                                        (0199) 	M8C_SetBank1
02BF: 62 16 00 MOV   REG[0x16],0x0      (0200) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
02C2: 62 17 00 MOV   REG[0x17],0x0      (0201) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
02C5: 70 EF    AND   F,0xEF             
                                        (0202) 	M8C_SetBank0
02C7: 62 15 00 MOV   REG[0x15],0x0      (0203) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
02CA: 70 EF    AND   F,0xEF             
                                        (0204) 	M8C_SetBank0
02CC: 7F       RET                      (0205) 	ret
                                        (0206) 
                                        (0207) 
                                        (0208) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_robottiprojekti
                                        (0026) export _LoadConfig_robottiprojekti
                                        (0027) export Port_1_Data_SHADE
                                        (0028) export _Port_1_Data_SHADE
                                        (0029) export Port_2_Data_SHADE
                                        (0030) export _Port_2_Data_SHADE
                                        (0031) export Port_2_DriveMode_0_SHADE
                                        (0032) export _Port_2_DriveMode_0_SHADE
                                        (0033) export Port_2_DriveMode_1_SHADE
                                        (0034) export _Port_2_DriveMode_1_SHADE
                                        (0035) 
                                        (0036) 
                                        (0037) export NO_SHADOW
                                        (0038) export _NO_SHADOW
                                        (0039) 
                                        (0040) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0041) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0042) 
                                        (0043) AREA psoc_config(rom, rel)
                                        (0044) 
                                        (0045) ;---------------------------------------------------------------------------
                                        (0046) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0047) ;                  parameters handled by boot code, like CPU speed). This
                                        (0048) ;                  function can be called from user code, but typically it
                                        (0049) ;                  is only called from boot.
                                        (0050) ;
                                        (0051) ;       INPUTS: None.
                                        (0052) ;      RETURNS: Nothing.
                                        (0053) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0054) ;               In the large memory model currently only the page
                                        (0055) ;               pointer registers listed below are modified.  This does
                                        (0056) ;               not guarantee that in future implementations of this
                                        (0057) ;               function other page pointer registers will not be
                                        (0058) ;               modified.
                                        (0059) ;          
                                        (0060) ;               Page Pointer Registers Modified: 
                                        (0061) ;               CUR_PP
                                        (0062) ;
                                        (0063) _LoadConfigInit:
                                        (0064)  LoadConfigInit:
                                        (0065)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0066)     
02CD: 55 27 00 MOV   [0x27],0x0         (0067) 	mov		[Port_1_Data_SHADE], 0h
02D0: 55 28 00 MOV   [0x28],0x0         (0068) 	mov		[Port_2_Data_SHADE], 0h
02D3: 55 29 7F MOV   [0x29],0x7F        (0069) 	mov		[Port_2_DriveMode_0_SHADE], 7fh
02D6: 55 2A 80 MOV   [0x2A],0x80        (0070) 	mov		[Port_2_DriveMode_1_SHADE], 80h
                                        (0071) 
02D9: 7C 02 E0 LCALL 0x02E0             (0072) 	lcall	LoadConfig_robottiprojekti
02DC: 7C 02 08 LCALL 0x0208             (0073) 	lcall	LoadConfigTBL_robottiprojekti_Ordered
                                        (0074) 
                                        (0075) 
                                        (0076)     RAM_EPILOGUE RAM_USE_CLASS_4
02DF: 7F       RET                      (0077)     ret
                                        (0078) 
                                        (0079) ;---------------------------------------------------------------------------
                                        (0080) ; Load Configuration robottiprojekti
                                        (0081) ;
                                        (0082) ;    Load configuration registers for robottiprojekti.
                                        (0083) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0084) ;
                                        (0085) ;       INPUTS: None.
                                        (0086) ;      RETURNS: Nothing.
                                        (0087) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0088) ;               modified as may the Page Pointer registers!
                                        (0089) ;               In the large memory model currently only the page
                                        (0090) ;               pointer registers listed below are modified.  This does
                                        (0091) ;               not guarantee that in future implementations of this
                                        (0092) ;               function other page pointer registers will not be
                                        (0093) ;               modified.
                                        (0094) ;          
                                        (0095) ;               Page Pointer Registers Modified: 
                                        (0096) ;               CUR_PP
                                        (0097) ;
                                        (0098) _LoadConfig_robottiprojekti:
                                        (0099)  LoadConfig_robottiprojekti:
                                        (0100)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0101) 
02E0: 10       PUSH  X                  (0102) 	push	x
02E1: 70 EF    AND   F,0xEF             
                                        (0103)     M8C_SetBank0                    ; Force bank 0
02E3: 50 00    MOV   A,0x0              (0104)     mov     a, 0                    ; Specify bank 0
02E5: 67       ASR   A                  (0105)     asr     a                       ; Store in carry flag
                                        (0106)                                     ; Load bank 0 table:
02E6: 50 01    MOV   A,0x1              (0107)     mov     A, >LoadConfigTBL_robottiprojekti_Bank0
02E8: 57 5A    MOV   X,0x5A             (0108)     mov     X, <LoadConfigTBL_robottiprojekti_Bank0
02EA: 7C 02 FB LCALL 0x02FB             (0109)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0110) 
02ED: 50 01    MOV   A,0x1              (0111)     mov     a, 1                    ; Specify bank 1
02EF: 67       ASR   A                  (0112)     asr     a                       ; Store in carry flag
                                        (0113)                                     ; Load bank 1 table:
02F0: 50 01    MOV   A,0x1              (0114)     mov     A, >LoadConfigTBL_robottiprojekti_Bank1
02F2: 57 A9    MOV   X,0xA9             (0115)     mov     X, <LoadConfigTBL_robottiprojekti_Bank1
02F4: 7C 02 FB LCALL 0x02FB             (0116)     lcall   LoadConfig              ; Load the bank 1 values
02F7: 70 EF    AND   F,0xEF             
                                        (0117) 
                                        (0118)     M8C_SetBank0                    ; Force return to bank 0
02F9: 20       POP   X                  (0119) 	pop		x
                                        (0120) 
                                        (0121)     RAM_EPILOGUE RAM_USE_CLASS_4
02FA: 7F       RET                      (0122)     ret
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) 
                                        (0127) ;---------------------------------------------------------------------------
                                        (0128) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0129) ;              pairs. Terminate on address=0xFF.
                                        (0130) ;
                                        (0131) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0132) ;           Flag Register Carry bit encodes the Register Bank
                                        (0133) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0134) ;
                                        (0135) ;  RETURNS: nothing.
                                        (0136) ;
                                        (0137) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0138) ;                X-3 Temporary store for register address
                                        (0139) ;                X-2 LSB of config table address
                                        (0140) ;                X-1 MSB of config table address
                                        (0141) ;
                                        (0142) LoadConfig:
                                        (0143)     RAM_PROLOGUE RAM_USE_CLASS_2
02FB: 38 02    ADD   SP,0x2             (0144)     add     SP, 2                   ; Set up local vars
02FD: 10       PUSH  X                  (0145)     push    X                       ; Save config table address on stack
02FE: 08       PUSH  A                  (0146)     push    A
02FF: 4F       MOV   X,SP               (0147)     mov     X, SP
0300: 56 FC 00 MOV   [X-4],0x0          (0148)     mov     [X-4], 0                ; Set default Destination to Bank 0
0303: D0 04    JNC   0x0308             (0149)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0305: 56 FC 01 MOV   [X-4],0x1          (0150)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0151) .BankSelectSaved:
0308: 18       POP   A                  (0152)     pop     A
0309: 20       POP   X                  (0153)     pop     X
030A: 70 EF    AND   F,0xEF             
030C: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0154) 
                                        (0155) LoadConfigLp:
                                        (0156)     M8C_SetBank0                    ; Switch to bank 0
                                        (0157)     M8C_ClearWDT                    ; Clear the watchdog for long inits
030F: 10       PUSH  X                  (0158)     push    X                       ; Preserve the config table address
0310: 08       PUSH  A                  (0159)     push    A
0311: 28       ROMX                     (0160)     romx                            ; Load register address from table
0312: 39 FF    CMP   A,0xFF             (0161)     cmp     A, END_CONFIG_TABLE     ; End of table?
0314: A0 1F    JZ    0x0334             (0162)     jz      EndLoadConfig           ;   Yes, go wrap it up
0316: 4F       MOV   X,SP               (0163)     mov     X, SP                   ;
0317: 48 FC 01 TST   [X-4],0x1          (0164)     tst     [X-4], 1                ; Loading IO Bank 1?
031A: A0 03    JZ    0x031E             (0165)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
031C: 71 10    OR    F,0x10             
                                        (0166)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0167) .IOBankNowSet:
031E: 54 FD    MOV   [X-3],A            (0168)     mov     [X-3], A                ; Stash the register address
0320: 18       POP   A                  (0169)     pop     A                       ; Retrieve the table address
0321: 20       POP   X                  (0170)     pop     X
0322: 75       INC   X                  (0171)     inc     X                       ; Advance to the data byte
0323: 09 00    ADC   A,0x0              (0172)     adc     A, 0
0325: 10       PUSH  X                  (0173)     push    X                       ; Save the config table address again
0326: 08       PUSH  A                  (0174)     push    A
0327: 28       ROMX                     (0175)     romx                            ; load config data from the table
0328: 4F       MOV   X,SP               (0176)     mov     X, SP                   ; retrieve the register address
0329: 59 FD    MOV   X,[X-3]            (0177)     mov     X, [X-3]
032B: 61 00    MOV   REG[X+0x0],A       (0178)     mov     reg[X], A               ; Configure the register
032D: 18       POP   A                  (0179)     pop     A                       ; retrieve the table address
032E: 20       POP   X                  (0180)     pop     X
032F: 75       INC   X                  (0181)     inc     X                       ; advance to next table entry
0330: 09 00    ADC   A,0x0              (0182)     adc     A, 0
0332: 8F D7    JMP   0x030A             (0183)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0184) EndLoadConfig:
0334: 38 FC    ADD   SP,0xFC            (0185)     add     SP, -4
                                        (0186)     RAM_EPILOGUE RAM_USE_CLASS_2
0336: 7F       RET                      (0187)     ret
                                        (0188) 
                                        (0189) AREA InterruptRAM(ram, rel)
                                        (0190) 
                                        (0191) NO_SHADOW:
                                        (0192) _NO_SHADOW:
                                        (0193) ; write only register shadows
                                        (0194) _Port_1_Data_SHADE:
                                        (0195) Port_1_Data_SHADE:	BLK	1
                                        (0196) _Port_2_Data_SHADE:
                                        (0197) Port_2_Data_SHADE:	BLK	1
                                        (0198) _Port_2_DriveMode_0_SHADE:
                                        (0199) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0200) _Port_2_DriveMode_1_SHADE:
                                        (0201) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0202) 
FILE: lib\timer8int.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
0337: 08       PUSH  A                  (0003) ;;  FILENAME: Timer8INT.asm
                                        (0004) ;;   Version: 2.70, Updated on 2013/5/19 at 10:44:42
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
0338: 51 26    MOV   A,[__r0]           (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
033A: 08       PUSH  A                  (0010) ;;*****************************************************************************
033B: 51 25    MOV   A,[__r1]           (0011) ;;*****************************************************************************
033D: 08       PUSH  A                  (0012) 
033E: 51 24    MOV   A,[__r2]           (0013) include "m8c.inc"
0340: 08       PUSH  A                  (0014) include "memory.inc"
0341: 51 23    MOV   A,[__r3]           (0015) include "Timer8.inc"
0343: 08       PUSH  A                  (0016) 
0344: 51 22    MOV   A,[__r4]           (0017) 
0346: 08       PUSH  A                  (0018) ;-----------------------------------------------
0347: 51 21    MOV   A,[__r5]           (0019) ;  Global Symbols
0349: 08       PUSH  A                  (0020) ;-----------------------------------------------
034A: 51 20    MOV   A,[__r6]           (0021) export  _Timer8_ISR
034C: 08       PUSH  A                  (0022) 
034D: 51 1F    MOV   A,[__r7]           (0023) 
034F: 08       PUSH  A                  (0024) AREA InterruptRAM (RAM,REL,CON)
0350: 51 1E    MOV   A,[__r8]           (0025) 
0352: 08       PUSH  A                  (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
0353: 51 1D    MOV   A,[__r9]           (0027) ;---------------------------------------------------
0355: 08       PUSH  A                  (0028) ; Insert your custom declarations below this banner
0356: 51 1C    MOV   A,[__r10]          (0029) ;---------------------------------------------------
0358: 08       PUSH  A                  (0030) 
0359: 51 1B    MOV   A,[__r11]          (0031) ;------------------------
035B: 08       PUSH  A                  (0032) ; Includes
035C: 51 1A    MOV   A,[__rX]           (0033) ;------------------------
035E: 08       PUSH  A                  (0034) 
035F: 51 19    MOV   A,[__rY]           (0035) 	
0361: 08       PUSH  A                  (0036) ;------------------------
0362: 51 18    MOV   A,[__rZ]           (0037) ;  Constant Definitions
0364: 08       PUSH  A                  (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _Timer8_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _Timer8_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    PRESERVE_CPU_CONTEXT
0365: 7C 08 AD LCALL _TimerInterrupt    (0081)    lcall _TimerInterrupt
0368: 18       POP   A                  
0369: 53 18    MOV   [__rZ],A           
036B: 18       POP   A                  
036C: 53 19    MOV   [__rY],A           
036E: 18       POP   A                  
036F: 53 1A    MOV   [__rX],A           
0371: 18       POP   A                  
0372: 53 1B    MOV   [__r11],A          
0374: 18       POP   A                  
0375: 53 1C    MOV   [__r10],A          
0377: 18       POP   A                  
0378: 53 1D    MOV   [__r9],A           
037A: 18       POP   A                  
037B: 53 1E    MOV   [__r8],A           
037D: 18       POP   A                  
037E: 53 1F    MOV   [__r7],A           
0380: 18       POP   A                  
0381: 53 20    MOV   [__r6],A           
0383: 18       POP   A                  
0384: 53 21    MOV   [__r5],A           
0386: 18       POP   A                  
0387: 53 22    MOV   [__r4],A           
0389: 18       POP   A                  
038A: 53 23    MOV   [__r3],A           
038C: 18       POP   A                  
038D: 53 24    MOV   [__r2],A           
038F: 18       POP   A                  
0390: 53 25    MOV   [__r1],A           
0392: 18       POP   A                  
0393: 53 26    MOV   [__r0],A           
0395: 18       POP   A                  
                                        (0082)    RESTORE_CPU_CONTEXT
                                        (0083)    ;ljmp _TimerInterrupt
                                        (0084)    
                                        (0085)    ;---------------------------------------------------
                                        (0086)    ; Insert a lcall to a C function above this banner
                                        (0087)    ; and un-comment the lines between these banners
                                        (0088)    ;---------------------------------------------------
                                        (0089)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0090) 
0396: 7E       RETI                     (0091)    reti
                                        (0092) 
                                        (0093) 
                                        (0094) ; end of file Timer8INT.asm
FILE: lib\timer8.asm                    (0001) ;;*****************************************************************************
0397: 43 E1 04 OR    REG[0xE1],0x4      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer8.asm
                                        (0004) ;;   Version: 2.70, Updated on 2013/5/19 at 10:44:42
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Timer8.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Timer8_EnableInt
                                        (0030) export _Timer8_EnableInt
                                        (0031) export  Timer8_DisableInt
                                        (0032) export _Timer8_DisableInt
                                        (0033) export  Timer8_Start
                                        (0034) export _Timer8_Start
                                        (0035) export  Timer8_Stop
                                        (0036) export _Timer8_Stop
                                        (0037) export  Timer8_WritePeriod
                                        (0038) export _Timer8_WritePeriod
                                        (0039) export  Timer8_WriteCompareValue
                                        (0040) export _Timer8_WriteCompareValue
                                        (0041) export  Timer8_bReadCompareValue
                                        (0042) export _Timer8_bReadCompareValue
                                        (0043) export  Timer8_bReadTimer
                                        (0044) export _Timer8_bReadTimer
                                        (0045) export  Timer8_bReadTimerSaveCV
                                        (0046) export _Timer8_bReadTimerSaveCV
                                        (0047) 
                                        (0048) ; The following functions are deprecated and subject to omission in future releases
                                        (0049) ;
                                        (0050) export  bTimer8_ReadCompareValue  ; deprecated
                                        (0051) export _bTimer8_ReadCompareValue  ; deprecated
                                        (0052) export  bTimer8_ReadTimer         ; deprecated
                                        (0053) export _bTimer8_ReadTimer         ; deprecated
                                        (0054) export  bTimer8_ReadTimerSaveCV   ; deprecated
                                        (0055) export _bTimer8_ReadTimerSaveCV   ; deprecated
                                        (0056) 
                                        (0057) export  bTimer8_ReadCounter       ; obsolete
                                        (0058) export _bTimer8_ReadCounter       ; obsolete
                                        (0059) export  bTimer8_CaptureCounter    ; obsolete
                                        (0060) export _bTimer8_CaptureCounter    ; obsolete
                                        (0061) 
                                        (0062) 
                                        (0063) AREA robottiprojekti_RAM (RAM,REL)
                                        (0064) 
                                        (0065) ;-----------------------------------------------
                                        (0066) ;  Constant Definitions
                                        (0067) ;-----------------------------------------------
                                        (0068) 
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: Timer8_EnableInt
                                        (0080) ;
                                        (0081) ;  DESCRIPTION:
                                        (0082) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
                                        (0083) ;     associated with this User Module. This function has no effect until and
                                        (0084) ;     unless the global interrupts are enabled (for example by using the
                                        (0085) ;     macro M8C_EnableGInt).
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;
                                        (0088) ;  ARGUMENTS:    None.
                                        (0089) ;  RETURNS:      Nothing.
                                        (0090) ;  SIDE EFFECTS: 
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097)  Timer8_EnableInt:
                                        (0098) _Timer8_EnableInt:
                                        (0099)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0100)    Timer8_EnableInt_M
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
039A: 7F       RET                      (0102)    ret
039B: 41 E1 FB AND   REG[0xE1],0xFB     
                                        (0103) 
                                        (0104) .ENDSECTION
                                        (0105) 
                                        (0106) 
                                        (0107) .SECTION
                                        (0108) ;-----------------------------------------------------------------------------
                                        (0109) ;  FUNCTION NAME: Timer8_DisableInt
                                        (0110) ;
                                        (0111) ;  DESCRIPTION:
                                        (0112) ;     Disables this timer's interrupt by clearing the interrupt enable
                                        (0113) ;     mask bit associated with this User Module.
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None
                                        (0117) ;  RETURNS:      Nothing
                                        (0118) ;  SIDE EFFECTS: 
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  Timer8_DisableInt:
                                        (0126) _Timer8_DisableInt:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0128)    Timer8_DisableInt_M
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
039E: 7F       RET                      (0130)    ret
039F: 43 2B 01 OR    REG[0x2B],0x1      
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) 
                                        (0135) .SECTION
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;  FUNCTION NAME: Timer8_Start
                                        (0138) ;
                                        (0139) ;  DESCRIPTION:
                                        (0140) ;     Sets the start bit in the Control register of this user module.  The
                                        (0141) ;     timer will begin counting on the next input clock.
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:    None
                                        (0145) ;  RETURNS:      Nothing
                                        (0146) ;  SIDE EFFECTS: 
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  Timer8_Start:
                                        (0154) _Timer8_Start:
                                        (0155)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0156)    Timer8_Start_M
                                        (0157)    RAM_EPILOGUE RAM_USE_CLASS_1
03A2: 7F       RET                      (0158)    ret
03A3: 41 2B FE AND   REG[0x2B],0xFE     
                                        (0159) 
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: Timer8_Stop
                                        (0166) ;
                                        (0167) ;  DESCRIPTION:
                                        (0168) ;     Disables timer operation by clearing the start bit in the Control
                                        (0169) ;     register.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    None
                                        (0173) ;  RETURNS:      Nothing
                                        (0174) ;  SIDE EFFECTS: 
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;
                                        (0181)  Timer8_Stop:
                                        (0182) _Timer8_Stop:
                                        (0183)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0184)    Timer8_Stop_M
                                        (0185)    RAM_EPILOGUE RAM_USE_CLASS_1
03A6: 7F       RET                      (0186)    ret
                                        (0187) 
                                        (0188) .ENDSECTION
                                        (0189) 
                                        (0190) 
                                        (0191) .SECTION
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  FUNCTION NAME: Timer8_WritePeriod
                                        (0194) ;
                                        (0195) ;  DESCRIPTION:
                                        (0196) ;     Write the 8-bit period value into the Period register (DR1). If the
                                        (0197) ;     Timer user module is stopped, then this value will also be latched
                                        (0198) ;     into the Count register (DR0).
                                        (0199) ;-----------------------------------------------------------------------------
                                        (0200) ;
                                        (0201) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0202) ;  RETURNS:   Nothing
                                        (0203) ;  SIDE EFFECTS: 
                                        (0204) ;    The A and X registers may be modified by this or future implementations
                                        (0205) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0206) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0207) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0208) ;    functions.
                                        (0209) ;
                                        (0210)  Timer8_WritePeriod:
                                        (0211) _Timer8_WritePeriod:
                                        (0212)    RAM_PROLOGUE RAM_USE_CLASS_1
03A7: 60 29    MOV   REG[0x29],A        (0213)    mov   reg[Timer8_PERIOD_REG], A
                                        (0214)    RAM_EPILOGUE RAM_USE_CLASS_1
03A9: 7F       RET                      (0215)    ret
                                        (0216) 
                                        (0217) .ENDSECTION
                                        (0218) 
                                        (0219) 
                                        (0220) .SECTION
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;  FUNCTION NAME: Timer8_WriteCompareValue
                                        (0223) ;
                                        (0224) ;  DESCRIPTION:
                                        (0225) ;     Writes compare value into the Compare register (DR2).
                                        (0226) ;
                                        (0227) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                        (0228) ;           Compare register. (Call Timer8_Stop to disable).
                                        (0229) ;-----------------------------------------------------------------------------
                                        (0230) ;
                                        (0231) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0232) ;  RETURNS:      Nothing
                                        (0233) ;  SIDE EFFECTS: 
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240)  Timer8_WriteCompareValue:
                                        (0241) _Timer8_WriteCompareValue:
                                        (0242)    RAM_PROLOGUE RAM_USE_CLASS_1
03AA: 60 2A    MOV   REG[0x2A],A        (0243)    mov   reg[Timer8_COMPARE_REG], A
                                        (0244)    RAM_EPILOGUE RAM_USE_CLASS_1
03AC: 7F       RET                      (0245)    ret
                                        (0246) 
                                        (0247) .ENDSECTION
                                        (0248) 
                                        (0249) 
                                        (0250) .SECTION
                                        (0251) ;-----------------------------------------------------------------------------
                                        (0252) ;  FUNCTION NAME: Timer8_bReadCompareValue
                                        (0253) ;
                                        (0254) ;  DESCRIPTION:
                                        (0255) ;     Reads the Compare register.
                                        (0256) ;-----------------------------------------------------------------------------
                                        (0257) ;
                                        (0258) ;  ARGUMENTS:    None
                                        (0259) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0260) ;  SIDE EFFECTS: 
                                        (0261) ;    The A and X registers may be modified by this or future implementations
                                        (0262) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0263) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0264) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0265) ;    functions.
                                        (0266) ;
                                        (0267)  Timer8_bReadCompareValue:
                                        (0268) _Timer8_bReadCompareValue:
                                        (0269)  bTimer8_ReadCompareValue:                       ; this name deprecated
                                        (0270) _bTimer8_ReadCompareValue:                       ; this name deprecated
                                        (0271)    RAM_PROLOGUE RAM_USE_CLASS_1
03AD: 5D 2A    MOV   A,REG[0x2A]        (0272)    mov   A, reg[Timer8_COMPARE_REG]
                                        (0273)    RAM_EPILOGUE RAM_USE_CLASS_1
03AF: 7F       RET                      (0274)    ret
                                        (0275) 
                                        (0276) .ENDSECTION
                                        (0277) 
                                        (0278) 
                                        (0279) .SECTION
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;  FUNCTION NAME: Timer8_bReadTimerSaveCV
                                        (0282) ;
                                        (0283) ;  DESCRIPTION:
                                        (0284) ;     Returns the value in the Count register (DR0), preserving the
                                        (0285) ;     value in the compare register (DR2).
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS: None
                                        (0289) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0290) ;  SIDE EFFECTS:
                                        (0291) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                        (0292) ;     2) If enabled, Global interrupts are momentarily disabled.
                                        (0293) ;     3) The user module is stopped momentarily while the compare value is
                                        (0294) ;        restored.  This may cause the Count register to miss one or more
                                        (0295) ;        counts depending on the input clock speed.
                                        (0296) ;     4) The A and X registers may be modified by this or future implementations
                                        (0297) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0298) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0299) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0300) ;        functions.
                                        (0301) ;
                                        (0302) ;  THEORY of OPERATION:
                                        (0303) ;     1) Read and save the Compare register.
                                        (0304) ;     2) Read the Count register, causing its data to be latched into
                                        (0305) ;        the Compare register.
                                        (0306) ;     3) Read and save the Counter value, now in the Compare register,
                                        (0307) ;        to the buffer.
                                        (0308) ;     4) Disable global interrupts
                                        (0309) ;     5) Halt the timer
                                        (0310) ;     6) Restore the Compare register values
                                        (0311) ;     7) Start the Timer again
                                        (0312) ;     8) Restore global interrupt state
                                        (0313) ;
                                        (0314)  Timer8_bReadTimerSaveCV:
                                        (0315) _Timer8_bReadTimerSaveCV:
                                        (0316)  bTimer8_ReadTimerSaveCV:                        ; this name deprecated
                                        (0317) _bTimer8_ReadTimerSaveCV:                        ; this name deprecated
                                        (0318)  bTimer8_ReadCounter:                            ; this name deprecated
                                        (0319) _bTimer8_ReadCounter:                            ; this name deprecated
                                        (0320) 
                                        (0321) CpuFlags:      equ   0
                                        (0322) bCount:        equ   1
                                        (0323) 
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_2
03B0: 4F       MOV   X,SP               (0325)    mov   X, SP                                   ; X <- stack frame pointer
03B1: 38 02    ADD   SP,0x2             (0326)    add   SP, 2                                   ; Reserve space for flags, count
03B3: 5D 2B    MOV   A,REG[0x2B]        (0327)    mov   A, reg[Timer8_CONTROL_REG]              ; save the Control register
03B5: 08       PUSH  A                  (0328)    push  A
03B6: 5D 2A    MOV   A,REG[0x2A]        (0329)    mov   A, reg[Timer8_COMPARE_REG]              ; save the Compare register
03B8: 08       PUSH  A                  (0330)    push  A
03B9: 5D 28    MOV   A,REG[0x28]        (0331)    mov   A, reg[Timer8_COUNTER_REG]              ; synchronous copy DR2 <- DR0
                                        (0332)                                                  ; This may cause an interrupt!
03BB: 5D 2A    MOV   A,REG[0x2A]        (0333)    mov   A, reg[Timer8_COMPARE_REG]              ; Now grab DR2 (DR0) and save
03BD: 54 01    MOV   [X+1],A            (0334)    mov   [X+bCount], A
03BF: 50 00    MOV   A,0x0              (0335)    mov   A, 0                                    ; Guess the global interrupt state
03C1: 49 F7 01 TST   REG[0xF7],0x1      (0336)    tst   reg[CPU_F], FLAG_GLOBAL_IE              ; Currently Disabled?
03C4: A0 03    JZ    0x03C8             (0337)    jz    .SetupStatusFlag                        ;   Yes, guess was correct
03C6: 50 01    MOV   A,0x1              (0338)    mov   A, FLAG_GLOBAL_IE                       ;    No, modify our guess
                                        (0339) .SetupStatusFlag:                                ; and ...
03C8: 54 00    MOV   [X+0],A            (0340)    mov   [X+CpuFlags], A                         ;   StackFrame[0] <- Flag Reg image
03CA: 70 FE    AND   F,0xFE             
03CC: 41 2B FE AND   REG[0x2B],0xFE     
                                        (0341)    M8C_DisableGInt                               ; Disable interrupts globally
                                        (0342)    Timer8_Stop_M                                 ; Stop the timer
03CF: 18       POP   A                  (0343)    pop   A                                       ; Restore the Compare register
03D0: 60 2A    MOV   REG[0x2A],A        (0344)    mov   reg[Timer8_COMPARE_REG], A
03D2: 18       POP   A                  (0345)    pop   A                                       ; restore start state of the timer
03D3: 60 2B    MOV   REG[0x2B],A        (0346)    mov   reg[Timer8_CONTROL_REG], A
03D5: 18       POP   A                  (0347)    pop   A                                       ; Return result stored in stack frame
                                        (0348)    RAM_EPILOGUE RAM_USE_CLASS_2
03D6: 7E       RETI                     (0349)    reti                                          ; Flag Reg <- StackFrame[0]
                                        (0350) 
                                        (0351) .ENDSECTION
                                        (0352) 
                                        (0353) 
                                        (0354) .SECTION
                                        (0355) ;-----------------------------------------------------------------------------
                                        (0356) ;  FUNCTION NAME: Timer8_bReadTimer
                                        (0357) ;
                                        (0358) ;  DESCRIPTION:
                                        (0359) ;     Performs a software capture of the Count register.  A synchronous
                                        (0360) ;     read of the Count register is performed.  The timer is NOT stopped.
                                        (0361) ;
                                        (0362) ;     WARNING - this will cause loss of data in the Compare register.
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;
                                        (0365) ;  ARGUMENTS:    None
                                        (0366) ;  RETURNS:      fastcall16 BYTE bCount, (value of DR0 in the A register)
                                        (0367) ;  SIDE EFFECTS:
                                        (0368) ;    May cause an interrupt.
                                        (0369) ;
                                        (0370) ;    The A and X registers may be modified by this or future implementations
                                        (0371) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0372) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0373) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0374) ;    functions.
                                        (0375) ;
                                        (0376) ;  THEORY of OPERATION:
                                        (0377) ;     1) Read the Count register - this causes the count value to be
                                        (0378) ;        latched into the Compare register.
                                        (0379) ;     2) Read and return the Count register values from the Compare
                                        (0380) ;        registers into the return buffer.
                                        (0381) ;
                                        (0382)  Timer8_bReadTimer:
                                        (0383) _Timer8_bReadTimer:
                                        (0384)  bTimer8_ReadTimer:                              ; this name deprecated
                                        (0385) _bTimer8_ReadTimer:                              ; this name deprecated
                                        (0386)  bTimer8_CaptureCounter:                         ; this name deprecated
                                        (0387) _bTimer8_CaptureCounter:                         ; this name deprecated
                                        (0388) 
                                        (0389)    RAM_PROLOGUE RAM_USE_CLASS_1
03D7: 5D 28    MOV   A,REG[0x28]        (0390)    mov   A, reg[Timer8_COUNTER_REG]              ; synchronous copy DR2 <- DR0
                                        (0391)                                                  ; This may cause an interrupt!
03D9: 5D 2A    MOV   A,REG[0x2A]        (0392)    mov   A, reg[Timer8_COMPARE_REG]              ; Return DR2 (actually DR0)
                                        (0393)    RAM_EPILOGUE RAM_USE_CLASS_1
03DB: 7F       RET                      (0394)    ret
                                        (0395) 
                                        (0396) .ENDSECTION
                                        (0397) 
                                        (0398) ; End of File Timer8.asm
FILE: lib\pwm8_vasenint.asm             (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_VASENINT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8_VASEN.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8_VASEN_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8_VASEN_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8_VASEN_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
03DC: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM8_VASENINT.asm
FILE: lib\pwm8_vasen.asm                (0001) ;;*****************************************************************************
03DD: 43 E1 01 OR    REG[0xE1],0x1      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_VASEN.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8_VASEN.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8_VASEN_EnableInt
                                        (0030) export _PWM8_VASEN_EnableInt
                                        (0031) export  PWM8_VASEN_DisableInt
                                        (0032) export _PWM8_VASEN_DisableInt
                                        (0033) export  PWM8_VASEN_Start
                                        (0034) export _PWM8_VASEN_Start
                                        (0035) export  PWM8_VASEN_Stop
                                        (0036) export _PWM8_VASEN_Stop
                                        (0037) export  PWM8_VASEN_WritePeriod
                                        (0038) export _PWM8_VASEN_WritePeriod
                                        (0039) export  PWM8_VASEN_WritePulseWidth
                                        (0040) export _PWM8_VASEN_WritePulseWidth
                                        (0041) export  PWM8_VASEN_bReadPulseWidth
                                        (0042) export _PWM8_VASEN_bReadPulseWidth
                                        (0043) export  PWM8_VASEN_bReadCounter
                                        (0044) export _PWM8_VASEN_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8_VASEN_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8_VASEN_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8_VASEN_ReadCounter       ; deprecated
                                        (0051) export _bPWM8_VASEN_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA robottiprojekti_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8_VASEN_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8_VASEN_EnableInt:
                                        (0091) _PWM8_VASEN_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8_VASEN_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
03E0: 7F       RET                      (0095)    ret
03E1: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8_VASEN_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8_VASEN_DisableInt:
                                        (0119) _PWM8_VASEN_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8_VASEN_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
03E4: 7F       RET                      (0123)    ret
03E5: 43 23 01 OR    REG[0x23],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8_VASEN_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8_VASEN_Start:
                                        (0148) _PWM8_VASEN_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8_VASEN_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
03E8: 7F       RET                      (0152)    ret
03E9: 41 23 FE AND   REG[0x23],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8_VASEN_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8_VASEN_Stop:
                                        (0176) _PWM8_VASEN_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8_VASEN_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
03EC: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8_VASEN_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8_VASEN_WritePeriod:
                                        (0206) _PWM8_VASEN_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
03ED: 60 21    MOV   REG[0x21],A        (0208)    mov   reg[PWM8_VASEN_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
03EF: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8_VASEN_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8_VASEN_WritePulseWidth:
                                        (0233) _PWM8_VASEN_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
03F0: 60 22    MOV   REG[0x22],A        (0235)    mov   reg[PWM8_VASEN_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
03F2: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8_VASEN_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8_VASEN_bReadPulseWidth:
                                        (0260) _PWM8_VASEN_bReadPulseWidth:
                                        (0261)  bPWM8_VASEN_ReadPulseWidth:                     ; this name deprecated
                                        (0262) _bPWM8_VASEN_ReadPulseWidth:                     ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
03F3: 5D 22    MOV   A,REG[0x22]        (0264)    mov   A, reg[PWM8_VASEN_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
03F5: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8_VASEN_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8_VASEN_bReadCounter:
                                        (0293) _PWM8_VASEN_bReadCounter:
                                        (0294)  bPWM8_VASEN_ReadCounter:                        ; this name deprecated
                                        (0295) _bPWM8_VASEN_ReadCounter:                        ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
03F6: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
03F7: 5D 22    MOV   A,REG[0x22]        (0304)    mov   A, reg[PWM8_VASEN_COMPARE_REG]          ; Save the Compare register on the stack
03F9: 08       PUSH  A                  (0305)    push  A                                       ;
03FA: 41 23 FE AND   REG[0x23],0xFE     
03FD: 71 10    OR    F,0x10             
                                        (0306)    PWM8_VASEN_Stop_M                             ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
03FF: 5D 21    MOV   A,REG[0x21]        (0308)    mov   A, reg[PWM8_VASEN_INPUT_REG]            ; save the clock input setting
0401: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
0402: 62 21 00 MOV   REG[0x21],0x0      (0311)    mov   reg[PWM8_VASEN_INPUT_REG], INPUT_REG_NULL
0405: 70 EF    AND   F,0xEF             
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
0407: 5D 20    MOV   A,REG[0x20]        (0314)    mov   A, reg[PWM8_VASEN_COUNTER_REG]          ; DR2 <- DR0
0409: 5D 22    MOV   A,REG[0x22]        (0315)    mov   A, reg[PWM8_VASEN_COMPARE_REG]          ; Stash the Count on the stack
040B: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
040C: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
040E: 60 22    MOV   REG[0x22],A        (0318)    mov   reg[PWM8_VASEN_COMPARE_REG], A
0410: 71 10    OR    F,0x10             
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
0412: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
0414: 60 21    MOV   REG[0x21],A        (0321)    mov   reg[PWM8_VASEN_INPUT_REG], A            ;
0416: 70 EF    AND   F,0xEF             
0418: 43 23 01 OR    REG[0x23],0x1      
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8_VASEN_Start_M                            ;   then re-enable the PWM.
041B: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
041C: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
041E: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8_VASEN.asm
FILE: lib\pwm8_servoint.asm             (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_SERVOINT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8_SERVO.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8_SERVO_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8_SERVO_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8_SERVO_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
041F: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM8_SERVOINT.asm
FILE: lib\pwm8_servo.asm                (0001) ;;*****************************************************************************
0420: 43 E1 10 OR    REG[0xE1],0x10     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_SERVO.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8_SERVO.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8_SERVO_EnableInt
                                        (0030) export _PWM8_SERVO_EnableInt
                                        (0031) export  PWM8_SERVO_DisableInt
                                        (0032) export _PWM8_SERVO_DisableInt
                                        (0033) export  PWM8_SERVO_Start
                                        (0034) export _PWM8_SERVO_Start
                                        (0035) export  PWM8_SERVO_Stop
                                        (0036) export _PWM8_SERVO_Stop
                                        (0037) export  PWM8_SERVO_WritePeriod
                                        (0038) export _PWM8_SERVO_WritePeriod
                                        (0039) export  PWM8_SERVO_WritePulseWidth
                                        (0040) export _PWM8_SERVO_WritePulseWidth
                                        (0041) export  PWM8_SERVO_bReadPulseWidth
                                        (0042) export _PWM8_SERVO_bReadPulseWidth
                                        (0043) export  PWM8_SERVO_bReadCounter
                                        (0044) export _PWM8_SERVO_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8_SERVO_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8_SERVO_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8_SERVO_ReadCounter       ; deprecated
                                        (0051) export _bPWM8_SERVO_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA robottiprojekti_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8_SERVO_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8_SERVO_EnableInt:
                                        (0091) _PWM8_SERVO_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8_SERVO_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
0423: 7F       RET                      (0095)    ret
0424: 41 E1 EF AND   REG[0xE1],0xEF     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8_SERVO_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8_SERVO_DisableInt:
                                        (0119) _PWM8_SERVO_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8_SERVO_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0427: 7F       RET                      (0123)    ret
0428: 43 33 01 OR    REG[0x33],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8_SERVO_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8_SERVO_Start:
                                        (0148) _PWM8_SERVO_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8_SERVO_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
042B: 7F       RET                      (0152)    ret
042C: 41 33 FE AND   REG[0x33],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8_SERVO_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8_SERVO_Stop:
                                        (0176) _PWM8_SERVO_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8_SERVO_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
042F: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8_SERVO_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8_SERVO_WritePeriod:
                                        (0206) _PWM8_SERVO_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
0430: 60 31    MOV   REG[0x31],A        (0208)    mov   reg[PWM8_SERVO_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
0432: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8_SERVO_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8_SERVO_WritePulseWidth:
                                        (0233) _PWM8_SERVO_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
0433: 60 32    MOV   REG[0x32],A        (0235)    mov   reg[PWM8_SERVO_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
0435: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8_SERVO_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8_SERVO_bReadPulseWidth:
                                        (0260) _PWM8_SERVO_bReadPulseWidth:
                                        (0261)  bPWM8_SERVO_ReadPulseWidth:                     ; this name deprecated
                                        (0262) _bPWM8_SERVO_ReadPulseWidth:                     ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
0436: 5D 32    MOV   A,REG[0x32]        (0264)    mov   A, reg[PWM8_SERVO_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
0438: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8_SERVO_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8_SERVO_bReadCounter:
                                        (0293) _PWM8_SERVO_bReadCounter:
                                        (0294)  bPWM8_SERVO_ReadCounter:                        ; this name deprecated
                                        (0295) _bPWM8_SERVO_ReadCounter:                        ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
0439: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
043A: 5D 32    MOV   A,REG[0x32]        (0304)    mov   A, reg[PWM8_SERVO_COMPARE_REG]          ; Save the Compare register on the stack
043C: 08       PUSH  A                  (0305)    push  A                                       ;
043D: 41 33 FE AND   REG[0x33],0xFE     
0440: 71 10    OR    F,0x10             
                                        (0306)    PWM8_SERVO_Stop_M                             ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
0442: 5D 31    MOV   A,REG[0x31]        (0308)    mov   A, reg[PWM8_SERVO_INPUT_REG]            ; save the clock input setting
0444: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
0445: 62 31 00 MOV   REG[0x31],0x0      (0311)    mov   reg[PWM8_SERVO_INPUT_REG], INPUT_REG_NULL
0448: 70 EF    AND   F,0xEF             
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
044A: 5D 30    MOV   A,REG[0x30]        (0314)    mov   A, reg[PWM8_SERVO_COUNTER_REG]          ; DR2 <- DR0
044C: 5D 32    MOV   A,REG[0x32]        (0315)    mov   A, reg[PWM8_SERVO_COMPARE_REG]          ; Stash the Count on the stack
044E: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
044F: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
0451: 60 32    MOV   REG[0x32],A        (0318)    mov   reg[PWM8_SERVO_COMPARE_REG], A
0453: 71 10    OR    F,0x10             
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
0455: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
0457: 60 31    MOV   REG[0x31],A        (0321)    mov   reg[PWM8_SERVO_INPUT_REG], A            ;
0459: 70 EF    AND   F,0xEF             
045B: 43 33 01 OR    REG[0x33],0x1      
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8_SERVO_Start_M                            ;   then re-enable the PWM.
045E: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
045F: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
0461: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8_SERVO.asm
FILE: lib\pwm8_oikeaint.asm             (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_OIKEAINT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8_OIKEA.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8_OIKEA_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8_OIKEA_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8_OIKEA_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0462: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM8_OIKEAINT.asm
FILE: lib\pwm8_oikea.asm                (0001) ;;*****************************************************************************
0463: 43 E1 02 OR    REG[0xE1],0x2      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_OIKEA.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8_OIKEA.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8_OIKEA_EnableInt
                                        (0030) export _PWM8_OIKEA_EnableInt
                                        (0031) export  PWM8_OIKEA_DisableInt
                                        (0032) export _PWM8_OIKEA_DisableInt
                                        (0033) export  PWM8_OIKEA_Start
                                        (0034) export _PWM8_OIKEA_Start
                                        (0035) export  PWM8_OIKEA_Stop
                                        (0036) export _PWM8_OIKEA_Stop
                                        (0037) export  PWM8_OIKEA_WritePeriod
                                        (0038) export _PWM8_OIKEA_WritePeriod
                                        (0039) export  PWM8_OIKEA_WritePulseWidth
                                        (0040) export _PWM8_OIKEA_WritePulseWidth
                                        (0041) export  PWM8_OIKEA_bReadPulseWidth
                                        (0042) export _PWM8_OIKEA_bReadPulseWidth
                                        (0043) export  PWM8_OIKEA_bReadCounter
                                        (0044) export _PWM8_OIKEA_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8_OIKEA_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8_OIKEA_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8_OIKEA_ReadCounter       ; deprecated
                                        (0051) export _bPWM8_OIKEA_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA robottiprojekti_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8_OIKEA_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8_OIKEA_EnableInt:
                                        (0091) _PWM8_OIKEA_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8_OIKEA_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
0466: 7F       RET                      (0095)    ret
0467: 41 E1 FD AND   REG[0xE1],0xFD     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8_OIKEA_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8_OIKEA_DisableInt:
                                        (0119) _PWM8_OIKEA_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8_OIKEA_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
046A: 7F       RET                      (0123)    ret
046B: 43 27 01 OR    REG[0x27],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8_OIKEA_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8_OIKEA_Start:
                                        (0148) _PWM8_OIKEA_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8_OIKEA_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
046E: 7F       RET                      (0152)    ret
046F: 41 27 FE AND   REG[0x27],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8_OIKEA_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8_OIKEA_Stop:
                                        (0176) _PWM8_OIKEA_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8_OIKEA_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
0472: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8_OIKEA_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8_OIKEA_WritePeriod:
                                        (0206) _PWM8_OIKEA_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
0473: 60 25    MOV   REG[0x25],A        (0208)    mov   reg[PWM8_OIKEA_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
0475: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8_OIKEA_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8_OIKEA_WritePulseWidth:
                                        (0233) _PWM8_OIKEA_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
0476: 60 26    MOV   REG[0x26],A        (0235)    mov   reg[PWM8_OIKEA_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
0478: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8_OIKEA_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8_OIKEA_bReadPulseWidth:
                                        (0260) _PWM8_OIKEA_bReadPulseWidth:
                                        (0261)  bPWM8_OIKEA_ReadPulseWidth:                     ; this name deprecated
                                        (0262) _bPWM8_OIKEA_ReadPulseWidth:                     ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
0479: 5D 26    MOV   A,REG[0x26]        (0264)    mov   A, reg[PWM8_OIKEA_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
047B: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8_OIKEA_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8_OIKEA_bReadCounter:
                                        (0293) _PWM8_OIKEA_bReadCounter:
                                        (0294)  bPWM8_OIKEA_ReadCounter:                        ; this name deprecated
                                        (0295) _bPWM8_OIKEA_ReadCounter:                        ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
047C: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
047D: 5D 26    MOV   A,REG[0x26]        (0304)    mov   A, reg[PWM8_OIKEA_COMPARE_REG]          ; Save the Compare register on the stack
047F: 08       PUSH  A                  (0305)    push  A                                       ;
0480: 41 27 FE AND   REG[0x27],0xFE     
0483: 71 10    OR    F,0x10             
                                        (0306)    PWM8_OIKEA_Stop_M                             ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
0485: 5D 25    MOV   A,REG[0x25]        (0308)    mov   A, reg[PWM8_OIKEA_INPUT_REG]            ; save the clock input setting
0487: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
0488: 62 25 00 MOV   REG[0x25],0x0      (0311)    mov   reg[PWM8_OIKEA_INPUT_REG], INPUT_REG_NULL
048B: 70 EF    AND   F,0xEF             
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
048D: 5D 24    MOV   A,REG[0x24]        (0314)    mov   A, reg[PWM8_OIKEA_COUNTER_REG]          ; DR2 <- DR0
048F: 5D 26    MOV   A,REG[0x26]        (0315)    mov   A, reg[PWM8_OIKEA_COMPARE_REG]          ; Stash the Count on the stack
0491: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
0492: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
0494: 60 26    MOV   REG[0x26],A        (0318)    mov   reg[PWM8_OIKEA_COMPARE_REG], A
0496: 71 10    OR    F,0x10             
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
0498: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
049A: 60 25    MOV   REG[0x25],A        (0321)    mov   reg[PWM8_OIKEA_INPUT_REG], A            ;
049C: 70 EF    AND   F,0xEF             
049E: 43 27 01 OR    REG[0x27],0x1      
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8_OIKEA_Start_M                            ;   then re-enable the PWM.
04A1: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
04A2: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
04A4: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8_OIKEA.asm
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2013/5/19 at 10:43:48
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
04A5: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
04A6: 10       PUSH  X                  (0209)     push  X
04A7: 28       ROMX                     (0210)     romx                               ; Get character from ROM
04A8: B0 04    JNZ   0x04AD             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
04AA: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
04AB: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
04AC: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
04AD: 90 3C    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data(0218)     call  LCD_WriteData                ; Write data to LCD
04AF: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
04B0: 18       POP   A                  (0220)     pop   A
04B1: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
04B2: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
04B4: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
04B5: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
04C7: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
04C8: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
04C9: 67       ASR   A                  (0262)     asr   A
04CA: 67       ASR   A                  (0263)     asr   A
04CB: 67       ASR   A                  (0264)     asr   A
04CC: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
04CE: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
04D0: 90 19    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data(0267)     call  LCD_WriteData                ; Write data to screen
04D2: 18       POP   A                  (0268)     pop   A                            ; Restore value
04D3: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
04D5: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
04D7: 90 12    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
04D9: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
04DA: 4B       SWAP  A,X                (0305)     swap  A,X
04DB: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
04DD: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
04DE: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
04E0: 7F       RET                      (0310)     ret
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
04E1: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
04E3: A0 06    JZ    0x04EA             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
04E5: 90 04    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data(0349)     call  LCD_WriteData                ; Write data to screen
04E7: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
04E8: 8F F8    JMP   _LCD_PrString      (0351)     jmp   .Loop_PrString               ; Go get next character
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
04EA: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
04EB: 90 5F    CALL  0x054C             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
04ED: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
04EE: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
04EF: 67       ASR   A                  (0390)     asr   A
04F0: 67       ASR   A                  (0391)     asr   A
04F1: 67       ASR   A                  (0392)     asr   A
04F2: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
04F4: 90 38    CALL  0x052E             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
04F6: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
04F7: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
04F9: 40       NOP                      (0397)     nop
04FA: 40       NOP                      (0398)     nop
04FB: 40       NOP                      (0399)     nop
04FC: 90 30    CALL  0x052E             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
04FE: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
04FF: 90 4B    CALL  0x054C             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
0501: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
0502: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
0503: 67       ASR   A                  (0436)     asr   A
0504: 67       ASR   A                  (0437)     asr   A
0505: 67       ASR   A                  (0438)     asr   A
0506: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
0508: 90 09    CALL  0x0513             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
050A: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
050B: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
050D: 40       NOP                      (0443)     nop
050E: 40       NOP                      (0444)     nop
050F: 40       NOP                      (0445)     nop
0510: 90 01    CALL  0x0513             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
0512: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
0513: 08       PUSH  A                  (0477)     push  A
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
0514: 26 28 80 AND   [0x28],0x80        (0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0517: 51 28    MOV   A,[0x28]           (0480)     mov   A,[Port_2_Data_SHADE]
0519: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
051B: 18       POP   A                  (0483)     pop   A
051C: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
051E: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
0520: 2A 28    OR    A,[0x28]           (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
0522: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
0524: 53 28    MOV   [0x28],A           (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0526: 40       NOP                      (0489)     nop
0527: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
0529: 53 28    MOV   [0x28],A           (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
052B: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
052D: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
052E: 08       PUSH  A                  (0523)     push  A
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
052F: 26 28 80 AND   [0x28],0x80        (0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0532: 2E 28 20 OR    [0x28],0x20        (0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
0535: 51 28    MOV   A,[0x28]           (0527)     mov   A,[Port_2_Data_SHADE]
0537: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
0539: 18       POP   A                  (0530)     pop   A
053A: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
053C: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
053E: 2A 28    OR    A,[0x28]           (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
0540: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
0542: 53 28    MOV   [0x28],A           (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
0544: 40       NOP                      (0536)     NOP
0545: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
0547: 53 28    MOV   [0x28],A           (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
0549: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
054B: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
054C: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
054D: 26 28 80 AND   [0x28],0x80        (0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
0550: 51 28    MOV   A,[0x28]           (0574)     mov   A,[Port_2_Data_SHADE]
0552: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
0554: 26 29 F0 AND   [0x29],0xF0        (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
0557: 51 29    MOV   A,[0x29]           (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
0559: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
055B: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
055D: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
055F: 2E 28 40 OR    [0x28],0x40        (0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
0562: 51 28    MOV   A,[0x28]           (0584)     mov   A,[Port_2_Data_SHADE]
0564: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
0566: 40       NOP                      (0586)     NOP
                                        (0587) 
0567: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
0568: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
056A: 2E 28 50 OR    [0x28],0x50        (0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
056D: 51 28    MOV   A,[0x28]           (0593)     mov   A,[Port_2_Data_SHADE]
056F: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
0571: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
0572: 40       NOP                      (0597)     nop
0573: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
0575: 08       PUSH  A                  (0610)     push  A
0576: 26 28 C0 AND   [0x28],0xC0        (0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
0579: 51 28    MOV   A,[0x28]           (0612)     mov   A,[Port_2_Data_SHADE]
057B: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
057D: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
057E: 40       NOP                      (0616)     nop                                    ; fastest PSoC
057F: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
0580: 2E 28 50 OR    [0x28],0x50        (0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
0583: 51 28    MOV   A,[0x28]           (0620)     mov   A,[Port_2_Data_SHADE]
0585: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
0587: 40       NOP                      (0623)     nop
0588: 40       NOP                      (0624)     nop
                                        (0625) 
0589: 26 28 C0 AND   [0x28],0xC0        (0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
058C: 51 28    MOV   A,[0x28]           (0627)     mov   A,[Port_2_Data_SHADE]
058E: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
0590: 18       POP   A                  (0630)     pop   A
0591: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
0593: A0 04    JZ    0x0598             (0633)     jz    .UNLOCK
0595: 79       DEC   X                  (0634)     dec   X
0596: BF D3    JNZ   0x056A             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
0598: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
0599: 2E 29 7F OR    [0x29],0x7F        (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
059C: 51 29    MOV   A,[0x29]           (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
059E: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
05A0: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
05A2: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
05A4: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
05A5: 7F       RET                      (0646)     ret
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
05A6: 26 29 80 AND   [0x29],0x80        (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
05A9: 2E 29 7F OR    [0x29],0x7F        (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
05AC: 26 2A 80 AND   [0x2A],0x80        (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
05AF: 51 29    MOV   A,[0x29]           (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
05B1: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
05B3: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
05B5: 51 2A    MOV   A,[0x2A]           (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
05B7: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
05B9: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
05BB: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
05BD: 90 63    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
05BF: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
05C1: 90 5F    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
05C3: 50 03    MOV   A,0x3              (0701)     mov   A,03h
05C5: 9F 4C    CALL  0x0513             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
05C7: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
05C9: 90 57    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
05CB: 50 03    MOV   A,0x3              (0707)     mov   A,03h
05CD: 9F 44    CALL  0x0513             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
05CF: 90 5F    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
05D1: 90 5D    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
05D3: 90 5B    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
05D5: 50 03    MOV   A,0x3              (0714)     mov   A,03h
05D7: 9F 3A    CALL  0x0513             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
05D9: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
05DB: 90 45    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
05DD: 50 02    MOV   A,0x2              (0720)     mov   A,02h
05DF: 9F 32    CALL  0x0513             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
05E1: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
05E3: 90 3D    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
05E5: 50 08    MOV   A,0x8              (0726)     mov   A,08h
05E7: 9F 16    CALL  _LCD_Control       (0727)     call  LCD_Control
05E9: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
05EB: 90 35    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
05ED: 50 01    MOV   A,0x1              (0731)     mov   A,01h
05EF: 9F 0E    CALL  _LCD_Control       (0732)     call  LCD_Control
05F1: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
05F3: 90 2D    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
05F5: 50 06    MOV   A,0x6              (0736)     mov   A,06h
05F7: 9F 06    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
05F9: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
05FB: 9F 02    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
05FD: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
05FF: 9E FE    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
0601: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
0603: 9E FA    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
0605: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
0607: 9E F6    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
0609: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
060B: 9E F2    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
060D: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
060F: 90 11    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
0611: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
0616: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
0618: 10       PUSH  X                  (0791)     push  X                            ; Store COL
0619: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
061B: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
061C: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
061E: 20       POP   X                  (0795)     pop   X
                                        (0796) 
061F: 9E DE    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
0621: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
0622: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
0624: 78       DEC   A                  (0828)     dec   A
0625: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
0627: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
0630: 08       PUSH  A                  (0871)     push  A
0631: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
0633: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
0635: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
0637: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
0639: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
063B: D0 06    JNC   0x0642             (0877)     jnc   .Delay50u_End
063D: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
063F: 78       DEC   A                  (0880)     dec   A                              ; [4]
0640: BF FE    JNZ   0x063F             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
0642: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
0643: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
0644: 10       PUSH  X                  (0943)     push  X
0645: 59 00    MOV   X,[X+0]            (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
0647: 9F CD    CALL  _LCD_Position      (0945)     call  LCD_Position                 ; Set cursor position
0649: 20       POP   X                  (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
064A: 3D FE 00 CMP   [X-2],0x0          (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
064D: B0 05    JNZ   0x0653             (0950)     jnz   .LCD_CHECK1X
064F: 50 00    MOV   A,0x0              (0951)     mov   A,00h                         ; Load empty character
0651: 80 11    JMP   0x0663             (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
0653: 3D FE 06 CMP   [X-2],0x6          (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
0656: D0 07    JNC   0x065E             (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
0658: 52 FE    MOV   A,[X-2]            (0957)     mov   A,[X+BG_LENGTHX]
065A: 15 FE    SUB   [X-2],A            (0958)     sub   [X+BG_LENGTHX],A
065C: 80 06    JMP   0x0663             (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
065E: 50 06    MOV   A,0x6              (0962)     mov   A, 06h
0660: 17 FE 05 SUB   [X-2],0x5          (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
0663: 9E 86    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data(0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
0665: 7B FF    DEC   [X-1]              (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
0667: BF E2    JNZ   0x064A             (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
0669: 7F       RET                      (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
066A: 4F       MOV   X,SP               (1015)     mov   X, SP
066B: 10       PUSH  X                  (1016)     push  X
066C: 52 FD    MOV   A,[X-3]            (1017)     mov   A,[X+BG_ROW]                 ; Row in A
066E: 59 FC    MOV   X,[X-4]            (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
0670: 9F A4    CALL  _LCD_Position      (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
0672: 20       POP   X                  (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
0673: 3D FA 00 CMP   [X-6],0x0          (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
0676: B0 05    JNZ   0x067C             (1026)     jnz   .LCD_CHECK1
0678: 50 00    MOV   A,0x0              (1027)     mov   A,00h                        ; Load empty character
067A: 80 11    JMP   0x068C             (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
067C: 3D FA 06 CMP   [X-6],0x6          (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
067F: D0 07    JNC   0x0687             (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
0681: 52 FA    MOV   A,[X-6]            (1033)     mov   A,[X+BG_LENGTH]
0683: 15 FA    SUB   [X-6],A            (1034)     sub   [X+BG_LENGTH],A
0685: 80 06    JMP   0x068C             (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
0687: 50 06    MOV   A,0x6              (1038)     mov   A, 06h
0689: 17 FA 05 SUB   [X-6],0x5          (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
068C: 9E 5D    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data(1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
068E: 7B FB    DEC   [X-5]              (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
0690: BF E2    JNZ   0x0673             (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
0692: 7F       RET                      (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
0693: 21 03    AND   A,0x3              (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
0695: 08       PUSH  A                  (1098)     push  A
0696: FF 7A    INDEX LCD_ROW_OFFSET     (1099)     index LCD_ROW_OFFSET  ; Get row offset
0698: 03 00    ADD   A,[X+0]            (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
069A: 9E 63    CALL  _LCD_Control       (1101)     call  LCD_Control                  ; Position Cursor
069C: 3D FE 00 CMP   [X-2],0x0          (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
069F: B0 05    JNZ   0x06A5             (1103)     jnz   .VBG_NZ_SEGX
06A1: 50 20    MOV   A,0x20             (1104)     mov   A,' '                        ; Load space character
06A3: 80 13    JMP   0x06B7             (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
06A5: 3D FE 09 CMP   [X-2],0x9          (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
06A8: D0 09    JNC   0x06B2             (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
06AA: 52 FE    MOV   A,[X-2]            (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
06AC: 78       DEC   A                  (1111)     dec   A
06AD: 56 FE 00 MOV   [X-2],0x0          (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
06B0: 80 06    JMP   0x06B7             (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
06B2: 17 FE 08 SUB   [X-2],0x8          (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
06B5: 50 07    MOV   A,0x7              (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
06B7: 9E 32    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data(1120)     call  LCD_WriteData                ; Write value
06B9: 18       POP   A                  (1121)     pop   A
06BA: 78       DEC   A                  (1122)     dec   A
06BB: 7B FF    DEC   [X-1]              (1123)     dec   [X+VBG_CHAR_HEIGHTX]
06BD: BF D7    JNZ   0x0695             (1124)     jnz   .VBG_LOOPX
06BF: 7F       RET                      (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
06C0: 4F       MOV   X,SP               (1168)     mov   X, SP
06C1: 52 FD    MOV   A,[X-3]            (1169)     mov   A, [X+VBG_ROW]
06C3: 21 03    AND   A,0x3              (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
06C5: 08       PUSH  A                  (1172)     push  A
06C6: FF 4A    INDEX LCD_ROW_OFFSET     (1173)     index LCD_ROW_OFFSET  ; Get row offset
06C8: 03 FC    ADD   A,[X-4]            (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
06CA: 9E 33    CALL  _LCD_Control       (1175)     call  LCD_Control                  ; Position Cursor
06CC: 3D FA 00 CMP   [X-6],0x0          (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
06CF: B0 05    JNZ   0x06D5             (1177)     jnz   .VBG_NZ_SEG
06D1: 50 20    MOV   A,0x20             (1178)     mov   A,' '                        ; Load space character
06D3: 80 13    JMP   0x06E7             (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
06D5: 3D FA 09 CMP   [X-6],0x9          (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
06D8: D0 09    JNC   0x06E2             (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
06DA: 52 FA    MOV   A,[X-6]            (1184)     mov   A,[X+VBG_SEG_HEIGHT]
06DC: 78       DEC   A                  (1185)     dec   A
06DD: 56 FA 00 MOV   [X-6],0x0          (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
06E0: 80 06    JMP   0x06E7             (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
06E2: 17 FA 08 SUB   [X-6],0x8          (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
06E5: 50 07    MOV   A,0x7              (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
06E7: 9E 02    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data(1194)     call  LCD_WriteData                ; Write value
06E9: 18       POP   A                  (1195)     pop   A
06EA: 78       DEC   A                  (1196)     dec   A
06EB: 7B FB    DEC   [X-5]              (1197)     dec   [X+VBG_CHAR_HEIGHT]
06ED: BF D7    JNZ   0x06C5             (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
06EF: 7F       RET                      (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
06F0: 4F       MOV   X,SP               (1238)     mov   X,SP                         ; Get location of stack
06F1: 08       PUSH  A                  (1239)     push  A                            ; Create 2 locations
06F2: 08       PUSH  A                  (1240)     push  A
                                        (1241) 
06F3: 50 40    MOV   A,0x40             (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
06F5: 9E 08    CALL  _LCD_Control       (1243)     call  LCD_Control                  ; Position the CG pointer
06F7: 56 00 01 MOV   [X+0],0x1          (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
06FA: 56 01 08 MOV   [X+1],0x8          (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
06FD: 52 00    MOV   A,[X+0]            (1249)     mov   A,[X+VBGDATA_CTR]
06FF: 3B 01    CMP   A,[X+1]            (1250)     cmp   A,[X+VBG_BYTES]
0701: D0 05    JNC   0x0707             (1251)     jnc   .VBG_SOLID
0703: 50 00    MOV   A,0x0              (1252)     mov   A,00h                        ; Empty line
0705: 80 03    JMP   0x0709             (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
0707: 50 FF    MOV   A,0xFF             (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
0709: 9D E0    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data(1257)     call  LCD_WriteData                ; character data
070B: 7B 01    DEC   [X+1]              (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
070D: BF EF    JNZ   0x06FD             (1259)     jnz   .VBG_Loop2                    ; End Loop 2
070F: 77 00    INC   [X+0]              (1260)     inc   [X+VBGDATA_CTR]
0711: 3D 00 09 CMP   [X+0],0x9          (1261)     cmp   [X+VBGDATA_CTR],09h
0714: BF E5    JNZ   0x06FA             (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
0716: 18       POP   A                  (1264)     pop  A
0717: 18       POP   A                  (1265)     pop  A
0718: 50 0C    MOV   A,0xC              (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
071A: 9D E3    CALL  _LCD_Control       (1267)     call LCD_Control                   ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
071C: 7F       RET                      (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
072B: 4F       MOV   X,SP               (1319)     mov   X,SP                         ; Get location of stack
072C: 38 03    ADD   SP,0x3             (1320)     add   SP,3
072E: 54 02    MOV   [X+2],A            (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
0730: 50 40    MOV   A,0x40             (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
0732: 9D CB    CALL  _LCD_Control       (1324)     call  LCD_Control                  ; Position the CG pointer
0734: 56 00 00 MOV   [X+0],0x0          (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
0737: 56 01 08 MOV   [X+1],0x8          (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
073A: 52 00    MOV   A,[X+0]            (1330)     mov   A,[X+BGDATA_PTR]
073C: 3D 02 00 CMP   [X+2],0x0          (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
073F: B0 05    JNZ   0x0745             (1332)     jnz   .BG_OTHER
0741: FF DA    INDEX LCD_BG_TYPE1       (1333)     index LCD_BG_TYPE1
0743: 80 03    JMP   0x0747             (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
0745: FF DD    INDEX LCD_BG_TYPE2       (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
0747: 9D A2    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data(1338)     call  LCD_WriteData
0749: 7B 01    DEC   [X+1]              (1339)     dec   [X+BGCHARS]                  ; Character builder counter
074B: BF EE    JNZ   0x073A             (1340)     jnz   .BG_Loop2
074D: 77 00    INC   [X+0]              (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
074F: 3D 00 07 CMP   [X+0],0x7          (1342)     cmp   [X+BGDATA_PTR],07h
0752: BF E4    JNZ   0x0737             (1343)     jnz   .BG_Loop1
                                        (1344) 
0754: 38 FD    ADD   SP,0xFD            (1345)     add   SP,-3
0756: 50 0C    MOV   A,0xC              (1346)     mov   A,LCD_DISP_ON
0758: 9D A5    CALL  _LCD_Control       (1347)     call  LCD_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
075A: 7F       RET                      (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: lib\counter16_1int.asm            (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
075B: 08       PUSH  A                  (0003) ;;  FILENAME: Counter16_1INT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2013/5/19 at 10:42:30
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
075C: 51 26    MOV   A,[__r0]           (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
075E: 08       PUSH  A                  (0010) ;;*****************************************************************************
075F: 51 25    MOV   A,[__r1]           (0011) ;;*****************************************************************************
0761: 08       PUSH  A                  (0012) 
0762: 51 24    MOV   A,[__r2]           (0013) include "m8c.inc"
0764: 08       PUSH  A                  (0014) include "memory.inc"
0765: 51 23    MOV   A,[__r3]           (0015) include "Counter16_1.inc"
0767: 08       PUSH  A                  (0016) 
0768: 51 22    MOV   A,[__r4]           (0017) 
076A: 08       PUSH  A                  (0018) ;-----------------------------------------------
076B: 51 21    MOV   A,[__r5]           (0019) ;  Global Symbols
076D: 08       PUSH  A                  (0020) ;-----------------------------------------------
076E: 51 20    MOV   A,[__r6]           (0021) export  _Counter16_1_ISR
0770: 08       PUSH  A                  (0022) 
0771: 51 1F    MOV   A,[__r7]           (0023) 
0773: 08       PUSH  A                  (0024) AREA InterruptRAM (RAM,REL,CON)
0774: 51 1E    MOV   A,[__r8]           (0025) 
0776: 08       PUSH  A                  (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
0777: 51 1D    MOV   A,[__r9]           (0027) ;---------------------------------------------------
0779: 08       PUSH  A                  (0028) ; Insert your custom declarations below this banner
077A: 51 1C    MOV   A,[__r10]          (0029) ;---------------------------------------------------
077C: 08       PUSH  A                  (0030) 
077D: 51 1B    MOV   A,[__r11]          (0031) ;------------------------
077F: 08       PUSH  A                  (0032) ; Includes
0780: 51 1A    MOV   A,[__rX]           (0033) ;------------------------
0782: 08       PUSH  A                  (0034) 
0783: 51 19    MOV   A,[__rY]           (0035) 	
0785: 08       PUSH  A                  (0036) ;------------------------
0786: 51 18    MOV   A,[__rZ]           (0037) ;  Constant Definitions
0788: 08       PUSH  A                  (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _Counter16_1_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _Counter16_1_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    PRESERVE_CPU_CONTEXT
0789: 7C 08 E4 LCALL _CounterISR        (0081)    lcall _CounterISR
078C: 18       POP   A                  
078D: 53 18    MOV   [__rZ],A           
078F: 18       POP   A                  
0790: 53 19    MOV   [__rY],A           
0792: 18       POP   A                  
0793: 53 1A    MOV   [__rX],A           
0795: 18       POP   A                  
0796: 53 1B    MOV   [__r11],A          
0798: 18       POP   A                  
0799: 53 1C    MOV   [__r10],A          
079B: 18       POP   A                  
079C: 53 1D    MOV   [__r9],A           
079E: 18       POP   A                  
079F: 53 1E    MOV   [__r8],A           
07A1: 18       POP   A                  
07A2: 53 1F    MOV   [__r7],A           
07A4: 18       POP   A                  
07A5: 53 20    MOV   [__r6],A           
07A7: 18       POP   A                  
07A8: 53 21    MOV   [__r5],A           
07AA: 18       POP   A                  
07AB: 53 22    MOV   [__r4],A           
07AD: 18       POP   A                  
07AE: 53 23    MOV   [__r3],A           
07B0: 18       POP   A                  
07B1: 53 24    MOV   [__r2],A           
07B3: 18       POP   A                  
07B4: 53 25    MOV   [__r1],A           
07B6: 18       POP   A                  
07B7: 53 26    MOV   [__r0],A           
07B9: 18       POP   A                  
                                        (0082)    RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
07BA: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file Counter16_1INT.asm
FILE: lib\counter16_1.asm               (0001) ;;*****************************************************************************
07BB: 43 E1 40 OR    REG[0xE1],0x40     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Counter16_1.asm
                                        (0004) ;;   Version: 2.5, Updated on 2013/5/19 at 10:42:30
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Counter16_1.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Counter16_1_EnableInt
                                        (0030) export _Counter16_1_EnableInt
                                        (0031) export  Counter16_1_DisableInt
                                        (0032) export _Counter16_1_DisableInt
                                        (0033) export  Counter16_1_Start
                                        (0034) export _Counter16_1_Start
                                        (0035) export  Counter16_1_Stop
                                        (0036) export _Counter16_1_Stop
                                        (0037) export  Counter16_1_WritePeriod
                                        (0038) export _Counter16_1_WritePeriod
                                        (0039) export  Counter16_1_WriteCompareValue
                                        (0040) export _Counter16_1_WriteCompareValue
                                        (0041) export  Counter16_1_wReadCompareValue
                                        (0042) export _Counter16_1_wReadCompareValue
                                        (0043) export  Counter16_1_wReadCounter
                                        (0044) export _Counter16_1_wReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  wCounter16_1_ReadCompareValue  ; deprecated
                                        (0049) export _wCounter16_1_ReadCompareValue  ; deprecated
                                        (0050) export  wCounter16_1_ReadCounter       ; deprecated
                                        (0051) export _wCounter16_1_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) ;-----------------------------------------------
                                        (0054) ;  Constant Definitions
                                        (0055) ;-----------------------------------------------
                                        (0056) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0057) 
                                        (0058) 
                                        (0059) AREA UserModules (ROM, REL)
                                        (0060) 
                                        (0061) .SECTION
                                        (0062) ;-----------------------------------------------------------------------------
                                        (0063) ;  FUNCTION NAME: Counter16_1_EnableInt
                                        (0064) ;
                                        (0065) ;  DESCRIPTION:
                                        (0066) ;     Enables this counter's interrupt by setting the interrupt enable mask bit
                                        (0067) ;     associated with this User Module. This function has no effect until and
                                        (0068) ;     unless the global interrupts are enabled (for example by using the
                                        (0069) ;     macro M8C_EnableGInt).
                                        (0070) ;-----------------------------------------------------------------------------
                                        (0071) ;
                                        (0072) ;  ARGUMENTS:    None.
                                        (0073) ;  RETURNS:      Nothing.
                                        (0074) ;  SIDE EFFECTS: 
                                        (0075) ;    The A and X registers may be modified by this or future implementations
                                        (0076) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0077) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0078) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0079) ;    functions.
                                        (0080) ;
                                        (0081)  Counter16_1_EnableInt:
                                        (0082) _Counter16_1_EnableInt:
                                        (0083)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0084)    Counter16_1_EnableInt_M
                                        (0085)    RAM_EPILOGUE RAM_USE_CLASS_1
07BE: 7F       RET                      (0086)    ret
07BF: 41 E1 BF AND   REG[0xE1],0xBF     
                                        (0087) 
                                        (0088) .ENDSECTION
                                        (0089) 
                                        (0090) .SECTION
                                        (0091) ;-----------------------------------------------------------------------------
                                        (0092) ;  FUNCTION NAME: Counter16_1_DisableInt
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;     Disables this counter's interrupt by clearing the interrupt enable
                                        (0096) ;     mask bit associated with this User Module.
                                        (0097) ;-----------------------------------------------------------------------------
                                        (0098) ;
                                        (0099) ;  ARGUMENTS:    None
                                        (0100) ;  RETURNS:      Nothing
                                        (0101) ;  SIDE EFFECTS: 
                                        (0102) ;    The A and X registers may be modified by this or future implementations
                                        (0103) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0104) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0105) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0106) ;    functions.
                                        (0107) ;
                                        (0108)  Counter16_1_DisableInt:
                                        (0109) _Counter16_1_DisableInt:
                                        (0110)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0111)    Counter16_1_DisableInt_M
                                        (0112)    RAM_EPILOGUE RAM_USE_CLASS_1
07C2: 7F       RET                      (0113)    ret
07C3: 43 37 01 OR    REG[0x37],0x1      
                                        (0114) 
                                        (0115) 
                                        (0116) .ENDSECTION
                                        (0117) 
                                        (0118) .SECTION
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120) ;  FUNCTION NAME: Counter16_1_Start
                                        (0121) ;
                                        (0122) ;  DESCRIPTION:
                                        (0123) ;     Sets the start bit in the Control register of this user module.  The
                                        (0124) ;     counter will begin counting on the next input clock as soon as the
                                        (0125) ;     enable input is asserted high.
                                        (0126) ;-----------------------------------------------------------------------------
                                        (0127) ;
                                        (0128) ;  ARGUMENTS:    None
                                        (0129) ;  RETURNS:      Nothing
                                        (0130) ;  SIDE EFFECTS: 
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137)  Counter16_1_Start:
                                        (0138) _Counter16_1_Start:
                                        (0139)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0140)    Counter16_1_Start_M
                                        (0141)    RAM_EPILOGUE RAM_USE_CLASS_1
07C6: 7F       RET                      (0142)    ret
07C7: 41 37 FE AND   REG[0x37],0xFE     
                                        (0143) 
                                        (0144) 
                                        (0145) .ENDSECTION
                                        (0146) 
                                        (0147) .SECTION
                                        (0148) ;-----------------------------------------------------------------------------
                                        (0149) ;  FUNCTION NAME: Counter16_1_Stop
                                        (0150) ;
                                        (0151) ;  DESCRIPTION:
                                        (0152) ;     Disables counter operation by clearing the start bit in the Control
                                        (0153) ;     register of the LSB block.
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;
                                        (0156) ;  ARGUMENTS:    None
                                        (0157) ;  RETURNS:      Nothing
                                        (0158) ;  SIDE EFFECTS: 
                                        (0159) ;    The A and X registers may be modified by this or future implementations
                                        (0160) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0161) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0162) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0163) ;    functions.
                                        (0164) ;
                                        (0165)  Counter16_1_Stop:
                                        (0166) _Counter16_1_Stop:
                                        (0167)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0168)    Counter16_1_Stop_M
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_1
07CA: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) 
                                        (0173) .ENDSECTION
                                        (0174) 
                                        (0175) .SECTION
                                        (0176) ;-----------------------------------------------------------------------------
                                        (0177) ;  FUNCTION NAME: Counter16_1_WritePeriod
                                        (0178) ;
                                        (0179) ;  DESCRIPTION:
                                        (0180) ;     Write the 16-bit period value into the Period register (DR1).
                                        (0181) ;-----------------------------------------------------------------------------
                                        (0182) ;
                                        (0183) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0184) ;  RETURNS:   Nothing
                                        (0185) ;  SIDE EFFECTS:
                                        (0186) ;    If the counter user module is stopped, then this value will also be
                                        (0187) ;    latched into the Count registers (DR0).
                                        (0188) ;     
                                        (0189) ;    The A and X registers may be modified by this or future implementations
                                        (0190) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0191) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0192) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0193) ;    functions.
                                        (0194) ;
                                        (0195)  Counter16_1_WritePeriod:
                                        (0196) _Counter16_1_WritePeriod:
                                        (0197)    RAM_PROLOGUE RAM_USE_CLASS_1
07CB: 60 35    MOV   REG[0x35],A        (0198)    mov   reg[Counter16_1_PERIOD_LSB_REG], A
07CD: 5B       MOV   A,X                (0199)    mov   A, X
07CE: 60 39    MOV   REG[0x39],A        (0200)    mov   reg[Counter16_1_PERIOD_MSB_REG], A
                                        (0201)    RAM_EPILOGUE RAM_USE_CLASS_1
07D0: 7F       RET                      (0202)    ret
                                        (0203) 
                                        (0204) 
                                        (0205) .ENDSECTION
                                        (0206) 
                                        (0207) .SECTION
                                        (0208) ;-----------------------------------------------------------------------------
                                        (0209) ;  FUNCTION NAME: Counter16_1_WriteCompareValue
                                        (0210) ;
                                        (0211) ;  DESCRIPTION:
                                        (0212) ;     Writes compare value into the Compare register (DR2).
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;
                                        (0215) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0216) ;  RETURNS:      Nothing
                                        (0217) ;  SIDE EFFECTS: 
                                        (0218) ;    The A and X registers may be modified by this or future implementations
                                        (0219) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0220) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0221) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0222) ;    functions.
                                        (0223) ;
                                        (0224)  Counter16_1_WriteCompareValue:
                                        (0225) _Counter16_1_WriteCompareValue:
                                        (0226)    RAM_PROLOGUE RAM_USE_CLASS_1
07D1: 60 36    MOV   REG[0x36],A        (0227)    mov   reg[Counter16_1_COMPARE_LSB_REG], A
07D3: 5B       MOV   A,X                (0228)    mov   A, X
07D4: 60 3A    MOV   REG[0x3A],A        (0229)    mov   reg[Counter16_1_COMPARE_MSB_REG], A
                                        (0230)    RAM_EPILOGUE RAM_USE_CLASS_1
07D6: 7F       RET                      (0231)    ret
                                        (0232) 
                                        (0233) 
                                        (0234) .ENDSECTION
                                        (0235) 
                                        (0236) .SECTION
                                        (0237) ;-----------------------------------------------------------------------------
                                        (0238) ;  FUNCTION NAME: Counter16_1_wReadCompareValue
                                        (0239) ;
                                        (0240) ;  DESCRIPTION:
                                        (0241) ;     Reads the Compare registers.
                                        (0242) ;-----------------------------------------------------------------------------
                                        (0243) ;
                                        (0244) ;  ARGUMENTS:    None
                                        (0245) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0246) ;  SIDE EFFECTS: 
                                        (0247) ;    The A and X registers may be modified by this or future implementations
                                        (0248) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0249) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0250) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0251) ;    functions.
                                        (0252) ;
                                        (0253)  Counter16_1_wReadCompareValue:
                                        (0254) _Counter16_1_wReadCompareValue:
                                        (0255)  wCounter16_1_ReadCompareValue:                  ; this name deprecated
                                        (0256) _wCounter16_1_ReadCompareValue:                  ; this name deprecated
                                        (0257)    RAM_PROLOGUE RAM_USE_CLASS_1
07D7: 5D 3A    MOV   A,REG[0x3A]        (0258)    mov   A, reg[Counter16_1_COMPARE_MSB_REG]
07D9: 5C       MOV   X,A                (0259)    mov   X, A
07DA: 5D 36    MOV   A,REG[0x36]        (0260)    mov   A, reg[Counter16_1_COMPARE_LSB_REG]
                                        (0261)    RAM_EPILOGUE RAM_USE_CLASS_1
07DC: 7F       RET                      (0262)    ret
                                        (0263) 
                                        (0264) 
                                        (0265) .ENDSECTION
                                        (0266) 
                                        (0267) .SECTION
                                        (0268) ;-----------------------------------------------------------------------------
                                        (0269) ;  FUNCTION NAME: Counter16_1_wReadCounter
                                        (0270) ;
                                        (0271) ;  DESCRIPTION:
                                        (0272) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0273) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0274) ;     from the Count to the Compare registers by holding the clock low in
                                        (0275) ;     the MSB PSoC block.
                                        (0276) ;-----------------------------------------------------------------------------
                                        (0277) ;
                                        (0278) ;  ARGUMENTS: None
                                        (0279) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0280) ;  SIDE EFFECTS:
                                        (0281) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0282) ;     2) The A and X registers may be modified by this or future implementations
                                        (0283) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0284) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0285) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0286) ;        functions.
                                        (0287) ;
                                        (0288)  Counter16_1_wReadCounter:
                                        (0289) _Counter16_1_wReadCounter:
                                        (0290)  wCounter16_1_ReadCounter:                       ; this name deprecated
                                        (0291) _wCounter16_1_ReadCounter:                       ; this name deprecated
                                        (0292) 
                                        (0293)    bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
                                        (0294)    bOrigControlReg:        EQU   2                  ; Frame offset to temp CR0     store
                                        (0295)    bOrigClockSetting:      EQU   3                  ; Frame offset to temp Input   store
                                        (0296)    wCounter:               EQU   4                  ; Frame offset to temp Count   store
                                        (0297)    STACK_FRAME_SIZE:       EQU   6                  ; max stack frame size is 6 bytes
                                        (0298) 
                                        (0299)    RAM_PROLOGUE RAM_USE_CLASS_2
07DD: 4F       MOV   X,SP               (0300)    mov   X, SP                                      ; X <-  stack frame pointer
07DE: 5D 3A    MOV   A,REG[0x3A]        (0301)    mov   A, reg[Counter16_1_COMPARE_MSB_REG]     ; Save the Compare register on the stack
07E0: 08       PUSH  A                  (0302)    push  A                                          ;
07E1: 5D 36    MOV   A,REG[0x36]        (0303)    mov   A, reg[Counter16_1_COMPARE_LSB_REG]     ;
07E3: 08       PUSH  A                  (0304)    push  A                                          ;   -stack frame now 2 bytes-
07E4: 5D 37    MOV   A,REG[0x37]        (0305)    mov   A, reg[Counter16_1_CONTROL_LSB_REG]     ; Save CR0 (running or stopped state)
07E6: 08       PUSH  A                  (0306)    push  A                                          ;   -stack frame now 3 bytes-
07E7: 41 37 FE AND   REG[0x37],0xFE     
07EA: 71 10    OR    F,0x10             
                                        (0307)    Counter16_1_Stop_M                            ; Disable (stop) the Counter if running
                                        (0308)    M8C_SetBank1                                     ;
07EC: 5D 35    MOV   A,REG[0x35]        (0309)    mov   A, reg[Counter16_1_INPUT_LSB_REG]       ; save the LSB clock input setting
07EE: 08       PUSH  A                  (0310)    push  A                                          ;   on the stack (now 4 bytes) and ...
                                        (0311)                                                     ;   hold the clock low:
07EF: 62 35 00 MOV   REG[0x35],0x0      (0312)    mov   reg[Counter16_1_INPUT_LSB_REG], INPUT_REG_NULL
07F2: 70 EF    AND   F,0xEF             
                                        (0313)    M8C_SetBank0                                     ; Extract the Count via DR2 register
07F4: 5D 38    MOV   A,REG[0x38]        (0314)    mov   A, reg[Counter16_1_COUNTER_MSB_REG]     ; DR2 <- DR0 (in the MSB block)
07F6: 5D 3A    MOV   A,REG[0x3A]        (0315)    mov   A, reg[Counter16_1_COMPARE_MSB_REG]     ; Stash the Count MSB on the stack
07F8: 08       PUSH  A                  (0316)    push  A                                          ;   -stack frame is now 5 bytes
07F9: 5D 34    MOV   A,REG[0x34]        (0317)    mov   A, reg[Counter16_1_COUNTER_LSB_REG]     ; DR2 <- DR0 (in the LSB block)
07FB: 5D 36    MOV   A,REG[0x36]        (0318)    mov   A, reg[Counter16_1_COMPARE_LSB_REG]     ; Stash the Count LSB on the stack
07FD: 08       PUSH  A                  (0319)    push  A                                          ;   -stack frame is now 6 bytes-
07FE: 52 00    MOV   A,[X+0]            (0320)    mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
0800: 60 3A    MOV   REG[0x3A],A        (0321)    mov   reg[Counter16_1_COMPARE_MSB_REG], A     ;
0802: 52 01    MOV   A,[X+1]            (0322)    mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
0804: 60 36    MOV   REG[0x36],A        (0323)    mov   reg[Counter16_1_COMPARE_LSB_REG], A     ;
0806: 71 10    OR    F,0x10             
                                        (0324)    M8C_SetBank1                                     ; ---Restore the counter operation
0808: 52 03    MOV   A,[X+3]            (0325)    mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
080A: 60 35    MOV   REG[0x35],A        (0326)    mov   reg[Counter16_1_INPUT_LSB_REG], A       ;   and restore it
080C: 70 EF    AND   F,0xEF             
                                        (0327)    M8C_SetBank0                                     ; Now re-enable (start) the counter
080E: 52 02    MOV   A,[X+2]            (0328)    mov   A, [X+bOrigControlReg]                     ;   if it was running when
0810: 60 37    MOV   REG[0x37],A        (0329)    mov   reg[Counter16_1_CONTROL_LSB_REG], A     ;   this function was first called
0812: 18       POP   A                  (0330)    pop   A                                          ; Setup the return value
0813: 20       POP   X                  (0331)    pop   X                                          ;
0814: 38 FC    ADD   SP,0xFC            (0332)    ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
                                        (0333)    RAM_EPILOGUE RAM_USE_CLASS_2
0816: 7F       RET                      (0334)    ret
                                        (0335) 
                                        (0336) .ENDSECTION
                                        (0337) 
                                        (0338) ; End of File Counter16_1.asm
FILE: .\delay.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: delay.asm
                                        (0004) ;;
                                        (0005) ;;  DESCRIPTION: Delay functions implementation file
                                        (0006) ;;
                                        (0007) ;;-----------------------------------------------------------------------------
                                        (0008) ;;  Copyright (c) Cypress MicroSystems 2002-2006. All Rights Reserved.
                                        (0009) ;;*****************************************************************************
                                        (0010) ;;*****************************************************************************
                                        (0011) 
                                        (0012) ;-----------------------------------------------------------------------------
                                        (0013) ;  Include Files
                                        (0014) ;-----------------------------------------------------------------------------
                                        (0015) include "m8c.inc"
                                        (0016) include "memory.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------------------------------------
                                        (0021) export  Delay50uTimes
                                        (0022) export _Delay50uTimes
                                        (0023) 
                                        (0024) export  Delay50u
                                        (0025) export _Delay50u
                                        (0026) 
                                        (0027) export  Delay10msTimes
                                        (0028) export _Delay10msTimes
                                        (0029) 
                                        (0030) 
                                        (0031) area text(rom)
                                        (0032) .SECTION
                                        (0033) ;-----------------------------------------------------------------------------
                                        (0034) ;  FUNCTION NAME: DelaySeconds
                                        (0035) ;
                                        (0036) ;  DESCRIPTION:
                                        (0037) ;     Delay increments of 10mSeconds
                                        (0038) ;
                                        (0039) ;-----------------------------------------------------------------------------
                                        (0040) ;
                                        (0041) ;  ARGUMENTS:
                                        (0042) ;     A contains the delay multiplier
                                        (0043) ;
                                        (0044) ;  RETURNS:
                                        (0045) ;
                                        (0046) ;  SIDE EFFECTS:
                                        (0047) ;    The A and X registers may be modified by this or future implementations
                                        (0048) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0049) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0050) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0051) ;    functions.
                                        (0052) 
                                        (0053) 
                                        (0054)  Delay10msTimes:
                                        (0055) _Delay10msTimes:
                                        (0056)     RAM_PROLOGUE RAM_USE_CLASS_1
0817: 08       PUSH  A                  (0057) 	push A
                                        (0058) 
0818: 50 C8    MOV   A,0xC8             (0059) 	mov A, 200
                                        (0060) 	DELAY50US:
081A: 90 16    CALL  _Delay50u          (0061)     call  Delay50u
081C: 78       DEC   A                  (0062)     dec   A
081D: BF FC    JNZ   0x081A             (0063)     jnz   DELAY50US
                                        (0064) 
081F: 18       POP   A                  (0065) 	pop A
0820: 78       DEC   A                  (0066) 	dec   A
0821: BF F5    JNZ   __UserModules_end|__text_start|_Delay10msTimes|Delay10msTimes(0067)     jnz   Delay10msTimes
                                        (0068) 
                                        (0069)     RAM_EPILOGUE RAM_USE_CLASS_1
0823: 7F       RET                      (0070)     ret
                                        (0071) .ENDSECTION
                                        (0072) 
                                        (0073) 
                                        (0074) 
                                        (0075) 
                                        (0076) .SECTION
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) ;  FUNCTION NAME: Delay50uTimes
                                        (0079) ;
                                        (0080) ;  DESCRIPTION:
                                        (0081) ;     Delay increments of 50uSeconds
                                        (0082) ;
                                        (0083) ;-----------------------------------------------------------------------------
                                        (0084) ;
                                        (0085) ;  ARGUMENTS:
                                        (0086) ;     A contains the delay multiplier
                                        (0087) ;
                                        (0088) ;  RETURNS:
                                        (0089) ;
                                        (0090) ;  SIDE EFFECTS:
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097) ;
                                        (0098) 
                                        (0099)  Delay50uTimes:
                                        (0100) _Delay50uTimes:
                                        (0101)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0102) 
0824: 90 0C    CALL  _Delay50u          (0103)     call  Delay50u
0826: 78       DEC   A                  (0104) 	dec A
0827: BF FC    JNZ   _Delay50uTimes     (0105)     jnz   Delay50uTimes
                                        (0106) 
                                        (0107) 	
                                        (0108)     RAM_EPILOGUE RAM_USE_CLASS_1
0829: 7F       RET                      (0109)     ret
                                        (0110) 
                                        (0111) .ENDSECTION
                                        (0112) 
                                        (0113) ;-----------------------------------------------------------------------------
                                        (0114) ;  FUNCTION NAME: Delay50u
                                        (0115) ;
                                        (0116) ;  DESCRIPTION:
                                        (0117) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0118) ;     Slower clock frequencies the delay will be;
                                        (0119) ;           1.5
                                        (0120) ;        -------------- * 50uSec
                                        (0121) ;        clock_freq(MHz)
                                        (0122) ;
                                        (0123) ;
                                        (0124) ;-----------------------------------------------------------------------------
                                        (0125) ;
                                        (0126) ;  ARGUMENTS: none
                                        (0127) ;
                                        (0128) ;  RETURNS: none
                                        (0129) ;
                                        (0130) ;  SIDE EFFECTS:
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137) ;  THEORY of OPERATION or PROCEDURE:
                                        (0138) ;
                                        (0139) .LITERAL
                                        (0140)  Delay50u_Table::
                                        (0141)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0142) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0143) .ENDLITERAL
                                        (0144) .SECTION
                                        (0145) 
                                        (0146)   Delay50u:
                                        (0147)  _Delay50u:                      ; [11]  Call
                                        (0148)     RAM_PROLOGUE RAM_USE_CLASS_1
0832: 08       PUSH  A                  (0149)     push  A
0833: 71 10    OR    F,0x10             
                                        (0150)     M8C_SetBank1                       ; [4]
0835: 5D E0    MOV   A,REG[0xE0]        (0151)     mov   A, reg[OSC_CR0]              ; [6] Get delay value
0837: 70 EF    AND   F,0xEF             
                                        (0152)     M8C_SetBank0                       ; [4]
0839: 21 07    AND   A,0x7              (0153)     and   A,07h                        ; [4] Mask off only the clock bits
083B: 39 05    CMP   A,0x5              (0154)     cmp   A,05h
083D: D0 06    JNC   0x0844             (0155)     jnc   Delay50u_End
083F: FF E9    INDEX Delay50u_Table     (0156)     index Delay50u_Table               ; [13] Get delay value
                                        (0157) Delay50u_Loop:                         ;
0841: 78       DEC   A                  (0158)     dec   A                            ; [4]
0842: BF FE    JNZ   0x0841             (0159)     jnz   Delay50u_Loop                ; [5]
                                        (0160) Delay50u_End:
0844: 18       POP   A                  (0161)     pop   A
                                        (0162)     RAM_EPILOGUE RAM_USE_CLASS_1
0845: 7F       RET                      (0163)     ret
FILE: Z:\AMMATI~2\Koodi\Robor7\ROBOTT~1\ROBOTT~1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // Robotti Projekti
(0003) // Robor7 @ 2014
(0004) // Kasper Kiiskinen, Henri Sinokki, Eero Holopainen, Mikko Liira, Kari Lampi
(0005) //----------------------------------------------------------------------------
(0006) 
(0007) #include <m8c.h>        // part specific constants and macros
(0008) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0009) #include<stdio.h>
(0010) #include<stdlib.h>
(0011) 
(0012) //Omat header filet
(0013) #include "MotorControl.h"
(0014) #include "UltraControl.h"
(0015) //#include "GyroControl.h"
(0016) 
(0017) #pragma interrupt_handler PinInterrupt
(0018) 
(0019) void Delay(int);
(0020) void TestLoop(void);
(0021) void CounterISR(void);
(0022) 
(0023) //Kellot
(0024) volatile int timeT = 0;
(0025) int timeUltra = 0,timeUltraRead = 0;
(0026) volatile unsigned long int milliT = 0;
(0027) 
(0028) //Test
(0029) volatile int a = 0;
(0030) char buffer[10];
(0031) 
(0032) int timeForward = 50; //.... 4m täydellä vauhdilla 3.7s
(0033) int turnTime = 55; 	   //.... 90 asteen käännökseen meneväaika
(0034) int timeRobotWidth = 15; //.... Robotin leveyteen menevä aika ?
(0035) int ultraData = 0; //Ultraääni anturrista saatava arvo millisekunteina pitää jakaa jollain että saadaan senttimerejä
(0036) 
(0037) //Main Method
(0038) void main(void)
(0039) {
(0040) 	//Init**************************
(0041) 	
(0042) 	//Enables Global Interrupts
(0043) 	M8C_EnableGInt; 
_main:
    0846: 71 01    OR    F,0x1
(0044) 	M8C_EnableIntMask(INT_MSK0, INT_MSK0_GPIO);	//VITTU
    0848: 43 E0 20 OR    REG[0xE0],0x20
(0045) 	
(0046) 	//Start LCD
(0047) 	LCD_Start();
    084B: 10       PUSH  X
    084C: 7C 05 A6 LCALL _LCD_Init|_LCD_Start|LCD_Init|LCD_Start
(0048) 	//InitializeTimer
(0049) 	Timer8_Start();
    084F: 7C 03 9F LCALL _Timer8_Start
(0050) 	Timer8_EnableInt();
    0852: 7C 03 97 LCALL _Timer8_EnableInt
(0051) 		
(0052) 	Counter16_1_EnableInt();
    0855: 7C 07 BB LCALL _Counter16_1_EnableInt
(0053) 	Counter16_1_Start();
    0858: 7C 07 C3 LCALL _Counter16_1_Start
    085B: 20       POP   X
(0054) 	
(0055) 	//Start Motor PWMs
(0056) 	//InitPWM();
(0057) 	
(0058) 	//Init Servo
(0059) 	//InitUAServo();
(0060) 		
(0061) 	//Delay(500);
(0062) 	
(0063) 	//Counter8_Start();
(0064) 	
(0065) 	//Testink
(0066) 	TestLoop();
    085C: 90 8F    CALL  _TestLoop
    085E: 8F FF    JMP   0x085E
(0067) 
(0068) 	//MainLoop**********
(0069) 	//***********************
(0070) 	/*while(1)
(0071) 	{
(0072) 		//Controlls the ultraSonic trigger
(0073) 		ControlTrigger(&timeUltra);	
(0074) 			
(0075) 		//Gets the data
(0076) 		//ultraData = getDataUA();
(0077) 		
(0078) 	}*/
(0079) }
(0080) 
(0081) //Delay function
(0082) void Delay(int delay)
(0083) {
_Delay:
  timme                --> X+0
  delay                --> X-5
    0860: 10       PUSH  X
    0861: 4F       MOV   X,SP
    0862: 38 04    ADD   SP,0x4
(0084) 	unsigned long int timme = milliT + delay;
    0864: 52 FC    MOV   A,[X-4]
    0866: 53 23    MOV   [__r3],A
    0868: 52 FB    MOV   A,[X-5]
    086A: 53 24    MOV   [__r2],A
    086C: 47 24 80 TST   [__r2],0x80
    086F: A0 09    JZ    0x0879
    0871: 55 25 FF MOV   [__r1],0xFF
    0874: 55 26 FF MOV   [__r0],0xFF
    0877: 80 07    JMP   0x087F
    0879: 55 25 00 MOV   [__r1],0x0
    087C: 55 26 00 MOV   [__r0],0x0
    087F: 51 09    MOV   A,[milliT+3]
    0881: 02 23    ADD   A,[__r3]
    0883: 54 03    MOV   [X+3],A
    0885: 51 08    MOV   A,[milliT+2]
    0887: 0A 24    ADC   A,[__r2]
    0889: 54 02    MOV   [X+2],A
    088B: 51 07    MOV   A,[milliT+1]
    088D: 0A 25    ADC   A,[__r1]
    088F: 54 01    MOV   [X+1],A
    0891: 51 06    MOV   A,[milliT]
    0893: 0A 26    ADC   A,[__r0]
    0895: 54 00    MOV   [X+0],A
(0085) 	while (milliT < timme){}
    0897: 51 09    MOV   A,[milliT+3]
    0899: 13 03    SUB   A,[X+3]
    089B: 51 08    MOV   A,[milliT+2]
    089D: 1B 02    SBB   A,[X+2]
    089F: 51 07    MOV   A,[milliT+1]
    08A1: 1B 01    SBB   A,[X+1]
    08A3: 51 06    MOV   A,[milliT]
    08A5: 1B 00    SBB   A,[X+0]
    08A7: CF EF    JC    0x0897
    08A9: 38 FC    ADD   SP,0xFC
    08AB: 20       POP   X
    08AC: 7F       RET   
(0086) }
(0087) 
(0088) //Palauttaa eerolle millisekunnit siitä asti ku psoc on käynnistytnyt
(0089) //Kutsutaan joka 0.001s = 1ms välein.
(0090) void TimerInterrupt(void)
(0091) {
(0092)   timeT++;
_TimerInterrupt:
    08AD: 76 01    INC   [timeT+1]
    08AF: 0E 00 00 ADC   [timeT],0x0
(0093) 	
(0094)   //DO NOT TOUCH
(0095)   milliT++;
    08B2: 06 09 01 ADD   [milliT+3],0x1
    08B5: 0E 08 00 ADC   [milliT+2],0x0
    08B8: 0E 07 00 ADC   [milliT+1],0x0
    08BB: 0E 06 00 ADC   [milliT],0x0
(0096)   timeUltra++;
    08BE: 76 03    INC   [timeUltra+1]
    08C0: 0E 02 00 ADC   [timeUltra],0x0
(0097)   timeUltraRead++;
    08C3: 76 05    INC   [timeUltraRead+1]
    08C5: 0E 04 00 ADC   [timeUltraRead],0x0
    08C8: 7F       RET   
(0098) }
(0099) 
(0100) void sendTrigPulse(void )
(0101) {	
(0102) 	ultraData = 0;
_sendTrigPulse:
    08C9: 55 13 00 MOV   [ultraData+1],0x0
    08CC: 55 12 00 MOV   [ultraData],0x0
(0103) 	UATrig_Data_ADDR |= UATrig_MASK;	
    08CF: 43 00 40 OR    REG[0x0],0x40
(0104) 	Delay50u();
    08D2: 7C 08 32 LCALL _Delay50u
(0105) 	UATrig_Data_ADDR &= ~UATrig_MASK;
    08D5: 41 00 BF AND   REG[0x0],0xBF
(0106) 	Delay10msTimes(7);
    08D8: 50 00    MOV   A,0x0
    08DA: 08       PUSH  A
    08DB: 50 07    MOV   A,0x7
    08DD: 08       PUSH  A
    08DE: 7C 08 17 LCALL __UserModules_end|__text_start|_Delay10msTimes|Delay10msTimes
    08E1: 38 FE    ADD   SP,0xFE
    08E3: 7F       RET   
(0107) }	
(0108) 
(0109) //Counter INTERRUPT
(0110) void CounterISR(void)
(0111) {
(0112)   	ultraData++;
_CounterISR:
    08E4: 76 13    INC   [ultraData+1]
    08E6: 0E 12 00 ADC   [ultraData],0x0
    08E9: 7F       RET   
(0113) }
(0114) 
(0115) void PinInterrupt(void){}
_PinInterrupt:
    08EA: 08       PUSH  A
    08EB: 18       POP   A
    08EC: 7E       RETI  
(0116) //{
(0117) //	static BYTE port0_prevValue;
(0118) //	static nousevaReuna;
(0119) //	
(0120) //	//a++;
(0121) //	
(0122) //	//UÅ ECHO 
(0123) //	/* Check if interrupt because of P0_7 change from read */
(0124) //	if ((PRT0DR ^ port0_prevValue)==0x80)
(0125) //	{
(0126) //	
(0127) //		if (nousevaReuna == 0)
(0128) //		{
(0129) //			timeUltraRead = 0;
(0130) //			nousevaReuna = 1;
(0131) //			//Counter8_Start();
(0132) //			//a = 1;
(0133) //		}
(0134) //		else 
(0135) //		{
(0136) //			nousevaReuna = 0;
(0137) //			//ultraData = Counter8_wReadCounter();
(0138) //			//Counter8_Stop();
(0139) //			//a = 0;
(0140) //			//ultraData = timeUltraRead;
(0141) //		}
(0142) //	}
(0143) //
(0144) //	/* Store values of P0_40 for next ISR */
(0145) //	port0_prevValue = PRT0DR & 0x80;
(0146) //	
(0147) //}
(0148) 
(0149) 
(0150) //For Testing
(0151) void TestLoop(void)
(0152) {
_TestLoop:
    08ED: 80 4E    JMP   0x093C
(0153) 	while(1)
(0154) 	{	
(0155) 		sendTrigPulse();
    08EF: 9F D8    CALL  _sendTrigPulse
(0156) 		
(0157) 		a = ultraData * 2;		
    08F1: 5F 25 13 MOV   [__r1],[ultraData+1]
    08F4: 5F 26 12 MOV   [__r0],[ultraData]
    08F7: 65 25    ASL   [__r1]
    08F9: 6B 26    RLC   [__r0]
    08FB: 5F 0B 25 MOV   [a+1],[__r1]
    08FE: 5F 0A 26 MOV   [a],[__r0]
(0158) 				
(0159) 		itoa(buffer,a,10);
    0901: 50 00    MOV   A,0x0
    0903: 08       PUSH  A
    0904: 50 0A    MOV   A,0xA
    0906: 08       PUSH  A
    0907: 51 0A    MOV   A,[a]
    0909: 08       PUSH  A
    090A: 51 0B    MOV   A,[a+1]
    090C: 08       PUSH  A
    090D: 50 00    MOV   A,0x0
    090F: 08       PUSH  A
    0910: 50 2B    MOV   A,0x2B
    0912: 08       PUSH  A
    0913: 7C 12 47 LCALL _itoa
    0916: 38 FA    ADD   SP,0xFA
(0160) 		LCD_Position(0,0);
    0918: 10       PUSH  X
    0919: 50 00    MOV   A,0x0
    091B: 57 00    MOV   X,0x0
    091D: 7C 06 16 LCALL _LCD_Position
(0161) 		LCD_PrCString("     ");
    0920: 50 01    MOV   A,0x1
    0922: 08       PUSH  A
    0923: 50 50    MOV   A,0x50
    0925: 5C       MOV   X,A
    0926: 18       POP   A
    0927: 7C 04 A5 LCALL _LCD_PrCString
(0162) 		LCD_Position(0,0);
    092A: 50 00    MOV   A,0x0
    092C: 57 00    MOV   X,0x0
    092E: 7C 06 16 LCALL _LCD_Position
(0163) 		LCD_PrString(buffer);
    0931: 50 00    MOV   A,0x0
    0933: 08       PUSH  A
    0934: 50 2B    MOV   A,0x2B
    0936: 5C       MOV   X,A
    0937: 18       POP   A
    0938: 7C 04 E1 LCALL _LCD_PrString
    093B: 20       POP   X
(0164) 		
(0165) //		itoa(buffer,t++,10);
(0166) //		LCD_Position(1,0);
(0167) //		LCD_PrCString("     ");
(0168) //		LCD_Position(1,0);
(0169) //		LCD_PrString(buffer);
(0170) //		for (j=0;j<9000;j++);
(0171) 			
(0172) 		//Test 4m
(0173) 		/*
(0174) 		if (timeT < 250)
(0175) 			TurnLeft(FULL_SPEED);
(0176) 		else if (timeT < 500)
(0177) 			TurnRight(HALF_SPEED);
(0178) 		else 
(0179) 			Stop();
(0180) 		*/
(0181) 	
(0182) 		//About 90
(0183) 		/*if (timeT < 2000)
(0184) 			ControlServo(8);
(0185) 		else if(timeT < 4000)
(0186) 			ControlServo(15);
(0187) 		else if(timeT < 6000)
(0188) 			ControlServo(25);
(0189) 		else
(0190) 			Stop();
(0191) 		*/	
(0192) 		//Test 90 degree Turn
(0193) 		/*	
(0194) 			if(timeT <= 100) //1.0s
(0195) 				TurnRight(FULL_SPEED);
(0196) 			else if(timeT <= 400)
(0197) 				timeT = 0;
(0198) 		*/
(0199) 		
(0200) 	}
    093C: 8F B2    JMP   0x08EF
(0201) }
(0202) 
FILE: Z:\AMMATI~2\Koodi\Robor7\ROBOTT~1\ROBOTT~1\motorcontrol.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) 
(0004) #define BACKWARD 	0b00000101; // Molemmat Eteen
(0005) #define FORWARD 	0b00001010; //Molemmat Taakse
(0006) #define LEFTBRIGHTF 0b00001001; // Vasen Eteen Oikea Taakse
(0007) #define LEFTFRIGHTB 0b00000110; // Vasen Taakse Oikea Eteen
(0008) #define NOLLAA 		0b11110000;		//Molemmat C/D pinnit 0
(0009) 
(0010) //Porttien osoitteet
(0011) //Port1_0 LEFTC      C = 1, D = 0 FORWARD
(0012) //Port1_1 LEFTD		 C = 0, D = 1 BACKWARD 
(0013) //Port1_2 RIGHTC
(0014) //Port1_3 RIGHTD
(0015) 
(0016) const float OIKEUSKERROIN = 1.0f; //Kerroin vasemalle puolelle jotta robotti kulkisi suoraan
(0017) 
(0018) //Käynnistää PWM Moduulit
(0019) void InitPWM(void)
(0020) {
(0021) 	PWM8_VASEN_Start();
_InitPWM:
    093F: 10       PUSH  X
    0940: 7C 03 E5 LCALL _PWM8_VASEN_Start
(0022) 	PWM8_OIKEA_Start();
    0943: 7C 04 6B LCALL _PWM8_OIKEA_Start
    0946: 20       POP   X
    0947: 7F       RET   
(0023) 	
(0024) 	//Port1_Data_ADDR = LEFTC_Data_ADDR;
(0025) 	//Port1_Data_ADDR &= NOLLAA;
(0026) }
(0027) 
(0028) //Kulkee eteenpäin arvolla..
(0029) void MoveForward(int pulse)
(0030) {				
_MoveForward:
  pulse                --> X-5
    0948: 10       PUSH  X
    0949: 4F       MOV   X,SP
    094A: 38 02    ADD   SP,0x2
(0031) 	LEFTC_Data_ADDR &= NOLLAA;
    094C: 41 04 F0 AND   REG[0x4],0xF0
(0032) 	LEFTC_Data_ADDR |= FORWARD;
    094F: 43 04 0A OR    REG[0x4],0xA
(0033) 
(0034) 	PWM8_VASEN_WritePulseWidth((BYTE)(pulse * OIKEUSKERROIN));
    0952: 55 25 56 MOV   [__r1],0x56
FILE: Z:\AMMATI~2\Koodi\Robor7\ROBOTT~1\ROBOTT~1\motorcontrol.c
(0035) 	PWM8_OIKEA_WritePulseWidth((BYTE)pulse);
    0A5E: 52 FC    MOV   A,[X-4]
    0A60: 10       PUSH  X
    0A61: 7C 04 76 LCALL _PWM8_OIKEA_WritePulseWidth
    0A64: 20       POP   X
    0A65: 38 FE    ADD   SP,0xFE
    0A67: 20       POP   X
    0A68: 7F       RET   
(0036) }
(0037) 
(0038) //Kulkee taaksepäin arvolla
(0039) void MoveBackward(int pulse)
(0040) {
_MoveBackward:
  pulse                --> X-5
    0A69: 10       PUSH  X
    0A6A: 4F       MOV   X,SP
    0A6B: 38 02    ADD   SP,0x2
(0041) 	LEFTC_Data_ADDR &= NOLLAA;
    0A6D: 41 04 F0 AND   REG[0x4],0xF0
(0042) 	LEFTC_Data_ADDR |= BACKWARD;
    0A70: 43 04 05 OR    REG[0x4],0x5
(0043) 	
(0044) 	PWM8_VASEN_WritePulseWidth((BYTE)(pulse * OIKEUSKERROIN));
    0A73: 55 25 56 MOV   [__r1],0x56
FILE: Z:\AMMATI~2\Koodi\Robor7\ROBOTT~1\ROBOTT~1\motorcontrol.c
(0045) 	PWM8_OIKEA_WritePulseWidth((BYTE)pulse);
    0B7F: 52 FC    MOV   A,[X-4]
    0B81: 10       PUSH  X
    0B82: 7C 04 76 LCALL _PWM8_OIKEA_WritePulseWidth
    0B85: 20       POP   X
    0B86: 38 FE    ADD   SP,0xFE
    0B88: 20       POP   X
    0B89: 7F       RET   
(0046) }
(0047) 
(0048) //Pysäyttää Moottorit
(0049) void Stop(void)
(0050) {
(0051) 	PWM8_OIKEA_WritePulseWidth(0);
_Stop:
    0B8A: 10       PUSH  X
    0B8B: 50 00    MOV   A,0x0
    0B8D: 7C 04 76 LCALL _PWM8_OIKEA_WritePulseWidth
(0052) 	PWM8_VASEN_WritePulseWidth(0);
    0B90: 50 00    MOV   A,0x0
    0B92: 7C 03 F0 LCALL _PWM8_VASEN_WritePulseWidth
    0B95: 20       POP   X
(0053) 	
(0054) 	LEFTC_Data_ADDR &= NOLLAA;
    0B96: 41 04 F0 AND   REG[0x4],0xF0
    0B99: 7F       RET   
(0055) }
(0056) 
(0057) //Kääntyy vasemmalle
(0058) void TurnLeft(int pulse)
(0059) {
_TurnLeft:
  pulse                --> X-5
    0B9A: 10       PUSH  X
    0B9B: 4F       MOV   X,SP
    0B9C: 38 02    ADD   SP,0x2
(0060) 	LEFTC_Data_ADDR &= NOLLAA;
    0B9E: 41 04 F0 AND   REG[0x4],0xF0
(0061) 	LEFTC_Data_ADDR |= LEFTFRIGHTB
    0BA1: 43 04 06 OR    REG[0x4],0x6
(0062) 		
(0063) 	PWM8_VASEN_WritePulseWidth((BYTE)pulse);
    0BA4: 52 FC    MOV   A,[X-4]
    0BA6: 10       PUSH  X
    0BA7: 7C 03 F0 LCALL _PWM8_VASEN_WritePulseWidth
    0BAA: 20       POP   X
(0064) 	PWM8_OIKEA_WritePulseWidth((BYTE)(pulse * 0.8f));
    0BAB: 52 FC    MOV   A,[X-4]
    0BAD: 53 23    MOV   [__r3],A
    0BAF: 52 FB    MOV   A,[X-5]
    0BB1: 53 24    MOV   [__r2],A
    0BB3: 47 24 80 TST   [__r2],0x80
    0BB6: A0 09    JZ    0x0BC0
    0BB8: 55 25 FF MOV   [__r1],0xFF
    0BBB: 55 26 FF MOV   [__r0],0xFF
    0BBE: 80 07    JMP   0x0BC6
    0BC0: 55 25 00 MOV   [__r1],0x0
    0BC3: 55 26 00 MOV   [__r0],0x0
    0BC6: 51 26    MOV   A,[__r0]
    0BC8: 08       PUSH  A
    0BC9: 51 25    MOV   A,[__r1]
    0BCB: 08       PUSH  A
    0BCC: 51 24    MOV   A,[__r2]
    0BCE: 08       PUSH  A
    0BCF: 51 23    MOV   A,[__r3]
    0BD1: 08       PUSH  A
    0BD2: 7C 11 E9 LCALL 0x11E9
    0BD5: 18       POP   A
    0BD6: 53 23    MOV   [__r3],A
    0BD8: 18       POP   A
    0BD9: 53 24    MOV   [__r2],A
    0BDB: 18       POP   A
    0BDC: 53 25    MOV   [__r1],A
    0BDE: 18       POP   A
    0BDF: 08       PUSH  A
    0BE0: 51 25    MOV   A,[__r1]
    0BE2: 08       PUSH  A
    0BE3: 51 24    MOV   A,[__r2]
    0BE5: 08       PUSH  A
    0BE6: 51 23    MOV   A,[__r3]
    0BE8: 08       PUSH  A
    0BE9: 50 3F    MOV   A,0x3F
    0BEB: 08       PUSH  A
    0BEC: 50 4C    MOV   A,0x4C
    0BEE: 08       PUSH  A
    0BEF: 50 CC    MOV   A,0xCC
    0BF1: 08       PUSH  A
    0BF2: 50 CD    MOV   A,0xCD
    0BF4: 08       PUSH  A
    0BF5: 7C 10 57 LCALL 0x1057
    0BF8: 18       POP   A
    0BF9: 53 23    MOV   [__r3],A
    0BFB: 18       POP   A
    0BFC: 53 24    MOV   [__r2],A
    0BFE: 18       POP   A
    0BFF: 53 25    MOV   [__r1],A
    0C01: 18       POP   A
    0C02: 53 26    MOV   [__r0],A
    0C04: 38 FC    ADD   SP,0xFC
    0C06: 50 47    MOV   A,0x47
    0C08: 08       PUSH  A
    0C09: 50 00    MOV   A,0x0
    0C0B: 08       PUSH  A
    0C0C: 08       PUSH  A
    0C0D: 08       PUSH  A
    0C0E: 51 26    MOV   A,[__r0]
    0C10: 08       PUSH  A
    0C11: 51 25    MOV   A,[__r1]
    0C13: 08       PUSH  A
    0C14: 51 24    MOV   A,[__r2]
    0C16: 08       PUSH  A
    0C17: 51 23    MOV   A,[__r3]
    0C19: 08       PUSH  A
    0C1A: 7C 10 09 LCALL 0x1009
    0C1D: 38 F8    ADD   SP,0xF8
    0C1F: 39 FF    CMP   A,0xFF
    0C21: A0 47    JZ    0x0C69
    0C23: 50 47    MOV   A,0x47
    0C25: 08       PUSH  A
    0C26: 50 00    MOV   A,0x0
    0C28: 08       PUSH  A
    0C29: 08       PUSH  A
    0C2A: 08       PUSH  A
    0C2B: 51 26    MOV   A,[__r0]
    0C2D: 08       PUSH  A
    0C2E: 51 25    MOV   A,[__r1]
    0C30: 08       PUSH  A
    0C31: 51 24    MOV   A,[__r2]
    0C33: 08       PUSH  A
    0C34: 51 23    MOV   A,[__r3]
    0C36: 08       PUSH  A
    0C37: 7C 11 7B LCALL 0x117B
    0C3A: 18       POP   A
    0C3B: 53 1F    MOV   [__r7],A
    0C3D: 18       POP   A
    0C3E: 53 20    MOV   [__r6],A
    0C40: 18       POP   A
    0C41: 53 21    MOV   [__r5],A
    0C43: 18       POP   A
    0C44: 38 FC    ADD   SP,0xFC
    0C46: 08       PUSH  A
    0C47: 51 21    MOV   A,[__r5]
    0C49: 08       PUSH  A
    0C4A: 51 20    MOV   A,[__r6]
    0C4C: 08       PUSH  A
    0C4D: 51 1F    MOV   A,[__r7]
    0C4F: 08       PUSH  A
    0C50: 7C 0E 12 LCALL 0x0E12
    0C53: 18       POP   A
    0C54: 53 21    MOV   [__r5],A
    0C56: 18       POP   A
    0C57: 53 22    MOV   [__r4],A
    0C59: 38 FE    ADD   SP,0xFE
    0C5B: 51 21    MOV   A,[__r5]
    0C5D: 01 00    ADD   A,0x0
    0C5F: 54 01    MOV   [X+1],A
    0C61: 51 22    MOV   A,[__r4]
    0C63: 09 80    ADC   A,0x80
    0C65: 54 00    MOV   [X+0],A
    0C67: 80 20    JMP   0x0C88
    0C69: 51 26    MOV   A,[__r0]
    0C6B: 08       PUSH  A
    0C6C: 51 25    MOV   A,[__r1]
    0C6E: 08       PUSH  A
    0C6F: 51 24    MOV   A,[__r2]
    0C71: 08       PUSH  A
    0C72: 51 23    MOV   A,[__r3]
    0C74: 08       PUSH  A
    0C75: 7C 0E 12 LCALL 0x0E12
    0C78: 18       POP   A
    0C79: 53 25    MOV   [__r1],A
    0C7B: 18       POP   A
    0C7C: 53 26    MOV   [__r0],A
    0C7E: 38 FE    ADD   SP,0xFE
    0C80: 51 25    MOV   A,[__r1]
    0C82: 54 01    MOV   [X+1],A
    0C84: 51 26    MOV   A,[__r0]
    0C86: 54 00    MOV   [X+0],A
    0C88: 52 01    MOV   A,[X+1]
    0C8A: 10       PUSH  X
    0C8B: 7C 04 76 LCALL _PWM8_OIKEA_WritePulseWidth
    0C8E: 20       POP   X
    0C8F: 38 FE    ADD   SP,0xFE
    0C91: 20       POP   X
    0C92: 7F       RET   
(0065) }
(0066) 
(0067) //Kääntyy oikealle
(0068) void TurnRight(int pulse)
(0069) {		
_TurnRight:
  pulse                --> X-5
    0C93: 10       PUSH  X
    0C94: 4F       MOV   X,SP
    0C95: 38 02    ADD   SP,0x2
(0070) 	LEFTC_Data_ADDR &= NOLLAA;
    0C97: 41 04 F0 AND   REG[0x4],0xF0
(0071) 	LEFTC_Data_ADDR |= LEFTBRIGHTF;
    0C9A: 43 04 09 OR    REG[0x4],0x9
(0072) 	
(0073) 	PWM8_VASEN_WritePulseWidth((BYTE)(pulse * 0.8f));
    0C9D: 52 FC    MOV   A,[X-4]
    0C9F: 53 23    MOV   [__r3],A
    0CA1: 52 FB    MOV   A,[X-5]
    0CA3: 53 24    MOV   [__r2],A
    0CA5: 47 24 80 TST   [__r2],0x80
    0CA8: A0 09    JZ    0x0CB2
    0CAA: 55 25 FF MOV   [__r1],0xFF
    0CAD: 55 26 FF MOV   [__r0],0xFF
    0CB0: 80 07    JMP   0x0CB8
    0CB2: 55 25 00 MOV   [__r1],0x0
    0CB5: 55 26 00 MOV   [__r0],0x0
    0CB8: 51 26    MOV   A,[__r0]
    0CBA: 08       PUSH  A
    0CBB: 51 25    MOV   A,[__r1]
    0CBD: 08       PUSH  A
    0CBE: 51 24    MOV   A,[__r2]
    0CC0: 08       PUSH  A
    0CC1: 51 23    MOV   A,[__r3]
    0CC3: 08       PUSH  A
    0CC4: 7C 11 E9 LCALL 0x11E9
    0CC7: 18       POP   A
    0CC8: 53 23    MOV   [__r3],A
    0CCA: 18       POP   A
    0CCB: 53 24    MOV   [__r2],A
    0CCD: 18       POP   A
    0CCE: 53 25    MOV   [__r1],A
    0CD0: 18       POP   A
    0CD1: 08       PUSH  A
    0CD2: 51 25    MOV   A,[__r1]
    0CD4: 08       PUSH  A
    0CD5: 51 24    MOV   A,[__r2]
    0CD7: 08       PUSH  A
    0CD8: 51 23    MOV   A,[__r3]
    0CDA: 08       PUSH  A
    0CDB: 50 3F    MOV   A,0x3F
    0CDD: 08       PUSH  A
    0CDE: 50 4C    MOV   A,0x4C
    0CE0: 08       PUSH  A
    0CE1: 50 CC    MOV   A,0xCC
    0CE3: 08       PUSH  A
    0CE4: 50 CD    MOV   A,0xCD
    0CE6: 08       PUSH  A
    0CE7: 7C 10 57 LCALL 0x1057
    0CEA: 18       POP   A
    0CEB: 53 23    MOV   [__r3],A
    0CED: 18       POP   A
    0CEE: 53 24    MOV   [__r2],A
    0CF0: 18       POP   A
    0CF1: 53 25    MOV   [__r1],A
    0CF3: 18       POP   A
    0CF4: 53 26    MOV   [__r0],A
    0CF6: 38 FC    ADD   SP,0xFC
    0CF8: 50 47    MOV   A,0x47
    0CFA: 08       PUSH  A
    0CFB: 50 00    MOV   A,0x0
    0CFD: 08       PUSH  A
    0CFE: 08       PUSH  A
    0CFF: 08       PUSH  A
    0D00: 51 26    MOV   A,[__r0]
    0D02: 08       PUSH  A
    0D03: 51 25    MOV   A,[__r1]
    0D05: 08       PUSH  A
    0D06: 51 24    MOV   A,[__r2]
    0D08: 08       PUSH  A
    0D09: 51 23    MOV   A,[__r3]
    0D0B: 08       PUSH  A
    0D0C: 7C 10 09 LCALL 0x1009
    0D0F: 38 F8    ADD   SP,0xF8
    0D11: 39 FF    CMP   A,0xFF
    0D13: A0 47    JZ    0x0D5B
    0D15: 50 47    MOV   A,0x47
    0D17: 08       PUSH  A
    0D18: 50 00    MOV   A,0x0
    0D1A: 08       PUSH  A
    0D1B: 08       PUSH  A
    0D1C: 08       PUSH  A
    0D1D: 51 26    MOV   A,[__r0]
    0D1F: 08       PUSH  A
    0D20: 51 25    MOV   A,[__r1]
    0D22: 08       PUSH  A
    0D23: 51 24    MOV   A,[__r2]
    0D25: 08       PUSH  A
    0D26: 51 23    MOV   A,[__r3]
    0D28: 08       PUSH  A
    0D29: 7C 11 7B LCALL 0x117B
    0D2C: 18       POP   A
    0D2D: 53 1F    MOV   [__r7],A
    0D2F: 18       POP   A
    0D30: 53 20    MOV   [__r6],A
    0D32: 18       POP   A
    0D33: 53 21    MOV   [__r5],A
    0D35: 18       POP   A
    0D36: 38 FC    ADD   SP,0xFC
    0D38: 08       PUSH  A
    0D39: 51 21    MOV   A,[__r5]
    0D3B: 08       PUSH  A
    0D3C: 51 20    MOV   A,[__r6]
    0D3E: 08       PUSH  A
    0D3F: 51 1F    MOV   A,[__r7]
    0D41: 08       PUSH  A
    0D42: 7C 0E 12 LCALL 0x0E12
    0D45: 18       POP   A
    0D46: 53 21    MOV   [__r5],A
    0D48: 18       POP   A
    0D49: 53 22    MOV   [__r4],A
    0D4B: 38 FE    ADD   SP,0xFE
    0D4D: 51 21    MOV   A,[__r5]
    0D4F: 01 00    ADD   A,0x0
    0D51: 54 01    MOV   [X+1],A
    0D53: 51 22    MOV   A,[__r4]
    0D55: 09 80    ADC   A,0x80
    0D57: 54 00    MOV   [X+0],A
    0D59: 80 20    JMP   0x0D7A
    0D5B: 51 26    MOV   A,[__r0]
    0D5D: 08       PUSH  A
    0D5E: 51 25    MOV   A,[__r1]
    0D60: 08       PUSH  A
    0D61: 51 24    MOV   A,[__r2]
    0D63: 08       PUSH  A
    0D64: 51 23    MOV   A,[__r3]
    0D66: 08       PUSH  A
    0D67: 7C 0E 12 LCALL 0x0E12
    0D6A: 18       POP   A
    0D6B: 53 25    MOV   [__r1],A
    0D6D: 18       POP   A
    0D6E: 53 26    MOV   [__r0],A
    0D70: 38 FE    ADD   SP,0xFE
    0D72: 51 25    MOV   A,[__r1]
    0D74: 54 01    MOV   [X+1],A
    0D76: 51 26    MOV   A,[__r0]
    0D78: 54 00    MOV   [X+0],A
    0D7A: 52 01    MOV   A,[X+1]
    0D7C: 10       PUSH  X
    0D7D: 7C 03 F0 LCALL _PWM8_VASEN_WritePulseWidth
    0D80: 20       POP   X
(0074) 	PWM8_OIKEA_WritePulseWidth((BYTE)pulse);
    0D81: 52 FC    MOV   A,[X-4]
    0D83: 10       PUSH  X
    0D84: 7C 04 76 LCALL _PWM8_OIKEA_WritePulseWidth
    0D87: 20       POP   X
    0D88: 38 FE    ADD   SP,0xFE
    0D8A: 20       POP   X
    0D8B: 7F       RET   
(0075) }
(0076) 
(0077) 
(0078) //TEST LEFTTURN
(0079) void TestTurnLeft(int pulse)
(0080) {
_TestTurnLeft:
  pulse                --> X-5
    0D8C: 10       PUSH  X
    0D8D: 4F       MOV   X,SP
(0081) 	LEFTC_Data_ADDR &= NOLLAA;
    0D8E: 41 04 F0 AND   REG[0x4],0xF0
(0082) 	LEFTC_Data_ADDR |= 0b00000001;
    0D91: 43 04 01 OR    REG[0x4],0x1
(0083) 	
(0084) 	PWM8_VASEN_WritePulseWidth(0);
    0D94: 10       PUSH  X
    0D95: 50 00    MOV   A,0x0
    0D97: 7C 03 F0 LCALL _PWM8_VASEN_WritePulseWidth
    0D9A: 20       POP   X
(0085) 	PWM8_OIKEA_WritePulseWidth((BYTE)pulse);
    0D9B: 52 FC    MOV   A,[X-4]
    0D9D: 10       PUSH  X
    0D9E: 7C 04 76 LCALL _PWM8_OIKEA_WritePulseWidth
    0DA1: 20       POP   X
    0DA2: 20       POP   X
    0DA3: 7F       RET   
FILE: Z:\AMMATI~2\Koodi\Robor7\ROBOTT~1\ROBOTT~1\ultracontrol.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"
(0003) #include<stdio.h>
(0004) #include<stdlib.h>
(0005) 
(0006) //----------------------------------------------------
(0007)   //PORT0_6 TRIGGER
(0008)   //PORT0_7 ECHO
(0009) //
(0010) 
(0011) //PORT0_4 SERVO PWM
(0012) 
(0013) float distanceToCm = 0.033f;
(0014) 
(0015) //Init PGA AND ADC
(0016) void InitUAServo(void)
(0017) {
(0018) 	PWM8_SERVO_Start();
_InitUAServo:
    0DA4: 10       PUSH  X
    0DA5: 7C 04 28 LCALL _PWM8_SERVO_Start
(0019) 	PWM8_SERVO_WritePulseWidth(15);
    0DA8: 50 0F    MOV   A,0xF
    0DAA: 7C 04 33 LCALL _PWM8_SERVO_WritePulseWidth
    0DAD: 20       POP   X
    0DAE: 7F       RET   
(0020) }
(0021) 
(0022) 
(0023) //Return distance from Ultrasonic sensor in centimeters 
(0024) int getDataUA(void)
(0025) {
(0026) 	/*if(ADCINC_fIsDataAvailable() != 0)
(0027) 	{		
(0028) 		return (int)(ADCINC_iGetData() * distanceToCm);
(0029) 	}
(0030) 	else 
(0031) 		return 0;*/
(0032) 	return 0;
_getDataUA:
    0DAF: 55 25 00 MOV   [__r1],0x0
    0DB2: 55 26 00 MOV   [__r0],0x0
    0DB5: 7F       RET   
(0033) }
(0034) 
(0035) //Sends Trigger pulse
(0036) void ControlTrigger(int *time)
(0037) {		
_ControlTrigger:
  time                 --> X-5
    0DB6: 10       PUSH  X
    0DB7: 4F       MOV   X,SP
(0038) 	//Wait 60ms and send pulse again
(0039) 	if (*time >= 80)
    0DB8: 52 FC    MOV   A,[X-4]
    0DBA: 53 25    MOV   [__r1],A
    0DBC: 3E 25    MVI   A,[__r1]
    0DBE: 53 26    MOV   [__r0],A
    0DC0: 3E 25    MVI   A,[__r1]
    0DC2: 11 50    SUB   A,0x50
    0DC4: 51 26    MOV   A,[__r0]
    0DC6: 31 80    XOR   A,0x80
    0DC8: 19 80    SBB   A,0x80
    0DCA: C0 0B    JC    0x0DD6
(0040) 	{
(0041) 		*time = 0;
    0DCC: 52 FC    MOV   A,[X-4]
    0DCE: 53 25    MOV   [__r1],A
    0DD0: 50 00    MOV   A,0x0
    0DD2: 3F 25    MVI   [__r1],A
    0DD4: 3F 25    MVI   [__r1],A
(0042) 	}
(0043) 	
(0044) 	//Send Trigger Pulse every 1ms 
(0045) 	if (*time <= 1)
    0DD6: 52 FC    MOV   A,[X-4]
    0DD8: 53 25    MOV   [__r1],A
    0DDA: 3E 25    MVI   A,[__r1]
    0DDC: 53 26    MOV   [__r0],A
    0DDE: 3E 25    MVI   A,[__r1]
    0DE0: 53 25    MOV   [__r1],A
    0DE2: 50 01    MOV   A,0x1
    0DE4: 12 25    SUB   A,[__r1]
    0DE6: 51 26    MOV   A,[__r0]
    0DE8: 31 80    XOR   A,0x80
    0DEA: 53 1A    MOV   [__rX],A
    0DEC: 50 80    MOV   A,0x80
    0DEE: 1A 1A    SBB   A,[__rX]
    0DF0: C0 06    JC    0x0DF7
(0046) 	{
(0047) 		UATrig_Data_ADDR |= UATrig_MASK;
    0DF2: 43 00 40 OR    REG[0x0],0x40
(0048) 	}
    0DF5: 80 04    JMP   0x0DFA
(0049) 	else 	
(0050) 		UATrig_Data_ADDR &= ~UATrig_MASK;
    0DF7: 41 00 BF AND   REG[0x0],0xBF
    0DFA: 20       POP   X
    0DFB: 7F       RET   
(0051) 	
(0052) }
(0053) 
(0054) //Control PWM to move sensor
(0055) void ControlServo(int pulse)
(0056) {
_ControlServo:
  pulse                --> X-5
    0DFC: 10       PUSH  X
    0DFD: 4F       MOV   X,SP
(0057) 	PWM8_SERVO_WritePulseWidth((BYTE)pulse);	
    0DFE: 52 FC    MOV   A,[X-4]
    0E00: 10       PUSH  X
    0E01: 7C 04 33 LCALL _PWM8_SERVO_WritePulseWidth
    0E04: 20       POP   X
    0E05: 20       POP   X
    0E06: 7F       RET   
FILE: lib\psocgpioint.asm               (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;;*****************************************************************************
                                        (0004) ;;*****************************************************************************
                                        (0005) ;;  FILENAME: PSoCGPIOINT.asm
                                        (0006) ;;   Version: 2.0.0.20, Updated on 2003/07/17 at 12:10:35
                                        (0007) ;;  @PSOC_VERSION
                                        (0008) ;;
                                        (0009) ;;  DESCRIPTION: PSoC GPIO Interrupt Service Routine
                                        (0010) ;;-----------------------------------------------------------------------------
                                        (0011) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0012) ;;*****************************************************************************
                                        (0013) ;;*****************************************************************************
                                        (0014) 
                                        (0015) include "m8c.inc"
                                        (0016) include "PSoCGPIOINT.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export   PSoC_GPIO_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) ;-----------------------------------------------
                                        (0025) ;  Constant Definitions
                                        (0026) ;-----------------------------------------------
                                        (0027) 
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ; Variable Allocation
                                        (0031) ;-----------------------------------------------
                                        (0032) 	
                                        (0033) 
                                        (0034) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0035) ;---------------------------------------------------
                                        (0036) ; Insert your custom declarations below this banner
                                        (0037) ;---------------------------------------------------
                                        (0038) 
                                        (0039) ;---------------------------------------------------
                                        (0040) ; Insert your custom declarations above this banner
                                        (0041) ;---------------------------------------------------
                                        (0042) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0043) 
                                        (0044) 
                                        (0045) ;-----------------------------------------------------------------------------
                                        (0046) ;  FUNCTION NAME: PSoC_GPIO_ISR
                                        (0047) ;
                                        (0048) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0049) ;
                                        (0050) ;-----------------------------------------------------------------------------
                                        (0051) ;
                                        (0052) PSoC_GPIO_ISR:
                                        (0053) 
                                        (0054) 
                                        (0055)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0056)    ;---------------------------------------------------
                                        (0057)    ; Insert your custom code below this banner
                                        (0058)    ;---------------------------------------------------
0E07: 7D 08 EA LJMP  _PinInterrupt      (0059)    ljmp _PinInterrupt
                                        (0060)    ;---------------------------------------------------
                                        (0061)    ; Insert your custom code above this banner
                                        (0062)    ;---------------------------------------------------
                                        (0063)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0064) 
0E0A: 7E       RETI                     (0065)    reti
                                        (0066) 
                                        (0067) 
                                        (0068) ; end of file PSoCGPIOINT.asm
_itoa:
    1247: 10       PUSH  X
    1248: 4F       MOV   X,SP
    1249: 38 09    ADD   SP,0x9
    124B: 52 FA    MOV   A,[X-6]
    124D: 54 03    MOV   [X+3],A
    124F: 52 F9    MOV   A,[X-7]
    1251: 54 02    MOV   [X+2],A
    1253: 3D F9 00 CMP   [X-7],0x0
    1256: B0 22    JNZ   0x1279
    1258: 3D FA 00 CMP   [X-6],0x0
    125B: B0 1D    JNZ   0x1279
    125D: 52 FC    MOV   A,[X-4]
    125F: 53 25    MOV   [__r1],A
    1261: 50 30    MOV   A,0x30
    1263: 3F 25    MVI   [__r1],A
    1265: 52 FC    MOV   A,[X-4]
    1267: 01 01    ADD   A,0x1
    1269: 53 25    MOV   [__r1],A
    126B: 50 00    MOV   A,0x0
    126D: 3F 25    MVI   [__r1],A
    126F: 52 FC    MOV   A,[X-4]
    1271: 53 25    MOV   [__r1],A
    1273: 52 FB    MOV   A,[X-5]
    1275: 53 26    MOV   [__r0],A
    1277: 81 48    JMP   0x13C0
    1279: 52 FA    MOV   A,[X-6]
    127B: 11 00    SUB   A,0x0
    127D: 52 F9    MOV   A,[X-7]
    127F: 31 80    XOR   A,0x80
    1281: 19 80    SBB   A,0x80
    1283: D0 26    JNC   0x12AA
    1285: 3D F7 00 CMP   [X-9],0x0
    1288: B0 21    JNZ   0x12AA
    128A: 3D F8 0A CMP   [X-8],0xA
    128D: B0 1C    JNZ   0x12AA
    128F: 56 06 01 MOV   [X+6],0x1
    1292: 52 03    MOV   A,[X+3]
    1294: 73       CPL   A
    1295: 53 25    MOV   [__r1],A
    1297: 52 02    MOV   A,[X+2]
    1299: 73       CPL   A
    129A: 53 26    MOV   [__r0],A
    129C: 51 25    MOV   A,[__r1]
    129E: 01 01    ADD   A,0x1
    12A0: 54 03    MOV   [X+3],A
    12A2: 51 26    MOV   A,[__r0]
    12A4: 09 00    ADC   A,0x0
    12A6: 54 02    MOV   [X+2],A
    12A8: 80 04    JMP   0x12AD
    12AA: 56 06 00 MOV   [X+6],0x0
    12AD: 52 FC    MOV   A,[X-4]
    12AF: 54 01    MOV   [X+1],A
    12B1: 52 F7    MOV   A,[X-9]
    12B3: 08       PUSH  A
    12B4: 52 F8    MOV   A,[X-8]
    12B6: 08       PUSH  A
    12B7: 52 02    MOV   A,[X+2]
    12B9: 08       PUSH  A
    12BA: 52 03    MOV   A,[X+3]
    12BC: 08       PUSH  A
    12BD: 7C 0E 0B LCALL 0x0E0B
    12C0: 38 FE    ADD   SP,0xFE
    12C2: 18       POP   A
    12C3: 53 25    MOV   [__r1],A
    12C5: 18       POP   A
    12C6: 53 26    MOV   [__r0],A
    12C8: 51 25    MOV   A,[__r1]
    12CA: 54 08    MOV   [X+8],A
    12CC: 51 26    MOV   A,[__r0]
    12CE: 54 07    MOV   [X+7],A
    12D0: 50 09    MOV   A,0x9
    12D2: 13 08    SUB   A,[X+8]
    12D4: 52 07    MOV   A,[X+7]
    12D6: 31 80    XOR   A,0x80
    12D8: 53 1A    MOV   [__rX],A
    12DA: 50 80    MOV   A,0x80
    12DC: 1A 1A    SBB   A,[__rX]
    12DE: C0 1D    JC    0x12FC
    12E0: 52 01    MOV   A,[X+1]
    12E2: 53 25    MOV   [__r1],A
    12E4: 52 00    MOV   A,[X+0]
    12E6: 53 26    MOV   [__r0],A
    12E8: 51 25    MOV   A,[__r1]
    12EA: 01 01    ADD   A,0x1
    12EC: 54 01    MOV   [X+1],A
    12EE: 51 26    MOV   A,[__r0]
    12F0: 09 00    ADC   A,0x0
    12F2: 54 00    MOV   [X+0],A
    12F4: 52 08    MOV   A,[X+8]
    12F6: 01 30    ADD   A,0x30
    12F8: 3F 25    MVI   [__r1],A
    12FA: 80 1B    JMP   0x1316
    12FC: 52 01    MOV   A,[X+1]
    12FE: 53 25    MOV   [__r1],A
    1300: 52 00    MOV   A,[X+0]
    1302: 53 26    MOV   [__r0],A
    1304: 51 25    MOV   A,[__r1]
    1306: 01 01    ADD   A,0x1
    1308: 54 01    MOV   [X+1],A
    130A: 51 26    MOV   A,[__r0]
    130C: 09 00    ADC   A,0x0
    130E: 54 00    MOV   [X+0],A
    1310: 52 08    MOV   A,[X+8]
    1312: 01 57    ADD   A,0x57
    1314: 3F 25    MVI   [__r1],A
    1316: 52 F7    MOV   A,[X-9]
    1318: 08       PUSH  A
    1319: 52 F8    MOV   A,[X-8]
    131B: 08       PUSH  A
    131C: 52 02    MOV   A,[X+2]
    131E: 08       PUSH  A
    131F: 52 03    MOV   A,[X+3]
    1321: 08       PUSH  A
    1322: 7C 0E 0B LCALL 0x0E0B
    1325: 18       POP   A
    1326: 54 03    MOV   [X+3],A
    1328: 18       POP   A
    1329: 54 02    MOV   [X+2],A
    132B: 38 FE    ADD   SP,0xFE
    132D: 3D 02 00 CMP   [X+2],0x0
    1330: BF 80    JNZ   0x12B1
    1332: 3D 03 00 CMP   [X+3],0x0
    1335: BF 7B    JNZ   0x12B1
    1337: 3D 06 00 CMP   [X+6],0x0
    133A: A0 19    JZ    0x1354
    133C: 52 01    MOV   A,[X+1]
    133E: 53 25    MOV   [__r1],A
    1340: 52 00    MOV   A,[X+0]
    1342: 53 26    MOV   [__r0],A
    1344: 51 25    MOV   A,[__r1]
    1346: 01 01    ADD   A,0x1
    1348: 54 01    MOV   [X+1],A
    134A: 51 26    MOV   A,[__r0]
    134C: 09 00    ADC   A,0x0
    134E: 54 00    MOV   [X+0],A
    1350: 50 2D    MOV   A,0x2D
    1352: 3F 25    MVI   [__r1],A
    1354: 52 01    MOV   A,[X+1]
    1356: 53 25    MOV   [__r1],A
    1358: 52 00    MOV   A,[X+0]
    135A: 53 26    MOV   [__r0],A
    135C: 51 25    MOV   A,[__r1]
    135E: 01 FF    ADD   A,0xFF
    1360: 54 01    MOV   [X+1],A
    1362: 51 26    MOV   A,[__r0]
    1364: 09 FF    ADC   A,0xFF
    1366: 54 00    MOV   [X+0],A
    1368: 50 00    MOV   A,0x0
    136A: 3F 25    MVI   [__r1],A
    136C: 52 FC    MOV   A,[X-4]
    136E: 54 05    MOV   [X+5],A
    1370: 80 3D    JMP   0x13AE
    1372: 52 05    MOV   A,[X+5]
    1374: 53 25    MOV   [__r1],A
    1376: 3E 25    MVI   A,[__r1]
    1378: 54 06    MOV   [X+6],A
    137A: 52 05    MOV   A,[X+5]
    137C: 53 25    MOV   [__r1],A
    137E: 52 04    MOV   A,[X+4]
    1380: 53 26    MOV   [__r0],A
    1382: 51 25    MOV   A,[__r1]
    1384: 01 01    ADD   A,0x1
    1386: 54 05    MOV   [X+5],A
    1388: 51 26    MOV   A,[__r0]
    138A: 09 00    ADC   A,0x0
    138C: 54 04    MOV   [X+4],A
    138E: 52 01    MOV   A,[X+1]
    1390: 53 23    MOV   [__r3],A
    1392: 3E 23    MVI   A,[__r3]
    1394: 3F 25    MVI   [__r1],A
    1396: 52 01    MOV   A,[X+1]
    1398: 53 25    MOV   [__r1],A
    139A: 52 00    MOV   A,[X+0]
    139C: 53 26    MOV   [__r0],A
    139E: 51 25    MOV   A,[__r1]
    13A0: 01 FF    ADD   A,0xFF
    13A2: 54 01    MOV   [X+1],A
    13A4: 51 26    MOV   A,[__r0]
    13A6: 09 FF    ADC   A,0xFF
    13A8: 54 00    MOV   [X+0],A
    13AA: 52 06    MOV   A,[X+6]
    13AC: 3F 25    MVI   [__r1],A
    13AE: 52 01    MOV   A,[X+1]
    13B0: 53 26    MOV   [__r0],A
    13B2: 52 05    MOV   A,[X+5]
    13B4: 3A 26    CMP   A,[__r0]
    13B6: CF BB    JC    0x1372
    13B8: 52 FC    MOV   A,[X-4]
    13BA: 53 25    MOV   [__r1],A
    13BC: 52 FB    MOV   A,[X-5]
    13BE: 53 26    MOV   [__r0],A
    13C0: 38 F7    ADD   SP,0xF7
    13C2: 20       POP   X
    13C3: 7F       RET   
