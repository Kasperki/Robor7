FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C27xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
001C: 7D 10 FC LJMP  PSoC_GPIO_ISR      (0145)     ljmp	PSoC_GPIO_ISR
001F: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 06 0C LJMP  _PWM8_VASEN_ISR    (0149)     ljmp	_PWM8_VASEN_ISR
0023: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0024: 7D 06 4F LJMP  _PWM8_OIKEA_ISR    (0153)     ljmp	_PWM8_OIKEA_ISR
0027: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0157)     // call	void_handler
0028: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 04 12 LJMP  _UART_1_TX_ISR     (0161)     ljmp	_UART_1_TX_ISR
002F: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
0038: 7D 04 13 LJMP  _UART_1_RX_ISR     (0173)     ljmp	_UART_1_RX_ISR
003B: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0181)     // call	void_handler
0060: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0185)     // call	void_handler
0064: 7E       RETI                     (0186)     reti
0068: 71 10    OR    F,0x10             
                                        (0187)     ;---------------------------------------------------
                                        (0188)     ; Insert your custom code above this banner
                                        (0189)     ;---------------------------------------------------
                                        (0190)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0191) 
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  Start of Execution.
                                        (0194) ;-----------------------------------------------------------------------------
                                        (0195) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0196) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0197) ;
                                        (0198) 
                                        (0199) IF	(TOOLCHAIN & HITECH)
                                        (0200)  	AREA PD_startup(CODE, REL, CON)
                                        (0201) ELSE
                                        (0202)     org 68h
                                        (0203) ENDIF
                                        (0204) __Start:
                                        (0205) 
                                        (0206)     ; initialize SMP values for voltage stabilization, if required,
                                        (0207)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0208)     ; least for now. 
                                        (0209)     ;
                                        (0210)     M8C_SetBank1
006A: 62 E3 87 MOV   REG[0xE3],0x87     (0211)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0212)     M8C_SetBank0
                                        (0213) 
                                        (0214) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0215) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0216)     M8C_EnableWatchDog
                                        (0217) ENDIF
                                        (0218) 
                                        (0219) IF ( SELECT_32K )
                                        (0220)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0221) ELSE
0072: 41 FE FB AND   REG[0xFE],0xFB     (0222)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0223) ENDIF
                                        (0224) 
                                        (0225) IF	(TOOLCHAIN & HITECH) 
                                        (0226)     ;---------------------------
                                        (0227)     ; Set up the Temporary stack
                                        (0228)     ;---------------------------
                                        (0229)     ; A temporary stack is set up for the SSC instructions.
                                        (0230)     ; The real stack start will be assigned later.
                                        (0231)     ;
                                        (0232) 	global		__Lstackps
                                        (0233) 	mov     a,low __Lstackps
                                        (0234) 	swap    a,sp
                                        (0235) ELSE
                                        (0236)     ;------------------
                                        (0237)     ; Set up the stack
                                        (0238)     ;------------------
0075: 50 3C    MOV   A,0x3C             (0239)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0240)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0241) ENDIF
                                        (0242) 
                                        (0243)     ;-----------------------------------------------
                                        (0244)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0245)     ;-----------------------------------------------
                                        (0246) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0247) IF ( SUPPLY_VOLTAGE )         ; 1 means 5.0V
                                        (0248)  IF ( AGND_BYPASS )
                                        (0249)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0250)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0251)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0252)     ; value using the proper trim values.
                                        (0253)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0254)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0255)  ENDIF
                                        (0256) ELSE    ; 3.3 V Operation, not 5.0V
                                        (0257)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0258) ENDIF ;(SUPPLY_VOLTAGE)
                                        (0259) 
007B: 55 F8 00 MOV   [buffer+215],0x0   (0260)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
007E: 55 F9 00 MOV   [buffer+216],0x0   (0261)     mov  [bSSC_KEYSP], 0
0081: 71 10    OR    F,0x10             
                                        (0262) 
                                        (0263)     ;---------------------------------------
                                        (0264)     ; Initialize Crystal Oscillator and PLL
                                        (0265)     ;---------------------------------------
                                        (0266) 
                                        (0267) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0268)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0269)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0270)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0271)     ; the ECO to stabilize.
                                        (0272)     ;
                                        (0273)     M8C_SetBank1
                                        (0274)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0275)     M8C_SetBank0
                                        (0276)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0277)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0278)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0279) .WaitFor1s:
                                        (0280)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0281)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0282)                                           ;   since interrupts are not globally enabled
                                        (0283) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0284)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0285)     M8C_SetBank1
0083: 62 E0 02 MOV   REG[0xE0],0x2      (0286)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0086: 70 EF    AND   F,0xEF             
0088: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0287)     M8C_SetBank0
                                        (0288)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0289) 
                                        (0290) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0291) 
                                        (0292) IF ( PLL_MODE )
                                        (0293)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0294)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0295)     ;
                                        (0296)     M8C_SetBank1
                                        (0297)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0298)     M8C_SetBank0
                                        (0299)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0300)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0301) 
                                        (0302) .WaitFor16ms:
                                        (0303)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0304)     jz   .WaitFor16ms
                                        (0305)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0306)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0307)     M8C_SetBank0
                                        (0308) 
                                        (0309) IF      ( WAIT_FOR_32K )
                                        (0310) ELSE ; !( WAIT_FOR_32K )
                                        (0311)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0312)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0313) ENDIF ;(WAIT_FOR_32K)
                                        (0314) ENDIF ;(PLL_MODE)
                                        (0315) 
                                        (0316) 	;-------------------------------------------------------
                                        (0317)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0318)     ;-------------------------------------------------------
                                        (0319) 
                                        (0320)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0321) 
                                        (0322) IF (SYSCLK_SOURCE)
                                        (0323)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0324) ENDIF
                                        (0325)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0326) 
                                        (0327)     ;------------------------
                                        (0328)     ; Close CT leakage path.
                                        (0329)     ;------------------------
008B: 62 71 05 MOV   REG[0x71],0x5      (0330)     mov   reg[ACB00CR0], 05h
008E: 62 75 05 MOV   REG[0x75],0x5      (0331)     mov   reg[ACB01CR0], 05h
0091: 62 79 05 MOV   REG[0x79],0x5      (0332)     mov   reg[ACB02CR0], 05h
0094: 62 7D 05 MOV   REG[0x7D],0x5      (0333)     mov   reg[ACB03CR0], 05h
                                        (0334) 
                                        (0335)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0336)     ;---------------------------------------------------
                                        (0337)     ; Insert your custom code below this banner
                                        (0338)     ;---------------------------------------------------
                                        (0339) 
                                        (0340)     ;---------------------------------------------------
                                        (0341)     ; Insert your custom code above this banner
                                        (0342)     ;---------------------------------------------------
                                        (0343)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0344) 
                                        (0345)     ;-------------------------
                                        (0346)     ; Load Base Configuration
                                        (0347)     ;-------------------------
                                        (0348)     ; Load global parameter settings and load the user modules in the
                                        (0349)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0350)     ; to minimize start up time; (2) We may still need to play with the
                                        (0351)     ; Sleep Timer.
                                        (0352)     ;
0097: 7C 03 A8 LCALL 0x03A8             (0353)     lcall LoadConfigInit
                                        (0354) 
                                        (0355)     ;-----------------------------------
                                        (0356)     ; Initialize C Run-Time Environment
                                        (0357)     ;-----------------------------------
                                        (0358) IF ( C_LANGUAGE_SUPPORT )
009A: 50 00    MOV   A,0x0              (0359)     mov  A,0                           ; clear the 'bss' segment to zero
009C: 55 1A 21 MOV   [__r0],0x21        (0360)     mov  [__r0],<__bss_start
                                        (0361) BssLoop:
009F: 3C 1A 2B CMP   [__r0],0x2B        (0362)     cmp  [__r0],<__bss_end
00A2: A0 05    JZ    0x00A8             (0363)     jz   BssDone
00A4: 3F 1A    MVI   [__r0],A           (0364)     mvi  [__r0],A
00A6: 8F F8    JMP   0x009F             (0365)     jmp  BssLoop
                                        (0366) BssDone:
00A8: 50 02    MOV   A,0x2              (0367)     mov  A,>__idata_start              ; copy idata to data segment
00AA: 57 D3    MOV   X,0xD3             (0368)     mov  X,<__idata_start
00AC: 55 1A 00 MOV   [__r0],0x0         (0369)     mov  [__r0],<__data_start
                                        (0370) IDataLoop:
00AF: 3C 1A 10 CMP   [__r0],0x10        (0371)     cmp  [__r0],<__data_end
00B2: A0 0B    JZ    0x00BE             (0372)     jz   C_RTE_Done
00B4: 08       PUSH  A                  (0373)     push A
00B5: 28       ROMX                     (0374)     romx
00B6: 3F 1A    MVI   [__r0],A           (0375)     mvi  [__r0],A
00B8: 18       POP   A                  (0376)     pop  A
00B9: 75       INC   X                  (0377)     inc  X
00BA: 09 00    ADC   A,0x0              (0378)     adc  A,0
00BC: 8F F2    JMP   0x00AF             (0379)     jmp  IDataLoop
00BE: 71 10    OR    F,0x10             
00C0: 70 EF    AND   F,0xEF             
                                        (0380) 
                                        (0381) C_RTE_Done:
                                        (0382) 
                                        (0383) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0384) 
                                        (0385)     ;-------------------------------
                                        (0386)     ; Voltage Stabilization for SMP
                                        (0387)     ;-------------------------------
                                        (0388) 
                                        (0389) IF ( SUPPLY_VOLTAGE )                  ; 1 Means 5 Volts
                                        (0390) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0391)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0392)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0393)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0394)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0395)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0396)     M8C_SetBank1
                                        (0397)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0398)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0399)     M8C_SetBank0
                                        (0400)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0401)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0402) .WaitFor2ms:
                                        (0403)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0404)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0405) ENDIF ; ( SWITCH_MODE_PUMP ^ 1 )
                                        (0406) ENDIF ; ( SUPPLY_VOLTAGE )
                                        (0407) 
                                        (0408)     ;-------------------------------
                                        (0409)     ; Set Power-On Reset (POR) Level
                                        (0410)     ;-------------------------------
                                        (0411)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0412)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0413)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0414)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0415)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0416) 
                                        (0417)     M8C_SetBank1
                                        (0418) 
                                        (0419) IF ( SUPPLY_VOLTAGE )                       ; 1 Means 5 Volts
                                        (0420)  IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )  ;    Also 24MHz?
                                        (0421)                                             ;       no, set 4.5V POR in user code, if desired
                                        (0422)  ELSE ; 24HMz                               ;
                                        (0423)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0424)  ENDIF ; OSC_CRO_CPU_24MHz
                                        (0425) ENDIF ; 5V
                                        (0426) 
                                        (0427)     M8C_SetBank0
                                        (0428) 
                                        (0429)     ;----------------------------
                                        (0430)     ; Wrap up and invoke "main"
                                        (0431)     ;----------------------------
                                        (0432) 
                                        (0433)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0434)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0435)     ;
00C2: 62 E0 00 MOV   REG[0xE0],0x0      (0436)     mov  reg[INT_MSK0],0
00C5: 71 10    OR    F,0x10             
                                        (0437) 
                                        (0438)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0439)     ;
                                        (0440)     M8C_SetBank1
00C7: 62 E0 00 MOV   REG[0xE0],0x0      (0441)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
00CA: 70 EF    AND   F,0xEF             
                                        (0442)     M8C_SetBank0
                                        (0443) 
                                        (0444)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0445)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0446)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0447)     ;
00CC: 62 E2 00 MOV   REG[0xE2],0x0      (0448)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0449)                                    ; have been set during the boot process.
                                        (0450) IF	(TOOLCHAIN & HITECH)
                                        (0451) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0452) ELSE
                                        (0453) IF ENABLE_LJMP_TO_MAIN
                                        (0454)     ljmp  _main                    ; goto main (no return)
                                        (0455) ELSE
00CF: 7C 09 77 LCALL _main              (0456)     lcall _main                    ; call main
                                        (0457) .Exit:
00D2: 8F FF    JMP   0x00D2             (0458)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0459) ENDIF
                                        (0460) ENDIF ; TOOLCHAIN
                                        (0461) 
                                        (0462)     ;---------------------------------
                                        (0463)     ; Library Access to Global Parms
                                        (0464)     ;---------------------------------
                                        (0465)     ;
                                        (0466)  bGetPowerSetting:
                                        (0467) _bGetPowerSetting:
                                        (0468)     ; Synthesize the "power setting" value used by chips with SlowIMO mode.
                                        (0469)     ; Returns value of POWER_SETTING in the A register.
                                        (0470)     ; No inputs. No Side Effects.
                                        (0471)     ;
                                        (0472) IF ( SUPPLY_VOLTAGE )            ; 1 means 5.0V
00D4: 50 10    MOV   A,0x10             (0473)     mov   A, POWER_SET_5V0_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0474) ELSE        
                                        (0475)     mov   A, POWER_SET_3V3_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0476) ENDIF
00D6: 7F       RET                      (0477)     ret
                                        (0478) 
                                        (0479) IF	(TOOLCHAIN & HITECH)
                                        (0480) ELSE
                                        (0481)     ;---------------------------------
                                        (0482)     ; Order Critical RAM & ROM AREAs
                                        (0483)     ;---------------------------------
                                        (0484)     ;  'TOP' is all that has been defined so far...
                                        (0485) 
                                        (0486)     ;  ROM AREAs for C CONST, static & global items
                                        (0487)     ;
                                        (0488)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0489)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0490) __idata_start:
                                        (0491) 
                                        (0492)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0493) __func_lit_start:
                                        (0494) 
                                        (0495)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0496)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0497) 
                                        (0498)     ; CODE segment for general use
                                        (0499)     ;
                                        (0500)     AREA text (ROM, REL, CON)
                                        (0501) __text_start:
                                        (0502) 
                                        (0503)     ; RAM area usage
                                        (0504)     ;
                                        (0505)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0506) __data_start:
                                        (0507) 
                                        (0508)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0509)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0510)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0511) __bss_start:
                                        (0512) 
                                        (0513) ENDIF ; TOOLCHAIN
                                        (0514) 
                                        (0515) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.2946
02E3: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_robottiprojekti_Bank1
                                        (0019) export LoadConfigTBL_robottiprojekti_Bank0
                                        (0020) export LoadConfigTBL_robottiprojekti_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_robottiprojekti_Bank0:
                                        (0023) ;  Instance name LCD, User Module LCD
                                        (0024) ;  Instance name LED, User Module LED
                                        (0025) ;  Instance name PWM8_OIKEA, User Module PWM8
                                        (0026) ;       Instance name PWM8_OIKEA, Block Name PWM8(DBB01)
                                        (0027) 	db		27h, 00h		;PWM8_OIKEA_CONTROL_REG(DBB01CR0)
                                        (0028) 	db		25h, c7h		;PWM8_OIKEA_PERIOD_REG(DBB01DR1)
                                        (0029) 	db		26h, 00h		;PWM8_OIKEA_COMPARE_REG(DBB01DR2)
                                        (0030) ;  Instance name PWM8_VASEN, User Module PWM8
                                        (0031) ;       Instance name PWM8_VASEN, Block Name PWM8(DBB00)
                                        (0032) 	db		23h, 00h		;PWM8_VASEN_CONTROL_REG(DBB00CR0)
                                        (0033) 	db		21h, c7h		;PWM8_VASEN_PERIOD_REG(DBB00DR1)
                                        (0034) 	db		22h, 00h		;PWM8_VASEN_COMPARE_REG(DBB00DR2)
                                        (0035) ;  Instance name UART_1, User Module UART
                                        (0036) ;       Instance name UART_1, Block Name RX(DCB12)
                                        (0037) 	db		3bh, 00h		;UART_1_RX_CONTROL_REG(DCB12CR0)
                                        (0038) 	db		39h, 00h		;UART_1_(DCB12DR1)
                                        (0039) 	db		3ah, 00h		;UART_1_RX_BUFFER_REG (DCB12DR2)
                                        (0040) ;       Instance name UART_1, Block Name TX(DCB03)
                                        (0041) 	db		2fh, 00h		;UART_1_TX_CONTROL_REG(DCB03CR0)
                                        (0042) 	db		2dh, 00h		;UART_1_TX_BUFFER_REG (DCB03DR1)
                                        (0043) 	db		2eh, 00h		;UART_1_(DCB03DR2)
                                        (0044) ;  Global Register values Bank 0
                                        (0045) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0046) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0047) 	db		63h, 15h		; AnalogReferenceControl register (ARF_CR)
                                        (0048) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0049) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0050) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0051) 	db		d6h, 00h		; I2CConfig register (I2CCFG)
                                        (0052) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0053) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0054) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0055) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0056) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0057) 	db		b5h, 11h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0058) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0059) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0060) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0061) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0062) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0063) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0064) 	db		bdh, 02h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0065) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0066) 	db		ffh
                                        (0067) LoadConfigTBL_robottiprojekti_Bank1:
                                        (0068) ;  Instance name LCD, User Module LCD
                                        (0069) ;  Instance name LED, User Module LED
                                        (0070) ;  Instance name PWM8_OIKEA, User Module PWM8
                                        (0071) ;       Instance name PWM8_OIKEA, Block Name PWM8(DBB01)
                                        (0072) 	db		24h, 29h		;PWM8_OIKEA_FUNC_REG(DBB01FN)
                                        (0073) 	db		25h, 16h		;PWM8_OIKEA_INPUT_REG(DBB01IN)
                                        (0074) 	db		26h, 45h		;PWM8_OIKEA_OUTPUT_REG(DBB01OU)
                                        (0075) ;  Instance name PWM8_VASEN, User Module PWM8
                                        (0076) ;       Instance name PWM8_VASEN, Block Name PWM8(DBB00)
                                        (0077) 	db		20h, 29h		;PWM8_VASEN_FUNC_REG(DBB00FN)
                                        (0078) 	db		21h, 16h		;PWM8_VASEN_INPUT_REG(DBB00IN)
                                        (0079) 	db		22h, 44h		;PWM8_VASEN_OUTPUT_REG(DBB00OU)
                                        (0080) ;  Instance name UART_1, User Module UART
                                        (0081) ;       Instance name UART_1, Block Name RX(DCB12)
                                        (0082) 	db		38h, 05h		;UART_1_RX_FUNC_REG   (DCB12FN)
                                        (0083) 	db		39h, d1h		;UART_1_RX_INPUT_REG  (DCB12IN)
                                        (0084) 	db		3ah, 40h		;UART_1_RX_OUTPUT_REG (DCB12OU)
                                        (0085) ;       Instance name UART_1, Block Name TX(DCB03)
                                        (0086) 	db		2ch, 0dh		;UART_1_TX_FUNC_REG   (DCB03FN)
                                        (0087) 	db		2dh, 01h		;UART_1_TX_INPUT_REG  (DCB03IN)
                                        (0088) 	db		2eh, 40h		;UART_1_TX_OUTPUT_REG (DCB03OU)
                                        (0089) ;  Global Register values Bank 1
                                        (0090) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0091) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0092) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0093) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0094) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0095) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0096) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0097) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0098) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0099) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0100) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0101) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0102) 	db		e1h, 79h		; OscillatorControl_1 register (OSC_CR1)
                                        (0103) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0104) 	db		dfh, 26h		; OscillatorControl_3 register (OSC_CR3)
                                        (0105) 	db		deh, 01h		; OscillatorControl_4 register (OSC_CR4)
                                        (0106) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0107) 	db		ffh
                                        (0108) AREA psoc_config(rom, rel)
                                        (0109) LoadConfigTBL_robottiprojekti_Ordered:
                                        (0110) ;  Ordered Global Register values
                                        (0111) 	M8C_SetBank0
02E5: 62 00 00 MOV   REG[0x0],0x0       (0112) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
02E8: 71 10    OR    F,0x10             
                                        (0113) 	M8C_SetBank1
02EA: 62 00 53 MOV   REG[0x0],0x53      (0114) 	mov	reg[00h], 53h		; Port_0_DriveMode_0 register (PRT0DM0)
02ED: 62 01 AC MOV   REG[0x1],0xAC      (0115) 	mov	reg[01h], ach		; Port_0_DriveMode_1 register (PRT0DM1)
02F0: 70 EF    AND   F,0xEF             
                                        (0116) 	M8C_SetBank0
02F2: 62 03 0C MOV   REG[0x3],0xC       (0117) 	mov	reg[03h], 0ch		; Port_0_DriveMode_2 register (PRT0DM2)
02F5: 62 02 B3 MOV   REG[0x2],0xB3      (0118) 	mov	reg[02h], b3h		; Port_0_GlobalSelect register (PRT0GS)
02F8: 71 10    OR    F,0x10             
                                        (0119) 	M8C_SetBank1
02FA: 62 02 08 MOV   REG[0x2],0x8       (0120) 	mov	reg[02h], 08h		; Port_0_IntCtrl_0 register (PRT0IC0)
02FD: 62 03 00 MOV   REG[0x3],0x0       (0121) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
0300: 70 EF    AND   F,0xEF             
                                        (0122) 	M8C_SetBank0
0302: 62 01 08 MOV   REG[0x1],0x8       (0123) 	mov	reg[01h], 08h		; Port_0_IntEn register (PRT0IE)
0305: 62 04 00 MOV   REG[0x4],0x0       (0124) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
0308: 71 10    OR    F,0x10             
                                        (0125) 	M8C_SetBank1
030A: 62 04 8F MOV   REG[0x4],0x8F      (0126) 	mov	reg[04h], 8fh		; Port_1_DriveMode_0 register (PRT1DM0)
030D: 62 05 50 MOV   REG[0x5],0x50      (0127) 	mov	reg[05h], 50h		; Port_1_DriveMode_1 register (PRT1DM1)
0310: 70 EF    AND   F,0xEF             
                                        (0128) 	M8C_SetBank0
0312: 62 07 50 MOV   REG[0x7],0x50      (0129) 	mov	reg[07h], 50h		; Port_1_DriveMode_2 register (PRT1DM2)
0315: 62 06 00 MOV   REG[0x6],0x0       (0130) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
0318: 71 10    OR    F,0x10             
                                        (0131) 	M8C_SetBank1
031A: 62 06 00 MOV   REG[0x6],0x0       (0132) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
031D: 62 07 20 MOV   REG[0x7],0x20      (0133) 	mov	reg[07h], 20h		; Port_1_IntCtrl_1 register (PRT1IC1)
0320: 70 EF    AND   F,0xEF             
                                        (0134) 	M8C_SetBank0
0322: 62 05 20 MOV   REG[0x5],0x20      (0135) 	mov	reg[05h], 20h		; Port_1_IntEn register (PRT1IE)
0325: 62 08 00 MOV   REG[0x8],0x0       (0136) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0328: 71 10    OR    F,0x10             
                                        (0137) 	M8C_SetBank1
032A: 62 08 7F MOV   REG[0x8],0x7F      (0138) 	mov	reg[08h], 7fh		; Port_2_DriveMode_0 register (PRT2DM0)
032D: 62 09 80 MOV   REG[0x9],0x80      (0139) 	mov	reg[09h], 80h		; Port_2_DriveMode_1 register (PRT2DM1)
0330: 70 EF    AND   F,0xEF             
                                        (0140) 	M8C_SetBank0
0332: 62 0B 80 MOV   REG[0xB],0x80      (0141) 	mov	reg[0bh], 80h		; Port_2_DriveMode_2 register (PRT2DM2)
0335: 62 0A 00 MOV   REG[0xA],0x0       (0142) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
0338: 71 10    OR    F,0x10             
                                        (0143) 	M8C_SetBank1
033A: 62 0A 00 MOV   REG[0xA],0x0       (0144) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
033D: 62 0B 00 MOV   REG[0xB],0x0       (0145) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0340: 70 EF    AND   F,0xEF             
                                        (0146) 	M8C_SetBank0
0342: 62 09 00 MOV   REG[0x9],0x0       (0147) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0345: 62 0C 00 MOV   REG[0xC],0x0       (0148) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0348: 71 10    OR    F,0x10             
                                        (0149) 	M8C_SetBank1
034A: 62 0C 00 MOV   REG[0xC],0x0       (0150) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
034D: 62 0D 00 MOV   REG[0xD],0x0       (0151) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
0350: 70 EF    AND   F,0xEF             
                                        (0152) 	M8C_SetBank0
0352: 62 0F 00 MOV   REG[0xF],0x0       (0153) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
0355: 62 0E 00 MOV   REG[0xE],0x0       (0154) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
0358: 71 10    OR    F,0x10             
                                        (0155) 	M8C_SetBank1
035A: 62 0E 00 MOV   REG[0xE],0x0       (0156) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
035D: 62 0F 00 MOV   REG[0xF],0x0       (0157) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
0360: 70 EF    AND   F,0xEF             
                                        (0158) 	M8C_SetBank0
0362: 62 0D 00 MOV   REG[0xD],0x0       (0159) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
0365: 62 10 00 MOV   REG[0x10],0x0      (0160) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
0368: 71 10    OR    F,0x10             
                                        (0161) 	M8C_SetBank1
036A: 62 10 00 MOV   REG[0x10],0x0      (0162) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
036D: 62 11 00 MOV   REG[0x11],0x0      (0163) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
0370: 70 EF    AND   F,0xEF             
                                        (0164) 	M8C_SetBank0
0372: 62 13 00 MOV   REG[0x13],0x0      (0165) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
0375: 62 12 00 MOV   REG[0x12],0x0      (0166) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
0378: 71 10    OR    F,0x10             
                                        (0167) 	M8C_SetBank1
037A: 62 12 00 MOV   REG[0x12],0x0      (0168) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
037D: 62 13 00 MOV   REG[0x13],0x0      (0169) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
0380: 70 EF    AND   F,0xEF             
                                        (0170) 	M8C_SetBank0
0382: 62 11 00 MOV   REG[0x11],0x0      (0171) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
0385: 62 14 00 MOV   REG[0x14],0x0      (0172) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
0388: 71 10    OR    F,0x10             
                                        (0173) 	M8C_SetBank1
038A: 62 14 00 MOV   REG[0x14],0x0      (0174) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
038D: 62 15 00 MOV   REG[0x15],0x0      (0175) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
0390: 70 EF    AND   F,0xEF             
                                        (0176) 	M8C_SetBank0
0392: 62 17 00 MOV   REG[0x17],0x0      (0177) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
0395: 62 16 00 MOV   REG[0x16],0x0      (0178) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
0398: 71 10    OR    F,0x10             
                                        (0179) 	M8C_SetBank1
039A: 62 16 00 MOV   REG[0x16],0x0      (0180) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
039D: 62 17 00 MOV   REG[0x17],0x0      (0181) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
03A0: 70 EF    AND   F,0xEF             
                                        (0182) 	M8C_SetBank0
03A2: 62 15 00 MOV   REG[0x15],0x0      (0183) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
03A5: 70 EF    AND   F,0xEF             
                                        (0184) 	M8C_SetBank0
03A7: 7F       RET                      (0185) 	ret
                                        (0186) 
                                        (0187) 
                                        (0188) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_robottiprojekti
                                        (0026) export _LoadConfig_robottiprojekti
                                        (0027) export Port_1_Data_SHADE
                                        (0028) export _Port_1_Data_SHADE
                                        (0029) export Port_2_Data_SHADE
                                        (0030) export _Port_2_Data_SHADE
                                        (0031) export Port_2_DriveMode_0_SHADE
                                        (0032) export _Port_2_DriveMode_0_SHADE
                                        (0033) export Port_2_DriveMode_1_SHADE
                                        (0034) export _Port_2_DriveMode_1_SHADE
                                        (0035) 
                                        (0036) 
                                        (0037) export NO_SHADOW
                                        (0038) export _NO_SHADOW
                                        (0039) 
                                        (0040) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0041) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0042) 
                                        (0043) AREA psoc_config(rom, rel)
                                        (0044) 
                                        (0045) ;---------------------------------------------------------------------------
                                        (0046) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0047) ;                  parameters handled by boot code, like CPU speed). This
                                        (0048) ;                  function can be called from user code, but typically it
                                        (0049) ;                  is only called from boot.
                                        (0050) ;
                                        (0051) ;       INPUTS: None.
                                        (0052) ;      RETURNS: Nothing.
                                        (0053) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0054) ;               In the large memory model currently only the page
                                        (0055) ;               pointer registers listed below are modified.  This does
                                        (0056) ;               not guarantee that in future implementations of this
                                        (0057) ;               function other page pointer registers will not be
                                        (0058) ;               modified.
                                        (0059) ;          
                                        (0060) ;               Page Pointer Registers Modified: 
                                        (0061) ;               CUR_PP
                                        (0062) ;
                                        (0063) _LoadConfigInit:
                                        (0064)  LoadConfigInit:
                                        (0065)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0066)     
03A8: 55 1D 00 MOV   [0x1D],0x0         (0067) 	mov		[Port_1_Data_SHADE], 0h
03AB: 55 1E 00 MOV   [0x1E],0x0         (0068) 	mov		[Port_2_Data_SHADE], 0h
03AE: 55 1F 7F MOV   [0x1F],0x7F        (0069) 	mov		[Port_2_DriveMode_0_SHADE], 7fh
03B1: 55 20 80 MOV   [0x20],0x80        (0070) 	mov		[Port_2_DriveMode_1_SHADE], 80h
                                        (0071) 
03B4: 7C 03 BB LCALL 0x03BB             (0072) 	lcall	LoadConfig_robottiprojekti
03B7: 7C 02 E3 LCALL 0x02E3             (0073) 	lcall	LoadConfigTBL_robottiprojekti_Ordered
                                        (0074) 
                                        (0075) 
                                        (0076)     RAM_EPILOGUE RAM_USE_CLASS_4
03BA: 7F       RET                      (0077)     ret
                                        (0078) 
                                        (0079) ;---------------------------------------------------------------------------
                                        (0080) ; Load Configuration robottiprojekti
                                        (0081) ;
                                        (0082) ;    Load configuration registers for robottiprojekti.
                                        (0083) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0084) ;
                                        (0085) ;       INPUTS: None.
                                        (0086) ;      RETURNS: Nothing.
                                        (0087) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0088) ;               modified as may the Page Pointer registers!
                                        (0089) ;               In the large memory model currently only the page
                                        (0090) ;               pointer registers listed below are modified.  This does
                                        (0091) ;               not guarantee that in future implementations of this
                                        (0092) ;               function other page pointer registers will not be
                                        (0093) ;               modified.
                                        (0094) ;          
                                        (0095) ;               Page Pointer Registers Modified: 
                                        (0096) ;               CUR_PP
                                        (0097) ;
                                        (0098) _LoadConfig_robottiprojekti:
                                        (0099)  LoadConfig_robottiprojekti:
                                        (0100)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0101) 
03BB: 10       PUSH  X                  (0102) 	push	x
03BC: 70 EF    AND   F,0xEF             
                                        (0103)     M8C_SetBank0                    ; Force bank 0
03BE: 50 00    MOV   A,0x0              (0104)     mov     a, 0                    ; Specify bank 0
03C0: 67       ASR   A                  (0105)     asr     a                       ; Store in carry flag
                                        (0106)                                     ; Load bank 0 table:
03C1: 50 01    MOV   A,0x1              (0107)     mov     A, >LoadConfigTBL_robottiprojekti_Bank0
03C3: 57 54    MOV   X,0x54             (0108)     mov     X, <LoadConfigTBL_robottiprojekti_Bank0
03C5: 7C 03 D6 LCALL 0x03D6             (0109)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0110) 
03C8: 50 01    MOV   A,0x1              (0111)     mov     a, 1                    ; Specify bank 1
03CA: 67       ASR   A                  (0112)     asr     a                       ; Store in carry flag
                                        (0113)                                     ; Load bank 1 table:
03CB: 50 01    MOV   A,0x1              (0114)     mov     A, >LoadConfigTBL_robottiprojekti_Bank1
03CD: 57 97    MOV   X,0x97             (0115)     mov     X, <LoadConfigTBL_robottiprojekti_Bank1
03CF: 7C 03 D6 LCALL 0x03D6             (0116)     lcall   LoadConfig              ; Load the bank 1 values
03D2: 70 EF    AND   F,0xEF             
                                        (0117) 
                                        (0118)     M8C_SetBank0                    ; Force return to bank 0
03D4: 20       POP   X                  (0119) 	pop		x
                                        (0120) 
                                        (0121)     RAM_EPILOGUE RAM_USE_CLASS_4
03D5: 7F       RET                      (0122)     ret
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) 
                                        (0127) ;---------------------------------------------------------------------------
                                        (0128) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0129) ;              pairs. Terminate on address=0xFF.
                                        (0130) ;
                                        (0131) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0132) ;           Flag Register Carry bit encodes the Register Bank
                                        (0133) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0134) ;
                                        (0135) ;  RETURNS: nothing.
                                        (0136) ;
                                        (0137) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0138) ;                X-3 Temporary store for register address
                                        (0139) ;                X-2 LSB of config table address
                                        (0140) ;                X-1 MSB of config table address
                                        (0141) ;
                                        (0142) LoadConfig:
                                        (0143)     RAM_PROLOGUE RAM_USE_CLASS_2
03D6: 38 02    ADD   SP,0x2             (0144)     add     SP, 2                   ; Set up local vars
03D8: 10       PUSH  X                  (0145)     push    X                       ; Save config table address on stack
03D9: 08       PUSH  A                  (0146)     push    A
03DA: 4F       MOV   X,SP               (0147)     mov     X, SP
03DB: 56 FC 00 MOV   [X-4],0x0          (0148)     mov     [X-4], 0                ; Set default Destination to Bank 0
03DE: D0 04    JNC   0x03E3             (0149)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
03E0: 56 FC 01 MOV   [X-4],0x1          (0150)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0151) .BankSelectSaved:
03E3: 18       POP   A                  (0152)     pop     A
03E4: 20       POP   X                  (0153)     pop     X
03E5: 70 EF    AND   F,0xEF             
03E7: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0154) 
                                        (0155) LoadConfigLp:
                                        (0156)     M8C_SetBank0                    ; Switch to bank 0
                                        (0157)     M8C_ClearWDT                    ; Clear the watchdog for long inits
03EA: 10       PUSH  X                  (0158)     push    X                       ; Preserve the config table address
03EB: 08       PUSH  A                  (0159)     push    A
03EC: 28       ROMX                     (0160)     romx                            ; Load register address from table
03ED: 39 FF    CMP   A,0xFF             (0161)     cmp     A, END_CONFIG_TABLE     ; End of table?
03EF: A0 1F    JZ    0x040F             (0162)     jz      EndLoadConfig           ;   Yes, go wrap it up
03F1: 4F       MOV   X,SP               (0163)     mov     X, SP                   ;
03F2: 48 FC 01 TST   [X-4],0x1          (0164)     tst     [X-4], 1                ; Loading IO Bank 1?
03F5: A0 03    JZ    0x03F9             (0165)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
03F7: 71 10    OR    F,0x10             
                                        (0166)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0167) .IOBankNowSet:
03F9: 54 FD    MOV   [X-3],A            (0168)     mov     [X-3], A                ; Stash the register address
03FB: 18       POP   A                  (0169)     pop     A                       ; Retrieve the table address
03FC: 20       POP   X                  (0170)     pop     X
03FD: 75       INC   X                  (0171)     inc     X                       ; Advance to the data byte
03FE: 09 00    ADC   A,0x0              (0172)     adc     A, 0
0400: 10       PUSH  X                  (0173)     push    X                       ; Save the config table address again
0401: 08       PUSH  A                  (0174)     push    A
0402: 28       ROMX                     (0175)     romx                            ; load config data from the table
0403: 4F       MOV   X,SP               (0176)     mov     X, SP                   ; retrieve the register address
0404: 59 FD    MOV   X,[X-3]            (0177)     mov     X, [X-3]
0406: 61 00    MOV   REG[X+0x0],A       (0178)     mov     reg[X], A               ; Configure the register
0408: 18       POP   A                  (0179)     pop     A                       ; retrieve the table address
0409: 20       POP   X                  (0180)     pop     X
040A: 75       INC   X                  (0181)     inc     X                       ; advance to next table entry
040B: 09 00    ADC   A,0x0              (0182)     adc     A, 0
040D: 8F D7    JMP   0x03E5             (0183)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0184) EndLoadConfig:
040F: 38 FC    ADD   SP,0xFC            (0185)     add     SP, -4
                                        (0186)     RAM_EPILOGUE RAM_USE_CLASS_2
0411: 7F       RET                      (0187)     ret
                                        (0188) 
                                        (0189) AREA InterruptRAM(ram, rel)
                                        (0190) 
                                        (0191) NO_SHADOW:
                                        (0192) _NO_SHADOW:
                                        (0193) ; write only register shadows
                                        (0194) _Port_1_Data_SHADE:
                                        (0195) Port_1_Data_SHADE:	BLK	1
                                        (0196) _Port_2_Data_SHADE:
                                        (0197) Port_2_Data_SHADE:	BLK	1
                                        (0198) _Port_2_DriveMode_0_SHADE:
                                        (0199) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0200) _Port_2_DriveMode_1_SHADE:
                                        (0201) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0202) 
FILE: lib\uart_1int.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   UART_1INT.asm
                                        (0004) ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) 
                                        (0014) include "UART_1.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "m8c.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _UART_1_TX_ISR
                                        (0022) export  _UART_1_RX_ISR
                                        (0023) 
                                        (0024) IF (UART_1_RXBUF_ENABLE)
                                        (0025) export  UART_1_aRxBuffer
                                        (0026) export _UART_1_aRxBuffer
                                        (0027) export  UART_1_bRxCnt
                                        (0028) export _UART_1_bRxCnt
                                        (0029) export  UART_1_fStatus
                                        (0030) export _UART_1_fStatus
                                        (0031) ENDIF
                                        (0032) 
                                        (0033) 
                                        (0034) ;-----------------------------------------------
                                        (0035) ; Variable Allocation
                                        (0036) ;-----------------------------------------------
                                        (0037) AREA InterruptRAM (RAM, REL, CON)
                                        (0038) 
                                        (0039) IF (UART_1_RXBUF_ENABLE)
                                        (0040)  UART_1_fStatus:
                                        (0041) _UART_1_fStatus:      BLK  1
                                        (0042)  UART_1_bRxCnt:
                                        (0043) _UART_1_bRxCnt:       BLK  1
                                        (0044) AREA UART_1_RAM (RAM, REL, CON)
                                        (0045)  UART_1_aRxBuffer:
                                        (0046) _UART_1_aRxBuffer:    BLK UART_1_RX_BUFFER_SIZE
                                        (0047) ENDIF
                                        (0048) 
                                        (0049) AREA InterruptRAM (RAM, REL, CON)
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _UART_1_TX_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;     UART TX interrupt handler for instance UART_1.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _UART_1_TX_ISR:
                                        (0090)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert your custom assembly code below this banner
                                        (0093)    ;---------------------------------------------------
                                        (0094)    ;   NOTE: interrupt service routines must preserve
                                        (0095)    ;   the values of the A and X CPU registers.
                                        (0096)    
                                        (0097)    ;---------------------------------------------------
                                        (0098)    ; Insert your custom assembly code above this banner
                                        (0099)    ;---------------------------------------------------
                                        (0100)    
                                        (0101)    ;---------------------------------------------------
                                        (0102)    ; Insert a lcall to a C function below this banner
                                        (0103)    ; and un-comment the lines between these banners
                                        (0104)    ;---------------------------------------------------
                                        (0105)    
                                        (0106)    ;PRESERVE_CPU_CONTEXT
                                        (0107)    ;lcall _My_C_Function
                                        (0108)    ;RESTORE_CPU_CONTEXT
                                        (0109)    
                                        (0110)    ;---------------------------------------------------
                                        (0111)    ; Insert a lcall to a C function above this banner
                                        (0112)    ; and un-comment the lines between these banners
                                        (0113)    ;---------------------------------------------------
                                        (0114)    ;@PSoC_UserCode_END@ (Do not change this line.)
0412: 7E       RETI                     (0115)    reti
                                        (0116) 
                                        (0117) 
                                        (0118) ;-----------------------------------------------------------------------------
                                        (0119) ;  FUNCTION NAME: _UART_1_RX_ISR
                                        (0120) ;
                                        (0121) ;  DESCRIPTION:
                                        (0122) ;     UART RX interrupt handler for instance UART_1.
                                        (0123) ;     This ISR handles the background processing of received characters if
                                        (0124) ;     the buffer is enabled.
                                        (0125) ;
                                        (0126) ;
                                        (0127) ;  The following assumes that the RX buffer feature has been enabled.
                                        (0128) ;
                                        (0129) ;  SIDE EFFECTS:
                                        (0130) ;     There are 3 posible errors that may occur with the serial port.
                                        (0131) ;      1) Parity Error
                                        (0132) ;      2) Framing Error
                                        (0133) ;      3) OverRun Error
                                        (0134) ;
                                        (0135) ;  This user module check for parity and framing error.  If either of these
                                        (0136) ;  two errors are detected, the data is read and ignored.  When an overRun
                                        (0137) ;  error occurs, the last byte was lost, but the current byte is valid.  For
                                        (0138) ;  this reason this error is ignored at this time.  Code could be added to
                                        (0139) ;  this ISR to set a flag if an error condition occurs.
                                        (0140) ;
                                        (0141) ;  THEORY of OPERATION:
                                        (0142) ;     When using the RX buffer feature, the ISR collects received characters
                                        (0143) ;     in a buffer until the user defined command terminator is detected.  After
                                        (0144) ;     the command terminator is detected, the command bit is set and all other
                                        (0145) ;     characters will be ignored until the command bit is reset.  Up to
                                        (0146) ;     buffer_size - 1 characters will be collected waiting for a command
                                        (0147) ;     terminator.  After that, the characters will be discarded, although
                                        (0148) ;     a command determinator will still cause the command bit to be set.
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) _UART_1_RX_ISR:
                                        (0152) 
                                        (0153)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0154)    ;---------------------------------------------------
                                        (0155)    ; Insert your custom assembly code below this banner
                                        (0156)    ;---------------------------------------------------
                                        (0157)    ;   NOTE: interrupt service routines must preserve
                                        (0158)    ;   the values of the A and X CPU registers.
                                        (0159)    
                                        (0160)    ;---------------------------------------------------
                                        (0161)    ; Insert your custom assembly code above this banner
                                        (0162)    ;---------------------------------------------------
                                        (0163)    
                                        (0164)    ;---------------------------------------------------
                                        (0165)    ; Insert a lcall to a C function below this banner
                                        (0166)    ; and un-comment the lines between these banners
                                        (0167)    ;---------------------------------------------------
                                        (0168)    
                                        (0169)    ;PRESERVE_CPU_CONTEXT
                                        (0170)    ;lcall _My_C_Function
                                        (0171)    ;RESTORE_CPU_CONTEXT
                                        (0172)    
                                        (0173)    ;---------------------------------------------------
                                        (0174)    ; Insert a lcall to a C function above this banner
                                        (0175)    ; and un-comment the lines between these banners
                                        (0176)    ;---------------------------------------------------
                                        (0177)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0178) 
                                        (0179) IF (UART_1_RXBUF_ENABLE)
0413: 08       PUSH  A                  (0180)    push A
0414: 10       PUSH  X                  (0181)    push X
                                        (0182)    
                                        (0183)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0184)       REG_PRESERVE IDX_PP
                                        (0185)    ENDIF
                                        (0186)    
0415: 58 1C    MOV   X,[0x1C]           (0187)    mov  X,[UART_1_bRxCnt]                                  ; Load X with byte counter
0417: 5D 3B    MOV   A,REG[0x3B]        (0188)    mov  A,REG[UART_1_RX_CONTROL_REG]                       ; Read the control register
0419: 08       PUSH  A                  (0189)    push A                                                  ; Store copy for later test
                                        (0190)                                                            ; IF real RX interrupt
041A: 21 08    AND   A,0x8              (0191)    and  A,UART_1_RX_REG_FULL                               ; Did really really get an IRQ
041C: B0 04    JNZ   0x0421             (0192)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
041E: 18       POP   A                  (0193)    pop  A                                                  ; Restore stack
041F: 80 40    JMP   0x0460             (0194)    jmp  .RESTORE_IDX_PP
                                        (0195) 
                                        (0196) .UARTRX_ReadRx:
0421: 18       POP   A                  (0197)    pop  A                                                  ; Restore status flags
                                        (0198)                                                            ; IF there is no error, get data
                                        (0199)                                                            ; Check for parity or framing error
0422: 21 E0    AND   A,0xE0             (0200)    and  A,UART_1_RX_ERROR
0424: A0 12    JZ    0x0437             (0201)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                        (0202) 
0426: 2C 1B    OR    [0x1B],A           (0203)    or   [UART_1_fStatus],A                                 ; Set error flags (parity,framing,overrun) bits
0428: 49 3A 00 TST   REG[0x3A],0x0      (0204)    tst  REG[UART_1_RX_BUFFER_REG], 0x00                    ; Read the data buffer to clear it.
042B: 21 20    AND   A,0x20             (0205)    and  A,UART_1_RX_FRAMING_ERROR                          ; Check for framing error special case
042D: A0 32    JZ    0x0460             (0206)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                        (0207) 
                                        (0208)                                                            ; Disable and re-enable RX to reset after
                                        (0209)                                                            ; framing error.
042F: 41 3B FE AND   REG[0x3B],0xFE     (0210)    and   REG[UART_1_RX_CONTROL_REG], ~UART_1_RX_ENABLE     ; Disable RX
0432: 43 3B 01 OR    REG[0x3B],0x1      (0211)    or    REG[UART_1_RX_CONTROL_REG],  UART_1_RX_ENABLE     ; Enable RX
0435: 80 2A    JMP   0x0460             (0212)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                        (0213) 
                                        (0214) 
                                        (0215) .UARTRX_NO_ERROR:
0437: 5D 3A    MOV   A,REG[0x3A]        (0216)    mov  A,REG[UART_1_RX_BUFFER_REG ]                       ; Read the data buffer
                                        (0217) 
                                        (0218)                                                            ; IF buffer not full
0439: 47 1B 01 TST   [0x1B],0x1         (0219)    tst  [UART_1_fStatus],UART_1_RX_BUF_CMDTERM             ; Check for buffer full
043C: B0 23    JNZ   0x0460             (0220)    jnz  .RESTORE_IDX_PP                                    ; All done
                                        (0221) 
043E: 39 0D    CMP   A,0xD              (0222)    cmp  A,UART_1_CMD_TERM                                  ; Check for End of command
0440: B0 09    JNZ   0x044A             (0223)    jnz  .UARTRX_CHK_BACKSPACE
0442: 2E 1B 01 OR    [0x1B],0x1         (0224)    or   [UART_1_fStatus],UART_1_RX_BUF_CMDTERM             ; Set command ready bit
                                        (0225) 
                                        (0226) 
                                        (0227) 
                                        (0228)    RAM_SETPAGE_IDX >UART_1_aRxBuffer
                                        (0229)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0445: 56 2B 00 MOV   [X+43],0x0         (0230)    mov  [X + UART_1_aRxBuffer],00h                         ; Zero out last data
                                        (0231)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
0448: 80 17    JMP   0x0460             (0232)    jmp  .RESTORE_IDX_PP
                                        (0233) 
                                        (0234) .UARTRX_CHK_BACKSPACE:                                     ; 
                                        (0235) IF(UART_1_BACKSPACE_ENABLE)                                ; Enable if backspace/delete mode
                                        (0236)    cmp  A,UART_1_BACKSPACE_ENABLE                          ; Check for backspace character
                                        (0237)    jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
                                        (0238)    cmp  [UART_1_bRxCnt],00h                                ; Check if buffer empty
                                        (0239)    jz   .RESTORE_IDX_PP                                    ; 
                                        (0240)    dec  [UART_1_bRxCnt]                                    ; Decrement buffer count by one.
                                        (0241)    jmp  .RESTORE_IDX_PP
                                        (0242) ENDIF                                                      ; 
                                        (0243) 
                                        (0244) .UARTRX_IGNORE:
                                        (0245) IF(UART_1_RX_IGNORE_BELOW)                                 ; Ignore charaters below this value
044A: 39 20    CMP   A,0x20             (0246)    cmp  A,UART_1_RX_IGNORE_BELOW                           ; If ignore char is set to 0x00, do not
044C: C0 13    JC    0x0460             (0247)    jc   .RESTORE_IDX_PP                                    ; ignore any characters.
                                        (0248) ENDIF
                                        (0249) 
                                        (0250) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                        (0251) 	
                                        (0252)    RAM_SETPAGE_IDX >UART_1_aRxBuffer                       ;   using idexed address mode
044E: 3C 1C 0F CMP   [0x1C],0xF         (0253)    cmp  [UART_1_bRxCnt],(UART_1_RX_BUFFER_SIZE - 1)
0451: C0 09    JC    0x045B             (0254)    jc   .UARTRX_ISR_GETDATA
                                        (0255)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0453: 56 2B 00 MOV   [X+43],0x0         (0256)    mov  [X + UART_1_aRxBuffer],00h                         ; Zero out last data in the buffer
                                        (0257)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
0456: 2E 1B 10 OR    [0x1B],0x10        (0258)    or   [UART_1_fStatus],UART_1_RX_BUF_OVERRUN             ; Set error flags (parity,framing,overrun) bits
0459: 80 06    JMP   0x0460             (0259)    jmp  .RESTORE_IDX_PP
                                        (0260) 
                                        (0261) .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of command
                                        (0262)                                                            ; X is already loaded with pointer
                                        (0263)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
045B: 54 2B    MOV   [X+43],A           (0264)    mov  [X+UART_1_aRxBuffer],A                             ; store data in array
                                        (0265)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
045D: 75       INC   X                  (0266)    inc  X                                                  ; Inc the pointer
045E: 5A 1C    MOV   [0x1C],X           (0267)    mov  [UART_1_bRxCnt],X                                  ; Restore the pointer
                                        (0268)                                                            ; ENDIF max string size
                                        (0269) .RESTORE_IDX_PP:
                                        (0270)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0271)       REG_RESTORE IDX_PP
                                        (0272)    ENDIF
                                        (0273) 
                                        (0274) .END_UARTRX_ISR:
0460: 20       POP   X                  (0275)    pop  X
0461: 18       POP   A                  (0276)    pop  A
                                        (0277) 
                                        (0278) ENDIF
                                        (0279) 
                                        (0280) UART_1_RX_ISR_END:
0462: 7E       RETI                     (0281)    reti
                                        (0282) 
                                        (0283) ; end of file UART_1INT.asm
                                        (0284) 
FILE: lib\uart_1.asm                    (0001) ;;*****************************************************************************
0463: 43 E1 08 OR    REG[0xE1],0x8      (0002) ;;*****************************************************************************
0466: 43 E1 40 OR    REG[0xE1],0x40     
                                        (0003) ;;  Filename:   UART_1.asm
                                        (0004) ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                        (0008) ;;                22/24/25/26/27xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "UART_1.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name refence for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  UART_1_SetTxIntMode
                                        (0041) export _UART_1_SetTxIntMode
                                        (0042) export  UART_1_EnableInt
                                        (0043) export _UART_1_EnableInt
                                        (0044) export  UART_1_DisableInt
                                        (0045) export _UART_1_DisableInt
                                        (0046) 
                                        (0047) export  UART_1_Start
                                        (0048) export _UART_1_Start
                                        (0049) export  UART_1_Stop
                                        (0050) export _UART_1_Stop
                                        (0051) export  UART_1_SendData
                                        (0052) export _UART_1_SendData
                                        (0053) export  UART_1_bReadTxStatus
                                        (0054) export _UART_1_bReadTxStatus
                                        (0055) export  UART_1_bReadRxData
                                        (0056) export _UART_1_bReadRxData
                                        (0057) export  UART_1_bReadRxStatus
                                        (0058) export _UART_1_bReadRxStatus
                                        (0059) 
                                        (0060) export  UART_1_IntCntl
                                        (0061) export _UART_1_IntCntl
                                        (0062) 
                                        (0063) export  UART_1_TxIntMode
                                        (0064) export _UART_1_TxIntMode
                                        (0065) 
                                        (0066) export  UART_1_PutSHexByte
                                        (0067) export _UART_1_PutSHexByte
                                        (0068) export  UART_1_PutSHexInt
                                        (0069) export _UART_1_PutSHexInt
                                        (0070) 
                                        (0071) export  UART_1_CPutString
                                        (0072) export _UART_1_CPutString
                                        (0073) export  UART_1_PutString
                                        (0074) export _UART_1_PutString
                                        (0075) export  UART_1_PutChar
                                        (0076) export _UART_1_PutChar
                                        (0077) export  UART_1_Write
                                        (0078) export _UART_1_Write
                                        (0079) export  UART_1_CWrite
                                        (0080) export _UART_1_CWrite
                                        (0081) 
                                        (0082) export  UART_1_cGetChar
                                        (0083) export _UART_1_cGetChar
                                        (0084) export  UART_1_cReadChar
                                        (0085) export _UART_1_cReadChar
                                        (0086) export  UART_1_iReadChar
                                        (0087) export _UART_1_iReadChar
                                        (0088) export  UART_1_PutCRLF
                                        (0089) export _UART_1_PutCRLF
                                        (0090) 
                                        (0091) IF (UART_1_RXBUF_ENABLE)
                                        (0092) export  UART_1_CmdReset
                                        (0093) export _UART_1_CmdReset
                                        (0094) export  UART_1_bCmdCheck
                                        (0095) export _UART_1_bCmdCheck
                                        (0096) export  UART_1_bCmdLength
                                        (0097) export _UART_1_bCmdLength
                                        (0098) export  UART_1_bErrCheck
                                        (0099) export _UART_1_bErrCheck
                                        (0100) 
                                        (0101) export  UART_1_szGetParam
                                        (0102) export _UART_1_szGetParam
                                        (0103) export  UART_1_szGetRestOfParams
                                        (0104) export _UART_1_szGetRestOfParams
                                        (0105) ENDIF
                                        (0106) 
                                        (0107) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0108) ; WARNING WARNING WARNING
                                        (0109) ; The following exports are for backwards compatibility only and should
                                        (0110) ; not be used for new designs. They may be eliminated in a future release.
                                        (0111) ; Their status is "NO FURTHER MAINTENANCE". 
                                        (0112) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0113) export  bUART_1_ReadTxStatus
                                        (0114) export _bUART_1_ReadTxStatus
                                        (0115) export  bUART_1_ReadRxData
                                        (0116) export _bUART_1_ReadRxData
                                        (0117) export  bUART_1_ReadRxStatus
                                        (0118) export _bUART_1_ReadRxStatus
                                        (0119) 	
                                        (0120) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0121) ;             END WARNING
                                        (0122) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0123) 
                                        (0124) ;-----------------------------------------------
                                        (0125) ; Variable Allocation
                                        (0126) ;-----------------------------------------------
                                        (0127) IF (UART_1_RXBUF_ENABLE)
                                        (0128)     
                                        (0129) area UART_1_RAM (RAM, REL, CON)
                                        (0130)     
                                        (0131)  ptrParam:   BLK  1
                                        (0132) 
                                        (0133) ENDIF
                                        (0134) 
                                        (0135) area text (ROM,REL)
                                        (0136) 
                                        (0137) ;-----------------------------------------------
                                        (0138) ;  EQUATES
                                        (0139) ;-----------------------------------------------
                                        (0140) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                        (0141) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                        (0142) 
                                        (0143) area UserModules (ROM, REL, CON)
                                        (0144) 
                                        (0145) ;=============================================================================
                                        (0146) ;=============================================================================
                                        (0147) ;
                                        (0148) ;     Low-Level Commands
                                        (0149) ;
                                        (0150) ;=============================================================================
                                        (0151) ;=============================================================================
                                        (0152) 
                                        (0153) .SECTION
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  FUNCTION NAME: UART_1_EnableInt
                                        (0156) ;
                                        (0157) ;  DESCRIPTION:
                                        (0158) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                        (0159) ;     bit associated with this User Module. Remember to call the global
                                        (0160) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0161) ;-----------------------------------------------------------------------------
                                        (0162) ;
                                        (0163) ;  ARGUMENTS:
                                        (0164) ;     none.
                                        (0165) ;
                                        (0166) ;  RETURNS:
                                        (0167) ;     none.
                                        (0168) ;
                                        (0169) ;  SIDE EFFECTS:
                                        (0170) ;    The A and X registers may be modified by this or future implementations
                                        (0171) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0172) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0173) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0174) ;    functions.
                                        (0175) ;
                                        (0176)  UART_1_EnableInt:
                                        (0177) _UART_1_EnableInt:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0179)    M8C_EnableIntMask UART_1_TX_INT_REG, UART_1_TX_INT_MASK
                                        (0180)    M8C_EnableIntMask UART_1_RX_INT_REG, UART_1_RX_INT_MASK
                                        (0181)    RAM_EPILOGUE RAM_USE_CLASS_1
0469: 7F       RET                      (0182)    ret
046A: 41 E1 F7 AND   REG[0xE1],0xF7     
046D: 41 E1 BF AND   REG[0xE1],0xBF     
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185)     
                                        (0186) .SECTION
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;  FUNCTION NAME: UART_1_DisableInt
                                        (0189) ;
                                        (0190) ;  DESCRIPTION:
                                        (0191) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                        (0192) ;     associated with this User Module.
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;
                                        (0195) ;  ARGUMENTS:
                                        (0196) ;     none.
                                        (0197) ;
                                        (0198) ;  RETURNS:
                                        (0199) ;     none.
                                        (0200) ;
                                        (0201) ;  SIDE EFFECTS:
                                        (0202) ;    The A and X registers may be modified by this or future implementations
                                        (0203) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0204) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0205) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0206) ;    functions.
                                        (0207) ;
                                        (0208)  UART_1_DisableInt:
                                        (0209) _UART_1_DisableInt:
                                        (0210)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0211)    M8C_DisableIntMask UART_1_TX_INT_REG, UART_1_TX_INT_MASK
                                        (0212)    M8C_DisableIntMask UART_1_RX_INT_REG, UART_1_RX_INT_MASK
                                        (0213)    RAM_EPILOGUE RAM_USE_CLASS_1
0470: 7F       RET                      (0214)    ret
0471: 71 10    OR    F,0x10             
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) 
                                        (0218) .SECTION
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;  FUNCTION NAME: UART_1_SetTxIntMode(BYTE bTxIntMode)
                                        (0221) ;
                                        (0222) ;  DESCRIPTION:
                                        (0223) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;
                                        (0226) ;  ARGUMENTS:
                                        (0227) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                        (0228) ;        Passed in the A register
                                        (0229) ;
                                        (0230) ;  RETURNS:
                                        (0231) ;     none.
                                        (0232) ;
                                        (0233) ;  SIDE EFFECTS:
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0241) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                        (0242) ;     on TX register empty or TX transmit complete
                                        (0243) ;
                                        (0244)  UART_1_SetTxIntMode:
                                        (0245) _UART_1_SetTxIntMode:
                                        (0246)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0247)    M8C_SetBank1
0473: 21 01    AND   A,0x1              (0248)    and   A, UART_1_INT_MODE_TX_COMPLETE
0475: A0 07    JZ    0x047D             (0249)    jz    .SetModeRegEmpty
0477: 43 2C 10 OR    REG[0x2C],0x10     (0250)    or    REG[UART_1_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
047A: 70 EF    AND   F,0xEF             
                                        (0251)    M8C_SetBank0
                                        (0252)    RAM_EPILOGUE RAM_USE_CLASS_1
047C: 7F       RET                      (0253)    ret
                                        (0254) 
                                        (0255) .SetModeRegEmpty:
047D: 41 2C EF AND   REG[0x2C],0xEF     (0256)    and   REG[UART_1_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
0480: 70 EF    AND   F,0xEF             
                                        (0257)    M8C_SetBank0
                                        (0258)    RAM_EPILOGUE RAM_USE_CLASS_1
0482: 7F       RET                      (0259)    ret
                                        (0260) .ENDSECTION
                                        (0261) 
                                        (0262) 
                                        (0263) .SECTION
                                        (0264) ;-----------------------------------------------------------------------------
                                        (0265) ;  FUNCTION NAME: UART_1_Start(BYTE bParity)
                                        (0266) ;
                                        (0267) ;  DESCRIPTION:
                                        (0268) ;     Sets the start bit and parity in the Control register of this user module.
                                        (0269) ;-----------------------------------------------------------------------------
                                        (0270) ;
                                        (0271) ;  ARGUMENTS:
                                        (0272) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                        (0273) ;        Passed in the A register.
                                        (0274) ;
                                        (0275) ;  RETURNS:
                                        (0276) ;     none.
                                        (0277) ;
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;
                                        (0285)  UART_1_Start:
                                        (0286) _UART_1_Start:
                                        (0287)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0288)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                        (0289) 
0483: 29 01    OR    A,0x1              (0290)    or    A, bfCONTROL_REG_START_BIT
0485: 60 2F    MOV   REG[0x2F],A        (0291)    mov   REG[UART_1_TX_CONTROL_REG], A
0487: 60 3B    MOV   REG[0x3B],A        (0292)    mov   REG[UART_1_RX_CONTROL_REG], A
                                        (0293) IF ( UART_1_RXBUF_ENABLE )
0489: 91 0E    CALL  _UART_1_CmdReset   (0294)    call  _UART_1_CmdReset
                                        (0295) ENDIF
                                        (0296)    RAM_EPILOGUE RAM_USE_CLASS_1
048B: 7F       RET                      (0297)    ret
                                        (0298) .ENDSECTION
                                        (0299) 
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: UART_1_Stop
                                        (0304) ;
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;     Disables UART operation.
                                        (0307) ;-----------------------------------------------------------------------------
                                        (0308) ;
                                        (0309) ;  ARGUMENTS:
                                        (0310) ;     none.
                                        (0311) ;
                                        (0312) ;  RETURNS:
                                        (0313) ;     none.
                                        (0314) ;
                                        (0315) ;  SIDE EFFECTS:
                                        (0316) ;    The A and X registers may be modified by this or future implementations
                                        (0317) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0318) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0319) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0320) ;    functions.
                                        (0321) ;
                                        (0322)  UART_1_Stop:
                                        (0323) _UART_1_Stop:
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_1
048C: 41 2F FE AND   REG[0x2F],0xFE     (0325)    and   REG[UART_1_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
048F: 41 3B FE AND   REG[0x3B],0xFE     (0326)    and   REG[UART_1_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0327)    RAM_EPILOGUE RAM_USE_CLASS_1
0492: 7F       RET                      (0328)    ret
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) 
                                        (0332) .SECTION
                                        (0333) ;-----------------------------------------------------------------------------
                                        (0334) ;  FUNCTION NAME: UART_1_SendData
                                        (0335) ;
                                        (0336) ;  DESCRIPTION:
                                        (0337) ;     Initiates a transmission of data.
                                        (0338) ;-----------------------------------------------------------------------------
                                        (0339) ;
                                        (0340) ;  ARGUMENTS:
                                        (0341) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                        (0342) ;
                                        (0343) ;  RETURNS:
                                        (0344) ;     none.
                                        (0345) ;
                                        (0346) ;  SIDE EFFECTS:
                                        (0347) ;    The A and X registers may be modified by this or future implementations
                                        (0348) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0349) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0350) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0351) ;    functions.
                                        (0352) ;
                                        (0353)  UART_1_SendData:
                                        (0354) _UART_1_SendData:
                                        (0355)    RAM_PROLOGUE RAM_USE_CLASS_1
0493: 60 2D    MOV   REG[0x2D],A        (0356)    mov REG[UART_1_TX_BUFFER_REG], A
                                        (0357)    RAM_EPILOGUE RAM_USE_CLASS_1
0495: 7F       RET                      (0358)    ret
                                        (0359) .ENDSECTION
                                        (0360) 
                                        (0361) 
                                        (0362) .SECTION
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  FUNCTION NAME: UART_1_bReadTxStatus
                                        (0365) ;
                                        (0366) ;  DESCRIPTION:
                                        (0367) ;     Reads the Tx Status bits in the Control/Status register.
                                        (0368) ;-----------------------------------------------------------------------------
                                        (0369) ;
                                        (0370) ;  ARGUMENTS:
                                        (0371) ;     none.
                                        (0372) ;
                                        (0373) ;  RETURNS:
                                        (0374) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                        (0375) ;           status bits (returned in A)
                                        (0376) ;
                                        (0377) ;  SIDE EFFECTS:
                                        (0378) ;    The A and X registers may be modified by this or future implementations
                                        (0379) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0380) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0381) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0382) ;    functions.
                                        (0383) ;
                                        (0384)  UART_1_bReadTxStatus:
                                        (0385) _UART_1_bReadTxStatus:
                                        (0386)  bUART_1_ReadTxStatus:                           ; For backwards compatibility only
                                        (0387) _bUART_1_ReadTxStatus:                           ; For backwards compatibility only
                                        (0388)    RAM_PROLOGUE RAM_USE_CLASS_1
0496: 5D 2F    MOV   A,REG[0x2F]        (0389)    mov A,  REG[UART_1_TX_CONTROL_REG]
                                        (0390)    RAM_EPILOGUE RAM_USE_CLASS_1
0498: 7F       RET                      (0391)    ret
                                        (0392) .ENDSECTION
                                        (0393) 
                                        (0394) 
                                        (0395) .SECTION
                                        (0396) ;-----------------------------------------------------------------------------
                                        (0397) ;  FUNCTION NAME: UART_1_bReadRxData
                                        (0398) ;
                                        (0399) ;  DESCRIPTION:
                                        (0400) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0401) ;     sure data is valid.
                                        (0402) ;-----------------------------------------------------------------------------
                                        (0403) ;
                                        (0404) ;  ARGUMENTS:
                                        (0405) ;     none.
                                        (0406) ;
                                        (0407) ;  RETURNS:
                                        (0408) ;     bRxData - returned in A.
                                        (0409) ;
                                        (0410) ;  SIDE EFFECTS:
                                        (0411) ;    The A and X registers may be modified by this or future implementations
                                        (0412) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0413) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0414) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0415) ;    functions.
                                        (0416) ;
                                        (0417)  UART_1_bReadRxData:
                                        (0418) _UART_1_bReadRxData:
                                        (0419)  bUART_1_ReadRxData:                             ; For backwards compatibility only
                                        (0420) _bUART_1_ReadRxData:                             ; For backwards compatibility only
                                        (0421)    RAM_PROLOGUE RAM_USE_CLASS_1
0499: 5D 3A    MOV   A,REG[0x3A]        (0422)    mov A, REG[UART_1_RX_BUFFER_REG]
                                        (0423)    RAM_EPILOGUE RAM_USE_CLASS_1
049B: 7F       RET                      (0424)    ret
                                        (0425) .ENDSECTION
                                        (0426) 
                                        (0427) 
                                        (0428) .SECTION
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) ;  FUNCTION NAME: UART_1_bReadRxStatus
                                        (0431) ;
                                        (0432) ;  DESCRIPTION:
                                        (0433) ;     Reads the RX Status bits in the Control/Status register.
                                        (0434) ;-----------------------------------------------------------------------------
                                        (0435) ;
                                        (0436) ;  ARGUMENTS:
                                        (0437) ;     none.
                                        (0438) ;
                                        (0439) ;  RETURNS:
                                        (0440) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                        (0441) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                        (0442) ;           returned in A.
                                        (0443) ;
                                        (0444) ;  SIDE EFFECTS:
                                        (0445) ;    The A and X registers may be modified by this or future implementations
                                        (0446) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0447) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0448) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0449) ;    functions.
                                        (0450) ;
                                        (0451)  UART_1_bReadRxStatus:
                                        (0452) _UART_1_bReadRxStatus:
                                        (0453)  bUART_1_ReadRxStatus:                           ; For backwards compatibility only
                                        (0454) _bUART_1_ReadRxStatus:                           ; For backwards compatibility only
                                        (0455)    RAM_PROLOGUE RAM_USE_CLASS_1
049C: 5D 3B    MOV   A,REG[0x3B]        (0456)    mov A,  REG[UART_1_RX_CONTROL_REG]
                                        (0457)    RAM_EPILOGUE RAM_USE_CLASS_1
049E: 7F       RET                      (0458)    ret
                                        (0459) .ENDSECTION
                                        (0460) 
                                        (0461) 
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: UART_1_TxIntMode
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;     This function is used to change the TX Interrupt mode.
                                        (0468) ;-----------------------------------------------------------------------------
                                        (0469) ;
                                        (0470) ;  ARGUMENTS:
                                        (0471) ;     A => Tx Interrupt mode
                                        (0472) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                        (0473) ;             1 => Interrupt on TX Complete
                                        (0474) ;
                                        (0475) ;  RETURNS:
                                        (0476) ;     none.
                                        (0477) ;
                                        (0478) ;  SIDE EFFECTS:
                                        (0479) ;    The A and X registers may be modified by this or future implementations
                                        (0480) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0481) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0482) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0483) ;    functions.
                                        (0484) ;
                                        (0485)  UART_1_TxIntMode:
                                        (0486) _UART_1_TxIntMode:
                                        (0487)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0488) 
049F: 21 01    AND   A,0x1              (0489)    and  A,UART_1_INT_MODE_TX_COMPLETE
04A1: 71 10    OR    F,0x10             
                                        (0490)    M8C_SetBank1
04A3: 39 01    CMP   A,0x1              (0491)    cmp  A,UART_1_INT_MODE_TX_COMPLETE
04A5: A0 06    JZ    0x04AC             (0492)    jz   .SetTxCmpMode
                                        (0493) 
04A7: 41 2C EF AND   REG[0x2C],0xEF     (0494)    and  reg[UART_1_TX_FUNC_REG],0xEF             ; Set Interrupt on Tx_Reg_Empty
04AA: 80 04    JMP   0x04AF             (0495)    jmp  .TxIntMode_End
                                        (0496) 
                                        (0497) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
04AC: 43 2C 10 OR    REG[0x2C],0x10     (0498)    or   reg[UART_1_TX_FUNC_REG],0x10
04AF: 70 EF    AND   F,0xEF             
                                        (0499) 
                                        (0500) .TxIntMode_End:
                                        (0501)    M8C_SetBank0
                                        (0502)    RAM_EPILOGUE RAM_USE_CLASS_1
04B1: 7F       RET                      (0503)    ret
                                        (0504) .ENDSECTION
                                        (0505) 
                                        (0506)     
                                        (0507) .SECTION
                                        (0508) ;-----------------------------------------------------------------------------
                                        (0509) ;  FUNCTION NAME: UART_1_IntCntl
                                        (0510) ;
                                        (0511) ;  DESCRIPTION:
                                        (0512) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                        (0513) ;-----------------------------------------------------------------------------
                                        (0514) ;
                                        (0515) ;  ARGUMENTS:
                                        (0516) ;     A => Interrupt mask
                                        (0517) ;
                                        (0518) ;  RETURNS:
                                        (0519) ;     none.
                                        (0520) ;
                                        (0521) ;  SIDE EFFECTS:
                                        (0522) ;    The A and X registers may be modified by this or future implementations
                                        (0523) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0524) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0525) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0526) ;    functions.
                                        (0527) ;
                                        (0528) ;  THEORY of OPERATION or PROCEDURE:
                                        (0529) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                        (0530) ;     and RX block.
                                        (0531) ;
                                        (0532)  UART_1_IntCntl:
                                        (0533) _UART_1_IntCntl:
                                        (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0535) 
04B2: 08       PUSH  A                  (0536)    push A
04B3: 21 01    AND   A,0x1              (0537)    and  A,UART_1_ENABLE_RX_INT
04B5: A0 06    JZ    0x04BC             (0538)    jz   .DisRxInt
04B7: 43 E1 40 OR    REG[0xE1],0x40     
                                        (0539)      ; Enable Rx Interrupt
                                        (0540)    M8C_EnableIntMask UART_1_RX_INT_REG, UART_1_RX_INT_MASK
04BA: 80 04    JMP   0x04BF             (0541)    jmp  .CheckTxInt
04BC: 41 E1 BF AND   REG[0xE1],0xBF     
                                        (0542) .DisRxInt:
                                        (0543)      ; Disable Rx Interrupt
                                        (0544)    M8C_DisableIntMask UART_1_RX_INT_REG, UART_1_RX_INT_MASK
                                        (0545) 
                                        (0546) .CheckTxInt:
04BF: 18       POP   A                  (0547)    pop  A
04C0: 21 02    AND   A,0x2              (0548)    and  A,UART_1_ENABLE_TX_INT
04C2: A0 06    JZ    0x04C9             (0549)    jz   .DisTxInt
04C4: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0550)      ; Enable Tx Interrupt
                                        (0551)    M8C_EnableIntMask UART_1_TX_INT_REG, UART_1_TX_INT_MASK
04C7: 80 04    JMP   0x04CC             (0552)    jmp  .End_IntCntl
04C9: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0553) .DisTxInt:
                                        (0554)      ; Disable Tx Interrupt
                                        (0555)    M8C_DisableIntMask UART_1_TX_INT_REG, UART_1_TX_INT_MASK
                                        (0556) 
                                        (0557) .End_IntCntl:
                                        (0558)    RAM_EPILOGUE RAM_USE_CLASS_1
04CC: 7F       RET                      (0559)    ret
                                        (0560) .ENDSECTION
                                        (0561) 
                                        (0562) 
                                        (0563) ;=============================================================================
                                        (0564) ;=============================================================================
                                        (0565) ;
                                        (0566) ;     High-Level Commands
                                        (0567) ;
                                        (0568) ;=============================================================================
                                        (0569) ;=============================================================================
                                        (0570) 
                                        (0571) 
                                        (0572) ;-----------------------------------------------------------------------------
                                        (0573) ;  FUNCTION NAME: UART_1_PutSHexByte
                                        (0574) ;
                                        (0575) ;  DESCRIPTION:
                                        (0576) ;     Print a byte in Hex (two characters) to the UART Tx
                                        (0577) ;-----------------------------------------------------------------------------
                                        (0578) ;
                                        (0579) ;  ARGUMENTS:
                                        (0580) ;     A  => (BYTE) Data/char to be printed
                                        (0581) ;
                                        (0582) ;  RETURNS:
                                        (0583) ;     none.
                                        (0584) ;
                                        (0585) ;  SIDE EFFECTS:
                                        (0586) ;    The A and X registers may be modified by this or future implementations
                                        (0587) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0588) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0589) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0590) ;    functions.
                                        (0591) ;
                                        (0592) .LITERAL
                                        (0593) UART_1_HEX_STR:
                                        (0594)      DS    "0123456789ABCDEF"
                                        (0595) .ENDLITERAL
                                        (0596) 
                                        (0597) .SECTION
                                        (0598)  UART_1_PutSHexByte:
                                        (0599) _UART_1_PutSHexByte:
                                        (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
04DD: 08       PUSH  A                  (0601)    push  A                             ; Save lower nibble
04DE: 67       ASR   A                  (0602)    asr   A                             ; Shift high nibble to right
04DF: 67       ASR   A                  (0603)    asr   A
04E0: 67       ASR   A                  (0604)    asr   A
04E1: 67       ASR   A                  (0605)    asr   A
04E2: 21 0F    AND   A,0xF              (0606)    and   A,0Fh                         ; Mask off nibble
04E4: FF E7    INDEX 0x04CD             (0607)    index UART_1_HEX_STR                ; Get Hex value
04E6: 90 0F    CALL  _UART_1_PutChar    (0608)    call  UART_1_PutChar                ; Write data to screen
04E8: 18       POP   A                  (0609)    pop   A                             ; Restore value
04E9: 21 0F    AND   A,0xF              (0610)    and   A,0Fh                         ; Mask off lower nibble
04EB: FF E0    INDEX 0x04CD             (0611)    index UART_1_HEX_STR                ; Get Hex value
04ED: 90 08    CALL  _UART_1_PutChar    (0612)    call  UART_1_PutChar                ; Write data to screen
                                        (0613)    RAM_EPILOGUE RAM_USE_CLASS_1
04EF: 7F       RET                      (0614)    ret
                                        (0615) .ENDSECTION
                                        (0616) 
                                        (0617) 
                                        (0618) .SECTION
                                        (0619) ;-----------------------------------------------------------------------------
                                        (0620) ;  FUNCTION NAME: UART_1_PutSHexInt
                                        (0621) ;
                                        (0622) ;  DESCRIPTION:
                                        (0623) ;     Print an Int in Hex (four characters) to UART Tx
                                        (0624) ;-----------------------------------------------------------------------------
                                        (0625) ;
                                        (0626) ;  ARGUMENTS:
                                        (0627) ;     Pointer to string
                                        (0628) ;     A  => ASB of Int
                                        (0629) ;     X  => MSB of Int
                                        (0630) ;
                                        (0631) ;  RETURNS:
                                        (0632) ;     none.
                                        (0633) ;
                                        (0634) ;  SIDE EFFECTS:
                                        (0635) ;    The A and X registers may be modified by this or future implementations
                                        (0636) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0637) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0638) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0639) ;    functions.
                                        (0640) ;
                                        (0641) 
                                        (0642)  UART_1_PutSHexInt:
                                        (0643) _UART_1_PutSHexInt:
                                        (0644)    RAM_PROLOGUE RAM_USE_CLASS_1
04F0: 4B       SWAP  A,X                (0645)    swap  A,X
04F1: 9F EA    CALL  _UART_1_PutSHexByte(0646)    call  UART_1_PutSHexByte            ; Print MSB
04F3: 5B       MOV   A,X                (0647)    mov   A,X                           ; Move LSB into position
04F4: 9F E7    CALL  _UART_1_PutSHexByte(0648)    call  UART_1_PutSHexByte            ; Print LSB
                                        (0649)    RAM_EPILOGUE RAM_USE_CLASS_1
04F6: 7F       RET                      (0650)    ret
04F7: 49 2F 10 TST   REG[0x2F],0x10     
04FA: AF FC    JZ    _UART_1_PutChar    
04FC: 60 2D    MOV   REG[0x2D],A        
                                        (0651) .ENDSECTION
                                        (0652) 
                                        (0653) 
                                        (0654) .SECTION
                                        (0655) ;-----------------------------------------------------------------------------
                                        (0656) ;  FUNCTION NAME: UART_1_PutChar
                                        (0657) ;
                                        (0658) ;  DESCRIPTION:
                                        (0659) ;     Send character out through UART TX port.
                                        (0660) ;-----------------------------------------------------------------------------
                                        (0661) ;
                                        (0662) ;  ARGUMENTS:
                                        (0663) ;     A has Character to send to UART Tx Port
                                        (0664) ;
                                        (0665) ;  RETURNS:
                                        (0666) ;     none
                                        (0667) ;
                                        (0668) ;  SIDE EFFECTS:
                                        (0669) ;    The A and X registers may be modified by this or future implementations
                                        (0670) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0671) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0672) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0673) ;    functions.
                                        (0674) ;
                                        (0675) 
                                        (0676)    macro InLinePutChar( Source )
                                        (0677) .BufEmptyWaitLoop:
                                        (0678)    tst REG[UART_1_TX_CONTROL_REG], UART_1_TX_BUFFER_EMPTY     ; Check Tx Status
                                        (0679)    jz  .BufEmptyWaitLoop
                                        (0680)    mov REG[UART_1_TX_BUFFER_REG], @Source        ; Write data to Tx Port
                                        (0681)    endm
                                        (0682) 
                                        (0683)  UART_1_PutChar:
                                        (0684) _UART_1_PutChar:
                                        (0685)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0686)    InLinePutChar A
                                        (0687)    RAM_EPILOGUE RAM_USE_CLASS_1
04FE: 7F       RET                      (0688)    ret
                                        (0689) .ENDSECTION
                                        (0690) 
                                        (0691) 
                                        (0692) .SECTION
                                        (0693) ;-----------------------------------------------------------------------------
                                        (0694) ;  FUNCTION NAME: UART_1_cGetChar
                                        (0695) ;
                                        (0696) ;  DESCRIPTION:
                                        (0697) ;     Read character from UART RX port.
                                        (0698) ;-----------------------------------------------------------------------------
                                        (0699) ;
                                        (0700) ;  ARGUMENTS:
                                        (0701) ;      none
                                        (0702) ;
                                        (0703) ;  RETURNS:
                                        (0704) ;     char that is returned from UART
                                        (0705) ;
                                        (0706) ;  SIDE EFFECTS:
                                        (0707) ;    The A and X registers may be modified by this or future implementations
                                        (0708) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0709) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0710) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0711) ;    functions.
                                        (0712) ;
                                        (0713) ;    Program flow will stay in this function until a character is received.
                                        (0714) ;    If the watchdog timer is used, care must be taken to make sure that
                                        (0715) ;    the delay between characters is less than the watchdog timeout.
                                        (0716) ;
                                        (0717)  UART_1_cGetChar:
                                        (0718) _UART_1_cGetChar:
                                        (0719)    RAM_PROLOGUE RAM_USE_CLASS_1
04FF: 49 3B 08 TST   REG[0x3B],0x8      (0720)    tst REG[UART_1_RX_CONTROL_REG],UART_1_RX_REG_FULL    ; Check if a character is ready
0502: AF FC    JZ    _UART_1_cGetChar   (0721)    jz  UART_1_cGetChar                              ; If not loop
0504: 5D 3A    MOV   A,REG[0x3A]        (0722)    mov A, REG[UART_1_RX_BUFFER_REG]                 ; Get character
                                        (0723)    RAM_EPILOGUE RAM_USE_CLASS_1
0506: 7F       RET                      (0724)    ret
                                        (0725) .ENDSECTION
                                        (0726) 
                                        (0727) 
                                        (0728) .SECTION
                                        (0729) ;-----------------------------------------------------------------------------
                                        (0730) ;  FUNCTION NAME: UART_1_cReadChar
                                        (0731) ;
                                        (0732) ;  DESCRIPTION:
                                        (0733) ;     Read character from UART RX port.
                                        (0734) ;-----------------------------------------------------------------------------
                                        (0735) ;
                                        (0736) ;  ARGUMENTS:
                                        (0737) ;      none
                                        (0738) ;
                                        (0739) ;  RETURNS:
                                        (0740) ;     char that is returned from UART
                                        (0741) ;
                                        (0742) ;  SIDE EFFECTS:
                                        (0743) ;    The A and X registers may be modified by this or future implementations
                                        (0744) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0745) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0746) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0747) ;    functions.
                                        (0748) ;
                                        (0749) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                        (0750) ;    implies a valid character or an error condition occured.
                                        (0751) ;
                                        (0752)  UART_1_cReadChar:
                                        (0753) _UART_1_cReadChar:
                                        (0754)    RAM_PROLOGUE RAM_USE_CLASS_1
0507: 5D 3B    MOV   A,REG[0x3B]        (0755)    mov  A,REG[UART_1_RX_CONTROL_REG]                       ; Get Status of RX
0509: 08       PUSH  A                  (0756)    push A
050A: 21 08    AND   A,0x8              (0757)    and  A,UART_1_RX_COMPLETE                               ; Check if a character is ready
050C: B0 04    JNZ   0x0511             (0758)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
050E: 18       POP   A                  (0759)    pop  A
050F: 80 0B    JMP   0x051B             (0760)    jmp  .RX_NO_VALID_CHAR
                                        (0761) 
                                        (0762) .RX_DATA_RDY:
0511: 5D 3A    MOV   A,REG[0x3A]        (0763)    mov  A,REG[UART_1_RX_BUFFER_REG ]          
0513: 4B       SWAP  A,X                (0764)    swap A,X                                                ; determine if data is valid
                                        (0765) 
0514: 18       POP   A                  (0766)    pop  A                                                  ; Check for errors
0515: 21 A0    AND   A,0xA0             (0767)    and  A,(UART_1_RX_PARITY_ERROR | UART_1_RX_FRAMING_ERROR)
0517: B0 03    JNZ   0x051B             (0768)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
0519: 4B       SWAP  A,X                (0769)    swap A,X                                                ; Put data in A and exit
                                        (0770)    RAM_EPILOGUE RAM_USE_CLASS_1
051A: 7F       RET                      (0771)    ret
                                        (0772) 
                                        (0773) .RX_NO_VALID_CHAR:
051B: 50 00    MOV   A,0x0              (0774)    mov A,0x00                                              ; Zero out character
                                        (0775) 
                                        (0776)  End_UART_1_cReadChar:
                                        (0777)    RAM_EPILOGUE RAM_USE_CLASS_1
051D: 7F       RET                      (0778)    ret
                                        (0779) .ENDSECTION
                                        (0780) 
                                        (0781) 
                                        (0782) .SECTION
                                        (0783) ;-----------------------------------------------------------------------------
                                        (0784) ;  FUNCTION NAME: UART_1_iReadChar
                                        (0785) ;
                                        (0786) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                        (0787) ;  to just set a value in the upper byte if error conditions exists.
                                        (0788) ;
                                        (0789) ;  DESCRIPTION:
                                        (0790) ;     Read character from UART RX port.
                                        (0791) ;-----------------------------------------------------------------------------
                                        (0792) ;
                                        (0793) ;  ARGUMENTS:
                                        (0794) ;      none
                                        (0795) ;
                                        (0796) ;  RETURNS:
                                        (0797) ;     An integer value is returned.  A negative value inplies and error
                                        (0798) ;     condition, a positive value between 0 and 255 is the return character.
                                        (0799) ;
                                        (0800) ;     Error Codes:
                                        (0801) ;        0x80CC    Parity Error
                                        (0802) ;        0x40CC    Overrun Error
                                        (0803) ;        0x20CC    Framing Error
                                        (0804) ;        0x01CC    No Data available
                                        (0805) ;
                                        (0806) ;  SIDE EFFECTS:
                                        (0807) ;    The A and X registers may be modified by this or future implementations
                                        (0808) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0809) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0810) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0811) ;    functions.
                                        (0812) ;
                                        (0813)  UART_1_iReadChar:
                                        (0814) _UART_1_iReadChar:
                                        (0815)    RAM_PROLOGUE RAM_USE_CLASS_1
051E: 5D 3B    MOV   A,REG[0x3B]        (0816)    mov  A,REG[UART_1_RX_CONTROL_REG]                       ; Get Status of RX
                                        (0817)                                                            ; Mask only errors and data ready
0520: 21 E8    AND   A,0xE8             (0818)    and  A,(UART_1_RX_ERROR|UART_1_RX_REG_FULL)
0522: 08       PUSH  A                  (0819)    push A
0523: 21 08    AND   A,0x8              (0820)    and  A,UART_1_RX_COMPLETE                               ; Check if a character is ready
0525: B0 07    JNZ   0x052D             (0821)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
0527: 18       POP   A                  (0822)    pop  A
0528: 29 01    OR    A,0x1              (0823)    or   A,UART_1_RX_NO_DATA                                ; Add no data flag
052A: 4B       SWAP  A,X                (0824)    swap A,X
052B: 80 07    JMP   0x0533             (0825)    jmp  End_UART_1_iReadChar
                                        (0826) 
                                        (0827) .RX_GET_DATA:
052D: 18       POP   A                  (0828)    pop  A
052E: 21 E0    AND   A,0xE0             (0829)    and  A,UART_1_RX_ERROR
0530: 4B       SWAP  A,X                (0830)    swap A,X
0531: 5D 3A    MOV   A,REG[0x3A]        (0831)    mov  A,REG[UART_1_RX_BUFFER_REG ]                       ; Read data first, then
                                        (0832)                                                            ; determine if data is valid
                                        (0833) 
                                        (0834)  End_UART_1_iReadChar:
                                        (0835)    RAM_EPILOGUE RAM_USE_CLASS_1
0533: 7F       RET                      (0836)    ret
                                        (0837) .ENDSECTION
                                        (0838) 
                                        (0839) 
                                        (0840) .SECTION
                                        (0841) ;-----------------------------------------------------------------------------
                                        (0842) ;  FUNCTION NAME: UART_1_PutString
                                        (0843) ;
                                        (0844) ;  DESCRIPTION:
                                        (0845) ;     Send String out through UART TX port.
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS:
                                        (0849) ;     Pointer to String
                                        (0850) ;     A has MSB of string address
                                        (0851) ;     X has LSB of string address
                                        (0852) ;
                                        (0853) ;  RETURNS:
                                        (0854) ;     none
                                        (0855) ;
                                        (0856) ;  SIDE EFFECTS:
                                        (0857) ;    The A and X registers may be modified by this or future implementations
                                        (0858) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0859) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0860) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0861) ;    functions.
                                        (0862) ;          
                                        (0863) ;    Currently only the page pointer registers listed below are modified: 
                                        (0864) ;          IDX_PP
                                        (0865) ;
                                        (0866)  UART_1_PutString:
                                        (0867) _UART_1_PutString:
                                        (0868)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0869)    RAM_SETPAGE_IDX A
                                        (0870) .PutStringLoop:
0534: 52 00    MOV   A,[X+0]            (0871)    mov   A,[X]                                   ; Get value pointed to by X
0536: A0 06    JZ    0x053D             (0872)    jz    End_PutString                           ; Check for end of string
0538: 9F BD    CALL  _UART_1_PutChar    (0873)    call  UART_1_PutChar                          ; Send character to Tx port
053A: 75       INC   X                  (0874)    inc   X                                       ; Advance pointer to next character
053B: 8F F8    JMP   _UART_1_PutString  (0875)    jmp   .PutStringLoop                          ; Get next character
                                        (0876) 
                                        (0877) End_PutString:
                                        (0878)    RAM_EPILOGUE RAM_USE_CLASS_3
053D: 7F       RET                      (0879)    ret
                                        (0880) .ENDSECTION
                                        (0881)     
                                        (0882) .SECTION
                                        (0883) ;-----------------------------------------------------------------------------
                                        (0884) ;  FUNCTION NAME: UART_1_Write
                                        (0885) ;
                                        (0886) ;  DESCRIPTION:
                                        (0887) ;     Send String of length X to serial port
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;
                                        (0890) ;  ARGUMENTS:
                                        (0891) ;     Pointer to String
                                        (0892) ;     [SP-5] Count of characters to send
                                        (0893) ;     [SP-4] has MSB of string address
                                        (0894) ;     [SP-3] has LSB of string address
                                        (0895) ;
                                        (0896) ;  RETURNS:
                                        (0897) ;     none
                                        (0898) ;
                                        (0899) ;  SIDE EFFECTS:
                                        (0900) ;    The A and X registers may be modified by this or future implementations
                                        (0901) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0902) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0903) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0904) ;    functions.
                                        (0905) ;          
                                        (0906) ;    Currently only the page pointer registers listed below are modified: 
                                        (0907) ;          IDX_PP
                                        (0908) ;
                                        (0909) CNT_LEN:    equ -5                               ; Length of data to send
                                        (0910) STR_MSB:    equ -4                               ; MSB pointer of string 
                                        (0911) STR_LSB:    equ -3                               ; LSB pointer of string 
                                        (0912) 
                                        (0913)  UART_1_Write:
                                        (0914) _UART_1_Write:
                                        (0915)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0916)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
053E: 4F       MOV   X,SP               (0917)    mov   X, SP                                   ; Establish the frame pointer 
                                        (0918) 
                                        (0919) .NextByteLoop:
053F: 52 FB    MOV   A,[X-5]            (0920)    mov   A, [X+CNT_LEN]                          ; End of the string?
0541: A0 13    JZ    0x0555             (0921)    jz    .End_Write                              ;   Yes, prepare to exit
0543: 7B FB    DEC   [X-5]              (0922)    dec   [X+CNT_LEN]                             ; Decrement counter
                                        (0923) 
                                        (0924)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0925)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                        (0926)    ENDIF
                                        (0927) 
0545: 59 FD    MOV   X,[X-3]            (0928)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
                                        (0929)    RAM_SETPAGE_IDX A                             ; switch index pages
0547: 52 00    MOV   A,[X+0]            (0930)    mov   A, [X]                                  ; Grab the data
0549: 49 2F 10 TST   REG[0x2F],0x10     
054C: AF FC    JZ    0x0549             
054E: 60 2D    MOV   REG[0x2D],A        
                                        (0931)    InLinePutChar A                               ; Put data in empty TX buf reg
0550: 4F       MOV   X,SP               (0932)    mov   X, SP                                   ; Recover frame pointer
                                        (0933)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
0551: 77 FD    INC   [X-3]              (0934)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
0553: 8F EB    JMP   0x053F             (0935)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
                                        (0936) 
                                        (0937) .End_Write:
                                        (0938)    RAM_EPILOGUE RAM_USE_CLASS_3
0555: 7F       RET                      (0939)    ret
                                        (0940) .ENDSECTION
                                        (0941)     
                                        (0942) 
                                        (0943) .SECTION
                                        (0944) ;-----------------------------------------------------------------------------
                                        (0945) ;  FUNCTION NAME: UART_1_CWrite
                                        (0946) ;
                                        (0947) ;             WARNING WARNING NOT COMPLETE
                                        (0948) ;
                                        (0949) ;  DESCRIPTION:
                                        (0950) ;     Send String of length X to serial port
                                        (0951) ;-----------------------------------------------------------------------------
                                        (0952) ;
                                        (0953) ;  ARGUMENTS:
                                        (0954) ;     [SP-4] MSB of Count of character to send
                                        (0955) ;     [SP-3] LSB of Count of character to send
                                        (0956) ;     [SP-2] has MSB of string address
                                        (0957) ;     [SP-1] has LSB of string address
                                        (0958) ;
                                        (0959) ;  RETURNS:
                                        (0960) ;     none
                                        (0961) ;
                                        (0962) ;  SIDE EFFECTS:
                                        (0963) ;    The A and X registers may be modified by this or future implementations
                                        (0964) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0965) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0966) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0967) ;    functions.
                                        (0968) ;
                                        (0969) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                        (0970) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                        (0971) CSTR_MSB:   equ -4           ; MSB pointer of string
                                        (0972) CSTR_LSB:   equ -3           ; LSB pointer of string
                                        (0973) 
                                        (0974)  UART_1_CWrite:
                                        (0975) _UART_1_CWrite:
                                        (0976)    RAM_PROLOGUE RAM_USE_CLASS_2
0556: 4F       MOV   X,SP               (0977)    mov   X,SP
                                        (0978) .CW_Loop:
0557: 3D FA 00 CMP   [X-6],0x0          (0979)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
055A: B0 06    JNZ   0x0561             (0980)    jnz   .CW_WRITEIT
055C: 3D FB 00 CMP   [X-5],0x0          (0981)    cmp   [X+CLEN_LSB],0x00
055F: A0 1D    JZ    0x057D             (0982)    jz    .End_CWrite                        ; Leave if done
                                        (0983) 
                                        (0984) .CW_WRITEIT:                                
0561: 10       PUSH  X                  (0985)    push  X                                  ; Save frame pointer
0562: 52 FC    MOV   A,[X-4]            (0986)    mov   A,[X+CSTR_MSB]
0564: 59 FD    MOV   X,[X-3]            (0987)    mov   X,[X+CSTR_LSB]
0566: 28       ROMX                     (0988)    romx                                     ; Get character from ROM
0567: 49 2F 10 TST   REG[0x2F],0x10     
056A: AF FC    JZ    0x0567             
056C: 60 2D    MOV   REG[0x2D],A        
                                        (0989)    InLinePutChar A                          ; Put data in empty TX buf reg
056E: 20       POP   X                  (0990)    pop   X                                  ; Restore frame pointer
056F: 07 FD 01 ADD   [X-3],0x1          (0991)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
0572: 0F FC 00 ADC   [X-4],0x0          (0992)    adc   [X+CSTR_MSB],0
0575: 17 FB 01 SUB   [X-5],0x1          (0993)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
0578: 1F FA 00 SBB   [X-6],0x0          (0994)    sbb   [X+CLEN_MSB],0x00
057B: 8F DB    JMP   0x0557             (0995)    jmp   .CW_Loop
                                        (0996) 
                                        (0997) .End_CWrite:
                                        (0998)    RAM_EPILOGUE RAM_USE_CLASS_2
057D: 7F       RET                      (0999)    ret
                                        (1000) .ENDSECTION
                                        (1001) 
                                        (1002) 
                                        (1003) .SECTION
                                        (1004) ;-----------------------------------------------------------------------------
                                        (1005) ;  FUNCTION NAME: UART_1_CPutString
                                        (1006) ;
                                        (1007) ;  DESCRIPTION:
                                        (1008) ;     Send String out through UART TX port.
                                        (1009) ;-----------------------------------------------------------------------------
                                        (1010) ;
                                        (1011) ;  ARGUMENTS:
                                        (1012) ;     Pointer to String
                                        (1013) ;     A has MSB of string address
                                        (1014) ;     X has LSB of string address
                                        (1015) ;
                                        (1016) ;  RETURNS:
                                        (1017) ;     none
                                        (1018) ;
                                        (1019) ;  SIDE EFFECTS:
                                        (1020) ;    The A and X registers may be modified by this or future implementations
                                        (1021) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1022) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1023) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1024) ;    functions.
                                        (1025) ;
                                        (1026)  UART_1_CPutString:
                                        (1027) _UART_1_CPutString:
                                        (1028)    RAM_PROLOGUE RAM_USE_CLASS_1
057E: 08       PUSH  A                  (1029)    push  A                                       ; Store ROM pointer
057F: 10       PUSH  X                  (1030)    push  X
0580: 28       ROMX                     (1031)    romx                                          ; Get character from ROM
0581: A0 0B    JZ    0x058D             (1032)    jz    .End_CPutString
0583: 9F 72    CALL  _UART_1_PutChar    (1033)    call  UART_1_PutChar                          ; Print character
0585: 20       POP   X                  (1034)    pop   X
0586: 18       POP   A                  (1035)    pop   A
0587: 75       INC   X                  (1036)    inc   X                                       ; Inc LSB of pointer
0588: DF F5    JNC   _UART_1_CPutString (1037)    jnc   UART_1_CPutString                       ; Check for carry
058A: 74       INC   A                  (1038)    inc   A                                       ; Inc MSB of pointer
058B: 8F F2    JMP   _UART_1_CPutString (1039)    jmp   UART_1_CPutString
                                        (1040) 
                                        (1041) 
                                        (1042) .End_CPutString:
058D: 38 FE    ADD   SP,0xFE            (1043)    add   SP, -2
                                        (1044)    RAM_EPILOGUE RAM_USE_CLASS_1
058F: 7F       RET                      (1045)    ret
                                        (1046) .ENDSECTION
                                        (1047) 
                                        (1048) 
                                        (1049) .SECTION
                                        (1050) ;-----------------------------------------------------------------------------
                                        (1051) ;  FUNCTION NAME: UART_1_PutCRLF
                                        (1052) ;
                                        (1053) ;  DESCRIPTION:
                                        (1054) ;     Send a CR and LF
                                        (1055) ;-----------------------------------------------------------------------------
                                        (1056) ;
                                        (1057) ;  ARGUMENTS:
                                        (1058) ;     none.
                                        (1059) ;
                                        (1060) ;  RETURNS:
                                        (1061) ;     none.
                                        (1062) ;
                                        (1063) ;  SIDE EFFECTS:
                                        (1064) ;    The A and X registers may be modified by this or future implementations
                                        (1065) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1066) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1067) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1068) ;    functions.
                                        (1069) ;
                                        (1070)  UART_1_PutCRLF:
                                        (1071) _UART_1_PutCRLF:
                                        (1072)    RAM_PROLOGUE RAM_USE_CLASS_1
0590: 50 0D    MOV   A,0xD              (1073)    mov  A,0x0D                        ; Send CR
0592: 9F 63    CALL  _UART_1_PutChar    (1074)    call UART_1_PutChar
0594: 50 0A    MOV   A,0xA              (1075)    mov  A,0x0A                        ; Send LF
0596: 9F 5F    CALL  _UART_1_PutChar    (1076)    call UART_1_PutChar
                                        (1077)    RAM_EPILOGUE RAM_USE_CLASS_1
0598: 7F       RET                      (1078)    ret
                                        (1079) .ENDSECTION
                                        (1080) 
                                        (1081) 
                                        (1082) IF (UART_1_RXBUF_ENABLE)
                                        (1083) ;=============================================================================
                                        (1084) ;=============================================================================
                                        (1085) ;
                                        (1086) ;     Command Buffer commands
                                        (1087) ;
                                        (1088) ;=============================================================================
                                        (1089) ;=============================================================================
                                        (1090) 
                                        (1091) .SECTION
                                        (1092) ;-----------------------------------------------------------------------------
                                        (1093) ;  FUNCTION NAME: UART_1_CmdReset
                                        (1094) ;
                                        (1095) ;  DESCRIPTION:
                                        (1096) ;     Reset command string and status flags
                                        (1097) ;-----------------------------------------------------------------------------
                                        (1098) ;
                                        (1099) ;  ARGUMENTS:
                                        (1100) ;     none.
                                        (1101) ;
                                        (1102) ;  RETURNS:
                                        (1103) ;     none.
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;     Clear the command buffer, command counter, and flag.
                                        (1117) ;
                                        (1118)  UART_1_CmdReset:
                                        (1119) _UART_1_CmdReset:
                                        (1120)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1121)    RAM_SETPAGE_CUR >UART_1_aRxBuffer
0599: 55 2B 00 MOV   [buffer+10],0x0    (1122)    mov [UART_1_aRxBuffer], 0x00
                                        (1123)    RAM_SETPAGE_CUR >UART_1_bRxCnt
059C: 55 1C 00 MOV   [0x1C],0x0         (1124)    mov [UART_1_bRxCnt], 0x00
059F: 26 1B 00 AND   [0x1B],0x0         (1125)    and [UART_1_fStatus], 0x00
                                        (1126)    RAM_SETPAGE_CUR >ptrParam
05A2: 55 3B 00 MOV   [buffer+26],0x0    (1127)    mov [ptrParam],0x00
                                        (1128)    RAM_EPILOGUE RAM_USE_CLASS_4
05A5: 7F       RET                      (1129)    ret
                                        (1130) .ENDSECTION
                                        (1131) 
                                        (1132) 
                                        (1133) .SECTION
                                        (1134) ;-----------------------------------------------------------------------------
                                        (1135) ;  FUNCTION NAME: UART_1_bCmdCheck
                                        (1136) ;
                                        (1137) ;  DESCRIPTION:
                                        (1138) ;     Check to see if valid command in buffer.
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;
                                        (1141) ;  ARGUMENTS:
                                        (1142) ;     none.
                                        (1143) ;
                                        (1144) ;  RETURNS:
                                        (1145) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1146) ;                     Returns non-zero value in A if command is valid.
                                        (1147) ;
                                        (1148) ;  SIDE EFFECTS:
                                        (1149) ;    The A and X registers may be modified by this or future implementations
                                        (1150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1153) ;    functions.
                                        (1154) ;          
                                        (1155) ;    Currently only the page pointer registers listed below are modified: 
                                        (1156) ;          CUR_PP
                                        (1157) ;
                                        (1158) ;  THEORY of OPERATION or PROCEDURE:
                                        (1159) ;     Read the status and control register.
                                        (1160) ;
                                        (1161)  UART_1_bCmdCheck:
                                        (1162) _UART_1_bCmdCheck:
                                        (1163)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1164)    RAM_SETPAGE_CUR >UART_1_fStatus
05A6: 51 1B    MOV   A,[0x1B]           (1165)    mov A,  [UART_1_fStatus]
05A8: 21 01    AND   A,0x1              (1166)    and A, UART_1_RX_BUF_CMDTERM                  ; Mask off Command status
                                        (1167)    RAM_EPILOGUE RAM_USE_CLASS_4
05AA: 7F       RET                      (1168)    ret
                                        (1169) .ENDSECTION
                                        (1170)     
                                        (1171) 
                                        (1172) .SECTION
                                        (1173) ;-----------------------------------------------------------------------------
                                        (1174) ;  FUNCTION NAME: UART_1_bErrCheck
                                        (1175) ;
                                        (1176) ;  DESCRIPTION:
                                        (1177) ;     Check to see if an error has occured since last CmdReset
                                        (1178) ;-----------------------------------------------------------------------------
                                        (1179) ;
                                        (1180) ;  ARGUMENTS:
                                        (1181) ;     none.
                                        (1182) ;
                                        (1183) ;  RETURNS:
                                        (1184) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1185) ;                     Returns non-zero value in A if command is valid.
                                        (1186) ;           0x80 => Parity Error
                                        (1187) ;           0x40 => OverRun Error
                                        (1188) ;           0x20 => Framing Error
                                        (1189) ;           0x10 => Software Buffer OverRun
                                        (1190) ;
                                        (1191) ;  SIDE EFFECTS:
                                        (1192) ;    The A and X registers may be modified by this or future implementations
                                        (1193) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1194) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1195) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1196) ;    functions.
                                        (1197) ;          
                                        (1198) ;    Currently only the page pointer registers listed below are modified: 
                                        (1199) ;          CUR_PP
                                        (1200) ;     Error Status is clear when read.
                                        (1201) ;
                                        (1202) ;  THEORY of OPERATION or PROCEDURE:
                                        (1203) ;     Read RX buffer error status and clear status
                                        (1204) ;
                                        (1205)  UART_1_bErrCheck:
                                        (1206) _UART_1_bErrCheck:
                                        (1207)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1208)    RAM_SETPAGE_CUR >UART_1_fStatus
05AB: 51 1B    MOV   A,[0x1B]           (1209)    mov A,  [UART_1_fStatus]
05AD: 21 F0    AND   A,0xF0             (1210)    and A, UART_1_RX_BUF_ERROR                    ; Mask off Error status
05AF: 26 1B 0F AND   [0x1B],0xF         (1211)    and [UART_1_fStatus], ~UART_1_RX_BUF_ERROR
                                        (1212)    RAM_EPILOGUE RAM_USE_CLASS_4
05B2: 7F       RET                      (1213)    ret
                                        (1214) .ENDSECTION
                                        (1215) 
                                        (1216) .SECTION
                                        (1217) ;-----------------------------------------------------------------------------
                                        (1218) ;  FUNCTION NAME: UART_1_bCmdLength
                                        (1219) ;
                                        (1220) ;  DESCRIPTION:
                                        (1221) ;     Get length of command string
                                        (1222) ;-----------------------------------------------------------------------------
                                        (1223) ;
                                        (1224) ;  ARGUMENTS:
                                        (1225) ;     none.
                                        (1226) ;
                                        (1227) ;  RETURNS:
                                        (1228) ;     BYTE  bRxCnt    Returns the command length in A.
                                        (1229) ;
                                        (1230) ;  SIDE EFFECTS:
                                        (1231) ;    The A and X registers may be modified by this or future implementations
                                        (1232) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1235) ;    functions.
                                        (1236) ;          
                                        (1237) ;    Currently only the page pointer registers listed below are modified: 
                                        (1238) ;          CUR_PP
                                        (1239) ;
                                        (1240)  UART_1_bCmdLength:
                                        (1241) _UART_1_bCmdLength:
                                        (1242)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1243)    RAM_SETPAGE_CUR >UART_1_bRxCnt
05B3: 51 1C    MOV   A,[0x1C]           (1244)    mov A,  [UART_1_bRxCnt]
                                        (1245)    RAM_EPILOGUE RAM_USE_CLASS_4
05B5: 7F       RET                      (1246)    ret
                                        (1247) .ENDSECTION
                                        (1248) 
                                        (1249) 
                                        (1250) .SECTION
                                        (1251) ;-----------------------------------------------------------------------------
                                        (1252) ;  FUNCTION NAME: UART_1_szGetParam
                                        (1253) ;
                                        (1254) ;  DESCRIPTION:
                                        (1255) ;      Return next parameter from UART_1 Rx buffer
                                        (1256) ;-----------------------------------------------------------------------------
                                        (1257) ;
                                        (1258) ;  ARGUMENTS:  none
                                        (1259) ;
                                        (1260) ;  RETURNS:
                                        (1261) ;     A => MSB of parameter address
                                        (1262) ;     X => LSB of parameter address
                                        (1263) ;
                                        (1264) ;  SIDE EFFECTS:
                                        (1265) ;    The A and X registers may be modified by this or future implementations
                                        (1266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1269) ;    functions.
                                        (1270) ;          
                                        (1271) ;    Currently only the page pointer registers listed below are modified: 
                                        (1272) ;          CUR_PP
                                        (1273) ;          IDX_PP
                                        (1274) ;
                                        (1275) ;     The receive string is modified by placing Null characters at the end
                                        (1276) ;     of each parameter as they are recovered.
                                        (1277) ;
                                        (1278) ;  THEORY OF OPERATION:
                                        (1279) ;     This function is a stateful generator of addresses to the "parameters"
                                        (1280) ;     of an input "Command". It scans the (optional) input buffer and breaks
                                        (1281) ;     each lexically distinct element into a null-terminated string by replacing
                                        (1282) ;     delimiters with nulls, as appropriate. The state of the generator is 
                                        (1283) ;     maintained by the private variable ptrParam, which is a buffer-relative
                                        (1284) ;     offset. The generator is initialized by a call to the function
                                        (1285) ;     UART_1_CmdReset which resets the entire buffer to the 'empty'
                                        (1286) ;     state. Typically this function, UART_1_szGetParam, is
                                        (1287) ;     not called until the buffer has been loaded with an entire command
                                        (1288) ;     (See UART_1_bCmdCheck).
                                        (1289) ;
                                        (1290) ;     Note, there is no special distinction between the "command" and the 
                                        (1291) ;     "parameters". The first non-delimiter character of the buffer---the first
                                        (1292) ;     character of the "command"---is also, for the purposes of this function,
                                        (1293) ;     the first "parameter" to which it returns an address.
                                        (1294) ;
                                        (1295) ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
                                        (1296) ;     is determined at configuration time by a user module parameter.
                                        (1297) ;
                                        (1298)  UART_1_szGetParam:
                                        (1299) _UART_1_szGetParam:
                                        (1300)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1301)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (1302)     
                                        (1303)    RAM_SETPAGE_CUR >ptrParam
05B6: 50 2B    MOV   A,0x2B             (1304)    mov   A, <UART_1_aRxBuffer               ; Get address to receive buffer
05B8: 02 3B    ADD   A,[buffer+26]      (1305)    add   A, [ptrParam]                      ; Add string offset
05BA: 5C       MOV   X,A                (1306)    mov   X, A
                                        (1307)    RAM_SETPAGE_IDX >UART_1_aRxBuffer
05BB: 52 00    MOV   A,[X+0]            (1308)    mov   A, [X]                             ; Get character pointed by X
05BD: B0 04    JNZ   0x05C2             (1309)    jnz   .SkipOverDelimitersLoop            ; Null? No,  continue...
05BF: 10       PUSH  X                  (1310)    push  X                                  ;       Yes, Save LSB of current pointer
05C0: 80 33    JMP   0x05F4             (1311)    jmp   .End_GetNextParam
                                        (1312)                                             ; Check for delimiter and keep looping until
                                        (1313)                                             ; all leading delimiters have been found.
                                        (1314) .SkipOverDelimitersLoop:
05C2: 39 20    CMP   A,0x20             (1315)    cmp   A, UART_1_DELIMITER                ; Do we have a delimiter?
05C4: B0 11    JNZ   0x05D6             (1316)    jnz   .ParamStartFound                   ;   No,  Bingo! found a parameter
05C6: 75       INC   X                  (1317)    inc   X                                  ;   Yes, Increment both index and...
05C7: 76 3B    INC   [buffer+26]        (1318)    inc   [ptrParam]                         ;          the stored pointer.
05C9: 52 00    MOV   A,[X+0]            (1319)    mov   A, [X]                             ; Get character pointed by X
05CB: 3C 3B 0F CMP   [buffer+26],0xF    (1320)    cmp   [ptrParam], (UART_1_RX_BUFFER_SIZE -1)   ; End of buffer?
05CE: BF F3    JNZ   0x05C2             (1321)    jnz   .SkipOverDelimitersLoop            ;   No,  continue the scan
                                        (1322) 
                                        (1323) .EndOfString:                               ;   Yes, end of string found...
05D0: 10       PUSH  X                  (1324)    push  X                                  ;        Save ptr
                                        (1325) .TerminateString:
05D1: 56 00 00 MOV   [X+0],0x0          (1326)    mov   [X], 0x00                          ; Make sure string is zero
05D4: 80 1F    JMP   0x05F4             (1327)    jmp   .End_GetNextParam
                                        (1328) 
                                        (1329) .ParamStartFound:
05D6: 10       PUSH  X                  (1330)    push  X                                  ; Beginning of parameter found, save pointer
                                        (1331) 
                                        (1332) .ParamLoop:                                 ; Now loop until end of parameter found.
05D7: 75       INC   X                  (1333)    inc   X                                  ; Advance pointers.
05D8: 76 3B    INC   [buffer+26]        (1334)    inc   [ptrParam]
05DA: 3C 3B 0F CMP   [buffer+26],0xF    (1335)    cmp   [ptrParam], (UART_1_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
05DD: AF F3    JZ    0x05D1             (1336)    jz    .TerminateString
05DF: 52 00    MOV   A,[X+0]            (1337)    mov   A, [X]                             ; Get next character
05E1: A0 12    JZ    0x05F4             (1338)    jz    .End_GetNextParam
05E3: 39 20    CMP   A,0x20             (1339)    cmp   A, UART_1_DELIMITER                ; Check if we have a delimiter
05E5: BF F1    JNZ   0x05D7             (1340)    jnz   .ParamLoop                         ; Still no delimiter, loop again
05E7: 56 00 00 MOV   [X+0],0x0          (1341)    mov   [X], 0x00                          ; Replace delimiter with null for end of substring
05EA: 76 3B    INC   [buffer+26]        (1342)    inc   [ptrParam]
05EC: 3C 3B 0F CMP   [buffer+26],0xF    (1343)    cmp   [ptrParam], (UART_1_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
05EF: B0 04    JNZ   0x05F4             (1344)    jnz   .End_GetNextParam                  ; If not end of string leave
05F1: 55 3B 0F MOV   [buffer+26],0xF    (1345)    mov   [ptrParam], (UART_1_RX_BUFFER_SIZE -1)   ; Reset pointer to end of string.
                                        (1346) 
                                        (1347) .End_GetNextParam:
05F4: 20       POP   X                  (1348)    pop   X
05F5: 10       PUSH  X                  (1349)    push  X
05F6: 3D 00 00 CMP   [X+0],0x0          (1350)    cmp   [X], 0x00
05F9: B0 06    JNZ   0x0600             (1351)    jnz   .NotNullString
05FB: 20       POP   X                  (1352)    pop   X
05FC: 57 00    MOV   X,0x0              (1353)    mov   X, 0x00
05FE: 5B       MOV   A,X                (1354)    mov   A, X
                                        (1355)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1356)    RAM_EPILOGUE RAM_USE_CLASS_4
05FF: 7F       RET                      (1357)    ret
                                        (1358) 
                                        (1359) .NotNullString:
0600: 20       POP   X                  (1360)    pop  X
0601: 50 00    MOV   A,0x0              (1361)    mov  A, >UART_1_aRxBuffer                ; Return pointer
                                        (1362)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1363)    RAM_EPILOGUE RAM_USE_CLASS_4
0603: 7F       RET                      (1364)    ret
                                        (1365) .ENDSECTION
                                        (1366) 
                                        (1367) 
                                        (1368) .SECTION
                                        (1369) ;-----------------------------------------------------------------------------
                                        (1370) ;  FUNCTION NAME: UART_1_szGetRestOfParams
                                        (1371) ;
                                        (1372) ;  DESCRIPTION:
                                        (1373) ;      Returns a pointer to the rest of the UART RX buffer
                                        (1374) ;-----------------------------------------------------------------------------
                                        (1375) ;
                                        (1376) ;  ARGUMENTS:  none
                                        (1377) ;
                                        (1378) ;  RETURNS:
                                        (1379) ;     A => MSB of parameter
                                        (1380) ;     X => LSB of parameter
                                        (1381) ;
                                        (1382) ;  SIDE EFFECTS:
                                        (1383) ;    The A and X registers may be modified by this or future implementations
                                        (1384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1387) ;    functions.
                                        (1388) ;          
                                        (1389) ;    Currently only the page pointer registers listed below are modified: 
                                        (1390) ;          CUR_PP
                                        (1391) ;
                                        (1392)  UART_1_szGetRestOfParams:
                                        (1393) _UART_1_szGetRestOfParams:
                                        (1394)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1395)    RAM_SETPAGE_CUR >ptrParam
0604: 50 2B    MOV   A,0x2B             (1396)    mov  A, <UART_1_aRxBuffer                ; Get address to receive buffer
0606: 02 3B    ADD   A,[buffer+26]      (1397)    add  A, [ptrParam]                       ; Add string offset
0608: 5C       MOV   X,A                (1398)    mov  X,A
0609: 50 00    MOV   A,0x0              (1399)    mov  A,>UART_1_aRxBuffer                 ; Return pointer
                                        (1400)    RAM_EPILOGUE RAM_USE_CLASS_4
060B: 7F       RET                      (1401)    ret
                                        (1402) .ENDSECTION
                                        (1403) 
                                        (1404) ENDIF
                                        (1405) 
                                        (1406) 
                                        (1407) ; End of File UART_1.asm
FILE: lib\pwm8_vasenint.asm             (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_VASENINT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8_VASEN.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8_VASEN_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8_VASEN_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8_VASEN_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
060C: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM8_VASENINT.asm
FILE: lib\pwm8_vasen.asm                (0001) ;;*****************************************************************************
060D: 43 E1 01 OR    REG[0xE1],0x1      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_VASEN.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8_VASEN.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8_VASEN_EnableInt
                                        (0030) export _PWM8_VASEN_EnableInt
                                        (0031) export  PWM8_VASEN_DisableInt
                                        (0032) export _PWM8_VASEN_DisableInt
                                        (0033) export  PWM8_VASEN_Start
                                        (0034) export _PWM8_VASEN_Start
                                        (0035) export  PWM8_VASEN_Stop
                                        (0036) export _PWM8_VASEN_Stop
                                        (0037) export  PWM8_VASEN_WritePeriod
                                        (0038) export _PWM8_VASEN_WritePeriod
                                        (0039) export  PWM8_VASEN_WritePulseWidth
                                        (0040) export _PWM8_VASEN_WritePulseWidth
                                        (0041) export  PWM8_VASEN_bReadPulseWidth
                                        (0042) export _PWM8_VASEN_bReadPulseWidth
                                        (0043) export  PWM8_VASEN_bReadCounter
                                        (0044) export _PWM8_VASEN_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8_VASEN_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8_VASEN_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8_VASEN_ReadCounter       ; deprecated
                                        (0051) export _bPWM8_VASEN_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA robottiprojekti_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8_VASEN_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8_VASEN_EnableInt:
                                        (0091) _PWM8_VASEN_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8_VASEN_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
0610: 7F       RET                      (0095)    ret
0611: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8_VASEN_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8_VASEN_DisableInt:
                                        (0119) _PWM8_VASEN_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8_VASEN_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0614: 7F       RET                      (0123)    ret
0615: 43 23 01 OR    REG[0x23],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8_VASEN_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8_VASEN_Start:
                                        (0148) _PWM8_VASEN_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8_VASEN_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
0618: 7F       RET                      (0152)    ret
0619: 41 23 FE AND   REG[0x23],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8_VASEN_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8_VASEN_Stop:
                                        (0176) _PWM8_VASEN_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8_VASEN_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
061C: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8_VASEN_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8_VASEN_WritePeriod:
                                        (0206) _PWM8_VASEN_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
061D: 60 21    MOV   REG[0x21],A        (0208)    mov   reg[PWM8_VASEN_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
061F: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8_VASEN_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8_VASEN_WritePulseWidth:
                                        (0233) _PWM8_VASEN_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
0620: 60 22    MOV   REG[0x22],A        (0235)    mov   reg[PWM8_VASEN_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
0622: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8_VASEN_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8_VASEN_bReadPulseWidth:
                                        (0260) _PWM8_VASEN_bReadPulseWidth:
                                        (0261)  bPWM8_VASEN_ReadPulseWidth:                     ; this name deprecated
                                        (0262) _bPWM8_VASEN_ReadPulseWidth:                     ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
0623: 5D 22    MOV   A,REG[0x22]        (0264)    mov   A, reg[PWM8_VASEN_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
0625: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8_VASEN_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8_VASEN_bReadCounter:
                                        (0293) _PWM8_VASEN_bReadCounter:
                                        (0294)  bPWM8_VASEN_ReadCounter:                        ; this name deprecated
                                        (0295) _bPWM8_VASEN_ReadCounter:                        ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
0626: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
0627: 5D 22    MOV   A,REG[0x22]        (0304)    mov   A, reg[PWM8_VASEN_COMPARE_REG]          ; Save the Compare register on the stack
0629: 08       PUSH  A                  (0305)    push  A                                       ;
062A: 41 23 FE AND   REG[0x23],0xFE     
062D: 71 10    OR    F,0x10             
                                        (0306)    PWM8_VASEN_Stop_M                             ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
062F: 5D 21    MOV   A,REG[0x21]        (0308)    mov   A, reg[PWM8_VASEN_INPUT_REG]            ; save the clock input setting
0631: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
0632: 62 21 00 MOV   REG[0x21],0x0      (0311)    mov   reg[PWM8_VASEN_INPUT_REG], INPUT_REG_NULL
0635: 70 EF    AND   F,0xEF             
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
0637: 5D 20    MOV   A,REG[0x20]        (0314)    mov   A, reg[PWM8_VASEN_COUNTER_REG]          ; DR2 <- DR0
0639: 5D 22    MOV   A,REG[0x22]        (0315)    mov   A, reg[PWM8_VASEN_COMPARE_REG]          ; Stash the Count on the stack
063B: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
063C: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
063E: 60 22    MOV   REG[0x22],A        (0318)    mov   reg[PWM8_VASEN_COMPARE_REG], A
0640: 71 10    OR    F,0x10             
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
0642: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
0644: 60 21    MOV   REG[0x21],A        (0321)    mov   reg[PWM8_VASEN_INPUT_REG], A            ;
0646: 70 EF    AND   F,0xEF             
0648: 43 23 01 OR    REG[0x23],0x1      
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8_VASEN_Start_M                            ;   then re-enable the PWM.
064B: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
064C: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
064E: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8_VASEN.asm
FILE: lib\pwm8_oikeaint.asm             (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_OIKEAINT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8_OIKEA.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8_OIKEA_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8_OIKEA_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8_OIKEA_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
064F: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM8_OIKEAINT.asm
FILE: lib\pwm8_oikea.asm                (0001) ;;*****************************************************************************
0650: 43 E1 02 OR    REG[0xE1],0x2      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_OIKEA.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8_OIKEA.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8_OIKEA_EnableInt
                                        (0030) export _PWM8_OIKEA_EnableInt
                                        (0031) export  PWM8_OIKEA_DisableInt
                                        (0032) export _PWM8_OIKEA_DisableInt
                                        (0033) export  PWM8_OIKEA_Start
                                        (0034) export _PWM8_OIKEA_Start
                                        (0035) export  PWM8_OIKEA_Stop
                                        (0036) export _PWM8_OIKEA_Stop
                                        (0037) export  PWM8_OIKEA_WritePeriod
                                        (0038) export _PWM8_OIKEA_WritePeriod
                                        (0039) export  PWM8_OIKEA_WritePulseWidth
                                        (0040) export _PWM8_OIKEA_WritePulseWidth
                                        (0041) export  PWM8_OIKEA_bReadPulseWidth
                                        (0042) export _PWM8_OIKEA_bReadPulseWidth
                                        (0043) export  PWM8_OIKEA_bReadCounter
                                        (0044) export _PWM8_OIKEA_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8_OIKEA_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8_OIKEA_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8_OIKEA_ReadCounter       ; deprecated
                                        (0051) export _bPWM8_OIKEA_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA robottiprojekti_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8_OIKEA_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8_OIKEA_EnableInt:
                                        (0091) _PWM8_OIKEA_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8_OIKEA_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
0653: 7F       RET                      (0095)    ret
0654: 41 E1 FD AND   REG[0xE1],0xFD     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8_OIKEA_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8_OIKEA_DisableInt:
                                        (0119) _PWM8_OIKEA_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8_OIKEA_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0657: 7F       RET                      (0123)    ret
0658: 43 27 01 OR    REG[0x27],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8_OIKEA_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8_OIKEA_Start:
                                        (0148) _PWM8_OIKEA_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8_OIKEA_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
065B: 7F       RET                      (0152)    ret
065C: 41 27 FE AND   REG[0x27],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8_OIKEA_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8_OIKEA_Stop:
                                        (0176) _PWM8_OIKEA_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8_OIKEA_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
065F: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8_OIKEA_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8_OIKEA_WritePeriod:
                                        (0206) _PWM8_OIKEA_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
0660: 60 25    MOV   REG[0x25],A        (0208)    mov   reg[PWM8_OIKEA_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
0662: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8_OIKEA_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8_OIKEA_WritePulseWidth:
                                        (0233) _PWM8_OIKEA_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
0663: 60 26    MOV   REG[0x26],A        (0235)    mov   reg[PWM8_OIKEA_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
0665: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8_OIKEA_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8_OIKEA_bReadPulseWidth:
                                        (0260) _PWM8_OIKEA_bReadPulseWidth:
                                        (0261)  bPWM8_OIKEA_ReadPulseWidth:                     ; this name deprecated
                                        (0262) _bPWM8_OIKEA_ReadPulseWidth:                     ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
0666: 5D 26    MOV   A,REG[0x26]        (0264)    mov   A, reg[PWM8_OIKEA_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
0668: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8_OIKEA_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8_OIKEA_bReadCounter:
                                        (0293) _PWM8_OIKEA_bReadCounter:
                                        (0294)  bPWM8_OIKEA_ReadCounter:                        ; this name deprecated
                                        (0295) _bPWM8_OIKEA_ReadCounter:                        ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
0669: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
066A: 5D 26    MOV   A,REG[0x26]        (0304)    mov   A, reg[PWM8_OIKEA_COMPARE_REG]          ; Save the Compare register on the stack
066C: 08       PUSH  A                  (0305)    push  A                                       ;
066D: 41 27 FE AND   REG[0x27],0xFE     
0670: 71 10    OR    F,0x10             
                                        (0306)    PWM8_OIKEA_Stop_M                             ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
0672: 5D 25    MOV   A,REG[0x25]        (0308)    mov   A, reg[PWM8_OIKEA_INPUT_REG]            ; save the clock input setting
0674: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
0675: 62 25 00 MOV   REG[0x25],0x0      (0311)    mov   reg[PWM8_OIKEA_INPUT_REG], INPUT_REG_NULL
0678: 70 EF    AND   F,0xEF             
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
067A: 5D 24    MOV   A,REG[0x24]        (0314)    mov   A, reg[PWM8_OIKEA_COUNTER_REG]          ; DR2 <- DR0
067C: 5D 26    MOV   A,REG[0x26]        (0315)    mov   A, reg[PWM8_OIKEA_COMPARE_REG]          ; Stash the Count on the stack
067E: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
067F: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
0681: 60 26    MOV   REG[0x26],A        (0318)    mov   reg[PWM8_OIKEA_COMPARE_REG], A
0683: 71 10    OR    F,0x10             
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
0685: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
0687: 60 25    MOV   REG[0x25],A        (0321)    mov   reg[PWM8_OIKEA_INPUT_REG], A            ;
0689: 70 EF    AND   F,0xEF             
068B: 43 27 01 OR    REG[0x27],0x1      
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8_OIKEA_Start_M                            ;   then re-enable the PWM.
068E: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
068F: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
0691: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8_OIKEA.asm
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2013/5/19 at 10:43:48
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
0692: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
0693: 10       PUSH  X                  (0209)     push  X
0694: 28       ROMX                     (0210)     romx                               ; Get character from ROM
0695: B0 04    JNZ   0x069A             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
0697: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
0698: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
0699: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
069A: 90 3C    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(0218)     call  LCD_WriteData                ; Write data to LCD
069C: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
069D: 18       POP   A                  (0220)     pop   A
069E: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
069F: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
06A1: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
06A2: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
06B4: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
06B5: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
06B6: 67       ASR   A                  (0262)     asr   A
06B7: 67       ASR   A                  (0263)     asr   A
06B8: 67       ASR   A                  (0264)     asr   A
06B9: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
06BB: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
06BD: 90 19    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(0267)     call  LCD_WriteData                ; Write data to screen
06BF: 18       POP   A                  (0268)     pop   A                            ; Restore value
06C0: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
06C2: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
06C4: 90 12    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
06C6: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
06C7: 4B       SWAP  A,X                (0305)     swap  A,X
06C8: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
06CA: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
06CB: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
06CD: 7F       RET                      (0310)     ret
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
06CE: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
06D0: A0 06    JZ    0x06D7             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
06D2: 90 04    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(0349)     call  LCD_WriteData                ; Write data to screen
06D4: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
06D5: 8F F8    JMP   _LCD_PrString      (0351)     jmp   .Loop_PrString               ; Go get next character
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
06D7: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
06D8: 90 5F    CALL  0x0739             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
06DA: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
06DB: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
06DC: 67       ASR   A                  (0390)     asr   A
06DD: 67       ASR   A                  (0391)     asr   A
06DE: 67       ASR   A                  (0392)     asr   A
06DF: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
06E1: 90 38    CALL  0x071B             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
06E3: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
06E4: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
06E6: 40       NOP                      (0397)     nop
06E7: 40       NOP                      (0398)     nop
06E8: 40       NOP                      (0399)     nop
06E9: 90 30    CALL  0x071B             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
06EB: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
06EC: 90 4B    CALL  0x0739             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
06EE: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
06EF: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
06F0: 67       ASR   A                  (0436)     asr   A
06F1: 67       ASR   A                  (0437)     asr   A
06F2: 67       ASR   A                  (0438)     asr   A
06F3: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
06F5: 90 09    CALL  0x0700             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
06F7: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
06F8: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
06FA: 40       NOP                      (0443)     nop
06FB: 40       NOP                      (0444)     nop
06FC: 40       NOP                      (0445)     nop
06FD: 90 01    CALL  0x0700             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
06FF: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
0700: 08       PUSH  A                  (0477)     push  A
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
0701: 26 1E 80 AND   [0x1E],0x80        (0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0704: 51 1E    MOV   A,[0x1E]           (0480)     mov   A,[Port_2_Data_SHADE]
0706: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
0708: 18       POP   A                  (0483)     pop   A
0709: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
070B: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
070D: 2A 1E    OR    A,[0x1E]           (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
070F: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
0711: 53 1E    MOV   [0x1E],A           (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0713: 40       NOP                      (0489)     nop
0714: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
0716: 53 1E    MOV   [0x1E],A           (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0718: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
071A: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
071B: 08       PUSH  A                  (0523)     push  A
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
071C: 26 1E 80 AND   [0x1E],0x80        (0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
071F: 2E 1E 20 OR    [0x1E],0x20        (0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
0722: 51 1E    MOV   A,[0x1E]           (0527)     mov   A,[Port_2_Data_SHADE]
0724: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
0726: 18       POP   A                  (0530)     pop   A
0727: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
0729: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
072B: 2A 1E    OR    A,[0x1E]           (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
072D: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
072F: 53 1E    MOV   [0x1E],A           (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
0731: 40       NOP                      (0536)     NOP
0732: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
0734: 53 1E    MOV   [0x1E],A           (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
0736: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
0738: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
0739: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
073A: 26 1E 80 AND   [0x1E],0x80        (0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
073D: 51 1E    MOV   A,[0x1E]           (0574)     mov   A,[Port_2_Data_SHADE]
073F: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
0741: 26 1F F0 AND   [0x1F],0xF0        (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
0744: 51 1F    MOV   A,[0x1F]           (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
0746: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
0748: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
074A: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
074C: 2E 1E 40 OR    [0x1E],0x40        (0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
074F: 51 1E    MOV   A,[0x1E]           (0584)     mov   A,[Port_2_Data_SHADE]
0751: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
0753: 40       NOP                      (0586)     NOP
                                        (0587) 
0754: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
0755: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
0757: 2E 1E 50 OR    [0x1E],0x50        (0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
075A: 51 1E    MOV   A,[0x1E]           (0593)     mov   A,[Port_2_Data_SHADE]
075C: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
075E: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
075F: 40       NOP                      (0597)     nop
0760: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
0762: 08       PUSH  A                  (0610)     push  A
0763: 26 1E C0 AND   [0x1E],0xC0        (0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
0766: 51 1E    MOV   A,[0x1E]           (0612)     mov   A,[Port_2_Data_SHADE]
0768: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
076A: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
076B: 40       NOP                      (0616)     nop                                    ; fastest PSoC
076C: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
076D: 2E 1E 50 OR    [0x1E],0x50        (0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
0770: 51 1E    MOV   A,[0x1E]           (0620)     mov   A,[Port_2_Data_SHADE]
0772: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
0774: 40       NOP                      (0623)     nop
0775: 40       NOP                      (0624)     nop
                                        (0625) 
0776: 26 1E C0 AND   [0x1E],0xC0        (0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
0779: 51 1E    MOV   A,[0x1E]           (0627)     mov   A,[Port_2_Data_SHADE]
077B: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
077D: 18       POP   A                  (0630)     pop   A
077E: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
0780: A0 04    JZ    0x0785             (0633)     jz    .UNLOCK
0782: 79       DEC   X                  (0634)     dec   X
0783: BF D3    JNZ   0x0757             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
0785: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
0786: 2E 1F 7F OR    [0x1F],0x7F        (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
0789: 51 1F    MOV   A,[0x1F]           (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
078B: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
078D: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
078F: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
0791: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
0792: 7F       RET                      (0646)     ret
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
0793: 26 1F 80 AND   [0x1F],0x80        (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
0796: 2E 1F 7F OR    [0x1F],0x7F        (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
0799: 26 20 80 AND   [0x20],0x80        (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
079C: 51 1F    MOV   A,[0x1F]           (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
079E: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
07A0: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
07A2: 51 20    MOV   A,[0x20]           (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
07A4: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
07A6: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
07A8: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
07AA: 90 63    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
07AC: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
07AE: 90 5F    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
07B0: 50 03    MOV   A,0x3              (0701)     mov   A,03h
07B2: 9F 4C    CALL  0x0700             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
07B4: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
07B6: 90 57    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
07B8: 50 03    MOV   A,0x3              (0707)     mov   A,03h
07BA: 9F 44    CALL  0x0700             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
07BC: 90 5F    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
07BE: 90 5D    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
07C0: 90 5B    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
07C2: 50 03    MOV   A,0x3              (0714)     mov   A,03h
07C4: 9F 3A    CALL  0x0700             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
07C6: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
07C8: 90 45    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
07CA: 50 02    MOV   A,0x2              (0720)     mov   A,02h
07CC: 9F 32    CALL  0x0700             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
07CE: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
07D0: 90 3D    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
07D2: 50 08    MOV   A,0x8              (0726)     mov   A,08h
07D4: 9F 16    CALL  _LCD_Control       (0727)     call  LCD_Control
07D6: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
07D8: 90 35    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
07DA: 50 01    MOV   A,0x1              (0731)     mov   A,01h
07DC: 9F 0E    CALL  _LCD_Control       (0732)     call  LCD_Control
07DE: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
07E0: 90 2D    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
07E2: 50 06    MOV   A,0x6              (0736)     mov   A,06h
07E4: 9F 06    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
07E6: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
07E8: 9F 02    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
07EA: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
07EC: 9E FE    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
07EE: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
07F0: 9E FA    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
07F2: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
07F4: 9E F6    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
07F6: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
07F8: 9E F2    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
07FA: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
07FC: 90 11    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
07FE: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
0803: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
0805: 10       PUSH  X                  (0791)     push  X                            ; Store COL
0806: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
0808: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
0809: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
080B: 20       POP   X                  (0795)     pop   X
                                        (0796) 
080C: 9E DE    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
080E: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
080F: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
0811: 78       DEC   A                  (0828)     dec   A
0812: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
0814: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
081D: 08       PUSH  A                  (0871)     push  A
081E: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
0820: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
0822: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
0824: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
0826: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
0828: D0 06    JNC   0x082F             (0877)     jnc   .Delay50u_End
082A: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
082C: 78       DEC   A                  (0880)     dec   A                              ; [4]
082D: BF FE    JNZ   0x082C             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
082F: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
0830: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
0831: 10       PUSH  X                  (0943)     push  X
0832: 59 00    MOV   X,[X+0]            (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
0834: 9F CD    CALL  _LCD_Position      (0945)     call  LCD_Position                 ; Set cursor position
0836: 20       POP   X                  (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
0837: 3D FE 00 CMP   [X-2],0x0          (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
083A: B0 05    JNZ   0x0840             (0950)     jnz   .LCD_CHECK1X
083C: 50 00    MOV   A,0x0              (0951)     mov   A,00h                         ; Load empty character
083E: 80 11    JMP   0x0850             (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
0840: 3D FE 06 CMP   [X-2],0x6          (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
0843: D0 07    JNC   0x084B             (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
0845: 52 FE    MOV   A,[X-2]            (0957)     mov   A,[X+BG_LENGTHX]
0847: 15 FE    SUB   [X-2],A            (0958)     sub   [X+BG_LENGTHX],A
0849: 80 06    JMP   0x0850             (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
084B: 50 06    MOV   A,0x6              (0962)     mov   A, 06h
084D: 17 FE 05 SUB   [X-2],0x5          (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
0850: 9E 86    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
0852: 7B FF    DEC   [X-1]              (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
0854: BF E2    JNZ   0x0837             (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
0856: 7F       RET                      (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
0857: 4F       MOV   X,SP               (1015)     mov   X, SP
0858: 10       PUSH  X                  (1016)     push  X
0859: 52 FD    MOV   A,[X-3]            (1017)     mov   A,[X+BG_ROW]                 ; Row in A
085B: 59 FC    MOV   X,[X-4]            (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
085D: 9F A4    CALL  _LCD_Position      (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
085F: 20       POP   X                  (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
0860: 3D FA 00 CMP   [X-6],0x0          (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
0863: B0 05    JNZ   0x0869             (1026)     jnz   .LCD_CHECK1
0865: 50 00    MOV   A,0x0              (1027)     mov   A,00h                        ; Load empty character
0867: 80 11    JMP   0x0879             (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
0869: 3D FA 06 CMP   [X-6],0x6          (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
086C: D0 07    JNC   0x0874             (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
086E: 52 FA    MOV   A,[X-6]            (1033)     mov   A,[X+BG_LENGTH]
0870: 15 FA    SUB   [X-6],A            (1034)     sub   [X+BG_LENGTH],A
0872: 80 06    JMP   0x0879             (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
0874: 50 06    MOV   A,0x6              (1038)     mov   A, 06h
0876: 17 FA 05 SUB   [X-6],0x5          (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
0879: 9E 5D    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
087B: 7B FB    DEC   [X-5]              (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
087D: BF E2    JNZ   0x0860             (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
087F: 7F       RET                      (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
0880: 21 03    AND   A,0x3              (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
0882: 08       PUSH  A                  (1098)     push  A
0883: FF 7A    INDEX LCD_ROW_OFFSET     (1099)     index LCD_ROW_OFFSET  ; Get row offset
0885: 03 00    ADD   A,[X+0]            (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
0887: 9E 63    CALL  _LCD_Control       (1101)     call  LCD_Control                  ; Position Cursor
0889: 3D FE 00 CMP   [X-2],0x0          (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
088C: B0 05    JNZ   0x0892             (1103)     jnz   .VBG_NZ_SEGX
088E: 50 20    MOV   A,0x20             (1104)     mov   A,' '                        ; Load space character
0890: 80 13    JMP   0x08A4             (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
0892: 3D FE 09 CMP   [X-2],0x9          (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
0895: D0 09    JNC   0x089F             (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
0897: 52 FE    MOV   A,[X-2]            (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
0899: 78       DEC   A                  (1111)     dec   A
089A: 56 FE 00 MOV   [X-2],0x0          (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
089D: 80 06    JMP   0x08A4             (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
089F: 17 FE 08 SUB   [X-2],0x8          (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
08A2: 50 07    MOV   A,0x7              (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
08A4: 9E 32    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(1120)     call  LCD_WriteData                ; Write value
08A6: 18       POP   A                  (1121)     pop   A
08A7: 78       DEC   A                  (1122)     dec   A
08A8: 7B FF    DEC   [X-1]              (1123)     dec   [X+VBG_CHAR_HEIGHTX]
08AA: BF D7    JNZ   0x0882             (1124)     jnz   .VBG_LOOPX
08AC: 7F       RET                      (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
08AD: 4F       MOV   X,SP               (1168)     mov   X, SP
08AE: 52 FD    MOV   A,[X-3]            (1169)     mov   A, [X+VBG_ROW]
08B0: 21 03    AND   A,0x3              (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
08B2: 08       PUSH  A                  (1172)     push  A
08B3: FF 4A    INDEX LCD_ROW_OFFSET     (1173)     index LCD_ROW_OFFSET  ; Get row offset
08B5: 03 FC    ADD   A,[X-4]            (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
08B7: 9E 33    CALL  _LCD_Control       (1175)     call  LCD_Control                  ; Position Cursor
08B9: 3D FA 00 CMP   [X-6],0x0          (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
08BC: B0 05    JNZ   0x08C2             (1177)     jnz   .VBG_NZ_SEG
08BE: 50 20    MOV   A,0x20             (1178)     mov   A,' '                        ; Load space character
08C0: 80 13    JMP   0x08D4             (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
08C2: 3D FA 09 CMP   [X-6],0x9          (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
08C5: D0 09    JNC   0x08CF             (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
08C7: 52 FA    MOV   A,[X-6]            (1184)     mov   A,[X+VBG_SEG_HEIGHT]
08C9: 78       DEC   A                  (1185)     dec   A
08CA: 56 FA 00 MOV   [X-6],0x0          (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
08CD: 80 06    JMP   0x08D4             (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
08CF: 17 FA 08 SUB   [X-6],0x8          (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
08D2: 50 07    MOV   A,0x7              (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
08D4: 9E 02    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(1194)     call  LCD_WriteData                ; Write value
08D6: 18       POP   A                  (1195)     pop   A
08D7: 78       DEC   A                  (1196)     dec   A
08D8: 7B FB    DEC   [X-5]              (1197)     dec   [X+VBG_CHAR_HEIGHT]
08DA: BF D7    JNZ   0x08B2             (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
08DC: 7F       RET                      (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
08DD: 4F       MOV   X,SP               (1238)     mov   X,SP                         ; Get location of stack
08DE: 08       PUSH  A                  (1239)     push  A                            ; Create 2 locations
08DF: 08       PUSH  A                  (1240)     push  A
                                        (1241) 
08E0: 50 40    MOV   A,0x40             (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
08E2: 9E 08    CALL  _LCD_Control       (1243)     call  LCD_Control                  ; Position the CG pointer
08E4: 56 00 01 MOV   [X+0],0x1          (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
08E7: 56 01 08 MOV   [X+1],0x8          (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
08EA: 52 00    MOV   A,[X+0]            (1249)     mov   A,[X+VBGDATA_CTR]
08EC: 3B 01    CMP   A,[X+1]            (1250)     cmp   A,[X+VBG_BYTES]
08EE: D0 05    JNC   0x08F4             (1251)     jnc   .VBG_SOLID
08F0: 50 00    MOV   A,0x0              (1252)     mov   A,00h                        ; Empty line
08F2: 80 03    JMP   0x08F6             (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
08F4: 50 FF    MOV   A,0xFF             (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
08F6: 9D E0    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(1257)     call  LCD_WriteData                ; character data
08F8: 7B 01    DEC   [X+1]              (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
08FA: BF EF    JNZ   0x08EA             (1259)     jnz   .VBG_Loop2                    ; End Loop 2
08FC: 77 00    INC   [X+0]              (1260)     inc   [X+VBGDATA_CTR]
08FE: 3D 00 09 CMP   [X+0],0x9          (1261)     cmp   [X+VBGDATA_CTR],09h
0901: BF E5    JNZ   0x08E7             (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
0903: 18       POP   A                  (1264)     pop  A
0904: 18       POP   A                  (1265)     pop  A
0905: 50 0C    MOV   A,0xC              (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
0907: 9D E3    CALL  _LCD_Control       (1267)     call LCD_Control                   ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
0909: 7F       RET                      (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
0918: 4F       MOV   X,SP               (1319)     mov   X,SP                         ; Get location of stack
0919: 38 03    ADD   SP,0x3             (1320)     add   SP,3
091B: 54 02    MOV   [X+2],A            (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
091D: 50 40    MOV   A,0x40             (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
091F: 9D CB    CALL  _LCD_Control       (1324)     call  LCD_Control                  ; Position the CG pointer
0921: 56 00 00 MOV   [X+0],0x0          (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
0924: 56 01 08 MOV   [X+1],0x8          (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
0927: 52 00    MOV   A,[X+0]            (1330)     mov   A,[X+BGDATA_PTR]
0929: 3D 02 00 CMP   [X+2],0x0          (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
092C: B0 05    JNZ   0x0932             (1332)     jnz   .BG_OTHER
092E: FF DA    INDEX LCD_BG_TYPE1       (1333)     index LCD_BG_TYPE1
0930: 80 03    JMP   0x0934             (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
0932: FF DD    INDEX LCD_BG_TYPE2       (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
0934: 9D A2    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(1338)     call  LCD_WriteData
0936: 7B 01    DEC   [X+1]              (1339)     dec   [X+BGCHARS]                  ; Character builder counter
0938: BF EE    JNZ   0x0927             (1340)     jnz   .BG_Loop2
093A: 77 00    INC   [X+0]              (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
093C: 3D 00 07 CMP   [X+0],0x7          (1342)     cmp   [X+BGDATA_PTR],07h
093F: BF E4    JNZ   0x0924             (1343)     jnz   .BG_Loop1
                                        (1344) 
0941: 38 FD    ADD   SP,0xFD            (1345)     add   SP,-3
0943: 50 0C    MOV   A,0xC              (1346)     mov   A,LCD_DISP_ON
0945: 9D A5    CALL  _LCD_Control       (1347)     call  LCD_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
0947: 7F       RET                      (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: .\delay.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: delay.asm
                                        (0004) ;;
                                        (0005) ;;  DESCRIPTION: Delay functions implementation file
                                        (0006) ;;
                                        (0007) ;;-----------------------------------------------------------------------------
                                        (0008) ;;  Copyright (c) Cypress MicroSystems 2002-2006. All Rights Reserved.
                                        (0009) ;;*****************************************************************************
                                        (0010) ;;*****************************************************************************
                                        (0011) 
                                        (0012) ;-----------------------------------------------------------------------------
                                        (0013) ;  Include Files
                                        (0014) ;-----------------------------------------------------------------------------
                                        (0015) include "m8c.inc"
                                        (0016) include "memory.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------------------------------------
                                        (0021) export  Delay50uTimes
                                        (0022) export _Delay50uTimes
                                        (0023) 
                                        (0024) export  Delay50u
                                        (0025) export _Delay50u
                                        (0026) 
                                        (0027) export  Delay10msTimes
                                        (0028) export _Delay10msTimes
                                        (0029) 
                                        (0030) 
                                        (0031) area text(rom)
                                        (0032) .SECTION
                                        (0033) ;-----------------------------------------------------------------------------
                                        (0034) ;  FUNCTION NAME: DelaySeconds
                                        (0035) ;
                                        (0036) ;  DESCRIPTION:
                                        (0037) ;     Delay increments of 10mSeconds
                                        (0038) ;
                                        (0039) ;-----------------------------------------------------------------------------
                                        (0040) ;
                                        (0041) ;  ARGUMENTS:
                                        (0042) ;     A contains the delay multiplier
                                        (0043) ;
                                        (0044) ;  RETURNS:
                                        (0045) ;
                                        (0046) ;  SIDE EFFECTS:
                                        (0047) ;    The A and X registers may be modified by this or future implementations
                                        (0048) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0049) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0050) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0051) ;    functions.
                                        (0052) 
                                        (0053) 
                                        (0054)  Delay10msTimes:
                                        (0055) _Delay10msTimes:
                                        (0056)     RAM_PROLOGUE RAM_USE_CLASS_1
0948: 08       PUSH  A                  (0057) 	push A
                                        (0058) 
0949: 50 C8    MOV   A,0xC8             (0059) 	mov A, 200
                                        (0060) 	DELAY50US:
094B: 90 16    CALL  _Delay50u          (0061)     call  Delay50u
094D: 78       DEC   A                  (0062)     dec   A
094E: BF FC    JNZ   0x094B             (0063)     jnz   DELAY50US
                                        (0064) 
0950: 18       POP   A                  (0065) 	pop A
0951: 78       DEC   A                  (0066) 	dec   A
0952: BF F5    JNZ   __UserModules_end|__text_start|_Delay10msTimes|Delay10msTimes(0067)     jnz   Delay10msTimes
                                        (0068) 
                                        (0069)     RAM_EPILOGUE RAM_USE_CLASS_1
0954: 7F       RET                      (0070)     ret
                                        (0071) .ENDSECTION
                                        (0072) 
                                        (0073) 
                                        (0074) 
                                        (0075) 
                                        (0076) .SECTION
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) ;  FUNCTION NAME: Delay50uTimes
                                        (0079) ;
                                        (0080) ;  DESCRIPTION:
                                        (0081) ;     Delay increments of 50uSeconds
                                        (0082) ;
                                        (0083) ;-----------------------------------------------------------------------------
                                        (0084) ;
                                        (0085) ;  ARGUMENTS:
                                        (0086) ;     A contains the delay multiplier
                                        (0087) ;
                                        (0088) ;  RETURNS:
                                        (0089) ;
                                        (0090) ;  SIDE EFFECTS:
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097) ;
                                        (0098) 
                                        (0099)  Delay50uTimes:
                                        (0100) _Delay50uTimes:
                                        (0101)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0102) 
0955: 90 0C    CALL  _Delay50u          (0103)     call  Delay50u
0957: 78       DEC   A                  (0104) 	dec A
0958: BF FC    JNZ   _Delay50uTimes     (0105)     jnz   Delay50uTimes
                                        (0106) 
                                        (0107) 	
                                        (0108)     RAM_EPILOGUE RAM_USE_CLASS_1
095A: 7F       RET                      (0109)     ret
                                        (0110) 
                                        (0111) .ENDSECTION
                                        (0112) 
                                        (0113) ;-----------------------------------------------------------------------------
                                        (0114) ;  FUNCTION NAME: Delay50u
                                        (0115) ;
                                        (0116) ;  DESCRIPTION:
                                        (0117) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0118) ;     Slower clock frequencies the delay will be;
                                        (0119) ;           1.5
                                        (0120) ;        -------------- * 50uSec
                                        (0121) ;        clock_freq(MHz)
                                        (0122) ;
                                        (0123) ;
                                        (0124) ;-----------------------------------------------------------------------------
                                        (0125) ;
                                        (0126) ;  ARGUMENTS: none
                                        (0127) ;
                                        (0128) ;  RETURNS: none
                                        (0129) ;
                                        (0130) ;  SIDE EFFECTS:
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137) ;  THEORY of OPERATION or PROCEDURE:
                                        (0138) ;
                                        (0139) .LITERAL
                                        (0140)  Delay50u_Table::
                                        (0141)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0142) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0143) .ENDLITERAL
                                        (0144) .SECTION
                                        (0145) 
                                        (0146)   Delay50u:
                                        (0147)  _Delay50u:                      ; [11]  Call
                                        (0148)     RAM_PROLOGUE RAM_USE_CLASS_1
0963: 08       PUSH  A                  (0149)     push  A
0964: 71 10    OR    F,0x10             
                                        (0150)     M8C_SetBank1                       ; [4]
0966: 5D E0    MOV   A,REG[0xE0]        (0151)     mov   A, reg[OSC_CR0]              ; [6] Get delay value
0968: 70 EF    AND   F,0xEF             
                                        (0152)     M8C_SetBank0                       ; [4]
096A: 21 07    AND   A,0x7              (0153)     and   A,07h                        ; [4] Mask off only the clock bits
096C: 39 05    CMP   A,0x5              (0154)     cmp   A,05h
096E: D0 06    JNC   0x0975             (0155)     jnc   Delay50u_End
0970: FF E9    INDEX Delay50u_Table     (0156)     index Delay50u_Table               ; [13] Get delay value
                                        (0157) Delay50u_Loop:                         ;
0972: 78       DEC   A                  (0158)     dec   A                            ; [4]
0973: BF FE    JNZ   0x0972             (0159)     jnz   Delay50u_Loop                ; [5]
                                        (0160) Delay50u_End:
0975: 18       POP   A                  (0161)     pop   A
                                        (0162)     RAM_EPILOGUE RAM_USE_CLASS_1
0976: 7F       RET                      (0163)     ret
FILE: Z:\robotti\Robor7\ROBOTT~1\ROBOTT~1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // Robotti Projekti
(0003) // Robor7 @ 2014
(0004) // Kasper Kiiskinen, Henri Sinokki, Eero Holopainen, Mikko Liira, Kari Lampi
(0005) //----------------------------------------------------------------------------
(0006) 
(0007) #include <m8c.h>        // part specific constants and macros
(0008) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0009) #include<stdio.h>
(0010) #include<stdlib.h>
(0011) #include "delay.h"
(0012) #include <math.h> 
(0013) #include "string.h"
(0014) 
(0015) //Omat header filet
(0016) #include "MotorControl.h"
(0017) #include "UltraControl.h"
(0018) //#include "GyroControl.h"
(0019) 
(0020) #pragma interrupt_handler PinInterrupt
(0021) 
(0022) void Delay(int);
(0023) void TestLoop(void);
(0024) 
(0025) //Kellot
(0026) volatile int timeT = 0;
(0027) int timeUltra = 0,timeUltraRead = 0;
(0028) volatile unsigned long int milliT = 0;
(0029) 
(0030) volatile int distanceCM = 0;
(0031) char buffer[10];
(0032) 
(0033) 
(0034) 
(0035) //Main Method
(0036) void main(void)
(0037) {
_main:
  j                    --> X+41
  i                    --> X+39
  buf                  --> X+37
  Status               --> X+35
  uartBuf              --> X+34
  aaa                  --> X+32
  apu                  --> X+30
  yEtu                 --> X+28
  xEtu                 --> X+26
  axis_y               --> X+24
  axis_x               --> X+22
  y                    --> X+17
  x                    --> X+12
  y_temp               --> X+7
  x_temp               --> X+2
  strPtr               --> X+0
    0977: 10       PUSH  X
    0978: 4F       MOV   X,SP
    0979: 38 2B    ADD   SP,0x2B
(0038) 	//Init**************************
(0039) 	//UART
(0040) 	char * strPtr;                        // Parameter pointer
(0041) 	char uartBuf;
(0042) 	char x_temp[5];
(0043) 	char y_temp[5];
(0044) 	char x[5];
(0045) 	char y[5];
(0046) 	int axis_x;
(0047) 	int axis_y;
(0048) 	int apu = 0;
    097B: 56 1F 00 MOV   [X+31],0x0
    097E: 56 1E 00 MOV   [X+30],0x0
(0049) 	int aaa = 0;
    0981: 56 21 00 MOV   [X+33],0x0
    0984: 56 20 00 MOV   [X+32],0x0
(0050) 	int xEtu = 0;
    0987: 56 1B 00 MOV   [X+27],0x0
    098A: 56 1A 00 MOV   [X+26],0x0
(0051) 	int yEtu = 0;
    098D: 56 1D 00 MOV   [X+29],0x0
    0990: 56 1C 00 MOV   [X+28],0x0
(0052) 	
(0053)     int Status;
(0054)     char* buf;
(0055) 	
(0056) 	UART_1_CmdReset();                      // Initialize receiver/cmd // buffer
    0993: 10       PUSH  X
    0994: 7C 05 99 LCALL _UART_1_CmdReset
(0057)     //UART_1_IntCntl(UART_1_ENABLE_RX_INT);     // Enable RX interrupts
(0058) 	UART_1_Start(UART_1_PARITY_NONE); 
    0997: 50 00    MOV   A,0x0
    0999: 7C 04 83 LCALL _UART_1_Start
    099C: 20       POP   X
(0059) 	
(0060) 	//Enables Global Interrupts
(0061) 	M8C_EnableGInt; 
    099D: 71 01    OR    F,0x1
(0062) 	M8C_EnableIntMask(INT_MSK0, INT_MSK0_GPIO);	//VITTU
    099F: 43 E0 20 OR    REG[0xE0],0x20
(0063) 	
(0064) 	//Start LCD
(0065) 	LCD_Start();
    09A2: 10       PUSH  X
    09A3: 7C 07 93 LCALL _LCD_Init|_LCD_Start|LCD_Start
    09A6: 20       POP   X
(0066) 	
(0067) 	//Start Motor PWMs
(0068) 	InitPWM();
    09A7: 7C 0D 16 LCALL _InitPWM
(0069) 	
(0070) 	//Init Servo
(0071) 	InitUAServo();
    09AA: 7C 10 8E LCALL _InitUAServo
(0072) 		
(0073) 	Delay10msTimes(100);
    09AD: 10       PUSH  X
    09AE: 50 64    MOV   A,0x64
    09B0: 7C 09 48 LCALL __UserModules_end|__text_start|_Delay10msTimes|Delay10msTimes
    09B3: 20       POP   X
    09B4: 83 07    JMP   0x0CBC
(0074) 	
(0075) 	//Testink
(0076) 	//TestLoop();
(0077) 
(0078) 	//MainLoop**********
(0079) 	//***********************
(0080) 	while(1)
(0081) 	{
(0082) 		//TATTI OHJAUS
(0083) 		int j = 0; int i = 0;
    09B6: 56 2A 00 MOV   [X+42],0x0
    09B9: 56 29 00 MOV   [X+41],0x0
    09BC: 56 28 00 MOV   [X+40],0x0
    09BF: 56 27 00 MOV   [X+39],0x0
(0084) 		for(j = 0; j < 9; j++)
    09C2: 56 2A 00 MOV   [X+42],0x0
    09C5: 56 29 00 MOV   [X+41],0x0
(0085) 		{
(0086) 			if (UART_1_cGetChar() == 'A')
    09C8: 10       PUSH  X
    09C9: 7C 04 FF LCALL _UART_1_cGetChar
    09CC: 20       POP   X
    09CD: 39 41    CMP   A,0x41
    09CF: B0 03    JNZ   0x09D3
(0087) 			{
(0088) 				break;
    09D1: 80 12    JMP   0x09E4
(0089) 			}
(0090) 		}
    09D3: 77 2A    INC   [X+42]
    09D5: 0F 29 00 ADC   [X+41],0x0
    09D8: 52 2A    MOV   A,[X+42]
    09DA: 11 09    SUB   A,0x9
    09DC: 52 29    MOV   A,[X+41]
    09DE: 31 80    XOR   A,0x80
    09E0: 19 80    SBB   A,0x80
    09E2: CF E5    JC    0x09C8
(0091) 			
(0092) 		for(i = 0; i < 8; i++)
    09E4: 56 28 00 MOV   [X+40],0x0
    09E7: 56 27 00 MOV   [X+39],0x0
(0093) 			strPtr[i] = UART_1_cGetChar();
    09EA: 10       PUSH  X
    09EB: 7C 04 FF LCALL _UART_1_cGetChar
    09EE: 20       POP   X
    09EF: 53 1A    MOV   [__r0],A
    09F1: 52 28    MOV   A,[X+40]
    09F3: 03 01    ADD   A,[X+1]
    09F5: 53 17    MOV   [__r3],A
    09F7: 51 1A    MOV   A,[__r0]
    09F9: 3F 17    MVI   [__r3],A
    09FB: 77 28    INC   [X+40]
    09FD: 0F 27 00 ADC   [X+39],0x0
    0A00: 52 28    MOV   A,[X+40]
    0A02: 11 08    SUB   A,0x8
    0A04: 52 27    MOV   A,[X+39]
    0A06: 31 80    XOR   A,0x80
    0A08: 19 80    SBB   A,0x80
    0A0A: CF DF    JC    0x09EA
(0094) 		
(0095) 		//Parse X
(0096) 		for(i = 0; i < 4; i++)
    0A0C: 56 28 00 MOV   [X+40],0x0
    0A0F: 56 27 00 MOV   [X+39],0x0
(0097) 		{
(0098) 			x_temp[i] = strPtr[i];					
    0A12: 52 28    MOV   A,[X+40]
    0A14: 03 01    ADD   A,[X+1]
    0A16: 53 19    MOV   [__r1],A
    0A18: 3E 19    MVI   A,[__r1]
    0A1A: 53 1A    MOV   [__r0],A
    0A1C: 5A 17    MOV   [__r3],X
    0A1E: 06 17 02 ADD   [__r3],0x2
    0A21: 52 28    MOV   A,[X+40]
    0A23: 02 17    ADD   A,[__r3]
    0A25: 53 17    MOV   [__r3],A
    0A27: 51 1A    MOV   A,[__r0]
    0A29: 3F 17    MVI   [__r3],A
(0099) 		}			
    0A2B: 77 28    INC   [X+40]
    0A2D: 0F 27 00 ADC   [X+39],0x0
    0A30: 52 28    MOV   A,[X+40]
    0A32: 11 04    SUB   A,0x4
    0A34: 52 27    MOV   A,[X+39]
    0A36: 31 80    XOR   A,0x80
    0A38: 19 80    SBB   A,0x80
    0A3A: CF D7    JC    0x0A12
(0100) 		//Parse Y
(0101) 		for(i = 4; i < 8; i++)
    0A3C: 56 28 04 MOV   [X+40],0x4
    0A3F: 56 27 00 MOV   [X+39],0x0
(0102) 		{
(0103) 			y_temp[i-4] = strPtr[i];	
    0A42: 52 28    MOV   A,[X+40]
    0A44: 03 01    ADD   A,[X+1]
    0A46: 53 19    MOV   [__r1],A
    0A48: 3E 19    MVI   A,[__r1]
    0A4A: 53 1A    MOV   [__r0],A
    0A4C: 5A 17    MOV   [__r3],X
    0A4E: 06 17 03 ADD   [__r3],0x3
    0A51: 52 28    MOV   A,[X+40]
    0A53: 02 17    ADD   A,[__r3]
    0A55: 53 17    MOV   [__r3],A
    0A57: 51 1A    MOV   A,[__r0]
    0A59: 3F 17    MVI   [__r3],A
(0104) 		}
    0A5B: 77 28    INC   [X+40]
    0A5D: 0F 27 00 ADC   [X+39],0x0
    0A60: 52 28    MOV   A,[X+40]
    0A62: 11 08    SUB   A,0x8
    0A64: 52 27    MOV   A,[X+39]
    0A66: 31 80    XOR   A,0x80
    0A68: 19 80    SBB   A,0x80
    0A6A: CF D7    JC    0x0A42
(0105) 		
(0106) 		//1083 -> xEtu083
(0107) 		if (x_temp[0] == '0')
    0A6C: 3D 02 30 CMP   [X+2],0x30
    0A6F: B0 30    JNZ   0x0AA0
(0108) 		{
(0109) 			xEtu = 0;
    0A71: 56 1B 00 MOV   [X+27],0x0
    0A74: 56 1A 00 MOV   [X+26],0x0
(0110) 			x[1] = x_temp[1];
    0A77: 52 03    MOV   A,[X+3]
    0A79: 54 0D    MOV   [X+13],A
(0111) 			x[2] = x_temp[2];
    0A7B: 52 04    MOV   A,[X+4]
    0A7D: 54 0E    MOV   [X+14],A
(0112) 			x[3] = x_temp[3];
    0A7F: 52 05    MOV   A,[X+5]
    0A81: 54 0F    MOV   [X+15],A
(0113) 			x[4] = '\0';
    0A83: 56 10 00 MOV   [X+16],0x0
(0114) 			axis_x = atoi(x);
    0A86: 5A 19    MOV   [__r1],X
    0A88: 06 19 0C ADD   [__r1],0xC
    0A8B: 51 1A    MOV   A,[__r0]
    0A8D: 08       PUSH  A
    0A8E: 51 19    MOV   A,[__r1]
    0A90: 08       PUSH  A
    0A91: 7C 15 83 LCALL _atoi
    0A94: 38 FE    ADD   SP,0xFE
    0A96: 51 19    MOV   A,[__r1]
    0A98: 54 17    MOV   [X+23],A
    0A9A: 51 1A    MOV   A,[__r0]
    0A9C: 54 16    MOV   [X+22],A
(0115) 		} else if (x_temp[0] == '1')
    0A9E: 80 33    JMP   0x0AD2
    0AA0: 3D 02 31 CMP   [X+2],0x31
    0AA3: B0 2E    JNZ   0x0AD2
(0116) 		{
(0117) 			xEtu = 1;
    0AA5: 56 1B 01 MOV   [X+27],0x1
    0AA8: 56 1A 00 MOV   [X+26],0x0
(0118) 			x[0] = x_temp[1];
    0AAB: 52 03    MOV   A,[X+3]
    0AAD: 54 0C    MOV   [X+12],A
(0119) 			x[1] = x_temp[2];
    0AAF: 52 04    MOV   A,[X+4]
    0AB1: 54 0D    MOV   [X+13],A
(0120) 			x[2] = x_temp[3];
    0AB3: 52 05    MOV   A,[X+5]
    0AB5: 54 0E    MOV   [X+14],A
(0121) 			x[3] = '\0';
    0AB7: 56 0F 00 MOV   [X+15],0x0
(0122) 			axis_x = atoi(x);
    0ABA: 5A 19    MOV   [__r1],X
    0ABC: 06 19 0C ADD   [__r1],0xC
    0ABF: 51 1A    MOV   A,[__r0]
    0AC1: 08       PUSH  A
    0AC2: 51 19    MOV   A,[__r1]
    0AC4: 08       PUSH  A
    0AC5: 7C 15 83 LCALL _atoi
    0AC8: 38 FE    ADD   SP,0xFE
    0ACA: 51 19    MOV   A,[__r1]
    0ACC: 54 17    MOV   [X+23],A
    0ACE: 51 1A    MOV   A,[__r0]
    0AD0: 54 16    MOV   [X+22],A
(0123) 		}
(0124) 		//0023 -> 023
(0125) 		if (y_temp[0] == '0')
    0AD2: 3D 07 30 CMP   [X+7],0x30
    0AD5: B0 30    JNZ   0x0B06
(0126) 		{
(0127) 			yEtu = 0;
    0AD7: 56 1D 00 MOV   [X+29],0x0
    0ADA: 56 1C 00 MOV   [X+28],0x0
(0128) 			y[0] = y_temp[1];
    0ADD: 52 08    MOV   A,[X+8]
    0ADF: 54 11    MOV   [X+17],A
(0129) 			y[1] = y_temp[2];
    0AE1: 52 09    MOV   A,[X+9]
    0AE3: 54 12    MOV   [X+18],A
(0130) 			y[2] = y_temp[3];
    0AE5: 52 0A    MOV   A,[X+10]
    0AE7: 54 13    MOV   [X+19],A
(0131) 			y[3] = '\0';
    0AE9: 56 14 00 MOV   [X+20],0x0
(0132) 			axis_y = atoi(y);
    0AEC: 5A 19    MOV   [__r1],X
    0AEE: 06 19 11 ADD   [__r1],0x11
    0AF1: 51 1A    MOV   A,[__r0]
    0AF3: 08       PUSH  A
    0AF4: 51 19    MOV   A,[__r1]
    0AF6: 08       PUSH  A
    0AF7: 7C 15 83 LCALL _atoi
    0AFA: 38 FE    ADD   SP,0xFE
    0AFC: 51 19    MOV   A,[__r1]
    0AFE: 54 19    MOV   [X+25],A
    0B00: 51 1A    MOV   A,[__r0]
    0B02: 54 18    MOV   [X+24],A
(0133) 		} else if (y_temp[0] == '1')
    0B04: 80 33    JMP   0x0B38
    0B06: 3D 07 31 CMP   [X+7],0x31
    0B09: B0 2E    JNZ   0x0B38
(0134) 		{
(0135) 			yEtu = 1;
    0B0B: 56 1D 01 MOV   [X+29],0x1
    0B0E: 56 1C 00 MOV   [X+28],0x0
(0136) 			y[0] = y_temp[1];
    0B11: 52 08    MOV   A,[X+8]
    0B13: 54 11    MOV   [X+17],A
(0137) 			y[1] = y_temp[2];
    0B15: 52 09    MOV   A,[X+9]
    0B17: 54 12    MOV   [X+18],A
(0138) 			y[2] = y_temp[3];
    0B19: 52 0A    MOV   A,[X+10]
    0B1B: 54 13    MOV   [X+19],A
(0139) 			y[3] = '\0';
    0B1D: 56 14 00 MOV   [X+20],0x0
(0140) 			axis_y = atoi(y);
    0B20: 5A 19    MOV   [__r1],X
    0B22: 06 19 11 ADD   [__r1],0x11
    0B25: 51 1A    MOV   A,[__r0]
    0B27: 08       PUSH  A
    0B28: 51 19    MOV   A,[__r1]
    0B2A: 08       PUSH  A
    0B2B: 7C 15 83 LCALL _atoi
    0B2E: 38 FE    ADD   SP,0xFE
    0B30: 51 19    MOV   A,[__r1]
    0B32: 54 19    MOV   [X+25],A
    0B34: 51 1A    MOV   A,[__r0]
    0B36: 54 18    MOV   [X+24],A
(0141) 		}
(0142) 
(0143) 		if(axis_x > axis_y) //Käännytään
    0B38: 52 19    MOV   A,[X+25]
    0B3A: 13 17    SUB   A,[X+23]
    0B3C: 52 16    MOV   A,[X+22]
    0B3E: 31 80    XOR   A,0x80
    0B40: 53 12    MOV   [__rX],A
    0B42: 52 18    MOV   A,[X+24]
    0B44: 31 80    XOR   A,0x80
    0B46: 1A 12    SBB   A,[__rX]
    0B48: D0 2B    JNC   0x0B74
(0144) 		{	
(0145) 			if(xEtu == 1)
    0B4A: 3D 1A 00 CMP   [X+26],0x0
    0B4D: B0 13    JNZ   0x0B61
    0B4F: 3D 1B 01 CMP   [X+27],0x1
    0B52: B0 0E    JNZ   0x0B61
(0146) 				TurnRight(axis_x);
    0B54: 52 16    MOV   A,[X+22]
    0B56: 08       PUSH  A
    0B57: 52 17    MOV   A,[X+23]
    0B59: 08       PUSH  A
    0B5A: 7C 10 5E LCALL _TurnRight
    0B5D: 38 FE    ADD   SP,0xFE
    0B5F: 80 0C    JMP   0x0B6C
(0147) 			else			
(0148) 				TurnLeft(axis_x);
    0B61: 52 16    MOV   A,[X+22]
    0B63: 08       PUSH  A
    0B64: 52 17    MOV   A,[X+23]
    0B66: 08       PUSH  A
    0B67: 7C 10 46 LCALL _TurnLeft
    0B6A: 38 FE    ADD   SP,0xFE
(0149) 		
(0150) 			apu = 1;
    0B6C: 56 1F 01 MOV   [X+31],0x1
    0B6F: 56 1E 00 MOV   [X+30],0x0
(0151) 		}
    0B72: 81 0A    JMP   0x0C7D
(0152) 		else //Suoraan -> Taakse
(0153) 		{
(0154) 			if(yEtu == 1)
    0B74: 3D 1C 00 CMP   [X+28],0x0
    0B77: B0 F4    JNZ   0x0C6C
    0B79: 3D 1D 01 CMP   [X+29],0x1
    0B7C: B0 EF    JNZ   0x0C6C
(0155) 			{
(0156) 				//MoveForward2(axis_y,1,1);
(0157) 				if(xEtu == 1)
    0B7E: 3D 1A 00 CMP   [X+26],0x0
    0B81: B0 79    JNZ   0x0BFB
    0B83: 3D 1B 01 CMP   [X+27],0x1
    0B86: B0 74    JNZ   0x0BFB
(0158) 					MoveForward2(axis_y,1,(1 - (axis_x / 255)));
    0B88: 50 00    MOV   A,0x0
    0B8A: 08       PUSH  A
    0B8B: 50 FF    MOV   A,0xFF
    0B8D: 08       PUSH  A
    0B8E: 52 16    MOV   A,[X+22]
    0B90: 08       PUSH  A
    0B91: 52 17    MOV   A,[X+23]
    0B93: 08       PUSH  A
    0B94: 7C 10 FD LCALL 0x10FD
    0B97: 18       POP   A
    0B98: 53 19    MOV   [__r1],A
    0B9A: 18       POP   A
    0B9B: 53 1A    MOV   [__r0],A
    0B9D: 38 FE    ADD   SP,0xFE
    0B9F: 50 01    MOV   A,0x1
    0BA1: 12 19    SUB   A,[__r1]
    0BA3: 53 19    MOV   [__r1],A
    0BA5: 50 00    MOV   A,0x0
    0BA7: 1A 1A    SBB   A,[__r0]
    0BA9: 5F 17 19 MOV   [__r3],[__r1]
    0BAC: 53 18    MOV   [__r2],A
    0BAE: 47 18 80 TST   [__r2],0x80
    0BB1: A0 09    JZ    0x0BBB
    0BB3: 55 19 FF MOV   [__r1],0xFF
    0BB6: 55 1A FF MOV   [__r0],0xFF
    0BB9: 80 07    JMP   0x0BC1
    0BBB: 55 19 00 MOV   [__r1],0x0
    0BBE: 55 1A 00 MOV   [__r0],0x0
    0BC1: 51 1A    MOV   A,[__r0]
    0BC3: 08       PUSH  A
    0BC4: 51 19    MOV   A,[__r1]
    0BC6: 08       PUSH  A
    0BC7: 51 18    MOV   A,[__r2]
    0BC9: 08       PUSH  A
    0BCA: 51 17    MOV   A,[__r3]
    0BCC: 08       PUSH  A
    0BCD: 7C 15 25 LCALL 0x1525
    0BD0: 18       POP   A
    0BD1: 53 17    MOV   [__r3],A
    0BD3: 18       POP   A
    0BD4: 53 18    MOV   [__r2],A
    0BD6: 18       POP   A
    0BD7: 53 19    MOV   [__r1],A
    0BD9: 18       POP   A
    0BDA: 08       PUSH  A
    0BDB: 51 19    MOV   A,[__r1]
    0BDD: 08       PUSH  A
    0BDE: 51 18    MOV   A,[__r2]
    0BE0: 08       PUSH  A
    0BE1: 51 17    MOV   A,[__r3]
    0BE3: 08       PUSH  A
    0BE4: 50 3F    MOV   A,0x3F
    0BE6: 08       PUSH  A
    0BE7: 50 80    MOV   A,0x80
    0BE9: 08       PUSH  A
    0BEA: 50 00    MOV   A,0x0
    0BEC: 08       PUSH  A
    0BED: 08       PUSH  A
    0BEE: 52 18    MOV   A,[X+24]
    0BF0: 08       PUSH  A
    0BF1: 52 19    MOV   A,[X+25]
    0BF3: 08       PUSH  A
    0BF4: 7C 0E 40 LCALL _MoveForward2
    0BF7: 38 F6    ADD   SP,0xF6
    0BF9: 80 7D    JMP   0x0C77
(0159) 				else
(0160) 					MoveForward2(axis_y,(1 - (axis_x / 255)),1);
    0BFB: 50 3F    MOV   A,0x3F
    0BFD: 08       PUSH  A
    0BFE: 50 80    MOV   A,0x80
    0C00: 08       PUSH  A
    0C01: 50 00    MOV   A,0x0
    0C03: 08       PUSH  A
    0C04: 08       PUSH  A
    0C05: 08       PUSH  A
    0C06: 50 FF    MOV   A,0xFF
    0C08: 08       PUSH  A
    0C09: 52 16    MOV   A,[X+22]
    0C0B: 08       PUSH  A
    0C0C: 52 17    MOV   A,[X+23]
    0C0E: 08       PUSH  A
    0C0F: 7C 10 FD LCALL 0x10FD
    0C12: 18       POP   A
    0C13: 53 19    MOV   [__r1],A
    0C15: 18       POP   A
    0C16: 53 1A    MOV   [__r0],A
    0C18: 38 FE    ADD   SP,0xFE
    0C1A: 50 01    MOV   A,0x1
    0C1C: 12 19    SUB   A,[__r1]
    0C1E: 53 19    MOV   [__r1],A
    0C20: 50 00    MOV   A,0x0
    0C22: 1A 1A    SBB   A,[__r0]
    0C24: 5F 17 19 MOV   [__r3],[__r1]
    0C27: 53 18    MOV   [__r2],A
    0C29: 47 18 80 TST   [__r2],0x80
    0C2C: A0 09    JZ    0x0C36
    0C2E: 55 19 FF MOV   [__r1],0xFF
    0C31: 55 1A FF MOV   [__r0],0xFF
    0C34: 80 07    JMP   0x0C3C
    0C36: 55 19 00 MOV   [__r1],0x0
    0C39: 55 1A 00 MOV   [__r0],0x0
    0C3C: 51 1A    MOV   A,[__r0]
    0C3E: 08       PUSH  A
    0C3F: 51 19    MOV   A,[__r1]
    0C41: 08       PUSH  A
    0C42: 51 18    MOV   A,[__r2]
    0C44: 08       PUSH  A
    0C45: 51 17    MOV   A,[__r3]
    0C47: 08       PUSH  A
    0C48: 7C 15 25 LCALL 0x1525
    0C4B: 18       POP   A
    0C4C: 53 17    MOV   [__r3],A
    0C4E: 18       POP   A
    0C4F: 53 18    MOV   [__r2],A
    0C51: 18       POP   A
    0C52: 53 19    MOV   [__r1],A
    0C54: 18       POP   A
    0C55: 08       PUSH  A
    0C56: 51 19    MOV   A,[__r1]
    0C58: 08       PUSH  A
    0C59: 51 18    MOV   A,[__r2]
    0C5B: 08       PUSH  A
    0C5C: 51 17    MOV   A,[__r3]
    0C5E: 08       PUSH  A
    0C5F: 52 18    MOV   A,[X+24]
    0C61: 08       PUSH  A
    0C62: 52 19    MOV   A,[X+25]
    0C64: 08       PUSH  A
    0C65: 7C 0E 40 LCALL _MoveForward2
    0C68: 38 F6    ADD   SP,0xF6
(0161) 			}
    0C6A: 80 0C    JMP   0x0C77
(0162) 			else
(0163) 			{ 
(0164) 				MoveBackward(axis_y);
    0C6C: 52 18    MOV   A,[X+24]
    0C6E: 08       PUSH  A
    0C6F: 52 19    MOV   A,[X+25]
    0C71: 08       PUSH  A
    0C72: 7C 10 1E LCALL _MoveBackward
    0C75: 38 FE    ADD   SP,0xFE
(0165) 			}
(0166) 		
(0167) 			apu = 2;
    0C77: 56 1F 02 MOV   [X+31],0x2
    0C7A: 56 1E 00 MOV   [X+30],0x0
(0168) 		}	
(0169) 		
(0170) 		
(0171) 		LCD_Position(0,0);
    0C7D: 10       PUSH  X
    0C7E: 50 00    MOV   A,0x0
    0C80: 57 00    MOV   X,0x0
    0C82: 7C 08 03 LCALL _LCD_Position
    0C85: 20       POP   X
(0172) 		//LCD_PrHexByte(uartBuf);
(0173) 		LCD_PrString(strPtr);
    0C86: 10       PUSH  X
    0C87: 52 00    MOV   A,[X+0]
    0C89: 08       PUSH  A
    0C8A: 52 01    MOV   A,[X+1]
    0C8C: 5C       MOV   X,A
    0C8D: 18       POP   A
    0C8E: 7C 06 CE LCALL _LCD_PrString
    0C91: 20       POP   X
(0174) 		
(0175) 		//itoa(buffer,apu,10);
(0176) 		//LCD_Position(1,0);
(0177) 		//LCD_PrCString("     ");
(0178) 		//LCD_PrString(buffer);
(0179) 	
(0180) 	
(0181)   		itoa(buffer,axis_x,10);
    0C92: 50 00    MOV   A,0x0
    0C94: 08       PUSH  A
    0C95: 50 0A    MOV   A,0xA
    0C97: 08       PUSH  A
    0C98: 52 16    MOV   A,[X+22]
    0C9A: 08       PUSH  A
    0C9B: 52 17    MOV   A,[X+23]
    0C9D: 08       PUSH  A
    0C9E: 50 00    MOV   A,0x0
    0CA0: 08       PUSH  A
    0CA1: 50 21    MOV   A,0x21
    0CA3: 08       PUSH  A
    0CA4: 7C 16 8F LCALL _itoa
    0CA7: 38 FA    ADD   SP,0xFA
(0182)    		LCD_Position(1,0);
    0CA9: 10       PUSH  X
    0CAA: 57 00    MOV   X,0x0
    0CAC: 50 01    MOV   A,0x1
    0CAE: 7C 08 03 LCALL _LCD_Position
(0183)    		LCD_PrString(buffer);
    0CB1: 50 00    MOV   A,0x0
    0CB3: 08       PUSH  A
    0CB4: 50 21    MOV   A,0x21
    0CB6: 5C       MOV   X,A
    0CB7: 18       POP   A
    0CB8: 7C 06 CE LCALL _LCD_PrString
    0CBB: 20       POP   X
(0184) 	}
    0CBC: 8C F9    JMP   0x09B6
    0CBE: 38 D5    ADD   SP,0xD5
    0CC0: 20       POP   X
    0CC1: 8F FF    JMP   0x0CC1
(0185) }
(0186) 
(0187) 
(0188) // Pin interrupt
(0189) void PinInterrupt(void){}
_PinInterrupt:
    0CC3: 08       PUSH  A
    0CC4: 18       POP   A
    0CC5: 7E       RETI  
(0190) 
(0191) 
(0192) //For Testing
(0193) void TestLoop(void)
(0194) {
(0195) 	while(1)
(0196) 	{	
(0197) 		/*ControlServo(SERVO_LEFT);
(0198) 		Delay10msTimes(250);
(0199) 		ControlServo(SERVO_MIDDLE_FROM_LEFT);
(0200) 		Delay10msTimes(250);
(0201) 		ControlServo(SERVO_RIGHT);
(0202) 		Delay10msTimes(250);
(0203) 		ControlServo(SERVO_MIDDLE_FROM_RIGHT);
(0204) 		Delay10msTimes(250);		
(0205) 			
(0206) 		itoa(buffer,distanceCM,10);
(0207) 		LCD_Position(0,0);
(0208) 		LCD_PrCString("     ");
(0209) 		LCD_Position(0,0);
(0210) 		LCD_PrString(buffer);
(0211) 		*/		
(0212) 		
(0213) 				//EZ
(0214) //		uartBuf = UART_1_cGetChar();
(0215) //		
(0216) //		if (uartBuf == 0x31)
(0217) //		{
(0218) //			MoveForward(FULL_SPEED);
(0219) //		}
(0220) //		if (uartBuf == 0x32)
(0221) //		{
(0222) //			TurnRight(FULL_SPEED);
(0223) //		}
(0224) //		if (uartBuf == 0x33)
(0225) //		{
(0226) //			MoveBackward(FULL_SPEED);
(0227) //		}
(0228) //		if (uartBuf == 0x34)
(0229) //		{
(0230) //			TurnLeft(FULL_SPEED);
(0231) //		}
(0232) //		if(uartBuf == 0x30)
(0233) //			Stop();
(0234) 		
(0235) 				
(0236) //		LCD_Position(1,0);
(0237) //		//LCD_PrHexByte(uartBuf);
(0238) //		LCD_PrString(y);
(0239) 	}
_TestLoop:
    0CC6: 8F FF    JMP   _TestLoop
    0CC8: 7F       RET   
(0240) }
(0241) 
(0242) ////OMA Delay function 
(0243) void Delay(int delay)
(0244) {
_Delay:
  timme                --> X+0
  delay                --> X-5
    0CC9: 10       PUSH  X
    0CCA: 4F       MOV   X,SP
    0CCB: 38 04    ADD   SP,0x4
(0245) 	unsigned long int timme = milliT + delay;
    0CCD: 52 FC    MOV   A,[X-4]
    0CCF: 53 17    MOV   [__r3],A
    0CD1: 52 FB    MOV   A,[X-5]
    0CD3: 53 18    MOV   [__r2],A
    0CD5: 47 18 80 TST   [__r2],0x80
    0CD8: A0 09    JZ    0x0CE2
    0CDA: 55 19 FF MOV   [__r1],0xFF
    0CDD: 55 1A FF MOV   [__r0],0xFF
    0CE0: 80 07    JMP   0x0CE8
    0CE2: 55 19 00 MOV   [__r1],0x0
    0CE5: 55 1A 00 MOV   [__r0],0x0
    0CE8: 51 09    MOV   A,[milliT+3]
    0CEA: 02 17    ADD   A,[__r3]
    0CEC: 54 03    MOV   [X+3],A
    0CEE: 51 08    MOV   A,[milliT+2]
    0CF0: 0A 18    ADC   A,[__r2]
    0CF2: 54 02    MOV   [X+2],A
    0CF4: 51 07    MOV   A,[milliT+1]
    0CF6: 0A 19    ADC   A,[__r1]
    0CF8: 54 01    MOV   [X+1],A
    0CFA: 51 06    MOV   A,[milliT]
    0CFC: 0A 1A    ADC   A,[__r0]
    0CFE: 54 00    MOV   [X+0],A
(0246) 	while (milliT < timme){}
    0D00: 51 09    MOV   A,[milliT+3]
    0D02: 13 03    SUB   A,[X+3]
    0D04: 51 08    MOV   A,[milliT+2]
    0D06: 1B 02    SBB   A,[X+2]
    0D08: 51 07    MOV   A,[milliT+1]
    0D0A: 1B 01    SBB   A,[X+1]
    0D0C: 51 06    MOV   A,[milliT]
    0D0E: 1B 00    SBB   A,[X+0]
    0D10: CF EF    JC    0x0D00
    0D12: 38 FC    ADD   SP,0xFC
    0D14: 20       POP   X
    0D15: 7F       RET   
FILE: Z:\robotti\Robor7\ROBOTT~1\ROBOTT~1\motorcontrol.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) 
(0004) #define BACKWARD 	0b00000101; // Molemmat Eteen
(0005) #define FORWARD 	0b00001010; //Molemmat Taakse
(0006) #define LEFTBRIGHTF 0b00001001; // Vasen Eteen Oikea Taakse
(0007) #define LEFTFRIGHTB 0b00000110; // Vasen Taakse Oikea Eteen
(0008) #define NOLLAA 		0b11110000;		//Molemmat C/D pinnit 0
(0009) 
(0010) //Porttien osoitteet
(0011) //Port1_0 LEFTC      C = 1, D = 0 FORWARD
(0012) //Port1_1 LEFTD		 C = 0, D = 1 BACKWARD 
(0013) //Port1_2 RIGHTC
(0014) //Port1_3 RIGHTD
(0015) 
(0016) //Voi joutua korjaamaan
(0017) const float OIKEUSKERROIN = 0.90f; //Kerroin nopeammalle puolelle jotta robotti kulkisi suoraan
(0018) 
(0019) //Käynnistää PWM Moduulit
(0020) void InitPWM(void)
(0021) {
(0022) 	PWM8_VASEN_Start();
_InitPWM:
    0D16: 10       PUSH  X
    0D17: 7C 06 15 LCALL _PWM8_VASEN_Start
(0023) 	PWM8_OIKEA_Start();
    0D1A: 7C 06 58 LCALL _PWM8_OIKEA_Start
    0D1D: 20       POP   X
    0D1E: 7F       RET   
(0024) 	
(0025) 	//Port1_Data_ADDR = LEFTC_Data_ADDR;
(0026) 	//Port1_Data_ADDR &= NOLLAA;
(0027) }
(0028) 
(0029) //Kulkee eteenpäin arvolla..
(0030) void MoveForward(int pulse)
(0031) {				
_MoveForward:
  pulse                --> X-5
    0D1F: 10       PUSH  X
    0D20: 4F       MOV   X,SP
    0D21: 38 02    ADD   SP,0x2
(0032) 	LEFTC_Data_ADDR &= NOLLAA;
    0D23: 41 04 F0 AND   REG[0x4],0xF0
(0033) 	LEFTC_Data_ADDR |= FORWARD;
    0D26: 43 04 0A OR    REG[0x4],0xA
(0034) 	
(0035) 	PWM8_VASEN_WritePulseWidth((BYTE)pulse);
    0D29: 52 FC    MOV   A,[X-4]
    0D2B: 10       PUSH  X
    0D2C: 7C 06 20 LCALL _PWM8_VASEN_WritePulseWidth
    0D2F: 20       POP   X
(0036) 	PWM8_OIKEA_WritePulseWidth((BYTE)(pulse * OIKEUSKERROIN));
    0D30: 55 19 50 MOV   [__r1],0x50
    0D33: 50 01    MOV   A,0x1
    0D35: 10       PUSH  X
    0D36: 58 19    MOV   X,[__r1]
    0D38: 08       PUSH  A
    0D39: 28       ROMX  
    0D3A: 53 1A    MOV   [__r0],A
    0D3C: 18       POP   A
    0D3D: 75       INC   X
    0D3E: 09 00    ADC   A,0x0
    0D40: 08       PUSH  A
    0D41: 28       ROMX  
    0D42: 53 19    MOV   [__r1],A
    0D44: 18       POP   A
    0D45: 75       INC   X
    0D46: 09 00    ADC   A,0x0
    0D48: 08       PUSH  A
    0D49: 28       ROMX  
    0D4A: 53 18    MOV   [__r2],A
    0D4C: 18       POP   A
    0D4D: 75       INC   X
    0D4E: 09 00    ADC   A,0x0
    0D50: 28       ROMX  
    0D51: 53 17    MOV   [__r3],A
    0D53: 20       POP   X
    0D54: 52 FC    MOV   A,[X-4]
    0D56: 53 13    MOV   [__r7],A
    0D58: 52 FB    MOV   A,[X-5]
    0D5A: 53 14    MOV   [__r6],A
    0D5C: 47 14 80 TST   [__r6],0x80
    0D5F: A0 09    JZ    0x0D69
    0D61: 55 15 FF MOV   [__r5],0xFF
    0D64: 55 16 FF MOV   [__r4],0xFF
    0D67: 80 07    JMP   0x0D6F
    0D69: 55 15 00 MOV   [__r5],0x0
    0D6C: 55 16 00 MOV   [__r4],0x0
    0D6F: 51 16    MOV   A,[__r4]
    0D71: 08       PUSH  A
    0D72: 51 15    MOV   A,[__r5]
    0D74: 08       PUSH  A
    0D75: 51 14    MOV   A,[__r6]
    0D77: 08       PUSH  A
    0D78: 51 13    MOV   A,[__r7]
    0D7A: 08       PUSH  A
    0D7B: 7C 15 25 LCALL 0x1525
    0D7E: 18       POP   A
    0D7F: 53 13    MOV   [__r7],A
    0D81: 18       POP   A
    0D82: 53 14    MOV   [__r6],A
    0D84: 18       POP   A
    0D85: 53 15    MOV   [__r5],A
    0D87: 18       POP   A
    0D88: 53 16    MOV   [__r4],A
    0D8A: 51 1A    MOV   A,[__r0]
    0D8C: 08       PUSH  A
    0D8D: 51 19    MOV   A,[__r1]
    0D8F: 08       PUSH  A
    0D90: 51 18    MOV   A,[__r2]
    0D92: 08       PUSH  A
    0D93: 51 17    MOV   A,[__r3]
    0D95: 08       PUSH  A
    0D96: 51 16    MOV   A,[__r4]
    0D98: 08       PUSH  A
    0D99: 51 15    MOV   A,[__r5]
    0D9B: 08       PUSH  A
    0D9C: 51 14    MOV   A,[__r6]
    0D9E: 08       PUSH  A
    0D9F: 51 13    MOV   A,[__r7]
    0DA1: 08       PUSH  A
    0DA2: 7C 13 93 LCALL 0x1393
    0DA5: 18       POP   A
    0DA6: 53 17    MOV   [__r3],A
    0DA8: 18       POP   A
    0DA9: 53 18    MOV   [__r2],A
    0DAB: 18       POP   A
    0DAC: 53 19    MOV   [__r1],A
    0DAE: 18       POP   A
    0DAF: 53 1A    MOV   [__r0],A
    0DB1: 38 FC    ADD   SP,0xFC
    0DB3: 50 47    MOV   A,0x47
    0DB5: 08       PUSH  A
    0DB6: 50 00    MOV   A,0x0
    0DB8: 08       PUSH  A
    0DB9: 08       PUSH  A
    0DBA: 08       PUSH  A
    0DBB: 51 1A    MOV   A,[__r0]
    0DBD: 08       PUSH  A
    0DBE: 51 19    MOV   A,[__r1]
    0DC0: 08       PUSH  A
    0DC1: 51 18    MOV   A,[__r2]
    0DC3: 08       PUSH  A
    0DC4: 51 17    MOV   A,[__r3]
    0DC6: 08       PUSH  A
    0DC7: 7C 13 45 LCALL 0x1345
    0DCA: 38 F8    ADD   SP,0xF8
    0DCC: 39 FF    CMP   A,0xFF
    0DCE: A0 47    JZ    0x0E16
    0DD0: 50 47    MOV   A,0x47
    0DD2: 08       PUSH  A
    0DD3: 50 00    MOV   A,0x0
    0DD5: 08       PUSH  A
    0DD6: 08       PUSH  A
    0DD7: 08       PUSH  A
    0DD8: 51 1A    MOV   A,[__r0]
    0DDA: 08       PUSH  A
    0DDB: 51 19    MOV   A,[__r1]
    0DDD: 08       PUSH  A
    0DDE: 51 18    MOV   A,[__r2]
    0DE0: 08       PUSH  A
    0DE1: 51 17    MOV   A,[__r3]
    0DE3: 08       PUSH  A
    0DE4: 7C 14 B7 LCALL 0x14B7
    0DE7: 18       POP   A
    0DE8: 53 13    MOV   [__r7],A
    0DEA: 18       POP   A
    0DEB: 53 14    MOV   [__r6],A
    0DED: 18       POP   A
    0DEE: 53 15    MOV   [__r5],A
    0DF0: 18       POP   A
    0DF1: 38 FC    ADD   SP,0xFC
    0DF3: 08       PUSH  A
    0DF4: 51 15    MOV   A,[__r5]
    0DF6: 08       PUSH  A
    0DF7: 51 14    MOV   A,[__r6]
    0DF9: 08       PUSH  A
    0DFA: 51 13    MOV   A,[__r7]
    0DFC: 08       PUSH  A
    0DFD: 7C 11 4E LCALL 0x114E
    0E00: 18       POP   A
    0E01: 53 15    MOV   [__r5],A
    0E03: 18       POP   A
    0E04: 53 16    MOV   [__r4],A
    0E06: 38 FE    ADD   SP,0xFE
    0E08: 51 15    MOV   A,[__r5]
    0E0A: 01 00    ADD   A,0x0
    0E0C: 54 01    MOV   [X+1],A
    0E0E: 51 16    MOV   A,[__r4]
    0E10: 09 80    ADC   A,0x80
    0E12: 54 00    MOV   [X+0],A
    0E14: 80 20    JMP   0x0E35
    0E16: 51 1A    MOV   A,[__r0]
    0E18: 08       PUSH  A
    0E19: 51 19    MOV   A,[__r1]
    0E1B: 08       PUSH  A
    0E1C: 51 18    MOV   A,[__r2]
    0E1E: 08       PUSH  A
    0E1F: 51 17    MOV   A,[__r3]
    0E21: 08       PUSH  A
    0E22: 7C 11 4E LCALL 0x114E
    0E25: 18       POP   A
    0E26: 53 19    MOV   [__r1],A
    0E28: 18       POP   A
    0E29: 53 1A    MOV   [__r0],A
    0E2B: 38 FE    ADD   SP,0xFE
    0E2D: 51 19    MOV   A,[__r1]
    0E2F: 54 01    MOV   [X+1],A
    0E31: 51 1A    MOV   A,[__r0]
    0E33: 54 00    MOV   [X+0],A
    0E35: 52 01    MOV   A,[X+1]
    0E37: 10       PUSH  X
    0E38: 7C 06 63 LCALL _PWM8_OIKEA_WritePulseWidth
    0E3B: 20       POP   X
    0E3C: 38 FE    ADD   SP,0xFE
    0E3E: 20       POP   X
    0E3F: 7F       RET   
FILE: Z:\robotti\Robor7\ROBOTT~1\ROBOTT~1\motorcontrol.c
(0041) {				
_MoveForward2:
  kerroinOikea         --> X-13
  kerroinVasen         --> X-9
  pulse                --> X-5
    0E40: 10       PUSH  X
    0E41: 4F       MOV   X,SP
    0E42: 38 04    ADD   SP,0x4
(0042) 	LEFTC_Data_ADDR &= NOLLAA;
    0E44: 41 04 F0 AND   REG[0x4],0xF0
(0043) 	LEFTC_Data_ADDR |= FORWARD;
    0E47: 43 04 0A OR    REG[0x4],0xA
(0044) 
(0045) 	PWM8_VASEN_WritePulseWidth((BYTE)(pulse * kerroinVasen));
    0E4A: 52 FC    MOV   A,[X-4]
    0E4C: 53 17    MOV   [__r3],A
    0E4E: 52 FB    MOV   A,[X-5]
    0E50: 53 18    MOV   [__r2],A
    0E52: 47 18 80 TST   [__r2],0x80
    0E55: A0 09    JZ    0x0E5F
    0E57: 55 19 FF MOV   [__r1],0xFF
    0E5A: 55 1A FF MOV   [__r0],0xFF
    0E5D: 80 07    JMP   0x0E65
    0E5F: 55 19 00 MOV   [__r1],0x0
    0E62: 55 1A 00 MOV   [__r0],0x0
    0E65: 51 1A    MOV   A,[__r0]
    0E67: 08       PUSH  A
    0E68: 51 19    MOV   A,[__r1]
    0E6A: 08       PUSH  A
    0E6B: 51 18    MOV   A,[__r2]
    0E6D: 08       PUSH  A
    0E6E: 51 17    MOV   A,[__r3]
    0E70: 08       PUSH  A
    0E71: 7C 15 25 LCALL 0x1525
    0E74: 18       POP   A
    0E75: 53 17    MOV   [__r3],A
    0E77: 18       POP   A
    0E78: 53 18    MOV   [__r2],A
    0E7A: 18       POP   A
    0E7B: 53 19    MOV   [__r1],A
    0E7D: 18       POP   A
    0E7E: 53 1A    MOV   [__r0],A
    0E80: 52 F7    MOV   A,[X-9]
    0E82: 08       PUSH  A
    0E83: 52 F8    MOV   A,[X-8]
    0E85: 08       PUSH  A
    0E86: 52 F9    MOV   A,[X-7]
    0E88: 08       PUSH  A
    0E89: 52 FA    MOV   A,[X-6]
    0E8B: 08       PUSH  A
    0E8C: 51 1A    MOV   A,[__r0]
    0E8E: 08       PUSH  A
    0E8F: 51 19    MOV   A,[__r1]
    0E91: 08       PUSH  A
    0E92: 51 18    MOV   A,[__r2]
    0E94: 08       PUSH  A
    0E95: 51 17    MOV   A,[__r3]
    0E97: 08       PUSH  A
    0E98: 7C 13 93 LCALL 0x1393
    0E9B: 18       POP   A
    0E9C: 53 17    MOV   [__r3],A
    0E9E: 18       POP   A
    0E9F: 53 18    MOV   [__r2],A
    0EA1: 18       POP   A
    0EA2: 53 19    MOV   [__r1],A
    0EA4: 18       POP   A
    0EA5: 53 1A    MOV   [__r0],A
    0EA7: 38 FC    ADD   SP,0xFC
    0EA9: 50 47    MOV   A,0x47
    0EAB: 08       PUSH  A
    0EAC: 50 00    MOV   A,0x0
    0EAE: 08       PUSH  A
    0EAF: 08       PUSH  A
    0EB0: 08       PUSH  A
    0EB1: 51 1A    MOV   A,[__r0]
    0EB3: 08       PUSH  A
    0EB4: 51 19    MOV   A,[__r1]
    0EB6: 08       PUSH  A
    0EB7: 51 18    MOV   A,[__r2]
    0EB9: 08       PUSH  A
    0EBA: 51 17    MOV   A,[__r3]
    0EBC: 08       PUSH  A
    0EBD: 7C 13 45 LCALL 0x1345
    0EC0: 38 F8    ADD   SP,0xF8
    0EC2: 39 FF    CMP   A,0xFF
    0EC4: A0 47    JZ    0x0F0C
    0EC6: 50 47    MOV   A,0x47
    0EC8: 08       PUSH  A
    0EC9: 50 00    MOV   A,0x0
    0ECB: 08       PUSH  A
    0ECC: 08       PUSH  A
    0ECD: 08       PUSH  A
    0ECE: 51 1A    MOV   A,[__r0]
    0ED0: 08       PUSH  A
    0ED1: 51 19    MOV   A,[__r1]
    0ED3: 08       PUSH  A
    0ED4: 51 18    MOV   A,[__r2]
    0ED6: 08       PUSH  A
    0ED7: 51 17    MOV   A,[__r3]
    0ED9: 08       PUSH  A
    0EDA: 7C 14 B7 LCALL 0x14B7
    0EDD: 18       POP   A
    0EDE: 53 13    MOV   [__r7],A
    0EE0: 18       POP   A
    0EE1: 53 14    MOV   [__r6],A
    0EE3: 18       POP   A
    0EE4: 53 15    MOV   [__r5],A
    0EE6: 18       POP   A
    0EE7: 38 FC    ADD   SP,0xFC
    0EE9: 08       PUSH  A
    0EEA: 51 15    MOV   A,[__r5]
    0EEC: 08       PUSH  A
    0EED: 51 14    MOV   A,[__r6]
    0EEF: 08       PUSH  A
    0EF0: 51 13    MOV   A,[__r7]
    0EF2: 08       PUSH  A
    0EF3: 7C 11 4E LCALL 0x114E
    0EF6: 18       POP   A
    0EF7: 53 15    MOV   [__r5],A
    0EF9: 18       POP   A
    0EFA: 53 16    MOV   [__r4],A
    0EFC: 38 FE    ADD   SP,0xFE
    0EFE: 51 15    MOV   A,[__r5]
    0F00: 01 00    ADD   A,0x0
    0F02: 54 01    MOV   [X+1],A
    0F04: 51 16    MOV   A,[__r4]
    0F06: 09 80    ADC   A,0x80
    0F08: 54 00    MOV   [X+0],A
    0F0A: 80 20    JMP   0x0F2B
    0F0C: 51 1A    MOV   A,[__r0]
    0F0E: 08       PUSH  A
    0F0F: 51 19    MOV   A,[__r1]
    0F11: 08       PUSH  A
    0F12: 51 18    MOV   A,[__r2]
    0F14: 08       PUSH  A
    0F15: 51 17    MOV   A,[__r3]
    0F17: 08       PUSH  A
    0F18: 7C 11 4E LCALL 0x114E
    0F1B: 18       POP   A
    0F1C: 53 19    MOV   [__r1],A
    0F1E: 18       POP   A
    0F1F: 53 1A    MOV   [__r0],A
    0F21: 38 FE    ADD   SP,0xFE
    0F23: 51 19    MOV   A,[__r1]
    0F25: 54 01    MOV   [X+1],A
    0F27: 51 1A    MOV   A,[__r0]
    0F29: 54 00    MOV   [X+0],A
    0F2B: 52 01    MOV   A,[X+1]
    0F2D: 10       PUSH  X
    0F2E: 7C 06 20 LCALL _PWM8_VASEN_WritePulseWidth
    0F31: 20       POP   X
(0046) 	PWM8_OIKEA_WritePulseWidth((BYTE)(pulse * kerroinOikea));
    0F32: 52 FC    MOV   A,[X-4]
    0F34: 53 17    MOV   [__r3],A
    0F36: 52 FB    MOV   A,[X-5]
    0F38: 53 18    MOV   [__r2],A
    0F3A: 47 18 80 TST   [__r2],0x80
    0F3D: A0 09    JZ    0x0F47
    0F3F: 55 19 FF MOV   [__r1],0xFF
    0F42: 55 1A FF MOV   [__r0],0xFF
    0F45: 80 07    JMP   0x0F4D
    0F47: 55 19 00 MOV   [__r1],0x0
    0F4A: 55 1A 00 MOV   [__r0],0x0
    0F4D: 51 1A    MOV   A,[__r0]
    0F4F: 08       PUSH  A
    0F50: 51 19    MOV   A,[__r1]
    0F52: 08       PUSH  A
    0F53: 51 18    MOV   A,[__r2]
    0F55: 08       PUSH  A
    0F56: 51 17    MOV   A,[__r3]
    0F58: 08       PUSH  A
    0F59: 7C 15 25 LCALL 0x1525
    0F5C: 18       POP   A
    0F5D: 53 17    MOV   [__r3],A
    0F5F: 18       POP   A
    0F60: 53 18    MOV   [__r2],A
    0F62: 18       POP   A
    0F63: 53 19    MOV   [__r1],A
    0F65: 18       POP   A
    0F66: 53 1A    MOV   [__r0],A
    0F68: 52 F3    MOV   A,[X-13]
    0F6A: 08       PUSH  A
    0F6B: 52 F4    MOV   A,[X-12]
    0F6D: 08       PUSH  A
    0F6E: 52 F5    MOV   A,[X-11]
    0F70: 08       PUSH  A
    0F71: 52 F6    MOV   A,[X-10]
    0F73: 08       PUSH  A
    0F74: 51 1A    MOV   A,[__r0]
    0F76: 08       PUSH  A
    0F77: 51 19    MOV   A,[__r1]
    0F79: 08       PUSH  A
    0F7A: 51 18    MOV   A,[__r2]
    0F7C: 08       PUSH  A
    0F7D: 51 17    MOV   A,[__r3]
    0F7F: 08       PUSH  A
    0F80: 7C 13 93 LCALL 0x1393
    0F83: 18       POP   A
    0F84: 53 17    MOV   [__r3],A
    0F86: 18       POP   A
    0F87: 53 18    MOV   [__r2],A
    0F89: 18       POP   A
    0F8A: 53 19    MOV   [__r1],A
    0F8C: 18       POP   A
    0F8D: 53 1A    MOV   [__r0],A
    0F8F: 38 FC    ADD   SP,0xFC
    0F91: 50 47    MOV   A,0x47
    0F93: 08       PUSH  A
    0F94: 50 00    MOV   A,0x0
    0F96: 08       PUSH  A
    0F97: 08       PUSH  A
    0F98: 08       PUSH  A
    0F99: 51 1A    MOV   A,[__r0]
    0F9B: 08       PUSH  A
    0F9C: 51 19    MOV   A,[__r1]
    0F9E: 08       PUSH  A
    0F9F: 51 18    MOV   A,[__r2]
    0FA1: 08       PUSH  A
    0FA2: 51 17    MOV   A,[__r3]
    0FA4: 08       PUSH  A
    0FA5: 7C 13 45 LCALL 0x1345
    0FA8: 38 F8    ADD   SP,0xF8
    0FAA: 39 FF    CMP   A,0xFF
    0FAC: A0 47    JZ    0x0FF4
    0FAE: 50 47    MOV   A,0x47
    0FB0: 08       PUSH  A
    0FB1: 50 00    MOV   A,0x0
    0FB3: 08       PUSH  A
    0FB4: 08       PUSH  A
    0FB5: 08       PUSH  A
    0FB6: 51 1A    MOV   A,[__r0]
    0FB8: 08       PUSH  A
    0FB9: 51 19    MOV   A,[__r1]
    0FBB: 08       PUSH  A
    0FBC: 51 18    MOV   A,[__r2]
    0FBE: 08       PUSH  A
    0FBF: 51 17    MOV   A,[__r3]
    0FC1: 08       PUSH  A
    0FC2: 7C 14 B7 LCALL 0x14B7
    0FC5: 18       POP   A
    0FC6: 53 13    MOV   [__r7],A
    0FC8: 18       POP   A
    0FC9: 53 14    MOV   [__r6],A
    0FCB: 18       POP   A
    0FCC: 53 15    MOV   [__r5],A
    0FCE: 18       POP   A
    0FCF: 38 FC    ADD   SP,0xFC
    0FD1: 08       PUSH  A
    0FD2: 51 15    MOV   A,[__r5]
    0FD4: 08       PUSH  A
    0FD5: 51 14    MOV   A,[__r6]
    0FD7: 08       PUSH  A
    0FD8: 51 13    MOV   A,[__r7]
    0FDA: 08       PUSH  A
    0FDB: 7C 11 4E LCALL 0x114E
    0FDE: 18       POP   A
    0FDF: 53 15    MOV   [__r5],A
    0FE1: 18       POP   A
    0FE2: 53 16    MOV   [__r4],A
    0FE4: 38 FE    ADD   SP,0xFE
    0FE6: 51 15    MOV   A,[__r5]
    0FE8: 01 00    ADD   A,0x0
    0FEA: 54 03    MOV   [X+3],A
    0FEC: 51 16    MOV   A,[__r4]
    0FEE: 09 80    ADC   A,0x80
    0FF0: 54 02    MOV   [X+2],A
    0FF2: 80 20    JMP   0x1013
    0FF4: 51 1A    MOV   A,[__r0]
    0FF6: 08       PUSH  A
    0FF7: 51 19    MOV   A,[__r1]
    0FF9: 08       PUSH  A
    0FFA: 51 18    MOV   A,[__r2]
    0FFC: 08       PUSH  A
    0FFD: 51 17    MOV   A,[__r3]
    0FFF: 08       PUSH  A
    1000: 7C 11 4E LCALL 0x114E
    1003: 18       POP   A
    1004: 53 19    MOV   [__r1],A
    1006: 18       POP   A
    1007: 53 1A    MOV   [__r0],A
    1009: 38 FE    ADD   SP,0xFE
    100B: 51 19    MOV   A,[__r1]
    100D: 54 03    MOV   [X+3],A
    100F: 51 1A    MOV   A,[__r0]
    1011: 54 02    MOV   [X+2],A
    1013: 52 03    MOV   A,[X+3]
    1015: 10       PUSH  X
    1016: 7C 06 63 LCALL _PWM8_OIKEA_WritePulseWidth
    1019: 20       POP   X
    101A: 38 FC    ADD   SP,0xFC
    101C: 20       POP   X
    101D: 7F       RET   
(0047) }
(0048) 
(0049) //Kulkee taaksepäin arvolla
(0050) void MoveBackward(int pulse)
(0051) {
_MoveBackward:
  pulse                --> X-5
    101E: 10       PUSH  X
    101F: 4F       MOV   X,SP
(0052) 	LEFTC_Data_ADDR &= NOLLAA;
    1020: 41 04 F0 AND   REG[0x4],0xF0
(0053) 	LEFTC_Data_ADDR |= BACKWARD;
    1023: 43 04 05 OR    REG[0x4],0x5
(0054) 	
(0055) 	PWM8_VASEN_WritePulseWidth((BYTE)pulse);
    1026: 52 FC    MOV   A,[X-4]
    1028: 10       PUSH  X
    1029: 7C 06 20 LCALL _PWM8_VASEN_WritePulseWidth
    102C: 20       POP   X
(0056) 	PWM8_OIKEA_WritePulseWidth((BYTE)pulse);
    102D: 52 FC    MOV   A,[X-4]
    102F: 10       PUSH  X
    1030: 7C 06 63 LCALL _PWM8_OIKEA_WritePulseWidth
    1033: 20       POP   X
    1034: 20       POP   X
    1035: 7F       RET   
(0057) }
(0058) 
(0059) //Pysäyttää Moottorit
(0060) void Stop(void)
(0061) {
(0062) 	PWM8_OIKEA_WritePulseWidth(0);
_Stop:
    1036: 10       PUSH  X
    1037: 50 00    MOV   A,0x0
    1039: 7C 06 63 LCALL _PWM8_OIKEA_WritePulseWidth
(0063) 	PWM8_VASEN_WritePulseWidth(0);
    103C: 50 00    MOV   A,0x0
    103E: 7C 06 20 LCALL _PWM8_VASEN_WritePulseWidth
    1041: 20       POP   X
(0064) 	
(0065) 	LEFTC_Data_ADDR &= NOLLAA;
    1042: 41 04 F0 AND   REG[0x4],0xF0
    1045: 7F       RET   
(0066) }
(0067) 
(0068) //Kääntyy vasemmalle
(0069) void TurnLeft(int pulse)
(0070) {
_TurnLeft:
  pulse                --> X-5
    1046: 10       PUSH  X
    1047: 4F       MOV   X,SP
(0071) 	LEFTC_Data_ADDR &= NOLLAA;
    1048: 41 04 F0 AND   REG[0x4],0xF0
(0072) 	LEFTC_Data_ADDR |= LEFTFRIGHTB
    104B: 43 04 06 OR    REG[0x4],0x6
(0073) 		
(0074) 	PWM8_VASEN_WritePulseWidth((BYTE)pulse);
    104E: 52 FC    MOV   A,[X-4]
    1050: 10       PUSH  X
    1051: 7C 06 20 LCALL _PWM8_VASEN_WritePulseWidth
    1054: 20       POP   X
(0075) 	PWM8_OIKEA_WritePulseWidth((BYTE)pulse);
    1055: 52 FC    MOV   A,[X-4]
    1057: 10       PUSH  X
    1058: 7C 06 63 LCALL _PWM8_OIKEA_WritePulseWidth
    105B: 20       POP   X
    105C: 20       POP   X
    105D: 7F       RET   
(0076) }
(0077) 
(0078) //Kääntyy oikealle
(0079) void TurnRight(int pulse)
(0080) {		
_TurnRight:
  pulse                --> X-5
    105E: 10       PUSH  X
    105F: 4F       MOV   X,SP
(0081) 	LEFTC_Data_ADDR &= NOLLAA;
    1060: 41 04 F0 AND   REG[0x4],0xF0
(0082) 	LEFTC_Data_ADDR |= LEFTBRIGHTF;
    1063: 43 04 09 OR    REG[0x4],0x9
(0083) 	
(0084) 	PWM8_VASEN_WritePulseWidth((BYTE)pulse);
    1066: 52 FC    MOV   A,[X-4]
    1068: 10       PUSH  X
    1069: 7C 06 20 LCALL _PWM8_VASEN_WritePulseWidth
    106C: 20       POP   X
(0085) 	PWM8_OIKEA_WritePulseWidth((BYTE)pulse);
    106D: 52 FC    MOV   A,[X-4]
    106F: 10       PUSH  X
    1070: 7C 06 63 LCALL _PWM8_OIKEA_WritePulseWidth
    1073: 20       POP   X
    1074: 20       POP   X
    1075: 7F       RET   
(0086) }
(0087) 
(0088) 
(0089) //TEST LEFTTURN
(0090) void TestTurnLeft(int pulse)
(0091) {
_TestTurnLeft:
  pulse                --> X-5
    1076: 10       PUSH  X
    1077: 4F       MOV   X,SP
(0092) 	LEFTC_Data_ADDR &= NOLLAA;
    1078: 41 04 F0 AND   REG[0x4],0xF0
(0093) 	LEFTC_Data_ADDR |= 0b00000001;
    107B: 43 04 01 OR    REG[0x4],0x1
(0094) 	
(0095) 	PWM8_VASEN_WritePulseWidth(0);
    107E: 10       PUSH  X
    107F: 50 00    MOV   A,0x0
    1081: 7C 06 20 LCALL _PWM8_VASEN_WritePulseWidth
    1084: 20       POP   X
(0096) 	PWM8_OIKEA_WritePulseWidth((BYTE)pulse);
    1085: 52 FC    MOV   A,[X-4]
    1087: 10       PUSH  X
    1088: 7C 06 63 LCALL _PWM8_OIKEA_WritePulseWidth
    108B: 20       POP   X
    108C: 20       POP   X
    108D: 7F       RET   
FILE: Z:\robotti\Robor7\ROBOTT~1\ROBOTT~1\ultracontrol.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"
(0003) #include<stdio.h>
(0004) #include<stdlib.h>
(0005) #include "delay.h"
(0006) 
(0007) //----------------------------------------------------
(0008)   //PORT0_6 TRIGGER
(0009)   //PORT0_7 ECHO
(0010) //
(0011) 
(0012) //PORT0_4 SERVO PWM
(0013) 
(0014) float distanceToCm = 0.033f;
(0015) 
(0016) //Init PGA AND ADC
(0017) void InitUAServo(void)
(0018) {
_InitUAServo:
    108E: 7F       RET   
(0019) 
(0020) }
(0021) 
(0022) 
(0023) //Return distance from Ultrasonic sensor in centimeters 
(0024) int getDataUA(void)
(0025) {
(0026) 	/*if(ADCINC_fIsDataAvailable() != 0)
(0027) 	{		
(0028) 		return (int)(ADCINC_iGetData() * distanceToCm);
(0029) 	}
(0030) 	else 
(0031) 		return 0;*/
(0032) 	return 0;
_getDataUA:
    108F: 55 19 00 MOV   [__r1],0x0
    1092: 55 1A 00 MOV   [__r0],0x0
    1095: 7F       RET   
(0033) }
(0034) 
(0035) //Sends Trigger pulse
(0036) void ControlTrigger(int *time)
(0037) {		
_ControlTrigger:
  time                 --> X-5
    1096: 10       PUSH  X
    1097: 4F       MOV   X,SP
(0038) 	//Wait 60ms and send pulse again
(0039) 	if (*time >= 80)
    1098: 52 FC    MOV   A,[X-4]
    109A: 53 19    MOV   [__r1],A
    109C: 3E 19    MVI   A,[__r1]
    109E: 53 1A    MOV   [__r0],A
    10A0: 3E 19    MVI   A,[__r1]
    10A2: 11 50    SUB   A,0x50
    10A4: 51 1A    MOV   A,[__r0]
    10A6: 31 80    XOR   A,0x80
    10A8: 19 80    SBB   A,0x80
    10AA: C0 0B    JC    0x10B6
(0040) 	{
(0041) 		*time = 0;
    10AC: 52 FC    MOV   A,[X-4]
    10AE: 53 19    MOV   [__r1],A
    10B0: 50 00    MOV   A,0x0
    10B2: 3F 19    MVI   [__r1],A
    10B4: 3F 19    MVI   [__r1],A
(0042) 	}
(0043) 	
(0044) 	//Send Trigger Pulse every 1ms 
(0045) 	if (*time <= 1)
    10B6: 52 FC    MOV   A,[X-4]
    10B8: 53 19    MOV   [__r1],A
    10BA: 3E 19    MVI   A,[__r1]
    10BC: 53 1A    MOV   [__r0],A
    10BE: 3E 19    MVI   A,[__r1]
    10C0: 53 19    MOV   [__r1],A
    10C2: 50 01    MOV   A,0x1
    10C4: 12 19    SUB   A,[__r1]
    10C6: 51 1A    MOV   A,[__r0]
    10C8: 31 80    XOR   A,0x80
    10CA: 53 12    MOV   [__rX],A
    10CC: 50 80    MOV   A,0x80
    10CE: 1A 12    SBB   A,[__rX]
    10D0: C0 06    JC    0x10D7
(0046) 	{
(0047) 		UATrig_Data_ADDR |= UATrig_MASK;
    10D2: 43 00 40 OR    REG[0x0],0x40
(0048) 	}
    10D5: 80 04    JMP   0x10DA
(0049) 	else 	
(0050) 		UATrig_Data_ADDR &= ~UATrig_MASK;
    10D7: 41 00 BF AND   REG[0x0],0xBF
    10DA: 20       POP   X
    10DB: 7F       RET   
(0051) 	
(0052) }
(0053) 
(0054) void sendTrigPulse(int *ultraData)
(0055) {	
_sendTrigPulse:
  ultraData            --> X-5
    10DC: 10       PUSH  X
    10DD: 4F       MOV   X,SP
(0056) 	*ultraData = 0;
    10DE: 52 FC    MOV   A,[X-4]
    10E0: 53 19    MOV   [__r1],A
    10E2: 50 00    MOV   A,0x0
    10E4: 3F 19    MVI   [__r1],A
    10E6: 3F 19    MVI   [__r1],A
(0057) 	UATrig_Data_ADDR |= UATrig_MASK;	
    10E8: 43 00 40 OR    REG[0x0],0x40
(0058) 	Delay50u();
    10EB: 10       PUSH  X
    10EC: 7C 09 63 LCALL _Delay50u
    10EF: 20       POP   X
(0059) 	UATrig_Data_ADDR &= ~UATrig_MASK;
    10F0: 41 00 BF AND   REG[0x0],0xBF
(0060) 	Delay10msTimes(7);
    10F3: 10       PUSH  X
(0061) }	
(0062) 
FILE: lib\psocgpioint.asm               (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;;*****************************************************************************
                                        (0004) ;;*****************************************************************************
                                        (0005) ;;  FILENAME: PSoCGPIOINT.asm
                                        (0006) ;;   Version: 2.0.0.20, Updated on 2003/07/17 at 12:10:35
                                        (0007) ;;  @PSOC_VERSION
                                        (0008) ;;
                                        (0009) ;;  DESCRIPTION: PSoC GPIO Interrupt Service Routine
                                        (0010) ;;-----------------------------------------------------------------------------
                                        (0011) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0012) ;;*****************************************************************************
                                        (0013) ;;*****************************************************************************
                                        (0014) 
                                        (0015) include "m8c.inc"
                                        (0016) include "PSoCGPIOINT.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export   PSoC_GPIO_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) ;-----------------------------------------------
                                        (0025) ;  Constant Definitions
                                        (0026) ;-----------------------------------------------
                                        (0027) 
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ; Variable Allocation
                                        (0031) ;-----------------------------------------------
                                        (0032) 	
                                        (0033) 
                                        (0034) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0035) ;---------------------------------------------------
                                        (0036) ; Insert your custom declarations below this banner
                                        (0037) ;---------------------------------------------------
                                        (0038) 
                                        (0039) ;---------------------------------------------------
                                        (0040) ; Insert your custom declarations above this banner
                                        (0041) ;---------------------------------------------------
                                        (0042) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0043) 
                                        (0044) 
                                        (0045) ;-----------------------------------------------------------------------------
                                        (0046) ;  FUNCTION NAME: PSoC_GPIO_ISR
                                        (0047) ;
                                        (0048) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0049) ;
                                        (0050) ;-----------------------------------------------------------------------------
                                        (0051) ;
                                        (0052) PSoC_GPIO_ISR:
                                        (0053) 
                                        (0054) 
                                        (0055)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0056)    ;---------------------------------------------------
                                        (0057)    ; Insert your custom code below this banner
                                        (0058)    ;---------------------------------------------------
                                        (0059)    ;---------------------------------------------------
                                        (0060)    ; Insert your custom code above this banner
                                        (0061)    ;---------------------------------------------------
                                        (0062)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0063) 
10FC: 7E       RETI                     (0064)    reti
                                        (0065) 
                                        (0066) 
                                        (0067) ; end of file PSoCGPIOINT.asm
_atoi:
    1583: 10       PUSH  X
    1584: 4F       MOV   X,SP
    1585: 38 04    ADD   SP,0x4
    1587: 80 06    JMP   0x158E
    1589: 77 FC    INC   [X-4]
    158B: 0F FB 00 ADC   [X-5],0x0
    158E: 52 FC    MOV   A,[X-4]
    1590: 53 19    MOV   [__r1],A
    1592: 3E 19    MVI   A,[__r1]
    1594: 53 19    MOV   [__r1],A
    1596: 50 00    MOV   A,0x0
    1598: 08       PUSH  A
    1599: 51 19    MOV   A,[__r1]
    159B: 08       PUSH  A
    159C: 7C 18 2A LCALL _isspace
    159F: 38 FE    ADD   SP,0xFE
    15A1: 3C 1A 00 CMP   [__r0],0x0
    15A4: BF E4    JNZ   0x1589
    15A6: 3C 19 00 CMP   [__r1],0x0
    15A9: BF DF    JNZ   0x1589
    15AB: 56 03 00 MOV   [X+3],0x0
    15AE: 56 02 00 MOV   [X+2],0x0
    15B1: 52 FC    MOV   A,[X-4]
    15B3: 53 19    MOV   [__r1],A
    15B5: 3E 19    MVI   A,[__r1]
    15B7: 39 2D    CMP   A,0x2D
    15B9: B0 0E    JNZ   0x15C8
    15BB: 56 03 01 MOV   [X+3],0x1
    15BE: 56 02 00 MOV   [X+2],0x0
    15C1: 77 FC    INC   [X-4]
    15C3: 0F FB 00 ADC   [X-5],0x0
    15C6: 80 10    JMP   0x15D7
    15C8: 52 FC    MOV   A,[X-4]
    15CA: 53 19    MOV   [__r1],A
    15CC: 3E 19    MVI   A,[__r1]
    15CE: 39 2B    CMP   A,0x2B
    15D0: B0 06    JNZ   0x15D7
    15D2: 77 FC    INC   [X-4]
    15D4: 0F FB 00 ADC   [X-5],0x0
    15D7: 56 01 00 MOV   [X+1],0x0
    15DA: 56 00 00 MOV   [X+0],0x0
    15DD: 80 6E    JMP   0x164C
    15DF: 52 FC    MOV   A,[X-4]
    15E1: 53 19    MOV   [__r1],A
    15E3: 52 FB    MOV   A,[X-5]
    15E5: 53 1A    MOV   [__r0],A
    15E7: 51 19    MOV   A,[__r1]
    15E9: 01 01    ADD   A,0x1
    15EB: 54 FC    MOV   [X-4],A
    15ED: 51 1A    MOV   A,[__r0]
    15EF: 09 00    ADC   A,0x0
    15F1: 54 FB    MOV   [X-5],A
    15F3: 52 01    MOV   A,[X+1]
    15F5: 53 17    MOV   [__r3],A
    15F7: 52 00    MOV   A,[X+0]
    15F9: 53 18    MOV   [__r2],A
    15FB: 55 15 0A MOV   [__r5],0xA
    15FE: 55 16 00 MOV   [__r4],0x0
    1601: 55 12 00 MOV   [__rX],0x0
    1604: 55 11 00 MOV   [__rY],0x0
    1607: 3C 16 00 CMP   [__r4],0x0
    160A: B0 06    JNZ   0x1611
    160C: 3C 15 00 CMP   [__r5],0x0
    160F: A0 17    JZ    0x1627
    1611: 70 FB    AND   F,0xFB
    1613: 6E 16    RRC   [__r4]
    1615: 6E 15    RRC   [__r5]
    1617: D0 09    JNC   0x1621
    1619: 51 17    MOV   A,[__r3]
    161B: 04 12    ADD   [__rX],A
    161D: 51 18    MOV   A,[__r2]
    161F: 0C 11    ADC   [__rY],A
    1621: 65 17    ASL   [__r3]
    1623: 6B 18    RLC   [__r2]
    1625: 8F E1    JMP   0x1607
    1627: 5F 17 12 MOV   [__r3],[__rX]
    162A: 5F 18 11 MOV   [__r2],[__rY]
    162D: 3E 19    MVI   A,[__r1]
    162F: 53 19    MOV   [__r1],A
    1631: 55 1A 00 MOV   [__r0],0x0
    1634: 51 17    MOV   A,[__r3]
    1636: 02 19    ADD   A,[__r1]
    1638: 53 19    MOV   [__r1],A
    163A: 51 18    MOV   A,[__r2]
    163C: 0A 1A    ADC   A,[__r0]
    163E: 53 1A    MOV   [__r0],A
    1640: 51 19    MOV   A,[__r1]
    1642: 11 30    SUB   A,0x30
    1644: 54 01    MOV   [X+1],A
    1646: 51 1A    MOV   A,[__r0]
    1648: 19 00    SBB   A,0x0
    164A: 54 00    MOV   [X+0],A
    164C: 52 FC    MOV   A,[X-4]
    164E: 53 19    MOV   [__r1],A
    1650: 3E 19    MVI   A,[__r1]
    1652: 53 19    MOV   [__r1],A
    1654: 50 00    MOV   A,0x0
    1656: 08       PUSH  A
    1657: 51 19    MOV   A,[__r1]
    1659: 08       PUSH  A
    165A: 7C 18 0C LCALL _isdigit
    165D: 38 FE    ADD   SP,0xFE
    165F: 3C 1A 00 CMP   [__r0],0x0
    1662: BF 7C    JNZ   0x15DF
    1664: 3C 19 00 CMP   [__r1],0x0
    1667: BF 77    JNZ   0x15DF
    1669: 3D 02 00 CMP   [X+2],0x0
    166C: B0 06    JNZ   0x1673
    166E: 3D 03 00 CMP   [X+3],0x0
    1671: A0 11    JZ    0x1683
    1673: 52 01    MOV   A,[X+1]
    1675: 73       CPL   A
    1676: 11 FF    SUB   A,0xFF
    1678: 53 19    MOV   [__r1],A
    167A: 52 00    MOV   A,[X+0]
    167C: 73       CPL   A
    167D: 19 FF    SBB   A,0xFF
    167F: 53 1A    MOV   [__r0],A
    1681: 80 09    JMP   0x168B
    1683: 52 01    MOV   A,[X+1]
    1685: 53 19    MOV   [__r1],A
    1687: 52 00    MOV   A,[X+0]
    1689: 53 1A    MOV   [__r0],A
    168B: 38 FC    ADD   SP,0xFC
    168D: 20       POP   X
    168E: 7F       RET   
_itoa:
    168F: 10       PUSH  X
    1690: 4F       MOV   X,SP
    1691: 38 09    ADD   SP,0x9
    1693: 52 FA    MOV   A,[X-6]
    1695: 54 03    MOV   [X+3],A
    1697: 52 F9    MOV   A,[X-7]
    1699: 54 02    MOV   [X+2],A
    169B: 3D F9 00 CMP   [X-7],0x0
    169E: B0 22    JNZ   0x16C1
    16A0: 3D FA 00 CMP   [X-6],0x0
    16A3: B0 1D    JNZ   0x16C1
    16A5: 52 FC    MOV   A,[X-4]
    16A7: 53 19    MOV   [__r1],A
    16A9: 50 30    MOV   A,0x30
    16AB: 3F 19    MVI   [__r1],A
    16AD: 52 FC    MOV   A,[X-4]
    16AF: 01 01    ADD   A,0x1
    16B1: 53 19    MOV   [__r1],A
    16B3: 50 00    MOV   A,0x0
    16B5: 3F 19    MVI   [__r1],A
    16B7: 52 FC    MOV   A,[X-4]
    16B9: 53 19    MOV   [__r1],A
    16BB: 52 FB    MOV   A,[X-5]
    16BD: 53 1A    MOV   [__r0],A
    16BF: 81 48    JMP   0x1808
    16C1: 52 FA    MOV   A,[X-6]
    16C3: 11 00    SUB   A,0x0
    16C5: 52 F9    MOV   A,[X-7]
    16C7: 31 80    XOR   A,0x80
    16C9: 19 80    SBB   A,0x80
    16CB: D0 26    JNC   0x16F2
    16CD: 3D F7 00 CMP   [X-9],0x0
    16D0: B0 21    JNZ   0x16F2
    16D2: 3D F8 0A CMP   [X-8],0xA
    16D5: B0 1C    JNZ   0x16F2
    16D7: 56 06 01 MOV   [X+6],0x1
    16DA: 52 03    MOV   A,[X+3]
    16DC: 73       CPL   A
    16DD: 53 19    MOV   [__r1],A
    16DF: 52 02    MOV   A,[X+2]
    16E1: 73       CPL   A
    16E2: 53 1A    MOV   [__r0],A
    16E4: 51 19    MOV   A,[__r1]
    16E6: 01 01    ADD   A,0x1
    16E8: 54 03    MOV   [X+3],A
    16EA: 51 1A    MOV   A,[__r0]
    16EC: 09 00    ADC   A,0x0
    16EE: 54 02    MOV   [X+2],A
    16F0: 80 04    JMP   0x16F5
    16F2: 56 06 00 MOV   [X+6],0x0
    16F5: 52 FC    MOV   A,[X-4]
    16F7: 54 01    MOV   [X+1],A
    16F9: 52 F7    MOV   A,[X-9]
    16FB: 08       PUSH  A
    16FC: 52 F8    MOV   A,[X-8]
    16FE: 08       PUSH  A
    16FF: 52 02    MOV   A,[X+2]
    1701: 08       PUSH  A
    1702: 52 03    MOV   A,[X+3]
    1704: 08       PUSH  A
    1705: 7C 11 47 LCALL 0x1147
    1708: 38 FE    ADD   SP,0xFE
    170A: 18       POP   A
    170B: 53 19    MOV   [__r1],A
    170D: 18       POP   A
    170E: 53 1A    MOV   [__r0],A
    1710: 51 19    MOV   A,[__r1]
    1712: 54 08    MOV   [X+8],A
    1714: 51 1A    MOV   A,[__r0]
    1716: 54 07    MOV   [X+7],A
    1718: 50 09    MOV   A,0x9
    171A: 13 08    SUB   A,[X+8]
    171C: 52 07    MOV   A,[X+7]
    171E: 31 80    XOR   A,0x80
    1720: 53 12    MOV   [__rX],A
    1722: 50 80    MOV   A,0x80
    1724: 1A 12    SBB   A,[__rX]
    1726: C0 1D    JC    0x1744
    1728: 52 01    MOV   A,[X+1]
    172A: 53 19    MOV   [__r1],A
    172C: 52 00    MOV   A,[X+0]
    172E: 53 1A    MOV   [__r0],A
    1730: 51 19    MOV   A,[__r1]
    1732: 01 01    ADD   A,0x1
    1734: 54 01    MOV   [X+1],A
    1736: 51 1A    MOV   A,[__r0]
    1738: 09 00    ADC   A,0x0
    173A: 54 00    MOV   [X+0],A
    173C: 52 08    MOV   A,[X+8]
    173E: 01 30    ADD   A,0x30
    1740: 3F 19    MVI   [__r1],A
    1742: 80 1B    JMP   0x175E
    1744: 52 01    MOV   A,[X+1]
    1746: 53 19    MOV   [__r1],A
    1748: 52 00    MOV   A,[X+0]
    174A: 53 1A    MOV   [__r0],A
    174C: 51 19    MOV   A,[__r1]
    174E: 01 01    ADD   A,0x1
    1750: 54 01    MOV   [X+1],A
    1752: 51 1A    MOV   A,[__r0]
    1754: 09 00    ADC   A,0x0
    1756: 54 00    MOV   [X+0],A
    1758: 52 08    MOV   A,[X+8]
    175A: 01 57    ADD   A,0x57
    175C: 3F 19    MVI   [__r1],A
    175E: 52 F7    MOV   A,[X-9]
    1760: 08       PUSH  A
    1761: 52 F8    MOV   A,[X-8]
    1763: 08       PUSH  A
    1764: 52 02    MOV   A,[X+2]
    1766: 08       PUSH  A
    1767: 52 03    MOV   A,[X+3]
    1769: 08       PUSH  A
    176A: 7C 11 47 LCALL 0x1147
    176D: 18       POP   A
    176E: 54 03    MOV   [X+3],A
    1770: 18       POP   A
    1771: 54 02    MOV   [X+2],A
    1773: 38 FE    ADD   SP,0xFE
    1775: 3D 02 00 CMP   [X+2],0x0
    1778: BF 80    JNZ   0x16F9
    177A: 3D 03 00 CMP   [X+3],0x0
    177D: BF 7B    JNZ   0x16F9
    177F: 3D 06 00 CMP   [X+6],0x0
    1782: A0 19    JZ    0x179C
    1784: 52 01    MOV   A,[X+1]
    1786: 53 19    MOV   [__r1],A
    1788: 52 00    MOV   A,[X+0]
    178A: 53 1A    MOV   [__r0],A
    178C: 51 19    MOV   A,[__r1]
    178E: 01 01    ADD   A,0x1
    1790: 54 01    MOV   [X+1],A
    1792: 51 1A    MOV   A,[__r0]
    1794: 09 00    ADC   A,0x0
    1796: 54 00    MOV   [X+0],A
    1798: 50 2D    MOV   A,0x2D
    179A: 3F 19    MVI   [__r1],A
    179C: 52 01    MOV   A,[X+1]
    179E: 53 19    MOV   [__r1],A
    17A0: 52 00    MOV   A,[X+0]
    17A2: 53 1A    MOV   [__r0],A
    17A4: 51 19    MOV   A,[__r1]
    17A6: 01 FF    ADD   A,0xFF
    17A8: 54 01    MOV   [X+1],A
    17AA: 51 1A    MOV   A,[__r0]
    17AC: 09 FF    ADC   A,0xFF
    17AE: 54 00    MOV   [X+0],A
    17B0: 50 00    MOV   A,0x0
    17B2: 3F 19    MVI   [__r1],A
    17B4: 52 FC    MOV   A,[X-4]
    17B6: 54 05    MOV   [X+5],A
    17B8: 80 3D    JMP   0x17F6
    17BA: 52 05    MOV   A,[X+5]
    17BC: 53 19    MOV   [__r1],A
    17BE: 3E 19    MVI   A,[__r1]
    17C0: 54 06    MOV   [X+6],A
    17C2: 52 05    MOV   A,[X+5]
    17C4: 53 19    MOV   [__r1],A
    17C6: 52 04    MOV   A,[X+4]
    17C8: 53 1A    MOV   [__r0],A
    17CA: 51 19    MOV   A,[__r1]
    17CC: 01 01    ADD   A,0x1
    17CE: 54 05    MOV   [X+5],A
    17D0: 51 1A    MOV   A,[__r0]
    17D2: 09 00    ADC   A,0x0
    17D4: 54 04    MOV   [X+4],A
    17D6: 52 01    MOV   A,[X+1]
    17D8: 53 17    MOV   [__r3],A
    17DA: 3E 17    MVI   A,[__r3]
    17DC: 3F 19    MVI   [__r1],A
    17DE: 52 01    MOV   A,[X+1]
    17E0: 53 19    MOV   [__r1],A
    17E2: 52 00    MOV   A,[X+0]
    17E4: 53 1A    MOV   [__r0],A
    17E6: 51 19    MOV   A,[__r1]
    17E8: 01 FF    ADD   A,0xFF
    17EA: 54 01    MOV   [X+1],A
    17EC: 51 1A    MOV   A,[__r0]
    17EE: 09 FF    ADC   A,0xFF
    17F0: 54 00    MOV   [X+0],A
    17F2: 52 06    MOV   A,[X+6]
    17F4: 3F 19    MVI   [__r1],A
    17F6: 52 01    MOV   A,[X+1]
    17F8: 53 1A    MOV   [__r0],A
    17FA: 52 05    MOV   A,[X+5]
    17FC: 3A 1A    CMP   A,[__r0]
    17FE: CF BB    JC    0x17BA
    1800: 52 FC    MOV   A,[X-4]
    1802: 53 19    MOV   [__r1],A
    1804: 52 FB    MOV   A,[X-5]
    1806: 53 1A    MOV   [__r0],A
    1808: 38 F7    ADD   SP,0xF7
    180A: 20       POP   X
    180B: 7F       RET   
_isdigit:
    180C: 10       PUSH  X
    180D: 4F       MOV   X,SP
    180E: 52 FC    MOV   A,[X-4]
    1810: 01 D3    ADD   A,0xD3
    1812: 53 19    MOV   [__r1],A
    1814: 52 FB    MOV   A,[X-5]
    1816: 09 01    ADC   A,0x1
    1818: 10       PUSH  X
    1819: 58 19    MOV   X,[__r1]
    181B: 28       ROMX  
    181C: 20       POP   X
    181D: 53 19    MOV   [__r1],A
    181F: 55 1A 00 MOV   [__r0],0x0
    1822: 26 19 04 AND   [__r1],0x4
    1825: 26 1A 00 AND   [__r0],0x0
    1828: 20       POP   X
    1829: 7F       RET   
_isspace:
    182A: 10       PUSH  X
    182B: 4F       MOV   X,SP
    182C: 52 FC    MOV   A,[X-4]
    182E: 01 D3    ADD   A,0xD3
    1830: 53 19    MOV   [__r1],A
    1832: 52 FB    MOV   A,[X-5]
    1834: 09 01    ADC   A,0x1
    1836: 10       PUSH  X
    1837: 58 19    MOV   X,[__r1]
    1839: 28       ROMX  
    183A: 20       POP   X
    183B: 53 19    MOV   [__r1],A
    183D: 55 1A 00 MOV   [__r0],0x0
    1840: 26 19 10 AND   [__r1],0x10
    1843: 26 1A 00 AND   [__r0],0x0
    1846: 20       POP   X
    1847: 7F       RET   
