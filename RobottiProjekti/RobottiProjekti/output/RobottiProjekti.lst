FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C27xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 03 D8 LJMP  _PWM8_VASEN_ISR    (0149)     ljmp	_PWM8_VASEN_ISR
0023: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0024: 7D 04 1B LJMP  _PWM8_OIKEA_ISR    (0153)     ljmp	_PWM8_OIKEA_ISR
0027: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 03 33 LJMP  _Timer8_ISR        (0157)     ljmp	_Timer8_ISR
002B: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 07 48 LJMP  _ADCINC_ADConversion_ISR(0161)     ljmp	_ADCINC_ADConversion_ISR
002F: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0181)     // call	void_handler
0060: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0185)     // call	void_handler
0064: 7E       RETI                     (0186)     reti
0068: 71 10    OR    F,0x10             
                                        (0187)     ;---------------------------------------------------
                                        (0188)     ; Insert your custom code above this banner
                                        (0189)     ;---------------------------------------------------
                                        (0190)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0191) 
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  Start of Execution.
                                        (0194) ;-----------------------------------------------------------------------------
                                        (0195) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0196) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0197) ;
                                        (0198) 
                                        (0199) IF	(TOOLCHAIN & HITECH)
                                        (0200)  	AREA PD_startup(CODE, REL, CON)
                                        (0201) ELSE
                                        (0202)     org 68h
                                        (0203) ENDIF
                                        (0204) __Start:
                                        (0205) 
                                        (0206)     ; initialize SMP values for voltage stabilization, if required,
                                        (0207)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0208)     ; least for now. 
                                        (0209)     ;
                                        (0210)     M8C_SetBank1
006A: 62 E3 87 MOV   REG[0xE3],0x87     (0211)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0212)     M8C_SetBank0
                                        (0213) 
                                        (0214) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0215) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0216)     M8C_EnableWatchDog
                                        (0217) ENDIF
                                        (0218) 
                                        (0219) IF ( SELECT_32K )
                                        (0220)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0221) ELSE
0072: 41 FE FB AND   REG[0xFE],0xFB     (0222)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0223) ENDIF
                                        (0224) 
                                        (0225) IF	(TOOLCHAIN & HITECH) 
                                        (0226)     ;---------------------------
                                        (0227)     ; Set up the Temporary stack
                                        (0228)     ;---------------------------
                                        (0229)     ; A temporary stack is set up for the SSC instructions.
                                        (0230)     ; The real stack start will be assigned later.
                                        (0231)     ;
                                        (0232) 	global		__Lstackps
                                        (0233) 	mov     a,low __Lstackps
                                        (0234) 	swap    a,sp
                                        (0235) ELSE
                                        (0236)     ;------------------
                                        (0237)     ; Set up the stack
                                        (0238)     ;------------------
0075: 50 2C    MOV   A,0x2C             (0239)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0240)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0241) ENDIF
                                        (0242) 
                                        (0243)     ;-----------------------------------------------
                                        (0244)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0245)     ;-----------------------------------------------
                                        (0246) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0247) IF ( SUPPLY_VOLTAGE )         ; 1 means 5.0V
                                        (0248)  IF ( AGND_BYPASS )
                                        (0249)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0250)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0251)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0252)     ; value using the proper trim values.
                                        (0253)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0254)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0255)  ENDIF
                                        (0256) ELSE    ; 3.3 V Operation, not 5.0V
                                        (0257)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0258) ENDIF ;(SUPPLY_VOLTAGE)
                                        (0259) 
007B: 55 F8 00 MOV   [0xF8],0x0         (0260)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
007E: 55 F9 00 MOV   [0xF9],0x0         (0261)     mov  [bSSC_KEYSP], 0
0081: 71 10    OR    F,0x10             
                                        (0262) 
                                        (0263)     ;---------------------------------------
                                        (0264)     ; Initialize Crystal Oscillator and PLL
                                        (0265)     ;---------------------------------------
                                        (0266) 
                                        (0267) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0268)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0269)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0270)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0271)     ; the ECO to stabilize.
                                        (0272)     ;
                                        (0273)     M8C_SetBank1
                                        (0274)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0275)     M8C_SetBank0
                                        (0276)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0277)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0278)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0279) .WaitFor1s:
                                        (0280)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0281)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0282)                                           ;   since interrupts are not globally enabled
                                        (0283) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0284)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0285)     M8C_SetBank1
0083: 62 E0 02 MOV   REG[0xE0],0x2      (0286)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0086: 70 EF    AND   F,0xEF             
0088: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0287)     M8C_SetBank0
                                        (0288)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0289) 
                                        (0290) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0291) 
                                        (0292) IF ( PLL_MODE )
                                        (0293)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0294)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0295)     ;
                                        (0296)     M8C_SetBank1
                                        (0297)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0298)     M8C_SetBank0
                                        (0299)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0300)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0301) 
                                        (0302) .WaitFor16ms:
                                        (0303)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0304)     jz   .WaitFor16ms
                                        (0305)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0306)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0307)     M8C_SetBank0
                                        (0308) 
                                        (0309) IF      ( WAIT_FOR_32K )
                                        (0310) ELSE ; !( WAIT_FOR_32K )
                                        (0311)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0312)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0313) ENDIF ;(WAIT_FOR_32K)
                                        (0314) ENDIF ;(PLL_MODE)
                                        (0315) 
                                        (0316) 	;-------------------------------------------------------
                                        (0317)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0318)     ;-------------------------------------------------------
                                        (0319) 
                                        (0320)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0321) 
                                        (0322) IF (SYSCLK_SOURCE)
                                        (0323)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0324) ENDIF
                                        (0325)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0326) 
                                        (0327)     ;------------------------
                                        (0328)     ; Close CT leakage path.
                                        (0329)     ;------------------------
008B: 62 71 05 MOV   REG[0x71],0x5      (0330)     mov   reg[ACB00CR0], 05h
008E: 62 75 05 MOV   REG[0x75],0x5      (0331)     mov   reg[ACB01CR0], 05h
0091: 62 79 05 MOV   REG[0x79],0x5      (0332)     mov   reg[ACB02CR0], 05h
0094: 62 7D 05 MOV   REG[0x7D],0x5      (0333)     mov   reg[ACB03CR0], 05h
                                        (0334) 
                                        (0335)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0336)     ;---------------------------------------------------
                                        (0337)     ; Insert your custom code below this banner
                                        (0338)     ;---------------------------------------------------
                                        (0339) 
                                        (0340)     ;---------------------------------------------------
                                        (0341)     ; Insert your custom code above this banner
                                        (0342)     ;---------------------------------------------------
                                        (0343)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0344) 
                                        (0345)     ;-------------------------
                                        (0346)     ; Load Base Configuration
                                        (0347)     ;-------------------------
                                        (0348)     ; Load global parameter settings and load the user modules in the
                                        (0349)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0350)     ; to minimize start up time; (2) We may still need to play with the
                                        (0351)     ; Sleep Timer.
                                        (0352)     ;
0097: 7C 02 CC LCALL 0x02CC             (0353)     lcall LoadConfigInit
                                        (0354) 
                                        (0355)     ;-----------------------------------
                                        (0356)     ; Initialize C Run-Time Environment
                                        (0357)     ;-----------------------------------
                                        (0358) IF ( C_LANGUAGE_SUPPORT )
009A: 50 00    MOV   A,0x0              (0359)     mov  A,0                           ; clear the 'bss' segment to zero
009C: 55 20 2C MOV   [__r0],0x2C        (0360)     mov  [__r0],<__bss_start
                                        (0361) BssLoop:
009F: 3C 20 2C CMP   [__r0],0x2C        (0362)     cmp  [__r0],<__bss_end
00A2: A0 05    JZ    0x00A8             (0363)     jz   BssDone
00A4: 3F 20    MVI   [__r0],A           (0364)     mvi  [__r0],A
00A6: 8F F8    JMP   0x009F             (0365)     jmp  BssLoop
                                        (0366) BssDone:
00A8: 50 01    MOV   A,0x1              (0367)     mov  A,>__idata_start              ; copy idata to data segment
00AA: 57 F5    MOV   X,0xF5             (0368)     mov  X,<__idata_start
00AC: 55 20 00 MOV   [__r0],0x0         (0369)     mov  [__r0],<__data_start
                                        (0370) IDataLoop:
00AF: 3C 20 12 CMP   [__r0],0x12        (0371)     cmp  [__r0],<__data_end
00B2: A0 0B    JZ    0x00BE             (0372)     jz   C_RTE_Done
00B4: 08       PUSH  A                  (0373)     push A
00B5: 28       ROMX                     (0374)     romx
00B6: 3F 20    MVI   [__r0],A           (0375)     mvi  [__r0],A
00B8: 18       POP   A                  (0376)     pop  A
00B9: 75       INC   X                  (0377)     inc  X
00BA: 09 00    ADC   A,0x0              (0378)     adc  A,0
00BC: 8F F2    JMP   0x00AF             (0379)     jmp  IDataLoop
00BE: 71 10    OR    F,0x10             
00C0: 70 EF    AND   F,0xEF             
                                        (0380) 
                                        (0381) C_RTE_Done:
                                        (0382) 
                                        (0383) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0384) 
                                        (0385)     ;-------------------------------
                                        (0386)     ; Voltage Stabilization for SMP
                                        (0387)     ;-------------------------------
                                        (0388) 
                                        (0389) IF ( SUPPLY_VOLTAGE )                  ; 1 Means 5 Volts
                                        (0390) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0391)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0392)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0393)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0394)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0395)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0396)     M8C_SetBank1
                                        (0397)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0398)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0399)     M8C_SetBank0
                                        (0400)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0401)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0402) .WaitFor2ms:
                                        (0403)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0404)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0405) ENDIF ; ( SWITCH_MODE_PUMP ^ 1 )
                                        (0406) ENDIF ; ( SUPPLY_VOLTAGE )
                                        (0407) 
                                        (0408)     ;-------------------------------
                                        (0409)     ; Set Power-On Reset (POR) Level
                                        (0410)     ;-------------------------------
                                        (0411)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0412)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0413)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0414)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0415)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0416) 
                                        (0417)     M8C_SetBank1
                                        (0418) 
                                        (0419) IF ( SUPPLY_VOLTAGE )                       ; 1 Means 5 Volts
                                        (0420)  IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )  ;    Also 24MHz?
                                        (0421)                                             ;       no, set 4.5V POR in user code, if desired
                                        (0422)  ELSE ; 24HMz                               ;
                                        (0423)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0424)  ENDIF ; OSC_CRO_CPU_24MHz
                                        (0425) ENDIF ; 5V
                                        (0426) 
                                        (0427)     M8C_SetBank0
                                        (0428) 
                                        (0429)     ;----------------------------
                                        (0430)     ; Wrap up and invoke "main"
                                        (0431)     ;----------------------------
                                        (0432) 
                                        (0433)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0434)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0435)     ;
00C2: 62 E0 00 MOV   REG[0xE0],0x0      (0436)     mov  reg[INT_MSK0],0
00C5: 71 10    OR    F,0x10             
                                        (0437) 
                                        (0438)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0439)     ;
                                        (0440)     M8C_SetBank1
00C7: 62 E0 00 MOV   REG[0xE0],0x0      (0441)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
00CA: 70 EF    AND   F,0xEF             
                                        (0442)     M8C_SetBank0
                                        (0443) 
                                        (0444)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0445)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0446)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0447)     ;
00CC: 62 E2 00 MOV   REG[0xE2],0x0      (0448)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0449)                                    ; have been set during the boot process.
                                        (0450) IF	(TOOLCHAIN & HITECH)
                                        (0451) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0452) ELSE
                                        (0453) IF ENABLE_LJMP_TO_MAIN
                                        (0454)     ljmp  _main                    ; goto main (no return)
                                        (0455) ELSE
00CF: 7C 08 28 LCALL __UserModules_end|__text_start|_main|_main(0456)     lcall _main                    ; call main
                                        (0457) .Exit:
00D2: 8F FF    JMP   0x00D2             (0458)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0459) ENDIF
                                        (0460) ENDIF ; TOOLCHAIN
                                        (0461) 
                                        (0462)     ;---------------------------------
                                        (0463)     ; Library Access to Global Parms
                                        (0464)     ;---------------------------------
                                        (0465)     ;
                                        (0466)  bGetPowerSetting:
                                        (0467) _bGetPowerSetting:
                                        (0468)     ; Synthesize the "power setting" value used by chips with SlowIMO mode.
                                        (0469)     ; Returns value of POWER_SETTING in the A register.
                                        (0470)     ; No inputs. No Side Effects.
                                        (0471)     ;
                                        (0472) IF ( SUPPLY_VOLTAGE )            ; 1 means 5.0V
00D4: 50 10    MOV   A,0x10             (0473)     mov   A, POWER_SET_5V0_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0474) ELSE        
                                        (0475)     mov   A, POWER_SET_3V3_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0476) ENDIF
00D6: 7F       RET                      (0477)     ret
                                        (0478) 
                                        (0479) IF	(TOOLCHAIN & HITECH)
                                        (0480) ELSE
                                        (0481)     ;---------------------------------
                                        (0482)     ; Order Critical RAM & ROM AREAs
                                        (0483)     ;---------------------------------
                                        (0484)     ;  'TOP' is all that has been defined so far...
                                        (0485) 
                                        (0486)     ;  ROM AREAs for C CONST, static & global items
                                        (0487)     ;
                                        (0488)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0489)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0490) __idata_start:
                                        (0491) 
                                        (0492)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0493) __func_lit_start:
                                        (0494) 
                                        (0495)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0496)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0497) 
                                        (0498)     ; CODE segment for general use
                                        (0499)     ;
                                        (0500)     AREA text (ROM, REL, CON)
                                        (0501) __text_start:
                                        (0502) 
                                        (0503)     ; RAM area usage
                                        (0504)     ;
                                        (0505)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0506) __data_start:
                                        (0507) 
                                        (0508)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0509)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0510)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0511) __bss_start:
                                        (0512) 
                                        (0513) ENDIF ; TOOLCHAIN
                                        (0514) 
                                        (0515) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.2946
0207: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_robottiprojekti_Bank1
                                        (0019) export LoadConfigTBL_robottiprojekti_Bank0
                                        (0020) export LoadConfigTBL_robottiprojekti_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_robottiprojekti_Bank0:
                                        (0023) ;  Instance name ADCINC, User Module ADCINC
                                        (0024) ;       Instance name ADCINC, Block Name ADC(ASC10)
                                        (0025) 	db		80h, 90h		;ADCINC_AtoDcr0(ASC10CR0)
                                        (0026) 	db		81h, 00h		;ADCINC_AtoDcr1(ASC10CR1)
                                        (0027) 	db		82h, 60h		;ADCINC_AtoDcr2(ASC10CR2)
                                        (0028) 	db		83h, f0h		;ADCINC_AtoDcr3(ASC10CR3)
                                        (0029) ;       Instance name ADCINC, Block Name PWM(DCB03)
                                        (0030) 	db		2fh, 00h		;ADCINC_PWMcr0(DCB03CR0)
                                        (0031) 	db		2dh, 00h		;ADCINC_PWMdr1(DCB03DR1)
                                        (0032) 	db		2eh, 01h		;ADCINC_PWMdr2(DCB03DR2)
                                        (0033) ;  Instance name LCD, User Module LCD
                                        (0034) ;  Instance name PGA, User Module PGA
                                        (0035) ;       Instance name PGA, Block Name GAIN(ACB00)
                                        (0036) 	db		71h, fdh		;PGA_GAIN_CR0(ACB00CR0)
                                        (0037) 	db		72h, 21h		;PGA_GAIN_CR1(ACB00CR1)
                                        (0038) 	db		73h, 20h		;PGA_GAIN_CR2(ACB00CR2)
                                        (0039) 	db		70h, 00h		;PGA_GAIN_CR3(ACB00CR3)
                                        (0040) ;  Instance name PWM8_OIKEA, User Module PWM8
                                        (0041) ;       Instance name PWM8_OIKEA, Block Name PWM8(DBB01)
                                        (0042) 	db		27h, 00h		;PWM8_OIKEA_CONTROL_REG(DBB01CR0)
                                        (0043) 	db		25h, c7h		;PWM8_OIKEA_PERIOD_REG(DBB01DR1)
                                        (0044) 	db		26h, 00h		;PWM8_OIKEA_COMPARE_REG(DBB01DR2)
                                        (0045) ;  Instance name PWM8_VASEN, User Module PWM8
                                        (0046) ;       Instance name PWM8_VASEN, Block Name PWM8(DBB00)
                                        (0047) 	db		23h, 00h		;PWM8_VASEN_CONTROL_REG(DBB00CR0)
                                        (0048) 	db		21h, c7h		;PWM8_VASEN_PERIOD_REG(DBB00DR1)
                                        (0049) 	db		22h, 00h		;PWM8_VASEN_COMPARE_REG(DBB00DR2)
                                        (0050) ;  Instance name Timer8, User Module Timer8
                                        (0051) ;       Instance name Timer8, Block Name TIMER8(DCB02)
                                        (0052) 	db		2bh, 04h		;Timer8_CONTROL_REG(DCB02CR0)
                                        (0053) 	db		29h, c7h		;Timer8_PERIOD_REG(DCB02DR1)
                                        (0054) 	db		2ah, 00h		;Timer8_COMPARE_REG(DCB02DR2)
                                        (0055) ;  Global Register values Bank 0
                                        (0056) 	db		60h, 2bh		; AnalogColumnInputSelect register (AMX_IN)
                                        (0057) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0058) 	db		63h, 15h		; AnalogReferenceControl register (ARF_CR)
                                        (0059) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0060) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0061) 	db		e7h, 03h		; DecimatorControl_1 register (DEC_CR1)
                                        (0062) 	db		d6h, 00h		; I2CConfig register (I2CCFG)
                                        (0063) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0064) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0065) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0066) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0067) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0068) 	db		b5h, 11h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0069) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0070) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0071) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0072) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0073) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0074) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0075) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0076) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0077) 	db		ffh
                                        (0078) LoadConfigTBL_robottiprojekti_Bank1:
                                        (0079) ;  Instance name ADCINC, User Module ADCINC
                                        (0080) ;       Instance name ADCINC, Block Name ADC(ASC10)
                                        (0081) ;       Instance name ADCINC, Block Name PWM(DCB03)
                                        (0082) 	db		2ch, 31h		;ADCINC_PWMfn(DCB03FN)
                                        (0083) 	db		2dh, 15h		;ADCINC_PWMsl(DCB03IN)
                                        (0084) 	db		2eh, 40h		;ADCINC_PWMos(DCB03OU)
                                        (0085) ;  Instance name LCD, User Module LCD
                                        (0086) ;  Instance name PGA, User Module PGA
                                        (0087) ;       Instance name PGA, Block Name GAIN(ACB00)
                                        (0088) ;  Instance name PWM8_OIKEA, User Module PWM8
                                        (0089) ;       Instance name PWM8_OIKEA, Block Name PWM8(DBB01)
                                        (0090) 	db		24h, 29h		;PWM8_OIKEA_FUNC_REG(DBB01FN)
                                        (0091) 	db		25h, 16h		;PWM8_OIKEA_INPUT_REG(DBB01IN)
                                        (0092) 	db		26h, 45h		;PWM8_OIKEA_OUTPUT_REG(DBB01OU)
                                        (0093) ;  Instance name PWM8_VASEN, User Module PWM8
                                        (0094) ;       Instance name PWM8_VASEN, Block Name PWM8(DBB00)
                                        (0095) 	db		20h, 29h		;PWM8_VASEN_FUNC_REG(DBB00FN)
                                        (0096) 	db		21h, 16h		;PWM8_VASEN_INPUT_REG(DBB00IN)
                                        (0097) 	db		22h, 44h		;PWM8_VASEN_OUTPUT_REG(DBB00OU)
                                        (0098) ;  Instance name Timer8, User Module Timer8
                                        (0099) ;       Instance name Timer8, Block Name TIMER8(DCB02)
                                        (0100) 	db		28h, 20h		;Timer8_FUNC_REG(DCB02FN)
                                        (0101) 	db		29h, 01h		;Timer8_INPUT_REG(DCB02IN)
                                        (0102) 	db		2ah, 40h		;Timer8_OUTPUT_REG(DCB02OU)
                                        (0103) ;  Global Register values Bank 1
                                        (0104) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0105) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0106) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0107) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0108) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0109) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0110) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0111) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0112) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0113) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0114) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0115) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0116) 	db		e1h, b9h		; OscillatorControl_1 register (OSC_CR1)
                                        (0117) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0118) 	db		dfh, 09h		; OscillatorControl_3 register (OSC_CR3)
                                        (0119) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0120) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0121) 	db		ffh
                                        (0122) AREA psoc_config(rom, rel)
                                        (0123) LoadConfigTBL_robottiprojekti_Ordered:
                                        (0124) ;  Ordered Global Register values
                                        (0125) 	M8C_SetBank0
0209: 62 00 00 MOV   REG[0x0],0x0       (0126) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
020C: 71 10    OR    F,0x10             
                                        (0127) 	M8C_SetBank1
020E: 62 00 43 MOV   REG[0x0],0x43      (0128) 	mov	reg[00h], 43h		; Port_0_DriveMode_0 register (PRT0DM0)
0211: 62 01 BC MOV   REG[0x1],0xBC      (0129) 	mov	reg[01h], bch		; Port_0_DriveMode_1 register (PRT0DM1)
0214: 70 EF    AND   F,0xEF             
                                        (0130) 	M8C_SetBank0
0216: 62 03 BC MOV   REG[0x3],0xBC      (0131) 	mov	reg[03h], bch		; Port_0_DriveMode_2 register (PRT0DM2)
0219: 62 02 03 MOV   REG[0x2],0x3       (0132) 	mov	reg[02h], 03h		; Port_0_GlobalSelect register (PRT0GS)
021C: 71 10    OR    F,0x10             
                                        (0133) 	M8C_SetBank1
021E: 62 02 00 MOV   REG[0x2],0x0       (0134) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
0221: 62 03 00 MOV   REG[0x3],0x0       (0135) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
0224: 70 EF    AND   F,0xEF             
                                        (0136) 	M8C_SetBank0
0226: 62 01 00 MOV   REG[0x1],0x0       (0137) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0229: 62 04 00 MOV   REG[0x4],0x0       (0138) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
022C: 71 10    OR    F,0x10             
                                        (0139) 	M8C_SetBank1
022E: 62 04 0F MOV   REG[0x4],0xF       (0140) 	mov	reg[04h], 0fh		; Port_1_DriveMode_0 register (PRT1DM0)
0231: 62 05 F0 MOV   REG[0x5],0xF0      (0141) 	mov	reg[05h], f0h		; Port_1_DriveMode_1 register (PRT1DM1)
0234: 70 EF    AND   F,0xEF             
                                        (0142) 	M8C_SetBank0
0236: 62 07 F0 MOV   REG[0x7],0xF0      (0143) 	mov	reg[07h], f0h		; Port_1_DriveMode_2 register (PRT1DM2)
0239: 62 06 00 MOV   REG[0x6],0x0       (0144) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
023C: 71 10    OR    F,0x10             
                                        (0145) 	M8C_SetBank1
023E: 62 06 00 MOV   REG[0x6],0x0       (0146) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0241: 62 07 00 MOV   REG[0x7],0x0       (0147) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
0244: 70 EF    AND   F,0xEF             
                                        (0148) 	M8C_SetBank0
0246: 62 05 00 MOV   REG[0x5],0x0       (0149) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0249: 62 08 00 MOV   REG[0x8],0x0       (0150) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
024C: 71 10    OR    F,0x10             
                                        (0151) 	M8C_SetBank1
024E: 62 08 7F MOV   REG[0x8],0x7F      (0152) 	mov	reg[08h], 7fh		; Port_2_DriveMode_0 register (PRT2DM0)
0251: 62 09 80 MOV   REG[0x9],0x80      (0153) 	mov	reg[09h], 80h		; Port_2_DriveMode_1 register (PRT2DM1)
0254: 70 EF    AND   F,0xEF             
                                        (0154) 	M8C_SetBank0
0256: 62 0B 80 MOV   REG[0xB],0x80      (0155) 	mov	reg[0bh], 80h		; Port_2_DriveMode_2 register (PRT2DM2)
0259: 62 0A 00 MOV   REG[0xA],0x0       (0156) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
025C: 71 10    OR    F,0x10             
                                        (0157) 	M8C_SetBank1
025E: 62 0A 00 MOV   REG[0xA],0x0       (0158) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0261: 62 0B 00 MOV   REG[0xB],0x0       (0159) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0264: 70 EF    AND   F,0xEF             
                                        (0160) 	M8C_SetBank0
0266: 62 09 00 MOV   REG[0x9],0x0       (0161) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0269: 62 0C 00 MOV   REG[0xC],0x0       (0162) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
026C: 71 10    OR    F,0x10             
                                        (0163) 	M8C_SetBank1
026E: 62 0C 00 MOV   REG[0xC],0x0       (0164) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
0271: 62 0D 00 MOV   REG[0xD],0x0       (0165) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
0274: 70 EF    AND   F,0xEF             
                                        (0166) 	M8C_SetBank0
0276: 62 0F 00 MOV   REG[0xF],0x0       (0167) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
0279: 62 0E 00 MOV   REG[0xE],0x0       (0168) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
027C: 71 10    OR    F,0x10             
                                        (0169) 	M8C_SetBank1
027E: 62 0E 00 MOV   REG[0xE],0x0       (0170) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
0281: 62 0F 00 MOV   REG[0xF],0x0       (0171) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
0284: 70 EF    AND   F,0xEF             
                                        (0172) 	M8C_SetBank0
0286: 62 0D 00 MOV   REG[0xD],0x0       (0173) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
0289: 62 10 00 MOV   REG[0x10],0x0      (0174) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
028C: 71 10    OR    F,0x10             
                                        (0175) 	M8C_SetBank1
028E: 62 10 00 MOV   REG[0x10],0x0      (0176) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
0291: 62 11 00 MOV   REG[0x11],0x0      (0177) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
0294: 70 EF    AND   F,0xEF             
                                        (0178) 	M8C_SetBank0
0296: 62 13 00 MOV   REG[0x13],0x0      (0179) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
0299: 62 12 00 MOV   REG[0x12],0x0      (0180) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
029C: 71 10    OR    F,0x10             
                                        (0181) 	M8C_SetBank1
029E: 62 12 00 MOV   REG[0x12],0x0      (0182) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
02A1: 62 13 00 MOV   REG[0x13],0x0      (0183) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
02A4: 70 EF    AND   F,0xEF             
                                        (0184) 	M8C_SetBank0
02A6: 62 11 00 MOV   REG[0x11],0x0      (0185) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
02A9: 62 14 00 MOV   REG[0x14],0x0      (0186) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
02AC: 71 10    OR    F,0x10             
                                        (0187) 	M8C_SetBank1
02AE: 62 14 00 MOV   REG[0x14],0x0      (0188) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
02B1: 62 15 00 MOV   REG[0x15],0x0      (0189) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
02B4: 70 EF    AND   F,0xEF             
                                        (0190) 	M8C_SetBank0
02B6: 62 17 00 MOV   REG[0x17],0x0      (0191) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
02B9: 62 16 00 MOV   REG[0x16],0x0      (0192) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
02BC: 71 10    OR    F,0x10             
                                        (0193) 	M8C_SetBank1
02BE: 62 16 00 MOV   REG[0x16],0x0      (0194) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
02C1: 62 17 00 MOV   REG[0x17],0x0      (0195) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
02C4: 70 EF    AND   F,0xEF             
                                        (0196) 	M8C_SetBank0
02C6: 62 15 00 MOV   REG[0x15],0x0      (0197) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
02C9: 70 EF    AND   F,0xEF             
                                        (0198) 	M8C_SetBank0
02CB: 7F       RET                      (0199) 	ret
                                        (0200) 
                                        (0201) 
                                        (0202) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_robottiprojekti
                                        (0026) export _LoadConfig_robottiprojekti
                                        (0027) export Port_2_Data_SHADE
                                        (0028) export _Port_2_Data_SHADE
                                        (0029) export Port_2_DriveMode_0_SHADE
                                        (0030) export _Port_2_DriveMode_0_SHADE
                                        (0031) export Port_2_DriveMode_1_SHADE
                                        (0032) export _Port_2_DriveMode_1_SHADE
                                        (0033) 
                                        (0034) 
                                        (0035) export NO_SHADOW
                                        (0036) export _NO_SHADOW
                                        (0037) 
                                        (0038) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0039) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0040) 
                                        (0041) AREA psoc_config(rom, rel)
                                        (0042) 
                                        (0043) ;---------------------------------------------------------------------------
                                        (0044) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0045) ;                  parameters handled by boot code, like CPU speed). This
                                        (0046) ;                  function can be called from user code, but typically it
                                        (0047) ;                  is only called from boot.
                                        (0048) ;
                                        (0049) ;       INPUTS: None.
                                        (0050) ;      RETURNS: Nothing.
                                        (0051) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0052) ;               In the large memory model currently only the page
                                        (0053) ;               pointer registers listed below are modified.  This does
                                        (0054) ;               not guarantee that in future implementations of this
                                        (0055) ;               function other page pointer registers will not be
                                        (0056) ;               modified.
                                        (0057) ;          
                                        (0058) ;               Page Pointer Registers Modified: 
                                        (0059) ;               CUR_PP
                                        (0060) ;
                                        (0061) _LoadConfigInit:
                                        (0062)  LoadConfigInit:
                                        (0063)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0064)     
02CC: 55 21 00 MOV   [0x21],0x0         (0065) 	mov		[Port_2_Data_SHADE], 0h
02CF: 55 22 7F MOV   [0x22],0x7F        (0066) 	mov		[Port_2_DriveMode_0_SHADE], 7fh
02D2: 55 23 80 MOV   [0x23],0x80        (0067) 	mov		[Port_2_DriveMode_1_SHADE], 80h
                                        (0068) 
02D5: 7C 02 DC LCALL 0x02DC             (0069) 	lcall	LoadConfig_robottiprojekti
02D8: 7C 02 07 LCALL 0x0207             (0070) 	lcall	LoadConfigTBL_robottiprojekti_Ordered
                                        (0071) 
                                        (0072) 
                                        (0073)     RAM_EPILOGUE RAM_USE_CLASS_4
02DB: 7F       RET                      (0074)     ret
                                        (0075) 
                                        (0076) ;---------------------------------------------------------------------------
                                        (0077) ; Load Configuration robottiprojekti
                                        (0078) ;
                                        (0079) ;    Load configuration registers for robottiprojekti.
                                        (0080) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0081) ;
                                        (0082) ;       INPUTS: None.
                                        (0083) ;      RETURNS: Nothing.
                                        (0084) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0085) ;               modified as may the Page Pointer registers!
                                        (0086) ;               In the large memory model currently only the page
                                        (0087) ;               pointer registers listed below are modified.  This does
                                        (0088) ;               not guarantee that in future implementations of this
                                        (0089) ;               function other page pointer registers will not be
                                        (0090) ;               modified.
                                        (0091) ;          
                                        (0092) ;               Page Pointer Registers Modified: 
                                        (0093) ;               CUR_PP
                                        (0094) ;
                                        (0095) _LoadConfig_robottiprojekti:
                                        (0096)  LoadConfig_robottiprojekti:
                                        (0097)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0098) 
02DC: 10       PUSH  X                  (0099) 	push	x
02DD: 70 EF    AND   F,0xEF             
                                        (0100)     M8C_SetBank0                    ; Force bank 0
02DF: 50 00    MOV   A,0x0              (0101)     mov     a, 0                    ; Specify bank 0
02E1: 67       ASR   A                  (0102)     asr     a                       ; Store in carry flag
                                        (0103)                                     ; Load bank 0 table:
02E2: 50 01    MOV   A,0x1              (0104)     mov     A, >LoadConfigTBL_robottiprojekti_Bank0
02E4: 57 67    MOV   X,0x67             (0105)     mov     X, <LoadConfigTBL_robottiprojekti_Bank0
02E6: 7C 02 F7 LCALL 0x02F7             (0106)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0107) 
02E9: 50 01    MOV   A,0x1              (0108)     mov     a, 1                    ; Specify bank 1
02EB: 67       ASR   A                  (0109)     asr     a                       ; Store in carry flag
                                        (0110)                                     ; Load bank 1 table:
02EC: 50 01    MOV   A,0x1              (0111)     mov     A, >LoadConfigTBL_robottiprojekti_Bank1
02EE: 57 BA    MOV   X,0xBA             (0112)     mov     X, <LoadConfigTBL_robottiprojekti_Bank1
02F0: 7C 02 F7 LCALL 0x02F7             (0113)     lcall   LoadConfig              ; Load the bank 1 values
02F3: 70 EF    AND   F,0xEF             
                                        (0114) 
                                        (0115)     M8C_SetBank0                    ; Force return to bank 0
02F5: 20       POP   X                  (0116) 	pop		x
                                        (0117) 
                                        (0118)     RAM_EPILOGUE RAM_USE_CLASS_4
02F6: 7F       RET                      (0119)     ret
                                        (0120) 
                                        (0121) 
                                        (0122) 
                                        (0123) 
                                        (0124) ;---------------------------------------------------------------------------
                                        (0125) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0126) ;              pairs. Terminate on address=0xFF.
                                        (0127) ;
                                        (0128) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0129) ;           Flag Register Carry bit encodes the Register Bank
                                        (0130) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0131) ;
                                        (0132) ;  RETURNS: nothing.
                                        (0133) ;
                                        (0134) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0135) ;                X-3 Temporary store for register address
                                        (0136) ;                X-2 LSB of config table address
                                        (0137) ;                X-1 MSB of config table address
                                        (0138) ;
                                        (0139) LoadConfig:
                                        (0140)     RAM_PROLOGUE RAM_USE_CLASS_2
02F7: 38 02    ADD   SP,0x2             (0141)     add     SP, 2                   ; Set up local vars
02F9: 10       PUSH  X                  (0142)     push    X                       ; Save config table address on stack
02FA: 08       PUSH  A                  (0143)     push    A
02FB: 4F       MOV   X,SP               (0144)     mov     X, SP
02FC: 56 FC 00 MOV   [X-4],0x0          (0145)     mov     [X-4], 0                ; Set default Destination to Bank 0
02FF: D0 04    JNC   0x0304             (0146)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0301: 56 FC 01 MOV   [X-4],0x1          (0147)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0148) .BankSelectSaved:
0304: 18       POP   A                  (0149)     pop     A
0305: 20       POP   X                  (0150)     pop     X
0306: 70 EF    AND   F,0xEF             
0308: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0151) 
                                        (0152) LoadConfigLp:
                                        (0153)     M8C_SetBank0                    ; Switch to bank 0
                                        (0154)     M8C_ClearWDT                    ; Clear the watchdog for long inits
030B: 10       PUSH  X                  (0155)     push    X                       ; Preserve the config table address
030C: 08       PUSH  A                  (0156)     push    A
030D: 28       ROMX                     (0157)     romx                            ; Load register address from table
030E: 39 FF    CMP   A,0xFF             (0158)     cmp     A, END_CONFIG_TABLE     ; End of table?
0310: A0 1F    JZ    0x0330             (0159)     jz      EndLoadConfig           ;   Yes, go wrap it up
0312: 4F       MOV   X,SP               (0160)     mov     X, SP                   ;
0313: 48 FC 01 TST   [X-4],0x1          (0161)     tst     [X-4], 1                ; Loading IO Bank 1?
0316: A0 03    JZ    0x031A             (0162)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
0318: 71 10    OR    F,0x10             
                                        (0163)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0164) .IOBankNowSet:
031A: 54 FD    MOV   [X-3],A            (0165)     mov     [X-3], A                ; Stash the register address
031C: 18       POP   A                  (0166)     pop     A                       ; Retrieve the table address
031D: 20       POP   X                  (0167)     pop     X
031E: 75       INC   X                  (0168)     inc     X                       ; Advance to the data byte
031F: 09 00    ADC   A,0x0              (0169)     adc     A, 0
0321: 10       PUSH  X                  (0170)     push    X                       ; Save the config table address again
0322: 08       PUSH  A                  (0171)     push    A
0323: 28       ROMX                     (0172)     romx                            ; load config data from the table
0324: 4F       MOV   X,SP               (0173)     mov     X, SP                   ; retrieve the register address
0325: 59 FD    MOV   X,[X-3]            (0174)     mov     X, [X-3]
0327: 61 00    MOV   REG[X+0x0],A       (0175)     mov     reg[X], A               ; Configure the register
0329: 18       POP   A                  (0176)     pop     A                       ; retrieve the table address
032A: 20       POP   X                  (0177)     pop     X
032B: 75       INC   X                  (0178)     inc     X                       ; advance to next table entry
032C: 09 00    ADC   A,0x0              (0179)     adc     A, 0
032E: 8F D7    JMP   0x0306             (0180)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0181) EndLoadConfig:
0330: 38 FC    ADD   SP,0xFC            (0182)     add     SP, -4
                                        (0183)     RAM_EPILOGUE RAM_USE_CLASS_2
0332: 7F       RET                      (0184)     ret
                                        (0185) 
                                        (0186) AREA InterruptRAM(ram, rel)
                                        (0187) 
                                        (0188) NO_SHADOW:
                                        (0189) _NO_SHADOW:
                                        (0190) ; write only register shadows
                                        (0191) _Port_2_Data_SHADE:
                                        (0192) Port_2_Data_SHADE:	BLK	1
                                        (0193) _Port_2_DriveMode_0_SHADE:
                                        (0194) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0195) _Port_2_DriveMode_1_SHADE:
                                        (0196) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0197) 
FILE: lib\timer8int.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
0333: 08       PUSH  A                  (0003) ;;  FILENAME: Timer8INT.asm
                                        (0004) ;;   Version: 2.70, Updated on 2013/5/19 at 10:44:42
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
0334: 51 20    MOV   A,[__r0]           (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
0336: 08       PUSH  A                  (0010) ;;*****************************************************************************
0337: 51 1F    MOV   A,[__r1]           (0011) ;;*****************************************************************************
0339: 08       PUSH  A                  (0012) 
033A: 51 1E    MOV   A,[__r2]           (0013) include "m8c.inc"
033C: 08       PUSH  A                  (0014) include "memory.inc"
033D: 51 1D    MOV   A,[__r3]           (0015) include "Timer8.inc"
033F: 08       PUSH  A                  (0016) 
0340: 51 1C    MOV   A,[__r4]           (0017) 
0342: 08       PUSH  A                  (0018) ;-----------------------------------------------
0343: 51 1B    MOV   A,[__r5]           (0019) ;  Global Symbols
0345: 08       PUSH  A                  (0020) ;-----------------------------------------------
0346: 51 1A    MOV   A,[__r6]           (0021) export  _Timer8_ISR
0348: 08       PUSH  A                  (0022) 
0349: 51 19    MOV   A,[__r7]           (0023) 
034B: 08       PUSH  A                  (0024) AREA InterruptRAM (RAM,REL,CON)
034C: 51 18    MOV   A,[__r8]           (0025) 
034E: 08       PUSH  A                  (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
034F: 51 17    MOV   A,[__r9]           (0027) ;---------------------------------------------------
0351: 08       PUSH  A                  (0028) ; Insert your custom declarations below this banner
0352: 51 16    MOV   A,[__r10]          (0029) ;---------------------------------------------------
0354: 08       PUSH  A                  (0030) 
0355: 51 15    MOV   A,[__r11]          (0031) ;------------------------
0357: 08       PUSH  A                  (0032) ; Includes
0358: 51 14    MOV   A,[__rX]           (0033) ;------------------------
035A: 08       PUSH  A                  (0034) 
035B: 51 13    MOV   A,[__rY]           (0035) 	
035D: 08       PUSH  A                  (0036) ;------------------------
035E: 51 12    MOV   A,[__rZ]           (0037) ;  Constant Definitions
0360: 08       PUSH  A                  (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _Timer8_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _Timer8_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    PRESERVE_CPU_CONTEXT
0361: 7C 0B 59 LCALL _TimerInterrupt    (0081)    lcall _TimerInterrupt
0364: 18       POP   A                  
0365: 53 12    MOV   [__rZ],A           
0367: 18       POP   A                  
0368: 53 13    MOV   [__rY],A           
036A: 18       POP   A                  
036B: 53 14    MOV   [__rX],A           
036D: 18       POP   A                  
036E: 53 15    MOV   [__r11],A          
0370: 18       POP   A                  
0371: 53 16    MOV   [__r10],A          
0373: 18       POP   A                  
0374: 53 17    MOV   [__r9],A           
0376: 18       POP   A                  
0377: 53 18    MOV   [__r8],A           
0379: 18       POP   A                  
037A: 53 19    MOV   [__r7],A           
037C: 18       POP   A                  
037D: 53 1A    MOV   [__r6],A           
037F: 18       POP   A                  
0380: 53 1B    MOV   [__r5],A           
0382: 18       POP   A                  
0383: 53 1C    MOV   [__r4],A           
0385: 18       POP   A                  
0386: 53 1D    MOV   [__r3],A           
0388: 18       POP   A                  
0389: 53 1E    MOV   [__r2],A           
038B: 18       POP   A                  
038C: 53 1F    MOV   [__r1],A           
038E: 18       POP   A                  
038F: 53 20    MOV   [__r0],A           
0391: 18       POP   A                  
                                        (0082)    RESTORE_CPU_CONTEXT
                                        (0083)    ;ljmp _TimerInterrupt
                                        (0084)    
                                        (0085)    ;---------------------------------------------------
                                        (0086)    ; Insert a lcall to a C function above this banner
                                        (0087)    ; and un-comment the lines between these banners
                                        (0088)    ;---------------------------------------------------
                                        (0089)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0090) 
0392: 7E       RETI                     (0091)    reti
                                        (0092) 
                                        (0093) 
                                        (0094) ; end of file Timer8INT.asm
FILE: lib\timer8.asm                    (0001) ;;*****************************************************************************
0393: 43 E1 04 OR    REG[0xE1],0x4      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer8.asm
                                        (0004) ;;   Version: 2.70, Updated on 2013/5/19 at 10:44:42
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Timer8.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Timer8_EnableInt
                                        (0030) export _Timer8_EnableInt
                                        (0031) export  Timer8_DisableInt
                                        (0032) export _Timer8_DisableInt
                                        (0033) export  Timer8_Start
                                        (0034) export _Timer8_Start
                                        (0035) export  Timer8_Stop
                                        (0036) export _Timer8_Stop
                                        (0037) export  Timer8_WritePeriod
                                        (0038) export _Timer8_WritePeriod
                                        (0039) export  Timer8_WriteCompareValue
                                        (0040) export _Timer8_WriteCompareValue
                                        (0041) export  Timer8_bReadCompareValue
                                        (0042) export _Timer8_bReadCompareValue
                                        (0043) export  Timer8_bReadTimer
                                        (0044) export _Timer8_bReadTimer
                                        (0045) export  Timer8_bReadTimerSaveCV
                                        (0046) export _Timer8_bReadTimerSaveCV
                                        (0047) 
                                        (0048) ; The following functions are deprecated and subject to omission in future releases
                                        (0049) ;
                                        (0050) export  bTimer8_ReadCompareValue  ; deprecated
                                        (0051) export _bTimer8_ReadCompareValue  ; deprecated
                                        (0052) export  bTimer8_ReadTimer         ; deprecated
                                        (0053) export _bTimer8_ReadTimer         ; deprecated
                                        (0054) export  bTimer8_ReadTimerSaveCV   ; deprecated
                                        (0055) export _bTimer8_ReadTimerSaveCV   ; deprecated
                                        (0056) 
                                        (0057) export  bTimer8_ReadCounter       ; obsolete
                                        (0058) export _bTimer8_ReadCounter       ; obsolete
                                        (0059) export  bTimer8_CaptureCounter    ; obsolete
                                        (0060) export _bTimer8_CaptureCounter    ; obsolete
                                        (0061) 
                                        (0062) 
                                        (0063) AREA robottiprojekti_RAM (RAM,REL)
                                        (0064) 
                                        (0065) ;-----------------------------------------------
                                        (0066) ;  Constant Definitions
                                        (0067) ;-----------------------------------------------
                                        (0068) 
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: Timer8_EnableInt
                                        (0080) ;
                                        (0081) ;  DESCRIPTION:
                                        (0082) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
                                        (0083) ;     associated with this User Module. This function has no effect until and
                                        (0084) ;     unless the global interrupts are enabled (for example by using the
                                        (0085) ;     macro M8C_EnableGInt).
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;
                                        (0088) ;  ARGUMENTS:    None.
                                        (0089) ;  RETURNS:      Nothing.
                                        (0090) ;  SIDE EFFECTS: 
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097)  Timer8_EnableInt:
                                        (0098) _Timer8_EnableInt:
                                        (0099)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0100)    Timer8_EnableInt_M
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
0396: 7F       RET                      (0102)    ret
0397: 41 E1 FB AND   REG[0xE1],0xFB     
                                        (0103) 
                                        (0104) .ENDSECTION
                                        (0105) 
                                        (0106) 
                                        (0107) .SECTION
                                        (0108) ;-----------------------------------------------------------------------------
                                        (0109) ;  FUNCTION NAME: Timer8_DisableInt
                                        (0110) ;
                                        (0111) ;  DESCRIPTION:
                                        (0112) ;     Disables this timer's interrupt by clearing the interrupt enable
                                        (0113) ;     mask bit associated with this User Module.
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None
                                        (0117) ;  RETURNS:      Nothing
                                        (0118) ;  SIDE EFFECTS: 
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  Timer8_DisableInt:
                                        (0126) _Timer8_DisableInt:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0128)    Timer8_DisableInt_M
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
039A: 7F       RET                      (0130)    ret
039B: 43 2B 01 OR    REG[0x2B],0x1      
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) 
                                        (0135) .SECTION
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;  FUNCTION NAME: Timer8_Start
                                        (0138) ;
                                        (0139) ;  DESCRIPTION:
                                        (0140) ;     Sets the start bit in the Control register of this user module.  The
                                        (0141) ;     timer will begin counting on the next input clock.
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:    None
                                        (0145) ;  RETURNS:      Nothing
                                        (0146) ;  SIDE EFFECTS: 
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  Timer8_Start:
                                        (0154) _Timer8_Start:
                                        (0155)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0156)    Timer8_Start_M
                                        (0157)    RAM_EPILOGUE RAM_USE_CLASS_1
039E: 7F       RET                      (0158)    ret
039F: 41 2B FE AND   REG[0x2B],0xFE     
                                        (0159) 
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: Timer8_Stop
                                        (0166) ;
                                        (0167) ;  DESCRIPTION:
                                        (0168) ;     Disables timer operation by clearing the start bit in the Control
                                        (0169) ;     register.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    None
                                        (0173) ;  RETURNS:      Nothing
                                        (0174) ;  SIDE EFFECTS: 
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;
                                        (0181)  Timer8_Stop:
                                        (0182) _Timer8_Stop:
                                        (0183)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0184)    Timer8_Stop_M
                                        (0185)    RAM_EPILOGUE RAM_USE_CLASS_1
03A2: 7F       RET                      (0186)    ret
                                        (0187) 
                                        (0188) .ENDSECTION
                                        (0189) 
                                        (0190) 
                                        (0191) .SECTION
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  FUNCTION NAME: Timer8_WritePeriod
                                        (0194) ;
                                        (0195) ;  DESCRIPTION:
                                        (0196) ;     Write the 8-bit period value into the Period register (DR1). If the
                                        (0197) ;     Timer user module is stopped, then this value will also be latched
                                        (0198) ;     into the Count register (DR0).
                                        (0199) ;-----------------------------------------------------------------------------
                                        (0200) ;
                                        (0201) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0202) ;  RETURNS:   Nothing
                                        (0203) ;  SIDE EFFECTS: 
                                        (0204) ;    The A and X registers may be modified by this or future implementations
                                        (0205) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0206) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0207) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0208) ;    functions.
                                        (0209) ;
                                        (0210)  Timer8_WritePeriod:
                                        (0211) _Timer8_WritePeriod:
                                        (0212)    RAM_PROLOGUE RAM_USE_CLASS_1
03A3: 60 29    MOV   REG[0x29],A        (0213)    mov   reg[Timer8_PERIOD_REG], A
                                        (0214)    RAM_EPILOGUE RAM_USE_CLASS_1
03A5: 7F       RET                      (0215)    ret
                                        (0216) 
                                        (0217) .ENDSECTION
                                        (0218) 
                                        (0219) 
                                        (0220) .SECTION
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;  FUNCTION NAME: Timer8_WriteCompareValue
                                        (0223) ;
                                        (0224) ;  DESCRIPTION:
                                        (0225) ;     Writes compare value into the Compare register (DR2).
                                        (0226) ;
                                        (0227) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                        (0228) ;           Compare register. (Call Timer8_Stop to disable).
                                        (0229) ;-----------------------------------------------------------------------------
                                        (0230) ;
                                        (0231) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0232) ;  RETURNS:      Nothing
                                        (0233) ;  SIDE EFFECTS: 
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240)  Timer8_WriteCompareValue:
                                        (0241) _Timer8_WriteCompareValue:
                                        (0242)    RAM_PROLOGUE RAM_USE_CLASS_1
03A6: 60 2A    MOV   REG[0x2A],A        (0243)    mov   reg[Timer8_COMPARE_REG], A
                                        (0244)    RAM_EPILOGUE RAM_USE_CLASS_1
03A8: 7F       RET                      (0245)    ret
                                        (0246) 
                                        (0247) .ENDSECTION
                                        (0248) 
                                        (0249) 
                                        (0250) .SECTION
                                        (0251) ;-----------------------------------------------------------------------------
                                        (0252) ;  FUNCTION NAME: Timer8_bReadCompareValue
                                        (0253) ;
                                        (0254) ;  DESCRIPTION:
                                        (0255) ;     Reads the Compare register.
                                        (0256) ;-----------------------------------------------------------------------------
                                        (0257) ;
                                        (0258) ;  ARGUMENTS:    None
                                        (0259) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0260) ;  SIDE EFFECTS: 
                                        (0261) ;    The A and X registers may be modified by this or future implementations
                                        (0262) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0263) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0264) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0265) ;    functions.
                                        (0266) ;
                                        (0267)  Timer8_bReadCompareValue:
                                        (0268) _Timer8_bReadCompareValue:
                                        (0269)  bTimer8_ReadCompareValue:                       ; this name deprecated
                                        (0270) _bTimer8_ReadCompareValue:                       ; this name deprecated
                                        (0271)    RAM_PROLOGUE RAM_USE_CLASS_1
03A9: 5D 2A    MOV   A,REG[0x2A]        (0272)    mov   A, reg[Timer8_COMPARE_REG]
                                        (0273)    RAM_EPILOGUE RAM_USE_CLASS_1
03AB: 7F       RET                      (0274)    ret
                                        (0275) 
                                        (0276) .ENDSECTION
                                        (0277) 
                                        (0278) 
                                        (0279) .SECTION
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;  FUNCTION NAME: Timer8_bReadTimerSaveCV
                                        (0282) ;
                                        (0283) ;  DESCRIPTION:
                                        (0284) ;     Returns the value in the Count register (DR0), preserving the
                                        (0285) ;     value in the compare register (DR2).
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS: None
                                        (0289) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0290) ;  SIDE EFFECTS:
                                        (0291) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                        (0292) ;     2) If enabled, Global interrupts are momentarily disabled.
                                        (0293) ;     3) The user module is stopped momentarily while the compare value is
                                        (0294) ;        restored.  This may cause the Count register to miss one or more
                                        (0295) ;        counts depending on the input clock speed.
                                        (0296) ;     4) The A and X registers may be modified by this or future implementations
                                        (0297) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0298) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0299) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0300) ;        functions.
                                        (0301) ;
                                        (0302) ;  THEORY of OPERATION:
                                        (0303) ;     1) Read and save the Compare register.
                                        (0304) ;     2) Read the Count register, causing its data to be latched into
                                        (0305) ;        the Compare register.
                                        (0306) ;     3) Read and save the Counter value, now in the Compare register,
                                        (0307) ;        to the buffer.
                                        (0308) ;     4) Disable global interrupts
                                        (0309) ;     5) Halt the timer
                                        (0310) ;     6) Restore the Compare register values
                                        (0311) ;     7) Start the Timer again
                                        (0312) ;     8) Restore global interrupt state
                                        (0313) ;
                                        (0314)  Timer8_bReadTimerSaveCV:
                                        (0315) _Timer8_bReadTimerSaveCV:
                                        (0316)  bTimer8_ReadTimerSaveCV:                        ; this name deprecated
                                        (0317) _bTimer8_ReadTimerSaveCV:                        ; this name deprecated
                                        (0318)  bTimer8_ReadCounter:                            ; this name deprecated
                                        (0319) _bTimer8_ReadCounter:                            ; this name deprecated
                                        (0320) 
                                        (0321) CpuFlags:      equ   0
                                        (0322) bCount:        equ   1
                                        (0323) 
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_2
03AC: 4F       MOV   X,SP               (0325)    mov   X, SP                                   ; X <- stack frame pointer
03AD: 38 02    ADD   SP,0x2             (0326)    add   SP, 2                                   ; Reserve space for flags, count
03AF: 5D 2B    MOV   A,REG[0x2B]        (0327)    mov   A, reg[Timer8_CONTROL_REG]              ; save the Control register
03B1: 08       PUSH  A                  (0328)    push  A
03B2: 5D 2A    MOV   A,REG[0x2A]        (0329)    mov   A, reg[Timer8_COMPARE_REG]              ; save the Compare register
03B4: 08       PUSH  A                  (0330)    push  A
03B5: 5D 28    MOV   A,REG[0x28]        (0331)    mov   A, reg[Timer8_COUNTER_REG]              ; synchronous copy DR2 <- DR0
                                        (0332)                                                  ; This may cause an interrupt!
03B7: 5D 2A    MOV   A,REG[0x2A]        (0333)    mov   A, reg[Timer8_COMPARE_REG]              ; Now grab DR2 (DR0) and save
03B9: 54 01    MOV   [X+1],A            (0334)    mov   [X+bCount], A
03BB: 50 00    MOV   A,0x0              (0335)    mov   A, 0                                    ; Guess the global interrupt state
03BD: 49 F7 01 TST   REG[0xF7],0x1      (0336)    tst   reg[CPU_F], FLAG_GLOBAL_IE              ; Currently Disabled?
03C0: A0 03    JZ    0x03C4             (0337)    jz    .SetupStatusFlag                        ;   Yes, guess was correct
03C2: 50 01    MOV   A,0x1              (0338)    mov   A, FLAG_GLOBAL_IE                       ;    No, modify our guess
                                        (0339) .SetupStatusFlag:                                ; and ...
03C4: 54 00    MOV   [X+0],A            (0340)    mov   [X+CpuFlags], A                         ;   StackFrame[0] <- Flag Reg image
03C6: 70 FE    AND   F,0xFE             
03C8: 41 2B FE AND   REG[0x2B],0xFE     
                                        (0341)    M8C_DisableGInt                               ; Disable interrupts globally
                                        (0342)    Timer8_Stop_M                                 ; Stop the timer
03CB: 18       POP   A                  (0343)    pop   A                                       ; Restore the Compare register
03CC: 60 2A    MOV   REG[0x2A],A        (0344)    mov   reg[Timer8_COMPARE_REG], A
03CE: 18       POP   A                  (0345)    pop   A                                       ; restore start state of the timer
03CF: 60 2B    MOV   REG[0x2B],A        (0346)    mov   reg[Timer8_CONTROL_REG], A
03D1: 18       POP   A                  (0347)    pop   A                                       ; Return result stored in stack frame
                                        (0348)    RAM_EPILOGUE RAM_USE_CLASS_2
03D2: 7E       RETI                     (0349)    reti                                          ; Flag Reg <- StackFrame[0]
                                        (0350) 
                                        (0351) .ENDSECTION
                                        (0352) 
                                        (0353) 
                                        (0354) .SECTION
                                        (0355) ;-----------------------------------------------------------------------------
                                        (0356) ;  FUNCTION NAME: Timer8_bReadTimer
                                        (0357) ;
                                        (0358) ;  DESCRIPTION:
                                        (0359) ;     Performs a software capture of the Count register.  A synchronous
                                        (0360) ;     read of the Count register is performed.  The timer is NOT stopped.
                                        (0361) ;
                                        (0362) ;     WARNING - this will cause loss of data in the Compare register.
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;
                                        (0365) ;  ARGUMENTS:    None
                                        (0366) ;  RETURNS:      fastcall16 BYTE bCount, (value of DR0 in the A register)
                                        (0367) ;  SIDE EFFECTS:
                                        (0368) ;    May cause an interrupt.
                                        (0369) ;
                                        (0370) ;    The A and X registers may be modified by this or future implementations
                                        (0371) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0372) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0373) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0374) ;    functions.
                                        (0375) ;
                                        (0376) ;  THEORY of OPERATION:
                                        (0377) ;     1) Read the Count register - this causes the count value to be
                                        (0378) ;        latched into the Compare register.
                                        (0379) ;     2) Read and return the Count register values from the Compare
                                        (0380) ;        registers into the return buffer.
                                        (0381) ;
                                        (0382)  Timer8_bReadTimer:
                                        (0383) _Timer8_bReadTimer:
                                        (0384)  bTimer8_ReadTimer:                              ; this name deprecated
                                        (0385) _bTimer8_ReadTimer:                              ; this name deprecated
                                        (0386)  bTimer8_CaptureCounter:                         ; this name deprecated
                                        (0387) _bTimer8_CaptureCounter:                         ; this name deprecated
                                        (0388) 
                                        (0389)    RAM_PROLOGUE RAM_USE_CLASS_1
03D3: 5D 28    MOV   A,REG[0x28]        (0390)    mov   A, reg[Timer8_COUNTER_REG]              ; synchronous copy DR2 <- DR0
                                        (0391)                                                  ; This may cause an interrupt!
03D5: 5D 2A    MOV   A,REG[0x2A]        (0392)    mov   A, reg[Timer8_COMPARE_REG]              ; Return DR2 (actually DR0)
                                        (0393)    RAM_EPILOGUE RAM_USE_CLASS_1
03D7: 7F       RET                      (0394)    ret
                                        (0395) 
                                        (0396) .ENDSECTION
                                        (0397) 
                                        (0398) ; End of File Timer8.asm
FILE: lib\pwm8_vasenint.asm             (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_VASENINT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8_VASEN.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8_VASEN_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8_VASEN_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8_VASEN_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
03D8: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM8_VASENINT.asm
FILE: lib\pwm8_vasen.asm                (0001) ;;*****************************************************************************
03D9: 43 E1 01 OR    REG[0xE1],0x1      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_VASEN.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8_VASEN.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8_VASEN_EnableInt
                                        (0030) export _PWM8_VASEN_EnableInt
                                        (0031) export  PWM8_VASEN_DisableInt
                                        (0032) export _PWM8_VASEN_DisableInt
                                        (0033) export  PWM8_VASEN_Start
                                        (0034) export _PWM8_VASEN_Start
                                        (0035) export  PWM8_VASEN_Stop
                                        (0036) export _PWM8_VASEN_Stop
                                        (0037) export  PWM8_VASEN_WritePeriod
                                        (0038) export _PWM8_VASEN_WritePeriod
                                        (0039) export  PWM8_VASEN_WritePulseWidth
                                        (0040) export _PWM8_VASEN_WritePulseWidth
                                        (0041) export  PWM8_VASEN_bReadPulseWidth
                                        (0042) export _PWM8_VASEN_bReadPulseWidth
                                        (0043) export  PWM8_VASEN_bReadCounter
                                        (0044) export _PWM8_VASEN_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8_VASEN_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8_VASEN_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8_VASEN_ReadCounter       ; deprecated
                                        (0051) export _bPWM8_VASEN_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA robottiprojekti_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8_VASEN_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8_VASEN_EnableInt:
                                        (0091) _PWM8_VASEN_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8_VASEN_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
03DC: 7F       RET                      (0095)    ret
03DD: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8_VASEN_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8_VASEN_DisableInt:
                                        (0119) _PWM8_VASEN_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8_VASEN_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
03E0: 7F       RET                      (0123)    ret
03E1: 43 23 01 OR    REG[0x23],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8_VASEN_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8_VASEN_Start:
                                        (0148) _PWM8_VASEN_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8_VASEN_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
03E4: 7F       RET                      (0152)    ret
03E5: 41 23 FE AND   REG[0x23],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8_VASEN_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8_VASEN_Stop:
                                        (0176) _PWM8_VASEN_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8_VASEN_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
03E8: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8_VASEN_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8_VASEN_WritePeriod:
                                        (0206) _PWM8_VASEN_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
03E9: 60 21    MOV   REG[0x21],A        (0208)    mov   reg[PWM8_VASEN_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
03EB: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8_VASEN_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8_VASEN_WritePulseWidth:
                                        (0233) _PWM8_VASEN_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
03EC: 60 22    MOV   REG[0x22],A        (0235)    mov   reg[PWM8_VASEN_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
03EE: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8_VASEN_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8_VASEN_bReadPulseWidth:
                                        (0260) _PWM8_VASEN_bReadPulseWidth:
                                        (0261)  bPWM8_VASEN_ReadPulseWidth:                     ; this name deprecated
                                        (0262) _bPWM8_VASEN_ReadPulseWidth:                     ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
03EF: 5D 22    MOV   A,REG[0x22]        (0264)    mov   A, reg[PWM8_VASEN_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
03F1: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8_VASEN_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8_VASEN_bReadCounter:
                                        (0293) _PWM8_VASEN_bReadCounter:
                                        (0294)  bPWM8_VASEN_ReadCounter:                        ; this name deprecated
                                        (0295) _bPWM8_VASEN_ReadCounter:                        ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
03F2: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
03F3: 5D 22    MOV   A,REG[0x22]        (0304)    mov   A, reg[PWM8_VASEN_COMPARE_REG]          ; Save the Compare register on the stack
03F5: 08       PUSH  A                  (0305)    push  A                                       ;
03F6: 41 23 FE AND   REG[0x23],0xFE     
03F9: 71 10    OR    F,0x10             
                                        (0306)    PWM8_VASEN_Stop_M                             ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
03FB: 5D 21    MOV   A,REG[0x21]        (0308)    mov   A, reg[PWM8_VASEN_INPUT_REG]            ; save the clock input setting
03FD: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
03FE: 62 21 00 MOV   REG[0x21],0x0      (0311)    mov   reg[PWM8_VASEN_INPUT_REG], INPUT_REG_NULL
0401: 70 EF    AND   F,0xEF             
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
0403: 5D 20    MOV   A,REG[0x20]        (0314)    mov   A, reg[PWM8_VASEN_COUNTER_REG]          ; DR2 <- DR0
0405: 5D 22    MOV   A,REG[0x22]        (0315)    mov   A, reg[PWM8_VASEN_COMPARE_REG]          ; Stash the Count on the stack
0407: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
0408: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
040A: 60 22    MOV   REG[0x22],A        (0318)    mov   reg[PWM8_VASEN_COMPARE_REG], A
040C: 71 10    OR    F,0x10             
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
040E: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
0410: 60 21    MOV   REG[0x21],A        (0321)    mov   reg[PWM8_VASEN_INPUT_REG], A            ;
0412: 70 EF    AND   F,0xEF             
0414: 43 23 01 OR    REG[0x23],0x1      
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8_VASEN_Start_M                            ;   then re-enable the PWM.
0417: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
0418: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
041A: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8_VASEN.asm
FILE: lib\pwm8_oikeaint.asm             (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_OIKEAINT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8_OIKEA.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8_OIKEA_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8_OIKEA_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8_OIKEA_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
041B: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM8_OIKEAINT.asm
FILE: lib\pwm8_oikea.asm                (0001) ;;*****************************************************************************
041C: 43 E1 02 OR    REG[0xE1],0x2      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_OIKEA.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8_OIKEA.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8_OIKEA_EnableInt
                                        (0030) export _PWM8_OIKEA_EnableInt
                                        (0031) export  PWM8_OIKEA_DisableInt
                                        (0032) export _PWM8_OIKEA_DisableInt
                                        (0033) export  PWM8_OIKEA_Start
                                        (0034) export _PWM8_OIKEA_Start
                                        (0035) export  PWM8_OIKEA_Stop
                                        (0036) export _PWM8_OIKEA_Stop
                                        (0037) export  PWM8_OIKEA_WritePeriod
                                        (0038) export _PWM8_OIKEA_WritePeriod
                                        (0039) export  PWM8_OIKEA_WritePulseWidth
                                        (0040) export _PWM8_OIKEA_WritePulseWidth
                                        (0041) export  PWM8_OIKEA_bReadPulseWidth
                                        (0042) export _PWM8_OIKEA_bReadPulseWidth
                                        (0043) export  PWM8_OIKEA_bReadCounter
                                        (0044) export _PWM8_OIKEA_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8_OIKEA_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8_OIKEA_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8_OIKEA_ReadCounter       ; deprecated
                                        (0051) export _bPWM8_OIKEA_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA robottiprojekti_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8_OIKEA_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8_OIKEA_EnableInt:
                                        (0091) _PWM8_OIKEA_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8_OIKEA_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
041F: 7F       RET                      (0095)    ret
0420: 41 E1 FD AND   REG[0xE1],0xFD     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8_OIKEA_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8_OIKEA_DisableInt:
                                        (0119) _PWM8_OIKEA_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8_OIKEA_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0423: 7F       RET                      (0123)    ret
0424: 43 27 01 OR    REG[0x27],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8_OIKEA_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8_OIKEA_Start:
                                        (0148) _PWM8_OIKEA_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8_OIKEA_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
0427: 7F       RET                      (0152)    ret
0428: 41 27 FE AND   REG[0x27],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8_OIKEA_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8_OIKEA_Stop:
                                        (0176) _PWM8_OIKEA_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8_OIKEA_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
042B: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8_OIKEA_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8_OIKEA_WritePeriod:
                                        (0206) _PWM8_OIKEA_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
042C: 60 25    MOV   REG[0x25],A        (0208)    mov   reg[PWM8_OIKEA_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
042E: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8_OIKEA_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8_OIKEA_WritePulseWidth:
                                        (0233) _PWM8_OIKEA_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
042F: 60 26    MOV   REG[0x26],A        (0235)    mov   reg[PWM8_OIKEA_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
0431: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8_OIKEA_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8_OIKEA_bReadPulseWidth:
                                        (0260) _PWM8_OIKEA_bReadPulseWidth:
                                        (0261)  bPWM8_OIKEA_ReadPulseWidth:                     ; this name deprecated
                                        (0262) _bPWM8_OIKEA_ReadPulseWidth:                     ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
0432: 5D 26    MOV   A,REG[0x26]        (0264)    mov   A, reg[PWM8_OIKEA_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
0434: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8_OIKEA_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8_OIKEA_bReadCounter:
                                        (0293) _PWM8_OIKEA_bReadCounter:
                                        (0294)  bPWM8_OIKEA_ReadCounter:                        ; this name deprecated
                                        (0295) _bPWM8_OIKEA_ReadCounter:                        ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
0435: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
0436: 5D 26    MOV   A,REG[0x26]        (0304)    mov   A, reg[PWM8_OIKEA_COMPARE_REG]          ; Save the Compare register on the stack
0438: 08       PUSH  A                  (0305)    push  A                                       ;
0439: 41 27 FE AND   REG[0x27],0xFE     
043C: 71 10    OR    F,0x10             
                                        (0306)    PWM8_OIKEA_Stop_M                             ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
043E: 5D 25    MOV   A,REG[0x25]        (0308)    mov   A, reg[PWM8_OIKEA_INPUT_REG]            ; save the clock input setting
0440: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
0441: 62 25 00 MOV   REG[0x25],0x0      (0311)    mov   reg[PWM8_OIKEA_INPUT_REG], INPUT_REG_NULL
0444: 70 EF    AND   F,0xEF             
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
0446: 5D 24    MOV   A,REG[0x24]        (0314)    mov   A, reg[PWM8_OIKEA_COUNTER_REG]          ; DR2 <- DR0
0448: 5D 26    MOV   A,REG[0x26]        (0315)    mov   A, reg[PWM8_OIKEA_COMPARE_REG]          ; Stash the Count on the stack
044A: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
044B: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
044D: 60 26    MOV   REG[0x26],A        (0318)    mov   reg[PWM8_OIKEA_COMPARE_REG], A
044F: 71 10    OR    F,0x10             
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
0451: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
0453: 60 25    MOV   REG[0x25],A        (0321)    mov   reg[PWM8_OIKEA_INPUT_REG], A            ;
0455: 70 EF    AND   F,0xEF             
0457: 43 27 01 OR    REG[0x27],0x1      
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8_OIKEA_Start_M                            ;   then re-enable the PWM.
045A: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
045B: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
045D: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8_OIKEA.asm
FILE: lib\pga.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2013/5/19 at 10:43:59
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_Start
                                        (0060) export _PGA_Start
                                        (0061) export  PGA_SetPower
                                        (0062) export _PGA_SetPower
                                        (0063) 
                                        (0064) export  PGA_SetGain
                                        (0065) export _PGA_SetGain
                                        (0066) 
                                        (0067) export  PGA_Stop
                                        (0068) export _PGA_Stop
                                        (0069) 
                                        (0070) IF (PGA_AGNDBUFAPI)
                                        (0071) export  PGA_EnableAGNDBuffer
                                        (0072) export _PGA_EnableAGNDBuffer
                                        (0073) export  PGA_DisableAGNDBuffer
                                        (0074) export _PGA_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: PGA_Start
                                        (0092) ;  FUNCTION NAME: PGA_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  PGA_Start:
                                        (0111) _PGA_Start:
                                        (0112)  PGA_SetPower:
                                        (0113) _PGA_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
045E: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
0460: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
0461: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
0462: 5D 73    MOV   A,REG[0x73]        (0120)    mov  A, reg[PGA_GAIN_CR2]                               ; read power value
0464: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
0466: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
0468: 60 73    MOV   REG[0x73],A        (0123)    mov  reg[PGA_GAIN_CR2], A                          ; move complete value back to register
046A: 18       POP   A                  (0124)    pop  A
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
046B: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: PGA_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  PGA_SetGain:
                                        (0154) _PGA_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
046C: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
046E: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
046F: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
0470: 5D 71    MOV   A,REG[0x71]        (0161)    mov  A, reg[PGA_GAIN_CR0]                               ; read mux settings
0472: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
0474: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
0477: B0 0A    JNZ   0x0482             (0164)    jnz  .SETHIGHGAIN
0479: 41 70 FE AND   REG[0x70],0xFE     (0165)    and  reg[PGA_GAIN_CR3],~EXGAIN                          ; Clear High Gain bit.
047C: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
047E: 60 71    MOV   REG[0x71],A        (0167)    mov  reg[PGA_GAIN_CR0], A                               ; move complete value back to register
0480: 18       POP   A                  (0168)    pop  A
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
0481: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
0482: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
0485: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
0487: 60 71    MOV   REG[0x71],A        (0175)    mov  reg[PGA_GAIN_CR0], A                               ; move complete value back to register
0489: 43 70 01 OR    REG[0x70],0x1      (0176)    or   reg[PGA_GAIN_CR3], EXGAIN                          ; Set High Gain bit.
048C: 18       POP   A                  (0177)    pop  A
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
048D: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: PGA_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  PGA_Stop:
                                        (0203) _PGA_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
048E: 41 73 FC AND   REG[0x73],0xFC     (0206)    and REG[PGA_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
0491: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (PGA_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: PGA_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PGA_EnableAGNDBuffer:
                                        (0233) _PGA_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0235)    and   reg[PGA_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: PGA_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  PGA_DisableAGNDBuffer:
                                        (0261) _PGA_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0263)    or    reg[PGA_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File PGA.asm
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2013/5/19 at 10:43:48
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
0492: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
0493: 10       PUSH  X                  (0209)     push  X
0494: 28       ROMX                     (0210)     romx                               ; Get character from ROM
0495: B0 04    JNZ   0x049A             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
0497: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
0498: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
0499: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
049A: 90 3C    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(0218)     call  LCD_WriteData                ; Write data to LCD
049C: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
049D: 18       POP   A                  (0220)     pop   A
049E: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
049F: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
04A1: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
04A2: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
04B4: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
04B5: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
04B6: 67       ASR   A                  (0262)     asr   A
04B7: 67       ASR   A                  (0263)     asr   A
04B8: 67       ASR   A                  (0264)     asr   A
04B9: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
04BB: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
04BD: 90 19    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(0267)     call  LCD_WriteData                ; Write data to screen
04BF: 18       POP   A                  (0268)     pop   A                            ; Restore value
04C0: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
04C2: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
04C4: 90 12    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
04C6: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
04C7: 4B       SWAP  A,X                (0305)     swap  A,X
04C8: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
04CA: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
04CB: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
04CD: 7F       RET                      (0310)     ret
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
04CE: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
04D0: A0 06    JZ    0x04D7             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
04D2: 90 04    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(0349)     call  LCD_WriteData                ; Write data to screen
04D4: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
04D5: 8F F8    JMP   _LCD_PrString      (0351)     jmp   .Loop_PrString               ; Go get next character
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
04D7: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
04D8: 90 5F    CALL  0x0539             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
04DA: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
04DB: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
04DC: 67       ASR   A                  (0390)     asr   A
04DD: 67       ASR   A                  (0391)     asr   A
04DE: 67       ASR   A                  (0392)     asr   A
04DF: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
04E1: 90 38    CALL  0x051B             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
04E3: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
04E4: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
04E6: 40       NOP                      (0397)     nop
04E7: 40       NOP                      (0398)     nop
04E8: 40       NOP                      (0399)     nop
04E9: 90 30    CALL  0x051B             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
04EB: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
04EC: 90 4B    CALL  0x0539             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
04EE: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
04EF: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
04F0: 67       ASR   A                  (0436)     asr   A
04F1: 67       ASR   A                  (0437)     asr   A
04F2: 67       ASR   A                  (0438)     asr   A
04F3: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
04F5: 90 09    CALL  0x0500             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
04F7: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
04F8: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
04FA: 40       NOP                      (0443)     nop
04FB: 40       NOP                      (0444)     nop
04FC: 40       NOP                      (0445)     nop
04FD: 90 01    CALL  0x0500             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
04FF: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
0500: 08       PUSH  A                  (0477)     push  A
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
0501: 26 21 80 AND   [0x21],0x80        (0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0504: 51 21    MOV   A,[0x21]           (0480)     mov   A,[Port_2_Data_SHADE]
0506: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
0508: 18       POP   A                  (0483)     pop   A
0509: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
050B: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
050D: 2A 21    OR    A,[0x21]           (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
050F: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
0511: 53 21    MOV   [0x21],A           (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0513: 40       NOP                      (0489)     nop
0514: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
0516: 53 21    MOV   [0x21],A           (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0518: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
051A: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
051B: 08       PUSH  A                  (0523)     push  A
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
051C: 26 21 80 AND   [0x21],0x80        (0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
051F: 2E 21 20 OR    [0x21],0x20        (0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
0522: 51 21    MOV   A,[0x21]           (0527)     mov   A,[Port_2_Data_SHADE]
0524: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
0526: 18       POP   A                  (0530)     pop   A
0527: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
0529: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
052B: 2A 21    OR    A,[0x21]           (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
052D: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
052F: 53 21    MOV   [0x21],A           (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
0531: 40       NOP                      (0536)     NOP
0532: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
0534: 53 21    MOV   [0x21],A           (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
0536: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
0538: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
0539: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
053A: 26 21 80 AND   [0x21],0x80        (0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
053D: 51 21    MOV   A,[0x21]           (0574)     mov   A,[Port_2_Data_SHADE]
053F: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
0541: 26 22 F0 AND   [0x22],0xF0        (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
0544: 51 22    MOV   A,[0x22]           (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
0546: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
0548: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
054A: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
054C: 2E 21 40 OR    [0x21],0x40        (0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
054F: 51 21    MOV   A,[0x21]           (0584)     mov   A,[Port_2_Data_SHADE]
0551: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
0553: 40       NOP                      (0586)     NOP
                                        (0587) 
0554: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
0555: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
0557: 2E 21 50 OR    [0x21],0x50        (0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
055A: 51 21    MOV   A,[0x21]           (0593)     mov   A,[Port_2_Data_SHADE]
055C: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
055E: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
055F: 40       NOP                      (0597)     nop
0560: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
0562: 08       PUSH  A                  (0610)     push  A
0563: 26 21 C0 AND   [0x21],0xC0        (0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
0566: 51 21    MOV   A,[0x21]           (0612)     mov   A,[Port_2_Data_SHADE]
0568: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
056A: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
056B: 40       NOP                      (0616)     nop                                    ; fastest PSoC
056C: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
056D: 2E 21 50 OR    [0x21],0x50        (0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
0570: 51 21    MOV   A,[0x21]           (0620)     mov   A,[Port_2_Data_SHADE]
0572: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
0574: 40       NOP                      (0623)     nop
0575: 40       NOP                      (0624)     nop
                                        (0625) 
0576: 26 21 C0 AND   [0x21],0xC0        (0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
0579: 51 21    MOV   A,[0x21]           (0627)     mov   A,[Port_2_Data_SHADE]
057B: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
057D: 18       POP   A                  (0630)     pop   A
057E: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
0580: A0 04    JZ    0x0585             (0633)     jz    .UNLOCK
0582: 79       DEC   X                  (0634)     dec   X
0583: BF D3    JNZ   0x0557             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
0585: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
0586: 2E 22 7F OR    [0x22],0x7F        (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
0589: 51 22    MOV   A,[0x22]           (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
058B: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
058D: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
058F: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
0591: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
0592: 7F       RET                      (0646)     ret
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
0593: 26 22 80 AND   [0x22],0x80        (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
0596: 2E 22 7F OR    [0x22],0x7F        (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
0599: 26 23 80 AND   [0x23],0x80        (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
059C: 51 22    MOV   A,[0x22]           (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
059E: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
05A0: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
05A2: 51 23    MOV   A,[0x23]           (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
05A4: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
05A6: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
05A8: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
05AA: 90 63    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
05AC: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
05AE: 90 5F    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
05B0: 50 03    MOV   A,0x3              (0701)     mov   A,03h
05B2: 9F 4C    CALL  0x0500             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
05B4: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
05B6: 90 57    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
05B8: 50 03    MOV   A,0x3              (0707)     mov   A,03h
05BA: 9F 44    CALL  0x0500             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
05BC: 90 5F    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
05BE: 90 5D    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
05C0: 90 5B    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
05C2: 50 03    MOV   A,0x3              (0714)     mov   A,03h
05C4: 9F 3A    CALL  0x0500             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
05C6: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
05C8: 90 45    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
05CA: 50 02    MOV   A,0x2              (0720)     mov   A,02h
05CC: 9F 32    CALL  0x0500             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
05CE: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
05D0: 90 3D    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
05D2: 50 08    MOV   A,0x8              (0726)     mov   A,08h
05D4: 9F 16    CALL  _LCD_Control       (0727)     call  LCD_Control
05D6: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
05D8: 90 35    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
05DA: 50 01    MOV   A,0x1              (0731)     mov   A,01h
05DC: 9F 0E    CALL  _LCD_Control       (0732)     call  LCD_Control
05DE: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
05E0: 90 2D    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
05E2: 50 06    MOV   A,0x6              (0736)     mov   A,06h
05E4: 9F 06    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
05E6: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
05E8: 9F 02    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
05EA: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
05EC: 9E FE    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
05EE: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
05F0: 9E FA    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
05F2: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
05F4: 9E F6    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
05F6: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
05F8: 9E F2    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
05FA: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
05FC: 90 11    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
05FE: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
0603: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
0605: 10       PUSH  X                  (0791)     push  X                            ; Store COL
0606: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
0608: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
0609: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
060B: 20       POP   X                  (0795)     pop   X
                                        (0796) 
060C: 9E DE    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
060E: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
060F: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
0611: 78       DEC   A                  (0828)     dec   A
0612: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
0614: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
061D: 08       PUSH  A                  (0871)     push  A
061E: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
0620: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
0622: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
0624: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
0626: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
0628: D0 06    JNC   0x062F             (0877)     jnc   .Delay50u_End
062A: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
062C: 78       DEC   A                  (0880)     dec   A                              ; [4]
062D: BF FE    JNZ   0x062C             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
062F: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
0630: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
0631: 10       PUSH  X                  (0943)     push  X
0632: 59 00    MOV   X,[X+0]            (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
0634: 9F CD    CALL  _LCD_Position      (0945)     call  LCD_Position                 ; Set cursor position
0636: 20       POP   X                  (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
0637: 3D FE 00 CMP   [X-2],0x0          (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
063A: B0 05    JNZ   0x0640             (0950)     jnz   .LCD_CHECK1X
063C: 50 00    MOV   A,0x0              (0951)     mov   A,00h                         ; Load empty character
063E: 80 11    JMP   0x0650             (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
0640: 3D FE 06 CMP   [X-2],0x6          (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
0643: D0 07    JNC   0x064B             (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
0645: 52 FE    MOV   A,[X-2]            (0957)     mov   A,[X+BG_LENGTHX]
0647: 15 FE    SUB   [X-2],A            (0958)     sub   [X+BG_LENGTHX],A
0649: 80 06    JMP   0x0650             (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
064B: 50 06    MOV   A,0x6              (0962)     mov   A, 06h
064D: 17 FE 05 SUB   [X-2],0x5          (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
0650: 9E 86    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
0652: 7B FF    DEC   [X-1]              (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
0654: BF E2    JNZ   0x0637             (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
0656: 7F       RET                      (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
0657: 4F       MOV   X,SP               (1015)     mov   X, SP
0658: 10       PUSH  X                  (1016)     push  X
0659: 52 FD    MOV   A,[X-3]            (1017)     mov   A,[X+BG_ROW]                 ; Row in A
065B: 59 FC    MOV   X,[X-4]            (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
065D: 9F A4    CALL  _LCD_Position      (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
065F: 20       POP   X                  (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
0660: 3D FA 00 CMP   [X-6],0x0          (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
0663: B0 05    JNZ   0x0669             (1026)     jnz   .LCD_CHECK1
0665: 50 00    MOV   A,0x0              (1027)     mov   A,00h                        ; Load empty character
0667: 80 11    JMP   0x0679             (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
0669: 3D FA 06 CMP   [X-6],0x6          (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
066C: D0 07    JNC   0x0674             (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
066E: 52 FA    MOV   A,[X-6]            (1033)     mov   A,[X+BG_LENGTH]
0670: 15 FA    SUB   [X-6],A            (1034)     sub   [X+BG_LENGTH],A
0672: 80 06    JMP   0x0679             (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
0674: 50 06    MOV   A,0x6              (1038)     mov   A, 06h
0676: 17 FA 05 SUB   [X-6],0x5          (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
0679: 9E 5D    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
067B: 7B FB    DEC   [X-5]              (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
067D: BF E2    JNZ   0x0660             (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
067F: 7F       RET                      (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
0680: 21 03    AND   A,0x3              (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
0682: 08       PUSH  A                  (1098)     push  A
0683: FF 7A    INDEX LCD_ROW_OFFSET     (1099)     index LCD_ROW_OFFSET  ; Get row offset
0685: 03 00    ADD   A,[X+0]            (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
0687: 9E 63    CALL  _LCD_Control       (1101)     call  LCD_Control                  ; Position Cursor
0689: 3D FE 00 CMP   [X-2],0x0          (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
068C: B0 05    JNZ   0x0692             (1103)     jnz   .VBG_NZ_SEGX
068E: 50 20    MOV   A,0x20             (1104)     mov   A,' '                        ; Load space character
0690: 80 13    JMP   0x06A4             (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
0692: 3D FE 09 CMP   [X-2],0x9          (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
0695: D0 09    JNC   0x069F             (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
0697: 52 FE    MOV   A,[X-2]            (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
0699: 78       DEC   A                  (1111)     dec   A
069A: 56 FE 00 MOV   [X-2],0x0          (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
069D: 80 06    JMP   0x06A4             (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
069F: 17 FE 08 SUB   [X-2],0x8          (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
06A2: 50 07    MOV   A,0x7              (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
06A4: 9E 32    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(1120)     call  LCD_WriteData                ; Write value
06A6: 18       POP   A                  (1121)     pop   A
06A7: 78       DEC   A                  (1122)     dec   A
06A8: 7B FF    DEC   [X-1]              (1123)     dec   [X+VBG_CHAR_HEIGHTX]
06AA: BF D7    JNZ   0x0682             (1124)     jnz   .VBG_LOOPX
06AC: 7F       RET                      (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
06AD: 4F       MOV   X,SP               (1168)     mov   X, SP
06AE: 52 FD    MOV   A,[X-3]            (1169)     mov   A, [X+VBG_ROW]
06B0: 21 03    AND   A,0x3              (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
06B2: 08       PUSH  A                  (1172)     push  A
06B3: FF 4A    INDEX LCD_ROW_OFFSET     (1173)     index LCD_ROW_OFFSET  ; Get row offset
06B5: 03 FC    ADD   A,[X-4]            (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
06B7: 9E 33    CALL  _LCD_Control       (1175)     call  LCD_Control                  ; Position Cursor
06B9: 3D FA 00 CMP   [X-6],0x0          (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
06BC: B0 05    JNZ   0x06C2             (1177)     jnz   .VBG_NZ_SEG
06BE: 50 20    MOV   A,0x20             (1178)     mov   A,' '                        ; Load space character
06C0: 80 13    JMP   0x06D4             (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
06C2: 3D FA 09 CMP   [X-6],0x9          (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
06C5: D0 09    JNC   0x06CF             (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
06C7: 52 FA    MOV   A,[X-6]            (1184)     mov   A,[X+VBG_SEG_HEIGHT]
06C9: 78       DEC   A                  (1185)     dec   A
06CA: 56 FA 00 MOV   [X-6],0x0          (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
06CD: 80 06    JMP   0x06D4             (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
06CF: 17 FA 08 SUB   [X-6],0x8          (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
06D2: 50 07    MOV   A,0x7              (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
06D4: 9E 02    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(1194)     call  LCD_WriteData                ; Write value
06D6: 18       POP   A                  (1195)     pop   A
06D7: 78       DEC   A                  (1196)     dec   A
06D8: 7B FB    DEC   [X-5]              (1197)     dec   [X+VBG_CHAR_HEIGHT]
06DA: BF D7    JNZ   0x06B2             (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
06DC: 7F       RET                      (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
06DD: 4F       MOV   X,SP               (1238)     mov   X,SP                         ; Get location of stack
06DE: 08       PUSH  A                  (1239)     push  A                            ; Create 2 locations
06DF: 08       PUSH  A                  (1240)     push  A
                                        (1241) 
06E0: 50 40    MOV   A,0x40             (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
06E2: 9E 08    CALL  _LCD_Control       (1243)     call  LCD_Control                  ; Position the CG pointer
06E4: 56 00 01 MOV   [X+0],0x1          (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
06E7: 56 01 08 MOV   [X+1],0x8          (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
06EA: 52 00    MOV   A,[X+0]            (1249)     mov   A,[X+VBGDATA_CTR]
06EC: 3B 01    CMP   A,[X+1]            (1250)     cmp   A,[X+VBG_BYTES]
06EE: D0 05    JNC   0x06F4             (1251)     jnc   .VBG_SOLID
06F0: 50 00    MOV   A,0x0              (1252)     mov   A,00h                        ; Empty line
06F2: 80 03    JMP   0x06F6             (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
06F4: 50 FF    MOV   A,0xFF             (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
06F6: 9D E0    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(1257)     call  LCD_WriteData                ; character data
06F8: 7B 01    DEC   [X+1]              (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
06FA: BF EF    JNZ   0x06EA             (1259)     jnz   .VBG_Loop2                    ; End Loop 2
06FC: 77 00    INC   [X+0]              (1260)     inc   [X+VBGDATA_CTR]
06FE: 3D 00 09 CMP   [X+0],0x9          (1261)     cmp   [X+VBGDATA_CTR],09h
0701: BF E5    JNZ   0x06E7             (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
0703: 18       POP   A                  (1264)     pop  A
0704: 18       POP   A                  (1265)     pop  A
0705: 50 0C    MOV   A,0xC              (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
0707: 9D E3    CALL  _LCD_Control       (1267)     call LCD_Control                   ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
0709: 7F       RET                      (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
0718: 4F       MOV   X,SP               (1319)     mov   X,SP                         ; Get location of stack
0719: 38 03    ADD   SP,0x3             (1320)     add   SP,3
071B: 54 02    MOV   [X+2],A            (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
071D: 50 40    MOV   A,0x40             (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
071F: 9D CB    CALL  _LCD_Control       (1324)     call  LCD_Control                  ; Position the CG pointer
0721: 56 00 00 MOV   [X+0],0x0          (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
0724: 56 01 08 MOV   [X+1],0x8          (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
0727: 52 00    MOV   A,[X+0]            (1330)     mov   A,[X+BGDATA_PTR]
0729: 3D 02 00 CMP   [X+2],0x0          (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
072C: B0 05    JNZ   0x0732             (1332)     jnz   .BG_OTHER
072E: FF DA    INDEX LCD_BG_TYPE1       (1333)     index LCD_BG_TYPE1
0730: 80 03    JMP   0x0734             (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
0732: FF DD    INDEX LCD_BG_TYPE2       (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
0734: 9D A2    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(1338)     call  LCD_WriteData
0736: 7B 01    DEC   [X+1]              (1339)     dec   [X+BGCHARS]                  ; Character builder counter
0738: BF EE    JNZ   0x0727             (1340)     jnz   .BG_Loop2
073A: 77 00    INC   [X+0]              (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
073C: 3D 00 07 CMP   [X+0],0x7          (1342)     cmp   [X+BGDATA_PTR],07h
073F: BF E4    JNZ   0x0724             (1343)     jnz   .BG_Loop1
                                        (1344) 
0741: 38 FD    ADD   SP,0xFD            (1345)     add   SP,-3
0743: 50 0C    MOV   A,0xC              (1346)     mov   A,LCD_DISP_ON
0745: 9D A5    CALL  _LCD_Control       (1347)     call  LCD_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
0747: 7F       RET                      (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: lib\adcincint.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: ADCINCINT.asm
                                        (0004) ;;  Version: 1.20, Updated on 2013/5/19 at 10:39:54
                                        (0005) ;;
                                        (0006) ;;  DESCRIPTION: Assembler interrupt service routine for the ADCINC
                                        (0007) ;;               A/D Converter User Module. This code works for both the
                                        (0008) ;;               first and second-order modulator topologies.
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "ADCINC.inc"
                                        (0017) 
                                        (0018) 
                                        (0019) ;-----------------------------------------------
                                        (0020) ;  Global Symbols
                                        (0021) ;-----------------------------------------------
                                        (0022) 
                                        (0023) export _ADCINC_ADConversion_ISR
                                        (0024) 
                                        (0025) export _ADCINC_iResult
                                        (0026) export  ADCINC_iResult
                                        (0027) export _ADCINC_fStatus
                                        (0028) export  ADCINC_fStatus
                                        (0029) export _ADCINC_bState
                                        (0030) export  ADCINC_bState
                                        (0031) export _ADCINC_fMode
                                        (0032) export  ADCINC_fMode
                                        (0033) export _ADCINC_bNumSamples
                                        (0034) export  ADCINC_bNumSamples
                                        (0035) 
                                        (0036) ;-----------------------------------------------
                                        (0037) ; Variable Allocation
                                        (0038) ;-----------------------------------------------
                                        (0039) AREA InterruptRAM(RAM,REL)
                                        (0040)  ADCINC_iResult:
                                        (0041) _ADCINC_iResult:                           BLK  2 ;Calculated answer
                                        (0042)   iTemp:                                   BLK  2 ;internal temp storage
                                        (0043)  ADCINC_fStatus:
                                        (0044) _ADCINC_fStatus:                           BLK  1 ;ADC Status
                                        (0045)  ADCINC_bState:
                                        (0046) _ADCINC_bState:                            BLK  1 ;State value of ADC count
                                        (0047)  ADCINC_fMode:
                                        (0048) _ADCINC_fMode:                             BLK  1 ;Integrate and reset mode.
                                        (0049)  ADCINC_bNumSamples:
                                        (0050) _ADCINC_bNumSamples:                       BLK  1 ;Number of samples to take.
                                        (0051) 
                                        (0052) ;-----------------------------------------------
                                        (0053) ;  EQUATES
                                        (0054) ;-----------------------------------------------
                                        (0055) 
                                        (0056) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0057) ;---------------------------------------------------
                                        (0058) ; Insert your custom declarations below this banner
                                        (0059) ;---------------------------------------------------
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _ADCINC_ADConversion_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION: Perform final filter operations to produce output samples.
                                        (0083) ;
                                        (0084) ;-----------------------------------------------------------------------------
                                        (0085) ;
                                        (0086) ;    The decimation rate is established by the PWM interrupt. Four timer
                                        (0087) ;    clocks elapse for each modulator output (decimator input) since the
                                        (0088) ;    phi1/phi2 generator divides by 4. This means the timer period and thus
                                        (0089) ;    it's interrupt must equal 4 times the actual decimation rate.  The
                                        (0090) ;    decimator is ru  for 2^(#bits-6).
                                        (0091) ;
                                        (0092) _ADCINC_ADConversion_ISR:
0748: 7A 29    DEC   [0x29]             (0093)     dec  [ADCINC_bState]
                                        (0094) if1:
074A: C0 02    JC    0x074D             (0095)     jc endif1 ; no underflow
074C: 7E       RETI                     (0096)     reti
                                        (0097) endif1:
074D: 3C 2A 00 CMP   [0x2A],0x0         (0098)     cmp [ADCINC_fMode],0
                                        (0099) if2: 
0750: B0 12    JNZ   0x0763             (0100)     jnz endif2  ;leaving reset mode
0752: 08       PUSH  A                  (0101)     push A                            ;read decimator
0753: 5D E5    MOV   A,REG[0xE5]        (0102)     mov  A, reg[DEC_DL]
0755: 53 27    MOV   [0x27],A           (0103)     mov  [iTemp + LowByte],A
0757: 5D E4    MOV   A,REG[0xE4]        (0104)     mov  A, reg[DEC_DH]
0759: 53 26    MOV   [0x26],A           (0105)     mov  [iTemp + HighByte], A
075B: 18       POP   A                  (0106)     pop A
075C: 55 2A 01 MOV   [0x2A],0x1         (0107)     mov [ADCINC_fMode],1
075F: 55 29 FF MOV   [0x29],0xFF        (0108)     mov [ADCINC_bState],((1<<(ADCINC_bNUMBITS- 6))-1)
0762: 7E       RETI                     (0109)     reti
0763: 43 82 20 OR    REG[0x82],0x20     
0766: 43 83 10 OR    REG[0x83],0x10     
                                        (0110) endif2:
                                        (0111)     ;This code runs at end of integrate
                                        (0112)     ADCINC_RESET_INTEGRATOR_M
0769: 08       PUSH  A                  (0113)     push A
076A: 5D E5    MOV   A,REG[0xE5]        (0114)     mov  A, reg[DEC_DL]
076C: 12 27    SUB   A,[0x27]           (0115)     sub  A,[iTemp + LowByte]
076E: 53 27    MOV   [0x27],A           (0116)     mov  [iTemp +LowByte],A
0770: 5D E4    MOV   A,REG[0xE4]        (0117)     mov  A, reg[DEC_DH]
0772: 1A 26    SBB   A,[0x26]           (0118)     sbb  A,[iTemp + HighByte]
0774: 67       ASR   A                  (0119)     asr  A
0775: 6E 27    RRC   [0x27]             (0120)     rrc  [iTemp + LowByte]
                                        (0121) 
                                        (0122)        ;Covert to Unipolar
                                        (0123) IF  ADCINC_9_OR_MORE_BITS
0777: 01 20    ADD   A,0x20             (0124)     add  A, (1<<(ADCINC_bNUMBITS - 9))
                                        (0125) ELSE
                                        (0126)     add [iTemp + LowByte], (1<<(ADCINC_bNUMBITS - 1)) ;work on lower Byte
                                        (0127)     adc A,0 
                                        (0128) ENDIF
                                        (0129)        ;check for overflow
                                        (0130) IF     ADCINC_8_OR_MORE_BITS
0779: 39 40    CMP   A,0x40             (0131)     cmp A,(1<<(ADCINC_bNUMBITS - 8))
                                        (0132) if3: 
077B: B0 05    JNZ   0x0781             (0133)     jnz endif3 ;overflow
077D: 78       DEC   A                  (0134)     dec A
077E: 55 27 FF MOV   [0x27],0xFF        (0135)     mov [iTemp + LowByte],ffh
                                        (0136) endif3:
                                        (0137) ELSE
                                        (0138)     cmp [iTemp + LowByte],(1<<(ADCINC_bNUMBITS))
                                        (0139) if4: 
                                        (0140)     jnz endif4 ;overflow
                                        (0141)     dec [iTemp + LowByte]
                                        (0142) endif4:
                                        (0143) ENDIF
                                        (0144) IF ADCINC_SIGNED_DATA
                                        (0145) IF ADCINC_9_OR_MORE_BITS
                                        (0146)     sub A,(1<<(ADCINC_bNUMBITS - 9))
                                        (0147) ELSE
                                        (0148)     sub [iTemp +LowByte],(1<<(ADCINC_bNUMBITS - 1))
                                        (0149)     sbb A,0
                                        (0150) ENDIF
                                        (0151) ENDIF
0781: 5F 25 27 MOV   [0x25],[0x27]      (0152)     mov  [ADCINC_iResult + LowByte],[iTemp +LowByte]
0784: 53 24    MOV   [0x24],A           (0153)     mov  [ADCINC_iResult + HighByte],A
0786: 55 28 01 MOV   [0x28],0x1         (0154)     mov  [ADCINC_fStatus],1
                                        (0155) ConversionReady:
                                        (0156)     ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0157)     ;---------------------------------------------------
                                        (0158)     ; Insert your custom code below this banner
                                        (0159)     ;---------------------------------------------------
                                        (0160)     ;  Sample data is now in iResult
                                        (0161)     ;
                                        (0162)     ;  NOTE: This interrupt service routine has already
                                        (0163)     ;  preserved the values of the A CPU register. If
                                        (0164)     ;  you need to use the X register you must preserve
                                        (0165)     ;  its value and restore it before the return from
                                        (0166)     ;  interrupt.
                                        (0167)     ;---------------------------------------------------
                                        (0168)     ; Insert your custom code above this banner
                                        (0169)     ;---------------------------------------------------
                                        (0170)     ;@PSoC_UserCode_END@ (Do not change this line.)
0789: 18       POP   A                  (0171)     pop A
078A: 3C 2B 00 CMP   [0x2B],0x0         (0172)     cmp [ADCINC_bNumSamples],0
                                        (0173) if5: 
078D: B0 0E    JNZ   0x079C             (0174)     jnz endif5 ; Number of samples is zero
078F: 55 2A 00 MOV   [0x2A],0x0         (0175)     mov [ADCINC_fMode],0
0792: 55 29 00 MOV   [0x29],0x0         (0176)     mov [ADCINC_bState],0
0795: 41 83 EF AND   REG[0x83],0xEF     
0798: 41 82 DF AND   REG[0x82],0xDF     
                                        (0177)     ADCINC_ENABLE_INTEGRATOR_M
079B: 7E       RETI                     (0178)     reti       
                                        (0179) endif5:
079C: 7A 2B    DEC   [0x2B]             (0180)     dec [ADCINC_bNumSamples]
                                        (0181) if6:
079E: A0 0E    JZ    0x07AD             (0182)     jz endif6  ; count not zero
07A0: 55 2A 00 MOV   [0x2A],0x0         (0183)     mov [ADCINC_fMode],0
07A3: 55 29 00 MOV   [0x29],0x0         (0184)     mov [ADCINC_bState],0
07A6: 41 83 EF AND   REG[0x83],0xEF     
07A9: 41 82 DF AND   REG[0x82],0xDF     
                                        (0185)     ADCINC_ENABLE_INTEGRATOR_M
07AC: 7E       RETI                     (0186)     reti       
07AD: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0187) endif6:
                                        (0188)     ;All samples done
                                        (0189)     ADCINC_STOPADC_M
07B0: 7E       RETI                     (0190)  reti 
FILE: lib\adcinc.asm                    (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: ADCINC.asm
                                        (0004) ;;   Version: 1.1, Updated on 2006/02/03 at 09:10:49
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Assembler source for the ADCINC A/D Converter
                                        (0008) ;;               User Module with 1st-order modulator.
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API
                                        (0014) ;;        function returns. Even though these registers may be preserved now,
                                        (0015) ;;        there is no guarantee they will be preserved in future releases.
                                        (0016) ;;-----------------------------------------------------------------------------
                                        (0017) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0018) ;;*****************************************************************************
                                        (0019) ;;*****************************************************************************
                                        (0020) 
                                        (0021) include "m8c.inc"
                                        (0022) include "memory.inc"
                                        (0023) 
                                        (0024) include "ADCINC.inc"
                                        (0025) 
                                        (0026) 
                                        (0027) ;-----------------------------------------------
                                        (0028) ;  Global Symbols
                                        (0029) ;-----------------------------------------------
                                        (0030) export  ADCINC_Start
                                        (0031) export _ADCINC_Start
                                        (0032) export  ADCINC_SetPower
                                        (0033) export _ADCINC_SetPower
                                        (0034) export  ADCINC_Stop
                                        (0035) export _ADCINC_Stop
                                        (0036) export  ADCINC_GetSamples
                                        (0037) export _ADCINC_GetSamples
                                        (0038) export  ADCINC_StopADC
                                        (0039) export _ADCINC_StopADC
                                        (0040) export  ADCINC_fIsDataAvailable
                                        (0041) export _ADCINC_fIsDataAvailable
                                        (0042) export  ADCINC_iClearFlagGetData
                                        (0043) export _ADCINC_iClearFlagGetData
                                        (0044) export  ADCINC_wClearFlagGetData
                                        (0045) export _ADCINC_wClearFlagGetData
                                        (0046) export  ADCINC_cClearFlagGetData
                                        (0047) export _ADCINC_cClearFlagGetData
                                        (0048) export  ADCINC_bClearFlagGetData
                                        (0049) export _ADCINC_bClearFlagGetData
                                        (0050) export  ADCINC_iGetData
                                        (0051) export _ADCINC_iGetData
                                        (0052) export  ADCINC_wGetData
                                        (0053) export _ADCINC_wGetData
                                        (0054) export  ADCINC_bGetData
                                        (0055) export _ADCINC_bGetData
                                        (0056) export  ADCINC_cGetData
                                        (0057) export _ADCINC_cGetData
                                        (0058) export  ADCINC_fClearFlag
                                        (0059) export _ADCINC_fClearFlag
                                        (0060) export  ADCINC_WritePulseWidth
                                        (0061) export _ADCINC_WritePulseWidth
                                        (0062) 
                                        (0063) 
                                        (0064) AREA bss (RAM,REL)
                                        (0065) 
                                        (0066) ;-----------------------------------------------
                                        (0067) ;  Constant Definitions
                                        (0068) ;-----------------------------------------------
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: ADCINC_Start
                                        (0080) ;
                                        (0081) ;  DESCRIPTION: Applies power setting to the module's analog PSoc block.
                                        (0082) ;               and starts the PWM
                                        (0083) ;-----------------------------------------------------------------------------
                                        (0084) ;
                                        (0085) ;  ARGUMENTS:    The A register contains the power setting.
                                        (0086) ;  RETURNS:      Nothing.
                                        (0087) ;  SIDE EFFECTS:
                                        (0088) ;    The A and X registers may be modified by this or future implementations
                                        (0089) ;    of this function.  When necessary, it is the calling function's
                                        (0090) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0091) ;    functions.
                                        (0092) ;
                                        (0093)  ADCINC_Start:
                                        (0094) _ADCINC_Start:
                                        (0095)    RAM_PROLOGUE RAM_USE_CLASS_1
07B1: 43 E7 C0 OR    REG[0xE7],0xC0     (0096)    or    reg[DEC_CR1],c0h
07B4: 90 0D    CALL  _ADCINC_SetPower   (0097)    call  ADCINC_SetPower
07B6: 43 82 20 OR    REG[0x82],0x20     
07B9: 43 83 10 OR    REG[0x83],0x10     
                                        (0098)    ADCINC_RESET_INTEGRATOR_M
07BC: 62 2D FF MOV   REG[0x2D],0xFF     (0099)    mov   reg[ADCINC_PWMdr1],ffh
07BF: 43 2F 01 OR    REG[0x2F],0x1      (0100)    or    reg[ADCINC_PWMcr0],01h                      ; start PWM
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
07C2: 7F       RET                      (0102)    ret
                                        (0103) .ENDSECTION
                                        (0104) 
                                        (0105)    
                                        (0106) .SECTION
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;  FUNCTION NAME: ADCINC_SetPower
                                        (0109) ;
                                        (0110) ;  DESCRIPTION: Applies power setting to the module's analog PSoc block.
                                        (0111) ;-----------------------------------------------------------------------------
                                        (0112) ;
                                        (0113) ;  ARGUMENTS:    The A register contains the power setting.
                                        (0114) ;  RETURNS:      Nothing.
                                        (0115) ;  SIDE EFFECTS:
                                        (0116) ;    The A and X registers may be modified by this or future implementations
                                        (0117) ;    of this function.  When necessary, it is the calling function's
                                        (0118) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0119) ;    functions.
                                        (0120) ;
                                        (0121)  ADCINC_SetPower:
                                        (0122) _ADCINC_SetPower:
                                        (0123)    RAM_PROLOGUE RAM_USE_CLASS_2
07C3: 4F       MOV   X,SP               (0124)    mov  X,SP                                     ; Set up Stack frame
07C4: 21 03    AND   A,0x3              (0125)    and  A,03h                                    ; Ensure value is legal
07C6: 08       PUSH  A                  (0126)    push A
07C7: 5D 83    MOV   A,REG[0x83]        (0127)    mov  A,reg[ADCINC_AtoDcr3]                    ; First SC block:
07C9: 21 FC    AND   A,0xFC             (0128)    and  A,~03h                                   ;   clear power bits to zero
07CB: 2B 00    OR    A,[X+0]            (0129)    or   A,[ X ]                                  ;   establish new value
07CD: 60 83    MOV   REG[0x83],A        (0130)    mov  reg[ADCINC_AtoDcr3],A                    ;   change the actual setting
07CF: 18       POP   A                  (0131)    pop  A
                                        (0132)    RAM_EPILOGUE RAM_USE_CLASS_2
07D0: 7F       RET                      (0133)    ret
07D1: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0134) .ENDSECTION
                                        (0135) 
                                        (0136) .SECTION
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;  FUNCTION NAME: ADCINC_Stop
                                        (0139) ;
                                        (0140) ;  DESCRIPTION:   Removes power from the module's analog PSoc block.
                                        (0141) ;                 and turns off PWM
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:     None.
                                        (0145) ;  RETURNS:       Nothing.
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  When necessary, it is the calling function's
                                        (0149) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0150) ;    functions.
                                        (0151) ;
                                        (0152)  ADCINC_Stop:
                                        (0153) _ADCINC_Stop:
                                        (0154)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0155)    ADCINC_STOPADC_M
07D4: 41 83 FC AND   REG[0x83],0xFC     (0156)    and  reg[ADCINC_AtoDcr3], ~03h
07D7: 41 2F FE AND   REG[0x2F],0xFE     (0157)    and  reg[ADCINC_PWMcr0], ~01h ; stop PWM
                                        (0158)    RAM_EPILOGUE RAM_USE_CLASS_1
07DA: 7F       RET                      (0159)    ret
07DB: 41 83 EF AND   REG[0x83],0xEF     
07DE: 41 82 DF AND   REG[0x82],0xDF     
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: ADCINC_GetSamples
                                        (0166) ;
                                        (0167) ;  DESCRIPTION: Activates interrupts for this user module and begins sampling.
                                        (0168) ;-----------------------------------------------------------------------------
                                        (0169) ;
                                        (0170) ;  ARGUMENTS:    A register contain number of samples
                                        (0171) ;  RETURNS:      Nothing.
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    The A and X registers may be modified by this or future implementations
                                        (0174) ;    of this function.  When necessary, it is the calling function's
                                        (0175) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0176) ;    functions.
                                        (0177) ;          
                                        (0178)  ADCINC_GetSamples:
                                        (0179) _ADCINC_GetSamples:
                                        (0180)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0181)    RAM_SETPAGE_CUR >ADCINC_fMode
                                        (0182)    ADCINC_ENABLE_INTEGRATOR_M
07E1: 55 2A 00 MOV   [0x2A],0x0         (0183)    mov [ADCINC_fMode],0
07E4: 55 29 00 MOV   [0x29],0x0         (0184)    mov [ADCINC_bState],0
07E7: 53 2B    MOV   [0x2B],A           (0185)    mov [ADCINC_bNumSamples],A
07E9: 5D 2E    MOV   A,REG[0x2E]        (0186)    mov A, reg[ADCINC_PWMdr2]
07EB: B0 04    JNZ   0x07F0             (0187)    jnz  .SkipPulseWrite
07ED: 62 2E 01 MOV   REG[0x2E],0x1      (0188)    mov reg[ADCINC_PWMdr2], 1
07F0: 62 DB F7 MOV   REG[0xDB],0xF7     
07F3: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0189) .SkipPulseWrite:
                                        (0190)    ADCINC_STARTADC_M  ;enable interrupt 
                                        (0191)    RAM_EPILOGUE RAM_USE_CLASS_4 
07F6: 7F       RET                      (0192)    ret
07F7: 41 E1 F7 AND   REG[0xE1],0xF7     
07FA: 43 82 20 OR    REG[0x82],0x20     
07FD: 43 83 10 OR    REG[0x83],0x10     
                                        (0193) .ENDSECTION
                                        (0194) 
                                        (0195) 
                                        (0196) .SECTION
                                        (0197) ;-----------------------------------------------------------------------------
                                        (0198) ;  FUNCTION NAME: ADCINC_StopADC
                                        (0199) ;
                                        (0200) ;  DESCRIPTION: Shuts down the A/D is an orderly manner.  The interrupt
                                        (0201) ;               is disabled but the PWM output is still active.
                                        (0202) ;               Integrator is reset
                                        (0203) ;-----------------------------------------------------------------------------
                                        (0204) ;
                                        (0205) ;  ARGUMENTS:    None.
                                        (0206) ;  RETURNS:      Nothing.
                                        (0207) ;  SIDE EFFECTS:
                                        (0208) ;    The A and X registers may be modified by this or future implementations
                                        (0209) ;    of this function.  When necessary, it is the calling function's
                                        (0210) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0211) ;    functions.
                                        (0212) ;
                                        (0213)  ADCINC_StopADC:
                                        (0214) _ADCINC_StopADC:
                                        (0215)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0216)    ADCINC_STOPADC_M
                                        (0217)    ADCINC_RESET_INTEGRATOR_M
                                        (0218)    RAM_EPILOGUE RAM_USE_CLASS_1 
0800: 7F       RET                      (0219)  ret
0801: 51 28    MOV   A,[0x28]           
                                        (0220) .ENDSECTION
                                        (0221) 
                                        (0222) 
                                        (0223) .SECTION
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  FUNCTION NAME: ADCINC_fIsDataAvailable
                                        (0226) ;
                                        (0227) ;  DESCRIPTION: Returns the status of the A/D Data
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  ARGUMENTS:    None.
                                        (0230) ;  RETURNS:      fastcall BOOL DataAvailable returned in the A register
                                        (0231) ;  SIDE EFFECTS:
                                        (0232) ;    The A and X registers may be modified by this or future implementations
                                        (0233) ;    of this function.  When necessary, it is the calling function's
                                        (0234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0235) ;    functions.
                                        (0236) ;          
                                        (0237)  ADCINC_fIsDataAvailable:
                                        (0238) _ADCINC_fIsDataAvailable:
                                        (0239)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0240)    ADCINC_fIsDataAvailable_M   
                                        (0241)    RAM_EPILOGUE RAM_USE_CLASS_4
0803: 7F       RET                      (0242)    ret
0804: 55 28 00 MOV   [0x28],0x0         
0807: 58 24    MOV   X,[0x24]           
0809: 51 25    MOV   A,[0x25]           
080B: 3C 28 00 CMP   [0x28],0x0         
080E: BF F5    JNZ   _ADCINC_iClearFlagGetData|_ADCINC_wClearFlagGetData|ADCINC_iClearFlagGetData|ADCINC_wClearFlagGetData
                                        (0243) .ENDSECTION
                                        (0244) 
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME:  ADCINC_iClearFlagGetData
                                        (0249) ;                  ADCINC_wClearFlagGetData
                                        (0250) ;
                                        (0251) ;  DESCRIPTION:    Clears the fStatus and places ADC data in iResult A/D.
                                        (0252) ;                  Flag is checked after trandfer to insure valid data.
                                        (0253) ;                  available. Also clears the DATA_READY flag. 
                                        (0254) ;-----------------------------------------------------------------------------
                                        (0255) ;  ARGUMENTS:    None.
                                        (0256) ;  RETURNS:      fastcall int iResult returned in the X and A register
                                        (0257) ;  SIDE EFFECTS:
                                        (0258) ;    The A and X registers may be modified by this or future implementations
                                        (0259) ;    of this function.  When necessary, it is the calling function's
                                        (0260) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0261) ;    functions.
                                        (0262) ;          
                                        (0263)  ADCINC_iClearFlagGetData:
                                        (0264) _ADCINC_iClearFlagGetData:
                                        (0265)  ADCINC_wClearFlagGetData:
                                        (0266) _ADCINC_wClearFlagGetData:
                                        (0267)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0268)    ADCINC_iClearFlagGetData_M   
                                        (0269)    RAM_EPILOGUE RAM_USE_CLASS_4
0810: 7F       RET                      (0270)    ret
0811: 55 28 00 MOV   [0x28],0x0         
0814: 51 25    MOV   A,[0x25]           
                                        (0271) .ENDSECTION
                                        (0272) 
                                        (0273) 
                                        (0274) .SECTION
                                        (0275) ;-----------------------------------------------------------------------------
                                        (0276) ;  FUNCTION NAME:  ADCINC_cClearFlagGetData
                                        (0277) ;                  ADCINC_bClearFlagGetData
                                        (0278) ;
                                        (0279) ;  DESCRIPTION:    Clears the fStatus and places ADC data in iResult A/D.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;  ARGUMENTS:    None.
                                        (0282) ;  RETURNS:      fastcall int iResult returned in the X and A register
                                        (0283) ;  SIDE EFFECTS:
                                        (0284) ;    The A and X registers may be modified by this or future implementations
                                        (0285) ;    of this function.  When necessary, it is the calling function's
                                        (0286) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0287) ;    functions.
                                        (0288) ;          
                                        (0289)  ADCINC_cClearFlagGetData:
                                        (0290) _ADCINC_cClearFlagGetData:
                                        (0291)  ADCINC_bClearFlagGetData:
                                        (0292) _ADCINC_bClearFlagGetData:
                                        (0293)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0294)    ADCINC_bClearFlagGetData_M     
                                        (0295)    RAM_EPILOGUE RAM_USE_CLASS_4
0816: 7F       RET                      (0296)    ret
0817: 58 24    MOV   X,[0x24]           
0819: 51 25    MOV   A,[0x25]           
                                        (0297) .ENDSECTION
                                        (0298) .SECTION
                                        (0299) ;-----------------------------------------------------------------------------
                                        (0300) ;  FUNCTION NAME:  ADCINC_iGetData
                                        (0301) ;                  ADCINC_wGetData
                                        (0302) ;
                                        (0303) ;  DESCRIPTION:     Returns the data from the A/D.  Does not check if data is
                                        (0304) ;                   available.
                                        (0305) ;-----------------------------------------------------------------------------
                                        (0306) ;  ARGUMENTS:    None.
                                        (0307) ;  RETURNS:      fastcall int iResult is returned in the X,A registers
                                        (0308) ;  SIDE EFFECTS:
                                        (0309) ;    The A and X registers may be modified by this or future implementations
                                        (0310) ;    of this function.  When necessary, it is the calling function's
                                        (0311) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0312) ;    functions.
                                        (0313) ;          
                                        (0314)  ADCINC_iGetData:
                                        (0315) _ADCINC_iGetData:
                                        (0316)  ADCINC_wGetData:
                                        (0317) _ADCINC_wGetData:
                                        (0318)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0319)    ADCINC_wGetData_M          
                                        (0320)    RAM_EPILOGUE RAM_USE_CLASS_4
081B: 7F       RET                      (0321)    ret
081C: 51 25    MOV   A,[0x25]           
                                        (0322) .ENDSECTION
                                        (0323) .SECTION
                                        (0324) ;-----------------------------------------------------------------------------
                                        (0325) ;  FUNCTION NAME:  ADCINC_bGetData
                                        (0326) ;                  ADCINC_cGetData
                                        (0327) ;
                                        (0328) ;  DESCRIPTION:     Returns the data from the A/D.  Does not check if data is
                                        (0329) ;                   available.
                                        (0330) ;-----------------------------------------------------------------------------
                                        (0331) ;  ARGUMENTS:    None.
                                        (0332) ;  RETURNS:      fastcall CHAR cData returned in the A register
                                        (0333) ;  SIDE EFFECTS:
                                        (0334) ;    The A and X registers may be modified by this or future implementations
                                        (0335) ;    of this function.  When necessary, it is the calling function's
                                        (0336) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0337) ;    functions.
                                        (0338) ;          
                                        (0339)  ADCINC_bGetData:
                                        (0340) _ADCINC_bGetData:
                                        (0341)  ADCINC_cGetData:
                                        (0342) _ADCINC_cGetData:
                                        (0343)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0344)    ADCINC_cGetData_M        
                                        (0345)    RAM_EPILOGUE RAM_USE_CLASS_4
081E: 7F       RET                      (0346)    ret
081F: 51 28    MOV   A,[0x28]           
0821: 55 28 00 MOV   [0x28],0x0         
                                        (0347) .ENDSECTION
                                        (0348) 
                                        (0349) 
                                        (0350) .SECTION
                                        (0351) ;-----------------------------------------------------------------------------
                                        (0352) ;  FUNCTION NAME: ADCINC_fClearFlag
                                        (0353) ;
                                        (0354) ;  DESCRIPTION: Clears the data ready flag.
                                        (0355) ;-----------------------------------------------------------------------------
                                        (0356) ;  ARGUMENTS:    None.
                                        (0357) ;  RETURNS:      Nothing.
                                        (0358) ;  SIDE EFFECTS: 
                                        (0359) ;    The DATA_READY flag is cleared.
                                        (0360) ;    The A and X registers may be modified by this or future implementations
                                        (0361) ;    of this function.  When necessary, it is the calling function's
                                        (0362) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0363) ;    functions.
                                        (0364) ;          
                                        (0365)  ADCINC_fClearFlag:
                                        (0366) _ADCINC_fClearFlag:
                                        (0367)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0368)    ADCINC_fClearFlag_M    
                                        (0369)    RAM_EPILOGUE RAM_USE_CLASS_4
0824: 7F       RET                      (0370)    ret
0825: 60 2E    MOV   REG[0x2E],A        
                                        (0371) .ENDSECTION
                                        (0372) 
                                        (0373) 
                                        (0374) .SECTION
                                        (0375) ;-----------------------------------------------------------------------------
                                        (0376) ;  FUNCTION NAME: ADCINC_WritePulseWidth
                                        (0377) ;
                                        (0378) ;  DESCRIPTION:
                                        (0379) ;     Write the 8-bit period value into the compare register (DR2).
                                        (0380) ;-----------------------------------------------------------------------------
                                        (0381) ;
                                        (0382) ;  ARGUMENTS: fastcall BYTE bPeriodValue (passed in A)
                                        (0383) ;  RETURNS:   Nothing
                                        (0384) ;  SIDE EFFECTS:
                                        (0385) ;    The A and X registers may be modified by this or future implementations
                                        (0386) ;    of this function.  When necessary, it is the calling function's
                                        (0387) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0388) ;    functions.
                                        (0389) ;
                                        (0390)  ADCINC_WritePulseWidth:
                                        (0391) _ADCINC_WritePulseWidth:
                                        (0392)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0393)    ADCINC_WritePulseWidth_M  
                                        (0394)    RAM_EPILOGUE RAM_USE_CLASS_1
0827: 7F       RET                      (0395)    ret
                                        (0396) .ENDSECTION
                                        (0397) 
                                        (0398) ; End of File ADCINC.asm
FILE: Z:\robotti\Robor7\ROBOTT~1\ROBOTT~1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // Robotti Projekti
(0003) // Robor7 @ 2014
(0004) // Kasper Kiiskinen, Henri Sinokki, Eero Holopainen, Mikko Liira, Kari Lampi
(0005) //----------------------------------------------------------------------------
(0006) 
(0007) #include <m8c.h>        // part specific constants and macros
(0008) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0009) #include<stdio.h>
(0010) #include<stdlib.h>
(0011) 
(0012) //Omat header filet
(0013) #include "MotorControl.h"
(0014) #include "UltraControl.h"
(0015) //#include "GyroControl.h"
(0016) 
(0017) //Kellot
(0018) int timeT = 0,timeT2 = 0;
(0019) int timeLCD = 0,timeUltra = 0; 
(0020) 
(0021) int timeForward = 50; //.... 4m täydellä vauhdilla 3.7s
(0022) int turnTime = 55; 	   //.... 90 asteen käännökseen meneväaika
(0023) int timeRobotWidth = 15; //.... Robotin leveyteen menevä aika ?
(0024) 
(0025) //Main Method
(0026) void main(void)
(0027) {
__UserModules_end|__text_start|_main|_main:
  kulma                --> X+16
  turn                 --> X+14
  ultraData            --> X+12
  buffer               --> X+2
  i                    --> X+0
    0828: 10       PUSH  X
    0829: 4F       MOV   X,SP
    082A: 38 12    ADD   SP,0x12
(0028) 	//Määrittelyt
(0029) 	char buffer[10];
(0030) 	volatile int i = 0;
    082C: 56 01 00 MOV   [X+1],0x0
    082F: 56 00 00 MOV   [X+0],0x0
(0031) 	int turn = 0;
    0832: 56 0F 00 MOV   [X+15],0x0
    0835: 56 0E 00 MOV   [X+14],0x0
(0032) 	int ultraData = 0; //Data from ultrasonic sensor
    0838: 56 0D 00 MOV   [X+13],0x0
    083B: 56 0C 00 MOV   [X+12],0x0
(0033) 	int kulma = 0;
    083E: 56 11 00 MOV   [X+17],0x0
    0841: 56 10 00 MOV   [X+16],0x0
(0034) 	
(0035) 	//Init**************************
(0036) 	
(0037) 	//Enables Global Interrupts
(0038) 	M8C_EnableGInt; 
    0844: 71 01    OR    F,0x1
(0039) 		
(0040) 	//Start LCD
(0041) 	LCD_Start();
    0846: 10       PUSH  X
    0847: 7C 05 93 LCALL _LCD_Start|_LCD_Init|LCD_Init|LCD_Start
(0042) 	
(0043) 	//InitializeTimer
(0044) 	Timer8_Start();
    084A: 7C 03 9B LCALL _Timer8_Start
(0045) 	Timer8_EnableInt();
    084D: 7C 03 93 LCALL _Timer8_EnableInt
    0850: 20       POP   X
(0046) 		
(0047) 	//Start Motor PWMs
(0048) 	InitPWM();
    0851: 7C 0B A2 LCALL _InitPWM
(0049) 	
(0050) 	//Init PGA and ADCIN for Ultrasonic
(0051) 	InitUA();
    0854: 7C 10 07 LCALL _InitUA
(0052) 	
(0053) 	//Testink
(0054) 	//TestLoop();
(0055) 	
(0056) 	i = 100;
    0857: 56 01 64 MOV   [X+1],0x64
    085A: 56 00 00 MOV   [X+0],0x0
(0057) 	
(0058) 	MoveForward(FULL_SPEED);
    085D: 50 00    MOV   A,0x0
    085F: 08       PUSH  A
    0860: 50 C7    MOV   A,0xC7
    0862: 08       PUSH  A
    0863: 7C 0B AB LCALL _MoveForward
(0059) 	Delay(200);
    0866: 50 00    MOV   A,0x0
    0868: 08       PUSH  A
    0869: 50 C8    MOV   A,0xC8
    086B: 08       PUSH  A
    086C: 92 AF    CALL  _Delay
    086E: 38 FC    ADD   SP,0xFC
    0870: 82 A5    JMP   0x0B16
(0060) 	
(0061) 	//MainLoop**********
(0062) 	//***********************
(0063) 	while(1)
(0064) 	{
(0065) 		//Controlls the ultraSonic trigger
(0066) 		ControlTrigger(&timeUltra);	
    0872: 50 00    MOV   A,0x0
    0874: 08       PUSH  A
    0875: 50 06    MOV   A,0x6
    0877: 08       PUSH  A
    0878: 7C 10 A6 LCALL _ControlTrigger
    087B: 38 FE    ADD   SP,0xFE
(0067) 			
(0068) 		//Gets the data
(0069) 		ultraData = getDataUA();
    087D: 7C 10 1E LCALL _getDataUA
    0880: 51 1F    MOV   A,[__r1]
    0882: 54 0D    MOV   [X+13],A
    0884: 51 20    MOV   A,[__r0]
    0886: 54 0C    MOV   [X+12],A
(0070) 		
(0071) 		//Spiraali
(0072) 		if(i < 10)
    0888: 52 01    MOV   A,[X+1]
    088A: 11 0A    SUB   A,0xA
    088C: 52 00    MOV   A,[X+0]
    088E: 31 80    XOR   A,0x80
    0890: 19 80    SBB   A,0x80
    0892: D0 F2    JNC   0x0985
(0073) 		{
(0074) 			if(i < 3)
    0894: 52 01    MOV   A,[X+1]
    0896: 11 03    SUB   A,0x3
    0898: 52 00    MOV   A,[X+0]
    089A: 31 80    XOR   A,0x80
    089C: 19 80    SBB   A,0x80
    089E: D0 6C    JNC   0x090B
(0075) 			{
(0076) 				if(turn == 0)
    08A0: 3D 0E 00 CMP   [X+14],0x0
    08A3: B0 13    JNZ   0x08B7
    08A5: 3D 0F 00 CMP   [X+15],0x0
    08A8: B0 0E    JNZ   0x08B7
(0077) 					MoveForward(HALF_SPEED);
    08AA: 50 00    MOV   A,0x0
    08AC: 08       PUSH  A
    08AD: 50 64    MOV   A,0x64
    08AF: 08       PUSH  A
    08B0: 7C 0B AB LCALL _MoveForward
    08B3: 38 FE    ADD   SP,0xFE
    08B5: 80 6F    JMP   0x0925
(0078) 				else if(turn == 1)
    08B7: 3D 0E 00 CMP   [X+14],0x0
    08BA: B0 23    JNZ   0x08DE
    08BC: 3D 0F 01 CMP   [X+15],0x1
    08BF: B0 1E    JNZ   0x08DE
(0079) 				{
(0080) 					Stop();
    08C1: 7C 0D ED LCALL _Stop
(0081) 					if(timeT >= 100)
    08C4: 51 01    MOV   A,[timeT+1]
    08C6: 11 64    SUB   A,0x64
    08C8: 51 00    MOV   A,[timeT]
    08CA: 31 80    XOR   A,0x80
    08CC: 19 80    SBB   A,0x80
    08CE: C0 56    JC    0x0925
(0082) 					{
(0083) 						turn = 2; 
    08D0: 56 0F 02 MOV   [X+15],0x2
    08D3: 56 0E 00 MOV   [X+14],0x0
(0084) 						timeT = 0;
    08D6: 55 01 00 MOV   [timeT+1],0x0
    08D9: 55 00 00 MOV   [timeT],0x0
(0085) 					}
(0086) 				}
    08DC: 80 48    JMP   0x0925
(0087) 				else 
(0088) 				{
(0089) 					if(timeT <= turnTime) //if(gyroKulma < 90)
    08DE: 51 0B    MOV   A,[turnTime+1]
    08E0: 12 01    SUB   A,[timeT+1]
    08E2: 51 00    MOV   A,[timeT]
    08E4: 31 80    XOR   A,0x80
    08E6: 53 14    MOV   [__rX],A
    08E8: 51 0A    MOV   A,[turnTime]
    08EA: 31 80    XOR   A,0x80
    08EC: 1A 14    SBB   A,[__rX]
    08EE: C0 0E    JC    0x08FD
(0090) 					{
(0091) 						TurnLeft(HALF_SPEED);
    08F0: 50 00    MOV   A,0x0
    08F2: 08       PUSH  A
    08F3: 50 64    MOV   A,0x64
    08F5: 08       PUSH  A
    08F6: 7C 0D FD LCALL _TurnLeft
    08F9: 38 FE    ADD   SP,0xFE
(0092) 					}
    08FB: 80 29    JMP   0x0925
(0093) 					else
(0094) 					{ 
(0095) 						turn = 0;
    08FD: 56 0F 00 MOV   [X+15],0x0
    0900: 56 0E 00 MOV   [X+14],0x0
(0096) 						timeT = 0;
    0903: 55 01 00 MOV   [timeT+1],0x0
    0906: 55 00 00 MOV   [timeT],0x0
(0097) 					}
(0098) 				}
(0099) 			}
    0909: 80 1B    JMP   0x0925
(0100) 			else if(i < 5) 
    090B: 52 01    MOV   A,[X+1]
    090D: 11 05    SUB   A,0x5
    090F: 52 00    MOV   A,[X+0]
    0911: 31 80    XOR   A,0x80
    0913: 19 80    SBB   A,0x80
    0915: D0 0F    JNC   0x0925
(0101) 			{
(0102) 				i = 0;
    0917: 56 01 00 MOV   [X+1],0x0
    091A: 56 00 00 MOV   [X+0],0x0
(0103) 				timeForward -= timeRobotWidth;
    091D: 51 0D    MOV   A,[timeRobotWidth+1]
    091F: 14 09    SUB   [timeForward+1],A
    0921: 51 0C    MOV   A,[timeRobotWidth]
    0923: 1C 08    SBB   [timeForward],A
(0104) 			}
(0105) 			
(0106) 			//Kokokierros on menty
(0107) 			if(timeForward <= 0)
    0925: 50 00    MOV   A,0x0
    0927: 12 09    SUB   A,[timeForward+1]
    0929: 51 08    MOV   A,[timeForward]
    092B: 31 80    XOR   A,0x80
    092D: 53 14    MOV   [__rX],A
    092F: 50 80    MOV   A,0x80
    0931: 1A 14    SBB   A,[__rX]
    0933: C0 24    JC    0x0958
(0108) 			{
(0109) 				i = 10;
    0935: 56 01 0A MOV   [X+1],0xA
    0938: 56 00 00 MOV   [X+0],0x0
(0110) 				timeT = 0; 
    093B: 55 01 00 MOV   [timeT+1],0x0
    093E: 55 00 00 MOV   [timeT],0x0
(0111) 				timeT2 = 0;
    0941: 55 03 00 MOV   [timeT2+1],0x0
    0944: 55 02 00 MOV   [timeT2],0x0
(0112) 				turn = 0;
    0947: 56 0F 00 MOV   [X+15],0x0
    094A: 56 0E 00 MOV   [X+14],0x0
(0113) 				timeForward = 0;
    094D: 55 09 00 MOV   [timeForward+1],0x0
    0950: 55 08 00 MOV   [timeForward],0x0
(0114) 				Stop();
    0953: 7C 0D ED LCALL _Stop
(0115) 			}
    0956: 80 2E    JMP   0x0985
(0116) 			else if (timeT >= timeForward && turn == 0)
    0958: 51 01    MOV   A,[timeT+1]
    095A: 12 09    SUB   A,[timeForward+1]
    095C: 51 08    MOV   A,[timeForward]
    095E: 31 80    XOR   A,0x80
    0960: 53 14    MOV   [__rX],A
    0962: 51 00    MOV   A,[timeT]
    0964: 31 80    XOR   A,0x80
    0966: 1A 14    SBB   A,[__rX]
    0968: C0 1C    JC    0x0985
    096A: 3D 0E 00 CMP   [X+14],0x0
    096D: B0 17    JNZ   0x0985
    096F: 3D 0F 00 CMP   [X+15],0x0
    0972: B0 12    JNZ   0x0985
(0117) 			{
(0118) 				i++;
    0974: 77 01    INC   [X+1]
    0976: 0F 00 00 ADC   [X+0],0x0
(0119) 				turn = 1;
    0979: 56 0F 01 MOV   [X+15],0x1
    097C: 56 0E 00 MOV   [X+14],0x0
(0120) 				timeT = 0;
    097F: 55 01 00 MOV   [timeT+1],0x0
    0982: 55 00 00 MOV   [timeT],0x0
(0121) 			}
(0122) 		}
(0123) 		//End Spiraali
(0124) 		
(0125) 	
(0126) 		
(0127) 		//Scan
(0128) 		if(i == 100)
    0985: 3D 00 00 CMP   [X+0],0x0
    0988: B0 99    JNZ   0x0A22
    098A: 3D 01 64 CMP   [X+1],0x64
    098D: B0 94    JNZ   0x0A22
(0129) 		{
(0130) 			if(kulma < 30000)
    098F: 52 11    MOV   A,[X+17]
    0991: 11 30    SUB   A,0x30
    0993: 52 10    MOV   A,[X+16]
    0995: 31 80    XOR   A,0x80
    0997: 19 F5    SBB   A,0xF5
    0999: D0 82    JNC   0x0A1C
(0131) 			{
(0132) 				if(ultraData < 300)
    099B: 52 0D    MOV   A,[X+13]
    099D: 11 2C    SUB   A,0x2C
    099F: 52 0C    MOV   A,[X+12]
    09A1: 31 80    XOR   A,0x80
    09A3: 19 81    SBB   A,0x81
    09A5: D0 1E    JNC   0x09C4
(0133) 				{	
(0134) 					if(ultraData > 0)
    09A7: 50 00    MOV   A,0x0
    09A9: 13 0D    SUB   A,[X+13]
    09AB: 52 0C    MOV   A,[X+12]
    09AD: 31 80    XOR   A,0x80
    09AF: 53 14    MOV   [__rX],A
    09B1: 50 80    MOV   A,0x80
    09B3: 1A 14    SBB   A,[__rX]
    09B5: D0 6C    JNC   0x0A22
(0135) 						MoveForward(HALF_SPEED); 
    09B7: 50 00    MOV   A,0x0
    09B9: 08       PUSH  A
    09BA: 50 64    MOV   A,0x64
    09BC: 08       PUSH  A
    09BD: 7C 0B AB LCALL _MoveForward
    09C0: 38 FE    ADD   SP,0xFE
(0136) 				}
    09C2: 80 5F    JMP   0x0A22
(0137) 				else if (timeT2 >= 50) //WAIT 500ms
    09C4: 51 03    MOV   A,[timeT2+1]
    09C6: 11 32    SUB   A,0x32
    09C8: 51 02    MOV   A,[timeT2]
    09CA: 31 80    XOR   A,0x80
    09CC: 19 80    SBB   A,0x80
    09CE: C0 48    JC    0x0A17
(0138) 				{
(0139) 					if (turn == 0)
    09D0: 3D 0E 00 CMP   [X+14],0x0
    09D3: B0 12    JNZ   0x09E6
    09D5: 3D 0F 00 CMP   [X+15],0x0
    09D8: B0 0D    JNZ   0x09E6
(0140) 					{	
(0141) 						timeT = 0;
    09DA: 55 01 00 MOV   [timeT+1],0x0
    09DD: 55 00 00 MOV   [timeT],0x0
(0142) 						turn = 1;
    09E0: 56 0F 01 MOV   [X+15],0x1
    09E3: 56 0E 00 MOV   [X+14],0x0
(0143) 					}
(0144) 						
(0145) 					if(timeT <= 20)
    09E6: 50 14    MOV   A,0x14
    09E8: 12 01    SUB   A,[timeT+1]
    09EA: 51 00    MOV   A,[timeT]
    09EC: 31 80    XOR   A,0x80
    09EE: 53 14    MOV   [__rX],A
    09F0: 50 80    MOV   A,0x80
    09F2: 1A 14    SBB   A,[__rX]
    09F4: C0 0E    JC    0x0A03
(0146) 						TurnRight(SLOW_SPEED);
    09F6: 50 00    MOV   A,0x0
    09F8: 08       PUSH  A
    09F9: 50 41    MOV   A,0x41
    09FB: 08       PUSH  A
    09FC: 7C 0E F6 LCALL _TurnRight
    09FF: 38 FE    ADD   SP,0xFE
    0A01: 80 20    JMP   0x0A22
(0147) 					else
(0148) 					{
(0149) 						kulma+=5;
    0A03: 07 11 05 ADD   [X+17],0x5
    0A06: 0F 10 00 ADC   [X+16],0x0
(0150) 						timeT2 = 0;
    0A09: 55 03 00 MOV   [timeT2+1],0x0
    0A0C: 55 02 00 MOV   [timeT2],0x0
(0151) 						turn = 0;
    0A0F: 56 0F 00 MOV   [X+15],0x0
    0A12: 56 0E 00 MOV   [X+14],0x0
(0152) 					}
(0153) 				}
    0A15: 80 0C    JMP   0x0A22
(0154) 				else 
(0155) 					Stop();
    0A17: 7C 0D ED LCALL _Stop
(0156) 			}
    0A1A: 80 07    JMP   0x0A22
(0157) 			else 
(0158) 				i = 20;
    0A1C: 56 01 14 MOV   [X+1],0x14
    0A1F: 56 00 00 MOV   [X+0],0x0
(0159) 		}
(0160) 		
(0161) 		if(i == 20)
    0A22: 3D 00 00 CMP   [X+0],0x0
    0A25: B0 09    JNZ   0x0A2F
    0A27: 3D 01 14 CMP   [X+1],0x14
    0A2A: B0 04    JNZ   0x0A2F
(0162) 			Stop();
    0A2C: 7C 0D ED LCALL _Stop
(0163) 		
(0164) 		
(0165) 		//WRITE TO LCD
(0166) 		if(timeLCD >= 6)
    0A2F: 51 05    MOV   A,[timeLCD+1]
    0A31: 11 06    SUB   A,0x6
    0A33: 51 04    MOV   A,[timeLCD]
    0A35: 31 80    XOR   A,0x80
    0A37: 19 80    SBB   A,0x80
    0A39: C0 DC    JC    0x0B16
(0167) 		{
(0168) 			itoa(buffer,ultraData,10);
    0A3B: 50 00    MOV   A,0x0
    0A3D: 08       PUSH  A
    0A3E: 50 0A    MOV   A,0xA
    0A40: 08       PUSH  A
    0A41: 52 0C    MOV   A,[X+12]
    0A43: 08       PUSH  A
    0A44: 52 0D    MOV   A,[X+13]
    0A46: 08       PUSH  A
    0A47: 5A 1F    MOV   [__r1],X
    0A49: 06 1F 02 ADD   [__r1],0x2
    0A4C: 51 20    MOV   A,[__r0]
    0A4E: 08       PUSH  A
    0A4F: 51 1F    MOV   A,[__r1]
    0A51: 08       PUSH  A
    0A52: 7C 15 28 LCALL _itoa
    0A55: 38 FA    ADD   SP,0xFA
(0169) 			LCD_Position(0,0);
    0A57: 10       PUSH  X
    0A58: 50 00    MOV   A,0x0
    0A5A: 57 00    MOV   X,0x0
    0A5C: 7C 06 03 LCALL _LCD_Position
(0170) 			LCD_PrCString("      ");
    0A5F: 50 01    MOV   A,0x1
    0A61: 08       PUSH  A
    0A62: 50 5C    MOV   A,0x5C
    0A64: 5C       MOV   X,A
    0A65: 18       POP   A
    0A66: 7C 04 92 LCALL _LCD_PrCString
(0171) 			LCD_Position(0,0);
    0A69: 50 00    MOV   A,0x0
    0A6B: 57 00    MOV   X,0x0
    0A6D: 7C 06 03 LCALL _LCD_Position
    0A70: 20       POP   X
(0172) 			LCD_PrString(buffer);
    0A71: 5A 1F    MOV   [__r1],X
    0A73: 06 1F 02 ADD   [__r1],0x2
    0A76: 10       PUSH  X
    0A77: 51 20    MOV   A,[__r0]
    0A79: 08       PUSH  A
    0A7A: 51 1F    MOV   A,[__r1]
    0A7C: 5C       MOV   X,A
    0A7D: 18       POP   A
    0A7E: 7C 04 CE LCALL _LCD_PrString
(0173) 					
(0174) 			//
(0175) 			LCD_Position(0,5);
    0A81: 57 05    MOV   X,0x5
    0A83: 50 00    MOV   A,0x0
    0A85: 7C 06 03 LCALL _LCD_Position
(0176) 			LCD_PrCString("      ");
    0A88: 50 01    MOV   A,0x1
    0A8A: 08       PUSH  A
    0A8B: 50 5C    MOV   A,0x5C
    0A8D: 5C       MOV   X,A
    0A8E: 18       POP   A
    0A8F: 7C 04 92 LCALL _LCD_PrCString
    0A92: 20       POP   X
(0177) 			itoa(buffer,timeForward,10);
    0A93: 50 00    MOV   A,0x0
    0A95: 08       PUSH  A
    0A96: 50 0A    MOV   A,0xA
    0A98: 08       PUSH  A
    0A99: 51 08    MOV   A,[timeForward]
    0A9B: 08       PUSH  A
    0A9C: 51 09    MOV   A,[timeForward+1]
    0A9E: 08       PUSH  A
    0A9F: 5A 1F    MOV   [__r1],X
    0AA1: 06 1F 02 ADD   [__r1],0x2
    0AA4: 51 20    MOV   A,[__r0]
    0AA6: 08       PUSH  A
    0AA7: 51 1F    MOV   A,[__r1]
    0AA9: 08       PUSH  A
    0AAA: 7C 15 28 LCALL _itoa
    0AAD: 38 FA    ADD   SP,0xFA
(0178) 			LCD_Position(0,5);
    0AAF: 10       PUSH  X
    0AB0: 57 05    MOV   X,0x5
    0AB2: 50 00    MOV   A,0x0
    0AB4: 7C 06 03 LCALL _LCD_Position
    0AB7: 20       POP   X
(0179) 			LCD_PrString(buffer);
    0AB8: 5A 1F    MOV   [__r1],X
    0ABA: 06 1F 02 ADD   [__r1],0x2
    0ABD: 10       PUSH  X
    0ABE: 51 20    MOV   A,[__r0]
    0AC0: 08       PUSH  A
    0AC1: 51 1F    MOV   A,[__r1]
    0AC3: 5C       MOV   X,A
    0AC4: 18       POP   A
    0AC5: 7C 04 CE LCALL _LCD_PrString
(0180) 			
(0181) 			LCD_Position(1,0);
    0AC8: 57 00    MOV   X,0x0
    0ACA: 50 01    MOV   A,0x1
    0ACC: 7C 06 03 LCALL _LCD_Position
(0182) 			LCD_PrCString("      ");
    0ACF: 50 01    MOV   A,0x1
    0AD1: 08       PUSH  A
    0AD2: 50 5C    MOV   A,0x5C
    0AD4: 5C       MOV   X,A
    0AD5: 18       POP   A
    0AD6: 7C 04 92 LCALL _LCD_PrCString
    0AD9: 20       POP   X
(0183) 			itoa(buffer,kulma,10);
    0ADA: 50 00    MOV   A,0x0
    0ADC: 08       PUSH  A
    0ADD: 50 0A    MOV   A,0xA
    0ADF: 08       PUSH  A
    0AE0: 52 10    MOV   A,[X+16]
    0AE2: 08       PUSH  A
    0AE3: 52 11    MOV   A,[X+17]
    0AE5: 08       PUSH  A
    0AE6: 5A 1F    MOV   [__r1],X
    0AE8: 06 1F 02 ADD   [__r1],0x2
    0AEB: 51 20    MOV   A,[__r0]
    0AED: 08       PUSH  A
    0AEE: 51 1F    MOV   A,[__r1]
    0AF0: 08       PUSH  A
    0AF1: 7C 15 28 LCALL _itoa
    0AF4: 38 FA    ADD   SP,0xFA
(0184) 			LCD_Position(1,0);
    0AF6: 10       PUSH  X
    0AF7: 57 00    MOV   X,0x0
    0AF9: 50 01    MOV   A,0x1
    0AFB: 7C 06 03 LCALL _LCD_Position
    0AFE: 20       POP   X
(0185) 			LCD_PrString(buffer);
    0AFF: 5A 1F    MOV   [__r1],X
    0B01: 06 1F 02 ADD   [__r1],0x2
    0B04: 10       PUSH  X
    0B05: 51 20    MOV   A,[__r0]
    0B07: 08       PUSH  A
    0B08: 51 1F    MOV   A,[__r1]
    0B0A: 5C       MOV   X,A
    0B0B: 18       POP   A
    0B0C: 7C 04 CE LCALL _LCD_PrString
    0B0F: 20       POP   X
(0186) 			
(0187) 			timeLCD = 0;
    0B10: 55 05 00 MOV   [timeLCD+1],0x0
    0B13: 55 04 00 MOV   [timeLCD],0x0
(0188) 		}		
(0189) 	}
    0B16: 8D 5B    JMP   0x0872
    0B18: 38 EE    ADD   SP,0xEE
    0B1A: 20       POP   X
    0B1B: 8F FF    JMP   0x0B1B
(0190) }
(0191) 
(0192) //Delay function
(0193) void Delay(int dealy)
(0194) {
_Delay:
  timme                --> X+0
  dealy                --> X-5
    0B1D: 10       PUSH  X
    0B1E: 4F       MOV   X,SP
    0B1F: 38 02    ADD   SP,0x2
(0195) 	int timme = timeT + dealy;
    0B21: 51 01    MOV   A,[timeT+1]
    0B23: 03 FC    ADD   A,[X-4]
    0B25: 54 01    MOV   [X+1],A
    0B27: 51 00    MOV   A,[timeT]
    0B29: 0B FB    ADC   A,[X-5]
    0B2B: 54 00    MOV   [X+0],A
    0B2D: 80 15    JMP   0x0B43
(0196) 	while (timeT < timme)
(0197) 	{
(0198) 		if (timeT >= timme)
    0B2F: 51 01    MOV   A,[timeT+1]
    0B31: 13 01    SUB   A,[X+1]
    0B33: 52 00    MOV   A,[X+0]
    0B35: 31 80    XOR   A,0x80
    0B37: 53 14    MOV   [__rX],A
    0B39: 51 00    MOV   A,[timeT]
    0B3B: 31 80    XOR   A,0x80
    0B3D: 1A 14    SBB   A,[__rX]
    0B3F: C0 03    JC    0x0B43
(0199) 			break;
    0B41: 80 13    JMP   0x0B55
(0200) 	}
    0B43: 51 01    MOV   A,[timeT+1]
    0B45: 13 01    SUB   A,[X+1]
    0B47: 52 00    MOV   A,[X+0]
    0B49: 31 80    XOR   A,0x80
    0B4B: 53 14    MOV   [__rX],A
    0B4D: 51 00    MOV   A,[timeT]
    0B4F: 31 80    XOR   A,0x80
    0B51: 1A 14    SBB   A,[__rX]
    0B53: CF DB    JC    0x0B2F
    0B55: 38 FE    ADD   SP,0xFE
    0B57: 20       POP   X
    0B58: 7F       RET   
(0201) }
(0202) 
(0203) //Kutsutaan joka 0.01s = 10ms välein.
(0204) void TimerInterrupt()
(0205) {
(0206)   timeT++;
_TimerInterrupt:
    0B59: 76 01    INC   [timeT+1]
    0B5B: 0E 00 00 ADC   [timeT],0x0
(0207)   timeT2++;
    0B5E: 76 03    INC   [timeT2+1]
    0B60: 0E 02 00 ADC   [timeT2],0x0
(0208) 
(0209)   timeLCD++; //Controlls LCD draw cycle
    0B63: 76 05    INC   [timeLCD+1]
    0B65: 0E 04 00 ADC   [timeLCD],0x0
(0210)   timeUltra++; //Controlls Ultrasonic sensor trigger time
    0B68: 76 07    INC   [timeUltra+1]
    0B6A: 0E 06 00 ADC   [timeUltra],0x0
    0B6D: 7F       RET   
(0211) }
(0212) 
(0213) //For Testing
(0214) void TestLoop()
(0215) {
_TestLoop:
    0B6E: 80 30    JMP   0x0B9F
(0216) 	while(1)
(0217) 	{
(0218) 		
(0219) 		LCD_Position(1,0);
    0B70: 10       PUSH  X
    0B71: 57 00    MOV   X,0x0
    0B73: 50 01    MOV   A,0x1
    0B75: 7C 06 03 LCALL _LCD_Position
(0220) 		LCD_PrCString("PIRI TOIMII");
    0B78: 50 01    MOV   A,0x1
    0B7A: 08       PUSH  A
    0B7B: 50 50    MOV   A,0x50
    0B7D: 5C       MOV   X,A
    0B7E: 18       POP   A
    0B7F: 7C 04 92 LCALL _LCD_PrCString
    0B82: 20       POP   X
(0221) 		
(0222) 		//Test 4m
(0223) 		/*
(0224) 		if (timeT < 250)
(0225) 			TurnLeft(FULL_SPEED);
(0226) 		else if (timeT < 500)
(0227) 			TurnRight(HALF_SPEED);
(0228) 		else 
(0229) 			Stop();
(0230) 		*/
(0231) 	
(0232) 		//About 90
(0233) 		if (timeT < 60)
    0B83: 51 01    MOV   A,[timeT+1]
    0B85: 11 3C    SUB   A,0x3C
    0B87: 51 00    MOV   A,[timeT]
    0B89: 31 80    XOR   A,0x80
    0B8B: 19 80    SBB   A,0x80
    0B8D: D0 0E    JNC   0x0B9C
(0234) 			TurnLeft(HALF_SPEED);
    0B8F: 50 00    MOV   A,0x0
    0B91: 08       PUSH  A
    0B92: 50 64    MOV   A,0x64
    0B94: 08       PUSH  A
    0B95: 7C 0D FD LCALL _TurnLeft
    0B98: 38 FE    ADD   SP,0xFE
    0B9A: 80 04    JMP   0x0B9F
(0235) 		else
(0236) 			Stop();
    0B9C: 7C 0D ED LCALL _Stop
(0237) 			
(0238) 		//Test 90 degree Turn
(0239) 		/*	
(0240) 			if(timeT <= 100) //1.0s
(0241) 				TurnRight(FULL_SPEED);
(0242) 			else if(timeT <= 400)
(0243) 				timeT = 0;
(0244) 		*/
(0245) 		
(0246) 	}
    0B9F: 8F D0    JMP   0x0B70
(0247) }
(0248) 
FILE: Z:\robotti\Robor7\ROBOTT~1\ROBOTT~1\motorcontrol.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) 
(0004) #define BACKWARD 	0b00000101; // Molemmat Eteen
(0005) #define FORWARD 	0b00001010; //Molemmat Taakse
(0006) #define LEFTBRIGHTF 0b00001001; // Vasen Eteen Oikea Taakse
(0007) #define LEFTFRIGHTB 0b00000110; // Vasen Taakse Oikea Eteen
(0008) #define NOLLAA 		0b11110000;		//Molemmat C/D pinnit 0
(0009) 
(0010) //Porttien osoitteet
(0011) //Port1_0 LEFTC      C = 1, D = 0 FORWARD
(0012) //Port1_1 LEFTD		 C = 0, D = 1 BACKWARD 
(0013) //Port1_2 RIGHTC
(0014) //Port1_3 RIGHTD
(0015) 
(0016) const float OIKEUSKERROIN = 1.0f; //Kerroin vasemalle puolelle jotta robotti kulkisi suoraan
(0017) 
(0018) //Käynnistää PWM Moduulit
(0019) void InitPWM()
(0020) {
(0021) 	PWM8_VASEN_Start();
_InitPWM:
    0BA2: 10       PUSH  X
    0BA3: 7C 03 E1 LCALL _PWM8_VASEN_Start
(0022) 	PWM8_OIKEA_Start();
    0BA6: 7C 04 24 LCALL _PWM8_OIKEA_Start
    0BA9: 20       POP   X
    0BAA: 7F       RET   
(0023) 	
(0024) 	//Port1_Data_ADDR = LEFTC_Data_ADDR;
(0025) 	//Port1_Data_ADDR &= NOLLAA;
(0026) }
(0027) 
(0028) //Kulkee eteenpäin arvolla..
(0029) void MoveForward(int pulse)
(0030) {				
_MoveForward:
  pulse                --> X-5
    0BAB: 10       PUSH  X
    0BAC: 4F       MOV   X,SP
    0BAD: 38 02    ADD   SP,0x2
(0031) 	LEFTC_Data_ADDR &= NOLLAA;
    0BAF: 41 04 F0 AND   REG[0x4],0xF0
(0032) 	LEFTC_Data_ADDR |= FORWARD;
    0BB2: 43 04 0A OR    REG[0x4],0xA
(0033) 
(0034) 	PWM8_VASEN_WritePulseWidth((BYTE)(pulse * OIKEUSKERROIN));
    0BB5: 55 1F 63 MOV   [__r1],0x63
FILE: Z:\robotti\Robor7\ROBOTT~1\ROBOTT~1\motorcontrol.c
(0035) 	PWM8_OIKEA_WritePulseWidth((BYTE)pulse);
    0CC1: 52 FC    MOV   A,[X-4]
    0CC3: 10       PUSH  X
    0CC4: 7C 04 2F LCALL _PWM8_OIKEA_WritePulseWidth
    0CC7: 20       POP   X
    0CC8: 38 FE    ADD   SP,0xFE
    0CCA: 20       POP   X
    0CCB: 7F       RET   
(0036) }
(0037) 
(0038) //Kulkee taaksepäin arvolla
(0039) void MoveBackward(int pulse)
(0040) {
_MoveBackward:
  pulse                --> X-5
    0CCC: 10       PUSH  X
    0CCD: 4F       MOV   X,SP
    0CCE: 38 02    ADD   SP,0x2
(0041) 	LEFTC_Data_ADDR &= NOLLAA;
    0CD0: 41 04 F0 AND   REG[0x4],0xF0
(0042) 	LEFTC_Data_ADDR |= BACKWARD;
    0CD3: 43 04 05 OR    REG[0x4],0x5
(0043) 	
(0044) 	PWM8_VASEN_WritePulseWidth((BYTE)(pulse * OIKEUSKERROIN));
    0CD6: 55 1F 63 MOV   [__r1],0x63
FILE: Z:\robotti\Robor7\ROBOTT~1\ROBOTT~1\motorcontrol.c
(0045) 	PWM8_OIKEA_WritePulseWidth((BYTE)pulse);
    0DE2: 52 FC    MOV   A,[X-4]
    0DE4: 10       PUSH  X
    0DE5: 7C 04 2F LCALL _PWM8_OIKEA_WritePulseWidth
    0DE8: 20       POP   X
    0DE9: 38 FE    ADD   SP,0xFE
    0DEB: 20       POP   X
    0DEC: 7F       RET   
(0046) }
(0047) 
(0048) //Pysäyttää Moottorit
(0049) void Stop()
(0050) {
(0051) 	PWM8_OIKEA_WritePulseWidth(0);
_Stop:
    0DED: 10       PUSH  X
    0DEE: 50 00    MOV   A,0x0
    0DF0: 7C 04 2F LCALL _PWM8_OIKEA_WritePulseWidth
(0052) 	PWM8_VASEN_WritePulseWidth(0);
    0DF3: 50 00    MOV   A,0x0
    0DF5: 7C 03 EC LCALL _PWM8_VASEN_WritePulseWidth
    0DF8: 20       POP   X
(0053) 	
(0054) 	LEFTC_Data_ADDR &= NOLLAA;
    0DF9: 41 04 F0 AND   REG[0x4],0xF0
    0DFC: 7F       RET   
(0055) }
(0056) 
(0057) //Kääntyy vasemmalle
(0058) void TurnLeft(int pulse)
(0059) {
_TurnLeft:
  pulse                --> X-5
    0DFD: 10       PUSH  X
    0DFE: 4F       MOV   X,SP
    0DFF: 38 02    ADD   SP,0x2
(0060) 	LEFTC_Data_ADDR &= NOLLAA;
    0E01: 41 04 F0 AND   REG[0x4],0xF0
(0061) 	LEFTC_Data_ADDR |= LEFTFRIGHTB
    0E04: 43 04 06 OR    REG[0x4],0x6
(0062) 		
(0063) 	PWM8_VASEN_WritePulseWidth((BYTE)pulse);
    0E07: 52 FC    MOV   A,[X-4]
    0E09: 10       PUSH  X
    0E0A: 7C 03 EC LCALL _PWM8_VASEN_WritePulseWidth
    0E0D: 20       POP   X
(0064) 	PWM8_OIKEA_WritePulseWidth((BYTE)(pulse * 0.8f));
    0E0E: 52 FC    MOV   A,[X-4]
    0E10: 53 1D    MOV   [__r3],A
    0E12: 52 FB    MOV   A,[X-5]
    0E14: 53 1E    MOV   [__r2],A
    0E16: 47 1E 80 TST   [__r2],0x80
    0E19: A0 09    JZ    0x0E23
    0E1B: 55 1F FF MOV   [__r1],0xFF
    0E1E: 55 20 FF MOV   [__r0],0xFF
    0E21: 80 07    JMP   0x0E29
    0E23: 55 1F 00 MOV   [__r1],0x0
    0E26: 55 20 00 MOV   [__r0],0x0
    0E29: 51 20    MOV   A,[__r0]
    0E2B: 08       PUSH  A
    0E2C: 51 1F    MOV   A,[__r1]
    0E2E: 08       PUSH  A
    0E2F: 51 1E    MOV   A,[__r2]
    0E31: 08       PUSH  A
    0E32: 51 1D    MOV   A,[__r3]
    0E34: 08       PUSH  A
    0E35: 7C 14 CA LCALL 0x14CA
    0E38: 18       POP   A
    0E39: 53 1D    MOV   [__r3],A
    0E3B: 18       POP   A
    0E3C: 53 1E    MOV   [__r2],A
    0E3E: 18       POP   A
    0E3F: 53 1F    MOV   [__r1],A
    0E41: 18       POP   A
    0E42: 08       PUSH  A
    0E43: 51 1F    MOV   A,[__r1]
    0E45: 08       PUSH  A
    0E46: 51 1E    MOV   A,[__r2]
    0E48: 08       PUSH  A
    0E49: 51 1D    MOV   A,[__r3]
    0E4B: 08       PUSH  A
    0E4C: 50 3F    MOV   A,0x3F
    0E4E: 08       PUSH  A
    0E4F: 50 4C    MOV   A,0x4C
    0E51: 08       PUSH  A
    0E52: 50 CC    MOV   A,0xCC
    0E54: 08       PUSH  A
    0E55: 50 CD    MOV   A,0xCD
    0E57: 08       PUSH  A
    0E58: 7C 13 38 LCALL 0x1338
    0E5B: 18       POP   A
    0E5C: 53 1D    MOV   [__r3],A
    0E5E: 18       POP   A
    0E5F: 53 1E    MOV   [__r2],A
    0E61: 18       POP   A
    0E62: 53 1F    MOV   [__r1],A
    0E64: 18       POP   A
    0E65: 53 20    MOV   [__r0],A
    0E67: 38 FC    ADD   SP,0xFC
    0E69: 50 47    MOV   A,0x47
    0E6B: 08       PUSH  A
    0E6C: 50 00    MOV   A,0x0
    0E6E: 08       PUSH  A
    0E6F: 08       PUSH  A
    0E70: 08       PUSH  A
    0E71: 51 20    MOV   A,[__r0]
    0E73: 08       PUSH  A
    0E74: 51 1F    MOV   A,[__r1]
    0E76: 08       PUSH  A
    0E77: 51 1E    MOV   A,[__r2]
    0E79: 08       PUSH  A
    0E7A: 51 1D    MOV   A,[__r3]
    0E7C: 08       PUSH  A
    0E7D: 7C 12 EA LCALL 0x12EA
    0E80: 38 F8    ADD   SP,0xF8
    0E82: 39 FF    CMP   A,0xFF
    0E84: A0 47    JZ    0x0ECC
    0E86: 50 47    MOV   A,0x47
    0E88: 08       PUSH  A
    0E89: 50 00    MOV   A,0x0
    0E8B: 08       PUSH  A
    0E8C: 08       PUSH  A
    0E8D: 08       PUSH  A
    0E8E: 51 20    MOV   A,[__r0]
    0E90: 08       PUSH  A
    0E91: 51 1F    MOV   A,[__r1]
    0E93: 08       PUSH  A
    0E94: 51 1E    MOV   A,[__r2]
    0E96: 08       PUSH  A
    0E97: 51 1D    MOV   A,[__r3]
    0E99: 08       PUSH  A
    0E9A: 7C 14 5C LCALL 0x145C
    0E9D: 18       POP   A
    0E9E: 53 19    MOV   [__r7],A
    0EA0: 18       POP   A
    0EA1: 53 1A    MOV   [__r6],A
    0EA3: 18       POP   A
    0EA4: 53 1B    MOV   [__r5],A
    0EA6: 18       POP   A
    0EA7: 38 FC    ADD   SP,0xFC
    0EA9: 08       PUSH  A
    0EAA: 51 1B    MOV   A,[__r5]
    0EAC: 08       PUSH  A
    0EAD: 51 1A    MOV   A,[__r6]
    0EAF: 08       PUSH  A
    0EB0: 51 19    MOV   A,[__r7]
    0EB2: 08       PUSH  A
    0EB3: 7C 10 F3 LCALL 0x10F3
    0EB6: 18       POP   A
    0EB7: 53 1B    MOV   [__r5],A
    0EB9: 18       POP   A
    0EBA: 53 1C    MOV   [__r4],A
    0EBC: 38 FE    ADD   SP,0xFE
    0EBE: 51 1B    MOV   A,[__r5]
    0EC0: 01 00    ADD   A,0x0
    0EC2: 54 01    MOV   [X+1],A
    0EC4: 51 1C    MOV   A,[__r4]
    0EC6: 09 80    ADC   A,0x80
    0EC8: 54 00    MOV   [X+0],A
    0ECA: 80 20    JMP   0x0EEB
    0ECC: 51 20    MOV   A,[__r0]
    0ECE: 08       PUSH  A
    0ECF: 51 1F    MOV   A,[__r1]
    0ED1: 08       PUSH  A
    0ED2: 51 1E    MOV   A,[__r2]
    0ED4: 08       PUSH  A
    0ED5: 51 1D    MOV   A,[__r3]
    0ED7: 08       PUSH  A
    0ED8: 7C 10 F3 LCALL 0x10F3
    0EDB: 18       POP   A
    0EDC: 53 1F    MOV   [__r1],A
    0EDE: 18       POP   A
    0EDF: 53 20    MOV   [__r0],A
    0EE1: 38 FE    ADD   SP,0xFE
    0EE3: 51 1F    MOV   A,[__r1]
    0EE5: 54 01    MOV   [X+1],A
    0EE7: 51 20    MOV   A,[__r0]
    0EE9: 54 00    MOV   [X+0],A
    0EEB: 52 01    MOV   A,[X+1]
    0EED: 10       PUSH  X
    0EEE: 7C 04 2F LCALL _PWM8_OIKEA_WritePulseWidth
    0EF1: 20       POP   X
    0EF2: 38 FE    ADD   SP,0xFE
    0EF4: 20       POP   X
    0EF5: 7F       RET   
(0065) }
(0066) 
(0067) //Kääntyy oikealle
(0068) void TurnRight(int pulse)
(0069) {		
_TurnRight:
  pulse                --> X-5
    0EF6: 10       PUSH  X
    0EF7: 4F       MOV   X,SP
    0EF8: 38 02    ADD   SP,0x2
(0070) 	LEFTC_Data_ADDR &= NOLLAA;
    0EFA: 41 04 F0 AND   REG[0x4],0xF0
(0071) 	LEFTC_Data_ADDR |= LEFTBRIGHTF;
    0EFD: 43 04 09 OR    REG[0x4],0x9
(0072) 	
(0073) 	PWM8_VASEN_WritePulseWidth((BYTE)(pulse * 0.8f));
    0F00: 52 FC    MOV   A,[X-4]
    0F02: 53 1D    MOV   [__r3],A
    0F04: 52 FB    MOV   A,[X-5]
    0F06: 53 1E    MOV   [__r2],A
    0F08: 47 1E 80 TST   [__r2],0x80
    0F0B: A0 09    JZ    0x0F15
    0F0D: 55 1F FF MOV   [__r1],0xFF
    0F10: 55 20 FF MOV   [__r0],0xFF
    0F13: 80 07    JMP   0x0F1B
    0F15: 55 1F 00 MOV   [__r1],0x0
    0F18: 55 20 00 MOV   [__r0],0x0
    0F1B: 51 20    MOV   A,[__r0]
    0F1D: 08       PUSH  A
    0F1E: 51 1F    MOV   A,[__r1]
    0F20: 08       PUSH  A
    0F21: 51 1E    MOV   A,[__r2]
    0F23: 08       PUSH  A
    0F24: 51 1D    MOV   A,[__r3]
    0F26: 08       PUSH  A
    0F27: 7C 14 CA LCALL 0x14CA
    0F2A: 18       POP   A
    0F2B: 53 1D    MOV   [__r3],A
    0F2D: 18       POP   A
    0F2E: 53 1E    MOV   [__r2],A
    0F30: 18       POP   A
    0F31: 53 1F    MOV   [__r1],A
    0F33: 18       POP   A
    0F34: 08       PUSH  A
    0F35: 51 1F    MOV   A,[__r1]
    0F37: 08       PUSH  A
    0F38: 51 1E    MOV   A,[__r2]
    0F3A: 08       PUSH  A
    0F3B: 51 1D    MOV   A,[__r3]
    0F3D: 08       PUSH  A
    0F3E: 50 3F    MOV   A,0x3F
    0F40: 08       PUSH  A
    0F41: 50 4C    MOV   A,0x4C
    0F43: 08       PUSH  A
    0F44: 50 CC    MOV   A,0xCC
    0F46: 08       PUSH  A
    0F47: 50 CD    MOV   A,0xCD
    0F49: 08       PUSH  A
    0F4A: 7C 13 38 LCALL 0x1338
    0F4D: 18       POP   A
    0F4E: 53 1D    MOV   [__r3],A
    0F50: 18       POP   A
    0F51: 53 1E    MOV   [__r2],A
    0F53: 18       POP   A
    0F54: 53 1F    MOV   [__r1],A
    0F56: 18       POP   A
    0F57: 53 20    MOV   [__r0],A
    0F59: 38 FC    ADD   SP,0xFC
    0F5B: 50 47    MOV   A,0x47
    0F5D: 08       PUSH  A
    0F5E: 50 00    MOV   A,0x0
    0F60: 08       PUSH  A
    0F61: 08       PUSH  A
    0F62: 08       PUSH  A
    0F63: 51 20    MOV   A,[__r0]
    0F65: 08       PUSH  A
    0F66: 51 1F    MOV   A,[__r1]
    0F68: 08       PUSH  A
    0F69: 51 1E    MOV   A,[__r2]
    0F6B: 08       PUSH  A
    0F6C: 51 1D    MOV   A,[__r3]
    0F6E: 08       PUSH  A
    0F6F: 7C 12 EA LCALL 0x12EA
    0F72: 38 F8    ADD   SP,0xF8
    0F74: 39 FF    CMP   A,0xFF
    0F76: A0 47    JZ    0x0FBE
    0F78: 50 47    MOV   A,0x47
    0F7A: 08       PUSH  A
    0F7B: 50 00    MOV   A,0x0
    0F7D: 08       PUSH  A
    0F7E: 08       PUSH  A
    0F7F: 08       PUSH  A
    0F80: 51 20    MOV   A,[__r0]
    0F82: 08       PUSH  A
    0F83: 51 1F    MOV   A,[__r1]
    0F85: 08       PUSH  A
    0F86: 51 1E    MOV   A,[__r2]
    0F88: 08       PUSH  A
    0F89: 51 1D    MOV   A,[__r3]
    0F8B: 08       PUSH  A
    0F8C: 7C 14 5C LCALL 0x145C
    0F8F: 18       POP   A
    0F90: 53 19    MOV   [__r7],A
    0F92: 18       POP   A
    0F93: 53 1A    MOV   [__r6],A
    0F95: 18       POP   A
    0F96: 53 1B    MOV   [__r5],A
    0F98: 18       POP   A
    0F99: 38 FC    ADD   SP,0xFC
    0F9B: 08       PUSH  A
    0F9C: 51 1B    MOV   A,[__r5]
    0F9E: 08       PUSH  A
    0F9F: 51 1A    MOV   A,[__r6]
    0FA1: 08       PUSH  A
    0FA2: 51 19    MOV   A,[__r7]
    0FA4: 08       PUSH  A
    0FA5: 7C 10 F3 LCALL 0x10F3
    0FA8: 18       POP   A
    0FA9: 53 1B    MOV   [__r5],A
    0FAB: 18       POP   A
    0FAC: 53 1C    MOV   [__r4],A
    0FAE: 38 FE    ADD   SP,0xFE
    0FB0: 51 1B    MOV   A,[__r5]
    0FB2: 01 00    ADD   A,0x0
    0FB4: 54 01    MOV   [X+1],A
    0FB6: 51 1C    MOV   A,[__r4]
    0FB8: 09 80    ADC   A,0x80
    0FBA: 54 00    MOV   [X+0],A
    0FBC: 80 20    JMP   0x0FDD
    0FBE: 51 20    MOV   A,[__r0]
    0FC0: 08       PUSH  A
    0FC1: 51 1F    MOV   A,[__r1]
    0FC3: 08       PUSH  A
    0FC4: 51 1E    MOV   A,[__r2]
    0FC6: 08       PUSH  A
    0FC7: 51 1D    MOV   A,[__r3]
    0FC9: 08       PUSH  A
    0FCA: 7C 10 F3 LCALL 0x10F3
    0FCD: 18       POP   A
    0FCE: 53 1F    MOV   [__r1],A
    0FD0: 18       POP   A
    0FD1: 53 20    MOV   [__r0],A
    0FD3: 38 FE    ADD   SP,0xFE
    0FD5: 51 1F    MOV   A,[__r1]
    0FD7: 54 01    MOV   [X+1],A
    0FD9: 51 20    MOV   A,[__r0]
    0FDB: 54 00    MOV   [X+0],A
    0FDD: 52 01    MOV   A,[X+1]
    0FDF: 10       PUSH  X
    0FE0: 7C 03 EC LCALL _PWM8_VASEN_WritePulseWidth
    0FE3: 20       POP   X
(0074) 	PWM8_OIKEA_WritePulseWidth((BYTE)pulse);
    0FE4: 52 FC    MOV   A,[X-4]
    0FE6: 10       PUSH  X
    0FE7: 7C 04 2F LCALL _PWM8_OIKEA_WritePulseWidth
    0FEA: 20       POP   X
    0FEB: 38 FE    ADD   SP,0xFE
    0FED: 20       POP   X
    0FEE: 7F       RET   
(0075) }
(0076) 
(0077) 
(0078) //TEST LEFTTURN
(0079) void TestTurnLeft(int pulse)
(0080) {
_TestTurnLeft:
  pulse                --> X-5
    0FEF: 10       PUSH  X
    0FF0: 4F       MOV   X,SP
(0081) 	LEFTC_Data_ADDR &= NOLLAA;
    0FF1: 41 04 F0 AND   REG[0x4],0xF0
(0082) 	LEFTC_Data_ADDR |= 0b00000001;
    0FF4: 43 04 01 OR    REG[0x4],0x1
(0083) 	
(0084) 	PWM8_VASEN_WritePulseWidth(0);
    0FF7: 10       PUSH  X
    0FF8: 50 00    MOV   A,0x0
    0FFA: 7C 03 EC LCALL _PWM8_VASEN_WritePulseWidth
    0FFD: 20       POP   X
(0085) 	PWM8_OIKEA_WritePulseWidth((BYTE)pulse);
    0FFE: 52 FC    MOV   A,[X-4]
    1000: 10       PUSH  X
    1001: 7C 04 2F LCALL _PWM8_OIKEA_WritePulseWidth
    1004: 20       POP   X
    1005: 20       POP   X
    1006: 7F       RET   
FILE: Z:\robotti\Robor7\ROBOTT~1\ROBOTT~1\ultracontrol.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"
(0003) #include<stdio.h>
(0004) #include<stdlib.h>
(0005) 
(0006) //----------------------------------------------------
(0007)   //PORT0_6 TRIGGER
(0008)   //PORT0_7 ECHO
(0009) //
(0010) float distanceToCm = 0.033f;
(0011) 
(0012) //Init PGA AND ADC
(0013) void InitUA()
(0014) {
(0015) 	PGA_SetGain(PGA_G1_00);
_InitUA:
    1007: 10       PUSH  X
    1008: 50 F8    MOV   A,0xF8
    100A: 7C 04 6C LCALL _PGA_SetGain
(0016) 	PGA_Start(PGA_MEDPOWER);
    100D: 50 02    MOV   A,0x2
    100F: 7C 04 5E LCALL _PGA_SetPower|_PGA_Start|PGA_Start|PGA_SetPower
(0017) 	
(0018) 	ADCINC_Start(ADCINC_HIGHPOWER);
    1012: 50 03    MOV   A,0x3
    1014: 7C 07 B1 LCALL _ADCINC_Start
(0019) 	ADCINC_GetSamples(0);
    1017: 50 00    MOV   A,0x0
    1019: 7C 07 DB LCALL _ADCINC_GetSamples
    101C: 20       POP   X
    101D: 7F       RET   
(0020) }
(0021) 
(0022) 
(0023) //Return distance from Ultrasonic sensor in centimeters 
(0024) int getDataUA()
(0025) {
(0026) 	if(ADCINC_fIsDataAvailable() != 0)
_getDataUA:
    101E: 10       PUSH  X
    101F: 7C 08 01 LCALL _ADCINC_fIsDataAvailable
    1022: 20       POP   X
    1023: 39 00    CMP   A,0x0
    1025: A0 79    JZ    0x109F
(0027) 	{		
(0028) 		return (int)(ADCINC_iGetData() * distanceToCm);
    1027: 10       PUSH  X
    1028: 7C 08 17 LCALL _ADCINC_iGetData|_ADCINC_wGetData|ADCINC_wGetData
    102B: 5A 20    MOV   [__r0],X
    102D: 20       POP   X
    102E: 53 1D    MOV   [__r3],A
    1030: 5F 1E 20 MOV   [__r2],[__r0]
    1033: 47 1E 80 TST   [__r2],0x80
    1036: A0 09    JZ    0x1040
    1038: 55 1F FF MOV   [__r1],0xFF
    103B: 55 20 FF MOV   [__r0],0xFF
    103E: 80 07    JMP   0x1046
    1040: 55 1F 00 MOV   [__r1],0x0
    1043: 55 20 00 MOV   [__r0],0x0
    1046: 51 20    MOV   A,[__r0]
    1048: 08       PUSH  A
    1049: 51 1F    MOV   A,[__r1]
    104B: 08       PUSH  A
    104C: 51 1E    MOV   A,[__r2]
    104E: 08       PUSH  A
    104F: 51 1D    MOV   A,[__r3]
    1051: 08       PUSH  A
    1052: 7C 14 CA LCALL 0x14CA
    1055: 18       POP   A
    1056: 53 1D    MOV   [__r3],A
    1058: 18       POP   A
    1059: 53 1E    MOV   [__r2],A
    105B: 18       POP   A
    105C: 53 1F    MOV   [__r1],A
    105E: 18       POP   A
    105F: 53 20    MOV   [__r0],A
    1061: 51 0E    MOV   A,[distanceToCm]
    1063: 08       PUSH  A
    1064: 51 0F    MOV   A,[distanceToCm+1]
    1066: 08       PUSH  A
    1067: 51 10    MOV   A,[distanceToCm+2]
    1069: 08       PUSH  A
    106A: 51 11    MOV   A,[distanceToCm+3]
    106C: 08       PUSH  A
    106D: 51 20    MOV   A,[__r0]
    106F: 08       PUSH  A
    1070: 51 1F    MOV   A,[__r1]
    1072: 08       PUSH  A
    1073: 51 1E    MOV   A,[__r2]
    1075: 08       PUSH  A
    1076: 51 1D    MOV   A,[__r3]
    1078: 08       PUSH  A
    1079: 7C 13 38 LCALL 0x1338
    107C: 18       POP   A
    107D: 53 1D    MOV   [__r3],A
    107F: 18       POP   A
    1080: 53 1E    MOV   [__r2],A
    1082: 18       POP   A
    1083: 53 1F    MOV   [__r1],A
    1085: 18       POP   A
    1086: 38 FC    ADD   SP,0xFC
    1088: 08       PUSH  A
    1089: 51 1F    MOV   A,[__r1]
    108B: 08       PUSH  A
    108C: 51 1E    MOV   A,[__r2]
    108E: 08       PUSH  A
    108F: 51 1D    MOV   A,[__r3]
    1091: 08       PUSH  A
    1092: 7C 10 F3 LCALL 0x10F3
    1095: 18       POP   A
    1096: 53 1F    MOV   [__r1],A
    1098: 18       POP   A
    1099: 53 20    MOV   [__r0],A
    109B: 38 FE    ADD   SP,0xFE
    109D: 80 07    JMP   0x10A5
(0029) 	}
(0030) 	else 
(0031) 		return 0;
    109F: 55 1F 00 MOV   [__r1],0x0
    10A2: 55 20 00 MOV   [__r0],0x0
    10A5: 7F       RET   
(0032) }
(0033) 
(0034) //Sends Trigger pulse
(0035) void ControlTrigger(int *time)
(0036) {
_ControlTrigger:
  time                 --> X-5
    10A6: 10       PUSH  X
    10A7: 4F       MOV   X,SP
(0037) 	//Send Trigger Pulse every 10ms 
(0038) 	if (*time <= 1)
    10A8: 52 FC    MOV   A,[X-4]
    10AA: 53 1F    MOV   [__r1],A
    10AC: 3E 1F    MVI   A,[__r1]
    10AE: 53 20    MOV   [__r0],A
    10B0: 3E 1F    MVI   A,[__r1]
    10B2: 53 1F    MOV   [__r1],A
    10B4: 50 01    MOV   A,0x1
    10B6: 12 1F    SUB   A,[__r1]
    10B8: 51 20    MOV   A,[__r0]
    10BA: 31 80    XOR   A,0x80
    10BC: 53 14    MOV   [__rX],A
    10BE: 50 80    MOV   A,0x80
    10C0: 1A 14    SBB   A,[__rX]
    10C2: C0 06    JC    0x10C9
(0039) 	{
(0040) 		UATrig_Data_ADDR |= UATrig_MASK;
    10C4: 43 00 40 OR    REG[0x0],0x40
(0041) 	}
    10C7: 80 04    JMP   0x10CC
(0042) 	else 	
(0043) 		UATrig_Data_ADDR &= ~UATrig_MASK;
    10C9: 41 00 BF AND   REG[0x0],0xBF
(0044) 	
(0045) 	//Wait 60ms and send pulse again
(0046) 	if (*time >= 6)
    10CC: 52 FC    MOV   A,[X-4]
    10CE: 53 1F    MOV   [__r1],A
    10D0: 3E 1F    MVI   A,[__r1]
    10D2: 53 20    MOV   [__r0],A
    10D4: 3E 1F    MVI   A,[__r1]
    10D6: 11 06    SUB   A,0x6
    10D8: 51 20    MOV   A,[__r0]
    10DA: 31 80    XOR   A,0x80
    10DC: 19 80    SBB   A,0x80
    10DE: C0 0B    JC    0x10EA
(0047) 	{
(0048) 		*time = 0;
    10E0: 52 FC    MOV   A,[X-4]
    10E2: 53 1F    MOV   [__r1],A
    10E4: 50 00    MOV   A,0x0
    10E6: 3F 1F    MVI   [__r1],A
    10E8: 3F 1F    MVI   [__r1],A
(0049) 	}
    10EA: 20       POP   X
(0050) }
(0051) 
(0052) //Control PWM to move sensor    10EB: 7F       RET   
_itoa:
    1528: 10       PUSH  X
    1529: 4F       MOV   X,SP
    152A: 38 09    ADD   SP,0x9
    152C: 52 FA    MOV   A,[X-6]
    152E: 54 03    MOV   [X+3],A
    1530: 52 F9    MOV   A,[X-7]
    1532: 54 02    MOV   [X+2],A
    1534: 3D F9 00 CMP   [X-7],0x0
    1537: B0 22    JNZ   0x155A
    1539: 3D FA 00 CMP   [X-6],0x0
    153C: B0 1D    JNZ   0x155A
    153E: 52 FC    MOV   A,[X-4]
    1540: 53 1F    MOV   [__r1],A
    1542: 50 30    MOV   A,0x30
    1544: 3F 1F    MVI   [__r1],A
    1546: 52 FC    MOV   A,[X-4]
    1548: 01 01    ADD   A,0x1
    154A: 53 1F    MOV   [__r1],A
    154C: 50 00    MOV   A,0x0
    154E: 3F 1F    MVI   [__r1],A
    1550: 52 FC    MOV   A,[X-4]
    1552: 53 1F    MOV   [__r1],A
    1554: 52 FB    MOV   A,[X-5]
    1556: 53 20    MOV   [__r0],A
    1558: 81 48    JMP   0x16A1
    155A: 52 FA    MOV   A,[X-6]
    155C: 11 00    SUB   A,0x0
    155E: 52 F9    MOV   A,[X-7]
    1560: 31 80    XOR   A,0x80
    1562: 19 80    SBB   A,0x80
    1564: D0 26    JNC   0x158B
    1566: 3D F7 00 CMP   [X-9],0x0
    1569: B0 21    JNZ   0x158B
    156B: 3D F8 0A CMP   [X-8],0xA
    156E: B0 1C    JNZ   0x158B
    1570: 56 06 01 MOV   [X+6],0x1
    1573: 52 03    MOV   A,[X+3]
    1575: 73       CPL   A
    1576: 53 1F    MOV   [__r1],A
    1578: 52 02    MOV   A,[X+2]
    157A: 73       CPL   A
    157B: 53 20    MOV   [__r0],A
    157D: 51 1F    MOV   A,[__r1]
    157F: 01 01    ADD   A,0x1
    1581: 54 03    MOV   [X+3],A
    1583: 51 20    MOV   A,[__r0]
    1585: 09 00    ADC   A,0x0
    1587: 54 02    MOV   [X+2],A
    1589: 80 04    JMP   0x158E
    158B: 56 06 00 MOV   [X+6],0x0
    158E: 52 FC    MOV   A,[X-4]
    1590: 54 01    MOV   [X+1],A
    1592: 52 F7    MOV   A,[X-9]
    1594: 08       PUSH  A
    1595: 52 F8    MOV   A,[X-8]
    1597: 08       PUSH  A
    1598: 52 02    MOV   A,[X+2]
    159A: 08       PUSH  A
    159B: 52 03    MOV   A,[X+3]
    159D: 08       PUSH  A
    159E: 7C 10 EC LCALL 0x10EC
    15A1: 38 FE    ADD   SP,0xFE
    15A3: 18       POP   A
    15A4: 53 1F    MOV   [__r1],A
    15A6: 18       POP   A
    15A7: 53 20    MOV   [__r0],A
    15A9: 51 1F    MOV   A,[__r1]
    15AB: 54 08    MOV   [X+8],A
    15AD: 51 20    MOV   A,[__r0]
    15AF: 54 07    MOV   [X+7],A
    15B1: 50 09    MOV   A,0x9
    15B3: 13 08    SUB   A,[X+8]
    15B5: 52 07    MOV   A,[X+7]
    15B7: 31 80    XOR   A,0x80
    15B9: 53 14    MOV   [__rX],A
    15BB: 50 80    MOV   A,0x80
    15BD: 1A 14    SBB   A,[__rX]
    15BF: C0 1D    JC    0x15DD
    15C1: 52 01    MOV   A,[X+1]
    15C3: 53 1F    MOV   [__r1],A
    15C5: 52 00    MOV   A,[X+0]
    15C7: 53 20    MOV   [__r0],A
    15C9: 51 1F    MOV   A,[__r1]
    15CB: 01 01    ADD   A,0x1
    15CD: 54 01    MOV   [X+1],A
    15CF: 51 20    MOV   A,[__r0]
    15D1: 09 00    ADC   A,0x0
    15D3: 54 00    MOV   [X+0],A
    15D5: 52 08    MOV   A,[X+8]
    15D7: 01 30    ADD   A,0x30
    15D9: 3F 1F    MVI   [__r1],A
    15DB: 80 1B    JMP   0x15F7
    15DD: 52 01    MOV   A,[X+1]
    15DF: 53 1F    MOV   [__r1],A
    15E1: 52 00    MOV   A,[X+0]
    15E3: 53 20    MOV   [__r0],A
    15E5: 51 1F    MOV   A,[__r1]
    15E7: 01 01    ADD   A,0x1
    15E9: 54 01    MOV   [X+1],A
    15EB: 51 20    MOV   A,[__r0]
    15ED: 09 00    ADC   A,0x0
    15EF: 54 00    MOV   [X+0],A
    15F1: 52 08    MOV   A,[X+8]
    15F3: 01 57    ADD   A,0x57
    15F5: 3F 1F    MVI   [__r1],A
    15F7: 52 F7    MOV   A,[X-9]
    15F9: 08       PUSH  A
    15FA: 52 F8    MOV   A,[X-8]
    15FC: 08       PUSH  A
    15FD: 52 02    MOV   A,[X+2]
    15FF: 08       PUSH  A
    1600: 52 03    MOV   A,[X+3]
    1602: 08       PUSH  A
    1603: 7C 10 EC LCALL 0x10EC
    1606: 18       POP   A
    1607: 54 03    MOV   [X+3],A
    1609: 18       POP   A
    160A: 54 02    MOV   [X+2],A
    160C: 38 FE    ADD   SP,0xFE
    160E: 3D 02 00 CMP   [X+2],0x0
    1611: BF 80    JNZ   0x1592
    1613: 3D 03 00 CMP   [X+3],0x0
    1616: BF 7B    JNZ   0x1592
    1618: 3D 06 00 CMP   [X+6],0x0
    161B: A0 19    JZ    0x1635
    161D: 52 01    MOV   A,[X+1]
    161F: 53 1F    MOV   [__r1],A
    1621: 52 00    MOV   A,[X+0]
    1623: 53 20    MOV   [__r0],A
    1625: 51 1F    MOV   A,[__r1]
    1627: 01 01    ADD   A,0x1
    1629: 54 01    MOV   [X+1],A
    162B: 51 20    MOV   A,[__r0]
    162D: 09 00    ADC   A,0x0
    162F: 54 00    MOV   [X+0],A
    1631: 50 2D    MOV   A,0x2D
    1633: 3F 1F    MVI   [__r1],A
    1635: 52 01    MOV   A,[X+1]
    1637: 53 1F    MOV   [__r1],A
    1639: 52 00    MOV   A,[X+0]
    163B: 53 20    MOV   [__r0],A
    163D: 51 1F    MOV   A,[__r1]
    163F: 01 FF    ADD   A,0xFF
    1641: 54 01    MOV   [X+1],A
    1643: 51 20    MOV   A,[__r0]
    1645: 09 FF    ADC   A,0xFF
    1647: 54 00    MOV   [X+0],A
    1649: 50 00    MOV   A,0x0
    164B: 3F 1F    MVI   [__r1],A
    164D: 52 FC    MOV   A,[X-4]
    164F: 54 05    MOV   [X+5],A
    1651: 80 3D    JMP   0x168F
    1653: 52 05    MOV   A,[X+5]
    1655: 53 1F    MOV   [__r1],A
    1657: 3E 1F    MVI   A,[__r1]
    1659: 54 06    MOV   [X+6],A
    165B: 52 05    MOV   A,[X+5]
    165D: 53 1F    MOV   [__r1],A
    165F: 52 04    MOV   A,[X+4]
    1661: 53 20    MOV   [__r0],A
    1663: 51 1F    MOV   A,[__r1]
    1665: 01 01    ADD   A,0x1
    1667: 54 05    MOV   [X+5],A
    1669: 51 20    MOV   A,[__r0]
    166B: 09 00    ADC   A,0x0
    166D: 54 04    MOV   [X+4],A
    166F: 52 01    MOV   A,[X+1]
    1671: 53 1D    MOV   [__r3],A
    1673: 3E 1D    MVI   A,[__r3]
    1675: 3F 1F    MVI   [__r1],A
    1677: 52 01    MOV   A,[X+1]
    1679: 53 1F    MOV   [__r1],A
    167B: 52 00    MOV   A,[X+0]
    167D: 53 20    MOV   [__r0],A
    167F: 51 1F    MOV   A,[__r1]
    1681: 01 FF    ADD   A,0xFF
    1683: 54 01    MOV   [X+1],A
    1685: 51 20    MOV   A,[__r0]
    1687: 09 FF    ADC   A,0xFF
    1689: 54 00    MOV   [X+0],A
    168B: 52 06    MOV   A,[X+6]
    168D: 3F 1F    MVI   [__r1],A
    168F: 52 01    MOV   A,[X+1]
    1691: 53 20    MOV   [__r0],A
    1693: 52 05    MOV   A,[X+5]
    1695: 3A 20    CMP   A,[__r0]
    1697: CF BB    JC    0x1653
    1699: 52 FC    MOV   A,[X-4]
    169B: 53 1F    MOV   [__r1],A
    169D: 52 FB    MOV   A,[X-5]
    169F: 53 20    MOV   [__r0],A
    16A1: 38 F7    ADD   SP,0xF7
    16A3: 20       POP   X
    16A4: 7F       RET   
