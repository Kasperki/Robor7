                        .module ultracontrol.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./ultracontrol.c
                        .area data(ram, con, rel)
 0000                   .dbfile ./ultracontrol.c
 0000           _distanceToCm::
 0000                   .blkb 4
                        .area idata(rom,lit)
 0000 3D072B02          .word 0x3d07,0x2b02
                        .area data(ram, con, rel)
 0004                   .dbfile ./ultracontrol.c
 0004                   .dbfile Z:\AMMATI~2\Koodi\Robor7\ROBOTT~1\ROBOTT~1\ultracontrol.c
 0004                   .dbsym e distanceToCm _distanceToCm D
                        .area text(rom, con, rel)
 0000                   .dbfile Z:\AMMATI~2\Koodi\Robor7\ROBOTT~1\ROBOTT~1\ultracontrol.c
 0000                   .dbfunc e InitUAServo _InitUAServo fV
 0000           _InitUAServo::
 0000                   .dbline -1
 0000                   .dbline 17
 0000           ; #include <m8c.h>        // part specific constants and macros
 0000           ; #include "PSoCAPI.h"
 0000           ; #include<stdio.h>
 0000           ; #include<stdlib.h>
 0000           ; 
 0000           ; //----------------------------------------------------
 0000           ;   //PORT0_6 TRIGGER
 0000           ;   //PORT0_7 ECHO
 0000           ; //
 0000           ; 
 0000           ; //PORT0_4 SERVO PWM
 0000           ; 
 0000           ; float distanceToCm = 0.033f;
 0000           ; 
 0000           ; //Init PGA AND ADC
 0000           ; void InitUAServo(void)
 0000           ; {
 0000                   .dbline 18
 0000           ;       PWM8_SERVO_Start();
 0000 10                push X
 0001 7C0000            xcall _PWM8_SERVO_Start
 0004                   .dbline 19
 0004           ;       PWM8_SERVO_WritePulseWidth(15);
 0004 500F              mov A,15
 0006 7C0000            xcall _PWM8_SERVO_WritePulseWidth
 0009 20                pop X
 000A                   .dbline -2
 000A           L1:
 000A                   .dbline 0 ; func end
 000A 7F                ret
 000B                   .dbend
 000B                   .dbfunc e getDataUA _getDataUA fI
 000B           _getDataUA::
 000B                   .dbline -1
 000B                   .dbline 25
 000B           ; }
 000B           ; 
 000B           ; 
 000B           ; //Return distance from Ultrasonic sensor in centimeters 
 000B           ; int getDataUA(void)
 000B           ; {
 000B                   .dbline 32
 000B           ;       /*if(ADCINC_fIsDataAvailable() != 0)
 000B           ;       {               
 000B           ;               return (int)(ADCINC_iGetData() * distanceToCm);
 000B           ;       }
 000B           ;       else 
 000B           ;               return 0;*/
 000B           ;       return 0;
 000B 550000            mov [__r1],0
 000E 550000            mov [__r0],0
 0011                   .dbline -2
 0011           L2:
 0011                   .dbline 0 ; func end
 0011 7F                ret
 0012                   .dbend
 0012                   .dbfunc e ControlTrigger _ControlTrigger fV
 0012           ;           time -> X-5
 0012           _ControlTrigger::
 0012                   .dbline -1
 0012 10                push X
 0013 4F                mov X,SP
 0014                   .dbline 37
 0014           ; }
 0014           ; 
 0014           ; //Sends Trigger pulse
 0014           ; void ControlTrigger(int *time)
 0014           ; {             
 0014                   .dbline 39
 0014           ;       //Wait 60ms and send pulse again
 0014           ;       if (*time >= 80)
 0014 52FC              mov A,[X-4]
 0016 5300              mov [__r1],A
 0018 3E00              mvi A,[__r1]
 001A 5300              mov [__r0],A
 001C 3E00              mvi A,[__r1]
 001E 1150              sub A,80
 0020 5100              mov A,[__r0]
 0022 3180              xor A,-128
 0024 1980              sbb A,(0 ^ 0x80)
 0026 C00B              jc L4
 0028           X0:
 0028                   .dbline 41
 0028           ;       {
 0028           ;               *time = 0;
 0028                   .dbline 41
 0028 52FC              mov A,[X-4]
 002A 5300              mov [__r1],A
 002C 5000              mov A,0
 002E 3F00              mvi [__r1],A
 0030 3F00              mvi [__r1],A
 0032                   .dbline 42
 0032           ;       }
 0032           L4:
 0032                   .dbline 45
 0032           ;       
 0032           ;       //Send Trigger Pulse every 1ms 
 0032           ;       if (*time <= 1)
 0032 52FC              mov A,[X-4]
 0034 5300              mov [__r1],A
 0036 3E00              mvi A,[__r1]
 0038 5300              mov [__r0],A
 003A 3E00              mvi A,[__r1]
 003C 5300              mov [__r1],A
 003E 5001              mov A,1
 0040 1200              sub A,[__r1]
 0042 5100              mov A,[__r0]
 0044 3180              xor A,-128
 0046 5300              mov [__rX],A
 0048 5080              mov A,(0 ^ 0x80)
 004A 1A00              sbb A,[__rX]
 004C C006              jc L6
 004E           X1:
 004E                   .dbline 47
 004E           ;       {
 004E           ;               UATrig_Data_ADDR |= UATrig_MASK;
 004E                   .dbline 47
 004E 430040            or REG[0],64
 0051                   .dbline 48
 0051           ;       }
 0051 8004              xjmp L7
 0053           L6:
 0053                   .dbline 50
 0053           ;       else    
 0053           ;               UATrig_Data_ADDR &= ~UATrig_MASK;
 0053 4100BF            and REG[0],-65
 0056           L7:
 0056                   .dbline -2
 0056           L3:
 0056 20                pop X
 0057                   .dbline 0 ; func end
 0057 7F                ret
 0058                   .dbsym l time -5 pI
 0058                   .dbend
 0058                   .dbfunc e ControlServo _ControlServo fV
 0058           ;          pulse -> X-5
 0058           _ControlServo::
 0058                   .dbline -1
 0058 10                push X
 0059 4F                mov X,SP
 005A                   .dbline 56
 005A           ;       
 005A           ; }
 005A           ; 
 005A           ; //Control PWM to move sensor
 005A           ; void ControlServo(int pulse)
 005A           ; {
 005A                   .dbline 57
 005A           ;       PWM8_SERVO_WritePulseWidth((BYTE)pulse);        
 005A 52FC              mov A,[X-4]
 005C 10                push X
 005D 7C0000            xcall _PWM8_SERVO_WritePulseWidth
 0060 20                pop X
 0061                   .dbline -2
 0061           L8:
 0061 20                pop X
 0062                   .dbline 0 ; func end
 0062 7F                ret
 0063                   .dbsym l pulse -5 I
 0063                   .dbend
