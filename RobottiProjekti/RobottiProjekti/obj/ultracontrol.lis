                        .module ultracontrol.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./ultracontrol.c
                        .area data(ram, con, rel)
 0000                   .dbfile ./ultracontrol.c
 0000           _distanceToCm::
 0000                   .blkb 4
                        .area idata(rom,lit)
 0000 3D072B02          .word 0x3d07,0x2b02
                        .area data(ram, con, rel)
 0004                   .dbfile ./ultracontrol.c
 0004                   .dbfile Z:\robotti\Robor7\ROBOTT~1\ROBOTT~1\ultracontrol.c
 0004                   .dbsym e distanceToCm _distanceToCm D
                        .area text(rom, con, rel)
 0000                   .dbfile Z:\robotti\Robor7\ROBOTT~1\ROBOTT~1\ultracontrol.c
 0000                   .dbfunc e InitUAServo _InitUAServo fV
 0000           _InitUAServo::
 0000                   .dbline -1
 0000                   .dbline 18
 0000           ; #include <m8c.h>        // part specific constants and macros
 0000           ; #include "PSoCAPI.h"
 0000           ; #include<stdio.h>
 0000           ; #include<stdlib.h>
 0000           ; #include "delay.h"
 0000           ; 
 0000           ; //----------------------------------------------------
 0000           ;   //PORT0_6 TRIGGER
 0000           ;   //PORT0_7 ECHO
 0000           ; //
 0000           ; 
 0000           ; //PORT0_4 SERVO PWM
 0000           ; 
 0000           ; float distanceToCm = 0.033f;
 0000           ; 
 0000           ; //Init PGA AND ADC
 0000           ; void InitUAServo(void)
 0000           ; {
 0000                   .dbline -2
 0000           L1:
 0000                   .dbline 0 ; func end
 0000 7F                ret
 0001                   .dbend
 0001                   .dbfunc e getDataUA _getDataUA fI
 0001           _getDataUA::
 0001                   .dbline -1
 0001                   .dbline 25
 0001           ; 
 0001           ; }
 0001           ; 
 0001           ; 
 0001           ; //Return distance from Ultrasonic sensor in centimeters 
 0001           ; int getDataUA(void)
 0001           ; {
 0001                   .dbline 32
 0001           ;       /*if(ADCINC_fIsDataAvailable() != 0)
 0001           ;       {               
 0001           ;               return (int)(ADCINC_iGetData() * distanceToCm);
 0001           ;       }
 0001           ;       else 
 0001           ;               return 0;*/
 0001           ;       return 0;
 0001 550000            mov [__r1],0
 0004 550000            mov [__r0],0
 0007                   .dbline -2
 0007           L2:
 0007                   .dbline 0 ; func end
 0007 7F                ret
 0008                   .dbend
 0008                   .dbfunc e ControlTrigger _ControlTrigger fV
 0008           ;           time -> X-5
 0008           _ControlTrigger::
 0008                   .dbline -1
 0008 10                push X
 0009 4F                mov X,SP
 000A                   .dbline 37
 000A           ; }
 000A           ; 
 000A           ; //Sends Trigger pulse
 000A           ; void ControlTrigger(int *time)
 000A           ; {             
 000A                   .dbline 39
 000A           ;       //Wait 60ms and send pulse again
 000A           ;       if (*time >= 80)
 000A 52FC              mov A,[X-4]
 000C 5300              mov [__r1],A
 000E 3E00              mvi A,[__r1]
 0010 5300              mov [__r0],A
 0012 3E00              mvi A,[__r1]
 0014 1150              sub A,80
 0016 5100              mov A,[__r0]
 0018 3180              xor A,-128
 001A 1980              sbb A,(0 ^ 0x80)
 001C C00B              jc L4
 001E           X0:
 001E                   .dbline 41
 001E           ;       {
 001E           ;               *time = 0;
 001E                   .dbline 41
 001E 52FC              mov A,[X-4]
 0020 5300              mov [__r1],A
 0022 5000              mov A,0
 0024 3F00              mvi [__r1],A
 0026 3F00              mvi [__r1],A
 0028                   .dbline 42
 0028           ;       }
 0028           L4:
 0028                   .dbline 45
 0028           ;       
 0028           ;       //Send Trigger Pulse every 1ms 
 0028           ;       if (*time <= 1)
 0028 52FC              mov A,[X-4]
 002A 5300              mov [__r1],A
 002C 3E00              mvi A,[__r1]
 002E 5300              mov [__r0],A
 0030 3E00              mvi A,[__r1]
 0032 5300              mov [__r1],A
 0034 5001              mov A,1
 0036 1200              sub A,[__r1]
 0038 5100              mov A,[__r0]
 003A 3180              xor A,-128
 003C 5300              mov [__rX],A
 003E 5080              mov A,(0 ^ 0x80)
 0040 1A00              sbb A,[__rX]
 0042 C006              jc L6
 0044           X1:
 0044                   .dbline 47
 0044           ;       {
 0044           ;               UATrig_Data_ADDR |= UATrig_MASK;
 0044                   .dbline 47
 0044 430040            or REG[0],64
 0047                   .dbline 48
 0047           ;       }
 0047 8004              xjmp L7
 0049           L6:
 0049                   .dbline 50
 0049           ;       else    
 0049           ;               UATrig_Data_ADDR &= ~UATrig_MASK;
 0049 4100BF            and REG[0],-65
 004C           L7:
 004C                   .dbline -2
 004C           L3:
 004C 20                pop X
 004D                   .dbline 0 ; func end
 004D 7F                ret
 004E                   .dbsym l time -5 pI
 004E                   .dbend
 004E                   .dbfunc e sendTrigPulse _sendTrigPulse fV
 004E           ;      ultraData -> X-5
 004E           _sendTrigPulse::
 004E                   .dbline -1
 004E 10                push X
 004F 4F                mov X,SP
 0050                   .dbline 55
 0050           ;       
 0050           ; }
 0050           ; 
 0050           ; void sendTrigPulse(int *ultraData)
 0050           ; {     
 0050                   .dbline 56
 0050           ;       *ultraData = 0;
 0050 52FC              mov A,[X-4]
 0052 5300              mov [__r1],A
 0054 5000              mov A,0
 0056 3F00              mvi [__r1],A
 0058 3F00              mvi [__r1],A
 005A                   .dbline 57
 005A           ;       UATrig_Data_ADDR |= UATrig_MASK;        
 005A 430040            or REG[0],64
 005D                   .dbline 58
 005D           ;       Delay50u();
 005D 10                push X
 005E 7C0000            xcall _Delay50u
 0061 20                pop X
 0062                   .dbline 59
 0062           ;       UATrig_Data_ADDR &= ~UATrig_MASK;
 0062 4100BF            and REG[0],-65
 0065                   .dbline 60
 0065           ;       Delay10msTimes(7);
 0065 10                push X
 0066 5007              mov A,7
 0068 7C0000            xcall _Delay10msTimes
 006B 20                pop X
 006C                   .dbline -2
 006C           L8:
 006C 20                pop X
 006D                   .dbline 0 ; func end
 006D 7F                ret
 006E                   .dbsym l ultraData -5 pI
 006E                   .dbend
