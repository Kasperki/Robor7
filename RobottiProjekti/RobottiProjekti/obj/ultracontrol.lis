                        .module ultracontrol.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./ultracontrol.c
                        .area data(ram, con, rel)
 0000                   .dbfile ./ultracontrol.c
 0000           _distanceToCm::
 0000                   .blkb 4
                        .area idata(rom,lit)
 0000 3D072B02          .word 0x3d07,0x2b02
                        .area data(ram, con, rel)
 0004                   .dbfile ./ultracontrol.c
 0004                   .dbfile Z:\AMMATI~2\Koodi\Robor7\ROBOTT~1\ROBOTT~1\ultracontrol.c
 0004                   .dbsym e distanceToCm _distanceToCm D
                        .area text(rom, con, rel)
 0000                   .dbfile Z:\AMMATI~2\Koodi\Robor7\ROBOTT~1\ROBOTT~1\ultracontrol.c
 0000                   .dbfunc e InitUAServo _InitUAServo fV
 0000           _InitUAServo::
 0000                   .dbline -1
 0000                   .dbline 18
 0000           ; #include <m8c.h>        // part specific constants and macros
 0000           ; #include "PSoCAPI.h"
 0000           ; #include<stdio.h>
 0000           ; #include<stdlib.h>
 0000           ; #include "delay.h"
 0000           ; 
 0000           ; //----------------------------------------------------
 0000           ;   //PORT0_6 TRIGGER
 0000           ;   //PORT0_7 ECHO
 0000           ; //
 0000           ; 
 0000           ; //PORT0_4 SERVO PWM
 0000           ; 
 0000           ; float distanceToCm = 0.033f;
 0000           ; 
 0000           ; //Init PGA AND ADC
 0000           ; void InitUAServo(void)
 0000           ; {
 0000                   .dbline 19
 0000           ;       PWM8_SERVO_Start();
 0000 10                push X
 0001 7C0000            xcall _PWM8_SERVO_Start
 0004                   .dbline 20
 0004           ;       PWM8_SERVO_WritePulseWidth(33);
 0004 5700              mov X,0
 0006 5021              mov A,33
 0008 7C0000            xcall _PWM8_SERVO_WritePulseWidth
 000B 20                pop X
 000C                   .dbline -2
 000C           L1:
 000C                   .dbline 0 ; func end
 000C 7F                ret
 000D                   .dbend
 000D                   .dbfunc e getDataUA _getDataUA fI
 000D           _getDataUA::
 000D                   .dbline -1
 000D                   .dbline 26
 000D           ; }
 000D           ; 
 000D           ; 
 000D           ; //Return distance from Ultrasonic sensor in centimeters 
 000D           ; int getDataUA(void)
 000D           ; {
 000D                   .dbline 33
 000D           ;       /*if(ADCINC_fIsDataAvailable() != 0)
 000D           ;       {               
 000D           ;               return (int)(ADCINC_iGetData() * distanceToCm);
 000D           ;       }
 000D           ;       else 
 000D           ;               return 0;*/
 000D           ;       return 0;
 000D 550000            mov [__r1],0
 0010 550000            mov [__r0],0
 0013                   .dbline -2
 0013           L2:
 0013                   .dbline 0 ; func end
 0013 7F                ret
 0014                   .dbend
 0014                   .dbfunc e ControlTrigger _ControlTrigger fV
 0014           ;           time -> X-5
 0014           _ControlTrigger::
 0014                   .dbline -1
 0014 10                push X
 0015 4F                mov X,SP
 0016                   .dbline 38
 0016           ; }
 0016           ; 
 0016           ; //Sends Trigger pulse
 0016           ; void ControlTrigger(int *time)
 0016           ; {             
 0016                   .dbline 40
 0016           ;       //Wait 60ms and send pulse again
 0016           ;       if (*time >= 80)
 0016 52FC              mov A,[X-4]
 0018 5300              mov [__r1],A
 001A 3E00              mvi A,[__r1]
 001C 5300              mov [__r0],A
 001E 3E00              mvi A,[__r1]
 0020 1150              sub A,80
 0022 5100              mov A,[__r0]
 0024 3180              xor A,-128
 0026 1980              sbb A,(0 ^ 0x80)
 0028 C00B              jc L4
 002A           X0:
 002A                   .dbline 42
 002A           ;       {
 002A           ;               *time = 0;
 002A                   .dbline 42
 002A 52FC              mov A,[X-4]
 002C 5300              mov [__r1],A
 002E 5000              mov A,0
 0030 3F00              mvi [__r1],A
 0032 3F00              mvi [__r1],A
 0034                   .dbline 43
 0034           ;       }
 0034           L4:
 0034                   .dbline 46
 0034           ;       
 0034           ;       //Send Trigger Pulse every 1ms 
 0034           ;       if (*time <= 1)
 0034 52FC              mov A,[X-4]
 0036 5300              mov [__r1],A
 0038 3E00              mvi A,[__r1]
 003A 5300              mov [__r0],A
 003C 3E00              mvi A,[__r1]
 003E 5300              mov [__r1],A
 0040 5001              mov A,1
 0042 1200              sub A,[__r1]
 0044 5100              mov A,[__r0]
 0046 3180              xor A,-128
 0048 5300              mov [__rX],A
 004A 5080              mov A,(0 ^ 0x80)
 004C 1A00              sbb A,[__rX]
 004E C006              jc L6
 0050           X1:
 0050                   .dbline 48
 0050           ;       {
 0050           ;               UATrig_Data_ADDR |= UATrig_MASK;
 0050                   .dbline 48
 0050 430040            or REG[0],64
 0053                   .dbline 49
 0053           ;       }
 0053 8004              xjmp L7
 0055           L6:
 0055                   .dbline 51
 0055           ;       else    
 0055           ;               UATrig_Data_ADDR &= ~UATrig_MASK;
 0055 4100BF            and REG[0],-65
 0058           L7:
 0058                   .dbline -2
 0058           L3:
 0058 20                pop X
 0059                   .dbline 0 ; func end
 0059 7F                ret
 005A                   .dbsym l time -5 pI
 005A                   .dbend
 005A                   .dbfunc e sendTrigPulse _sendTrigPulse fV
 005A           ;      ultraData -> X-5
 005A           _sendTrigPulse::
 005A                   .dbline -1
 005A 10                push X
 005B 4F                mov X,SP
 005C                   .dbline 56
 005C           ;       
 005C           ; }
 005C           ; 
 005C           ; void sendTrigPulse(int *ultraData)
 005C           ; {     
 005C                   .dbline 57
 005C           ;       *ultraData = 0;
 005C 52FC              mov A,[X-4]
 005E 5300              mov [__r1],A
 0060 5000              mov A,0
 0062 3F00              mvi [__r1],A
 0064 3F00              mvi [__r1],A
 0066                   .dbline 58
 0066           ;       UATrig_Data_ADDR |= UATrig_MASK;        
 0066 430040            or REG[0],64
 0069                   .dbline 59
 0069           ;       Delay50u();
 0069 10                push X
 006A 7C0000            xcall _Delay50u
 006D 20                pop X
 006E                   .dbline 60
 006E           ;       UATrig_Data_ADDR &= ~UATrig_MASK;
 006E 4100BF            and REG[0],-65
 0071                   .dbline 61
 0071           ;       Delay10msTimes(7);
 0071 10                push X
 0072 5007              mov A,7
 0074 7C0000            xcall _Delay10msTimes
 0077 20                pop X
 0078                   .dbline -2
 0078           L8:
 0078 20                pop X
 0079                   .dbline 0 ; func end
 0079 7F                ret
 007A                   .dbsym l ultraData -5 pI
 007A                   .dbend
 007A                   .dbfunc e ControlServo _ControlServo fV
 007A           ;          pulse -> X-5
 007A           _ControlServo::
 007A                   .dbline -1
 007A 10                push X
 007B 4F                mov X,SP
 007C                   .dbline 66
 007C           ; }     
 007C           ; 
 007C           ; //Control PWM to move sensor
 007C           ; void ControlServo(int pulse)
 007C           ; {
 007C                   .dbline 67
 007C           ;       PWM8_SERVO_WritePulseWidth((BYTE)pulse);        
 007C 52FC              mov A,[X-4]
 007E 10                push X
 007F 5700              mov X,0
 0081 7C0000            xcall _PWM8_SERVO_WritePulseWidth
 0084 20                pop X
 0085                   .dbline -2
 0085           L9:
 0085 20                pop X
 0086                   .dbline 0 ; func end
 0086 7F                ret
 0087                   .dbsym l pulse -5 I
 0087                   .dbend
