                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area data(ram, con, rel)
 0000                   .dbfile ./main.c
 0000           _timeT::
 0000                   .blkb 2
                        .area idata(rom,lit)
 0000 0000              .word 0
                        .area data(ram, con, rel)
 0002                   .dbfile ./main.c
 0002                   .dbfile Z:\AMMATI~2\Koodi\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0002                   .dbsym e timeT _timeT I
 0002           _timeUltra::
 0002                   .blkb 2
                        .area idata(rom,lit)
 0002 0000              .word 0
                        .area data(ram, con, rel)
 0004                   .dbfile Z:\AMMATI~2\Koodi\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0004                   .dbsym e timeUltra _timeUltra I
 0004           _timeUltraRead::
 0004                   .blkb 2
                        .area idata(rom,lit)
 0004 0000              .word 0
                        .area data(ram, con, rel)
 0006                   .dbfile Z:\AMMATI~2\Koodi\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0006                   .dbsym e timeUltraRead _timeUltraRead I
 0006           _milliT::
 0006                   .blkb 4
                        .area idata(rom,lit)
 0006 00000000          .word 0,0
                        .area data(ram, con, rel)
 000A                   .dbfile Z:\AMMATI~2\Koodi\Robor7\ROBOTT~1\ROBOTT~1\main.c
 000A                   .dbsym e milliT _milliT l
 000A           _distanceCM::
 000A                   .blkb 2
                        .area idata(rom,lit)
 000A 0000              .word 0
                        .area data(ram, con, rel)
 000C                   .dbfile Z:\AMMATI~2\Koodi\Robor7\ROBOTT~1\ROBOTT~1\main.c
 000C                   .dbsym e distanceCM _distanceCM I
 000C           _vaihe::
 000C                   .blkb 2
                        .area idata(rom,lit)
 000C 0000              .word 0
                        .area data(ram, con, rel)
 000E                   .dbfile Z:\AMMATI~2\Koodi\Robor7\ROBOTT~1\ROBOTT~1\main.c
 000E                   .dbsym e vaihe _vaihe I
 000E           _timeForward::
 000E                   .blkb 2
                        .area idata(rom,lit)
 000E 0032              .word 50
                        .area data(ram, con, rel)
 0010                   .dbfile Z:\AMMATI~2\Koodi\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0010                   .dbsym e timeForward _timeForward I
 0010           _turnTime::
 0010                   .blkb 2
                        .area idata(rom,lit)
 0010 0037              .word 55
                        .area data(ram, con, rel)
 0012                   .dbfile Z:\AMMATI~2\Koodi\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0012                   .dbsym e turnTime _turnTime I
 0012           _timeRobotWidth::
 0012                   .blkb 2
                        .area idata(rom,lit)
 0012 000F              .word 15
                        .area data(ram, con, rel)
 0014                   .dbfile Z:\AMMATI~2\Koodi\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0014                   .dbsym e timeRobotWidth _timeRobotWidth I
 0014           _ultraData::
 0014                   .blkb 2
                        .area idata(rom,lit)
 0014 0000              .word 0
                        .area data(ram, con, rel)
 0016                   .dbfile Z:\AMMATI~2\Koodi\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0016                   .dbsym e ultraData _ultraData I
                        .area text(rom, con, rel)
 0000                   .dbfile Z:\AMMATI~2\Koodi\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0000                   .dbfunc e main _main fV
 0000           _main::
 0000                   .dbline -1
 0000                   .dbline 42
 0000           ; //----------------------------------------------------------------------------
 0000           ; // Robotti Projekti
 0000           ; // Robor7 @ 2014
 0000           ; // Kasper Kiiskinen, Henri Sinokki, Eero Holopainen, Mikko Liira, Kari Lampi
 0000           ; //----------------------------------------------------------------------------
 0000           ; 
 0000           ; #include <m8c.h>        // part specific constants and macros
 0000           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0000           ; #include<stdio.h>
 0000           ; #include<stdlib.h>
 0000           ; #include "delay.h"
 0000           ; 
 0000           ; //Omat header filet
 0000           ; #include "MotorControl.h"
 0000           ; #include "UltraControl.h"
 0000           ; //#include "GyroControl.h"
 0000           ; 
 0000           ; #pragma interrupt_handler PinInterrupt
 0000           ; 
 0000           ; void Delay(int);
 0000           ; void TestLoop(void);
 0000           ; void CounterISR(void);
 0000           ; 
 0000           ; //Kellot
 0000           ; volatile int timeT = 0;
 0000           ; int timeUltra = 0,timeUltraRead = 0;
 0000           ; volatile unsigned long int milliT = 0;
 0000           ; 
 0000           ; //Test
 0000           ; volatile int distanceCM = 0;
 0000           ; char buffer[10];
 0000           ; 
 0000           ; int vaihe = 0;
 0000           ; int left, right;
 0000           ; int timeForward = 50; //.... 4m täydellä vauhdilla 3.7s
 0000           ; int turnTime = 55;       //.... 90 asteen käännökseen meneväaika
 0000           ; int timeRobotWidth = 15; //.... Robotin leveyteen menevä aika ?
 0000           ; int ultraData = 0; //Ultraääni anturrista saatava arvo millisekunteina pitää jakaa jollain että saadaan senttimerejä
 0000           ; 
 0000           ; //Main Method
 0000           ; void main(void)
 0000           ; {
 0000                   .dbline 46
 0000           ;       //Init**************************
 0000           ;       
 0000           ;       //Enables Global Interrupts
 0000           ;       M8C_EnableGInt; 
 0000 7101                      or  F, 01h
 0002           
 0002                   .dbline 47
 0002           ;       M8C_EnableIntMask(INT_MSK0, INT_MSK0_GPIO);     //VITTU
 0002 43E020            or REG[0xe0],32
 0005                   .dbline 50
 0005           ;       
 0005           ;       //Start LCD
 0005           ;       LCD_Start();
 0005 10                push X
 0006 7C0000            xcall _LCD_Start
 0009                   .dbline 52
 0009           ;       //InitializeTimer
 0009           ;       Timer8_Start();
 0009 7C0000            xcall _Timer8_Start
 000C                   .dbline 53
 000C           ;       Timer8_EnableInt();
 000C 7C0000            xcall _Timer8_EnableInt
 000F                   .dbline 55
 000F           ;               
 000F           ;       Counter16_1_EnableInt();
 000F 7C0000            xcall _Counter16_1_EnableInt
 0012                   .dbline 56
 0012           ;       Counter16_1_Start();
 0012 7C0000            xcall _Counter16_1_Start
 0015 20                pop X
 0016                   .dbline 59
 0016           ;       
 0016           ;       //Start Motor PWMs
 0016           ;       InitPWM();
 0016 7C0000            xcall _InitPWM
 0019                   .dbline 62
 0019           ;       
 0019           ;       //Init Servo
 0019           ;       InitUAServo();
 0019 7C0000            xcall _InitUAServo
 001C                   .dbline 64
 001C           ;               
 001C           ;       Delay10msTimes(50);
 001C 10                push X
 001D 5032              mov A,50
 001F 7C0000            xcall _Delay10msTimes
 0022 20                pop X
 0023                   .dbline 65
 0023           ;       vaihe = 1;
 0023 550D01            mov [_vaihe+1],1
 0026 550C00            mov [_vaihe],0
 0029 8061              xjmp L3
 002B           L2:
 002B                   .dbline 73
 002B           ;       
 002B           ;       //Testink
 002B           ;       //TestLoop();
 002B           ; 
 002B           ;       //MainLoop**********
 002B           ;       //***********************
 002B           ;       while(1)
 002B           ;       {
 002B                   .dbline 75
 002B           ;               // Eteenpäin ajo vaihe, ajetaan eteenpäin niin pitkään kunnes ollaan 20cm päästä seinästä.
 002B           ;               if( vaihe == 1 )
 002B 3C0C00            cmp [_vaihe],0
 002E B047              jnz L5
 0030 3C0D01            cmp [_vaihe+1],1
 0033 B042              jnz L5
 0035           X1:
 0035                   .dbline 77
 0035           ;               {       
 0035           ;                       sendTrigPulse(&ultraData);
 0035                   .dbline 77
 0035 5014              mov A,>_ultraData
 0037 08                push A
 0038 5014              mov A,<_ultraData
 003A 08                push A
 003B 7C0000            xcall _sendTrigPulse
 003E 38FE              add SP,-2
 0040                   .dbline 79
 0040           ;                       
 0040           ;                       distanceCM = ultraData * 2;     
 0040 5F0015            mov [__r1],[_ultraData+1]
 0043 5F0014            mov [__r0],[_ultraData]
 0046 6500              asl [__r1]
 0048 6B00              rlc [__r0]
 004A 5F0B00            mov [_distanceCM+1],[__r1]
 004D 5F0A00            mov [_distanceCM],[__r0]
 0050                   .dbline 81
 0050           ;                       
 0050           ;                       if (distanceCM > 30)
 0050 501E              mov A,30
 0052 120B              sub A,[_distanceCM+1]
 0054 510A              mov A,[_distanceCM]
 0056 3180              xor A,-128
 0058 5300              mov [__rX],A
 005A 5080              mov A,(0 ^ 0x80)
 005C 1A00              sbb A,[__rX]
 005E D00E              jnc L7
 0060           X2:
 0060                   .dbline 83
 0060           ;                       {       
 0060           ;                               MoveForward(HALF_SPEED);
 0060                   .dbline 83
 0060 5000              mov A,0
 0062 08                push A
 0063 5050              mov A,80
 0065 08                push A
 0066 7C0000            xcall _MoveForward
 0069 38FE              add SP,-2
 006B                   .dbline 84
 006B           ;                       }
 006B 800A              xjmp L8
 006D           L7:
 006D                   .dbline 86
 006D           ;                       else 
 006D           ;                       {
 006D                   .dbline 87
 006D           ;                               Stop();
 006D 7C0000            xcall _Stop
 0070                   .dbline 88
 0070           ;                               vaihe = 2;
 0070 550D02            mov [_vaihe+1],2
 0073 550C00            mov [_vaihe],0
 0076                   .dbline 89
 0076           ;                       }
 0076           L8:
 0076                   .dbline 90
 0076           ;               }
 0076           L5:
 0076                   .dbline 92
 0076           ;               // Vaiheessa ollaan pysähtyneenä ja katsomme vasemmalle ja oikealle ja teemme päätöksen kumpaan suuntaan käännymme.
 0076           ;               if ( vaihe == 2 )
 0076 3C0C00            cmp [_vaihe],0
 0079 B011              jnz L9
 007B 3C0D02            cmp [_vaihe+1],2
 007E B00C              jnz L9
 0080           X3:
 0080                   .dbline 94
 0080           ;               {
 0080           ;                               ControlServo(SERVO_LEFT);
 0080                   .dbline 94
 0080 5000              mov A,0
 0082 08                push A
 0083 5019              mov A,25
 0085 08                push A
 0086 7C0000            xcall _ControlServo
 0089 38FE              add SP,-2
 008B                   .dbline 96
 008B           ;               
 008B           ;               }
 008B           L9:
 008B                   .dbline 99
 008B           ; 
 008B           ;               
 008B           ;       }
 008B           L3:
 008B                   .dbline 72
 008B 8F9F              xjmp L2
 008D           X0:
 008D                   .dbline -2
 008D           L1:
 008D                   .dbline 0 ; func end
 008D 8FFF              jmp .
 008F                   .dbend
 008F                   .dbfunc e TimerInterrupt _TimerInterrupt fV
 008F           _TimerInterrupt::
 008F                   .dbline -1
 008F                   .dbline 107
 008F           ; }
 008F           ; 
 008F           ; 
 008F           ; 
 008F           ; //Palauttaa eerolle millisekunnit siitä asti ku psoc on käynnistytnyt
 008F           ; //Kutsutaan joka 0.001s = 1ms välein.
 008F           ; void TimerInterrupt(void)
 008F           ; {
 008F                   .dbline 108
 008F           ;   timeT++;
 008F 7601              inc [_timeT+1]
 0091 0E0000            adc [_timeT],0
 0094                   .dbline 111
 0094           ;       
 0094           ;   //DO NOT TOUCH
 0094           ;   milliT++;
 0094 060901            add [_milliT+3],1
 0097 0E0800            adc [_milliT+2],0
 009A 0E0700            adc [_milliT+1],0
 009D 0E0600            adc [_milliT],0
 00A0                   .dbline -2
 00A0           L11:
 00A0                   .dbline 0 ; func end
 00A0 7F                ret
 00A1                   .dbend
 00A1                   .dbfunc e CounterISR _CounterISR fV
 00A1           _CounterISR::
 00A1                   .dbline -1
 00A1                   .dbline 118
 00A1           ; }
 00A1           ; 
 00A1           ; 
 00A1           ; 
 00A1           ; //Counter INTERRUPT
 00A1           ; void CounterISR(void)
 00A1           ; {
 00A1                   .dbline 119
 00A1           ;       ultraData++;
 00A1 7615              inc [_ultraData+1]
 00A3 0E1400            adc [_ultraData],0
 00A6                   .dbline -2
 00A6           L12:
 00A6                   .dbline 0 ; func end
 00A6 7F                ret
 00A7                   .dbend
 00A7                   .dbfunc e PinInterrupt _PinInterrupt fV
 00A7           _PinInterrupt::
 00A7                   .dbline -1
 00A7 08                push A
 00A8                   .dbline 123
 00A8           ; }
 00A8           ; 
 00A8           ; // Pin interrupt
 00A8           ; void PinInterrupt(void){}
 00A8                   .dbline -2
 00A8           L13:
 00A8 18                pop A
 00A9                   .dbline 0 ; func end
 00A9 7E                reti
 00AA                   .dbend
 00AA                   .dbfunc e TestLoop _TestLoop fV
 00AA           _TestLoop::
 00AA                   .dbline -1
 00AA                   .dbline 129
 00AA           ; 
 00AA           ; 
 00AA           ; 
 00AA           ; //For Testing
 00AA           ; void TestLoop(void)
 00AA           ; {
 00AA 8055              xjmp L16
 00AC           L15:
 00AC                   .dbline 131
 00AC           ;       while(1)
 00AC           ;       {       
 00AC                   .dbline 132
 00AC           ;               sendTrigPulse(&ultraData);
 00AC 5014              mov A,>_ultraData
 00AE 08                push A
 00AF 5014              mov A,<_ultraData
 00B1 08                push A
 00B2 7C0000            xcall _sendTrigPulse
 00B5                   .dbline 134
 00B5           ;               
 00B5           ;               distanceCM = ultraData * 2;             
 00B5 5F0015            mov [__r1],[_ultraData+1]
 00B8 5F0014            mov [__r0],[_ultraData]
 00BB 6500              asl [__r1]
 00BD 6B00              rlc [__r0]
 00BF 5F0B00            mov [_distanceCM+1],[__r1]
 00C2 5F0A00            mov [_distanceCM],[__r0]
 00C5                   .dbline 136
 00C5           ;                               
 00C5           ;               itoa(buffer,distanceCM,10);
 00C5 5000              mov A,0
 00C7 08                push A
 00C8 500A              mov A,10
 00CA 08                push A
 00CB 510A              mov A,[_distanceCM]
 00CD 08                push A
 00CE 510B              mov A,[_distanceCM+1]
 00D0 08                push A
 00D1 5004              mov A,>_buffer
 00D3 08                push A
 00D4 5004              mov A,<_buffer
 00D6 08                push A
 00D7 7C0000            xcall _itoa
 00DA 38F8              add SP,-8
 00DC                   .dbline 137
 00DC           ;               LCD_Position(0,0);
 00DC 10                push X
 00DD 5000              mov A,0
 00DF 5700              mov X,0
 00E1 7C0000            xcall _LCD_Position
 00E4                   .dbline 138
 00E4           ;               LCD_PrCString("     ");
 00E4 5000              mov A,>L18
 00E6 08                push A
 00E7 5000              mov A,<L18
 00E9 5C                mov X,A
 00EA 18                pop A
 00EB 7C0000            xcall _LCD_PrCString
 00EE                   .dbline 139
 00EE           ;               LCD_Position(0,0);
 00EE 5000              mov A,0
 00F0 5700              mov X,0
 00F2 7C0000            xcall _LCD_Position
 00F5                   .dbline 140
 00F5           ;               LCD_PrString(buffer);
 00F5 5004              mov A,>_buffer
 00F7 08                push A
 00F8 5004              mov A,<_buffer
 00FA 5C                mov X,A
 00FB 18                pop A
 00FC 7C0000            xcall _LCD_PrString
 00FF 20                pop X
 0100                   .dbline 142
 0100           ;                               
 0100           ;       }
 0100           L16:
 0100                   .dbline 130
 0100 8FAB              xjmp L15
 0102           X4:
 0102                   .dbline -2
 0102           L14:
 0102                   .dbline 0 ; func end
 0102 7F                ret
 0103                   .dbend
                        .area bss(ram, con, rel)
 0000                   .dbfile Z:\AMMATI~2\Koodi\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0000           _right::
 0000                   .blkb 2
 0002                   .dbsym e right _right I
 0002           _left::
 0002                   .blkb 2
 0004                   .dbsym e left _left I
 0004           _buffer::
 0004                   .blkb 10
 000E                   .dbsym e buffer _buffer A[10:10]c
                        .area lit(rom, con, rel, lit)
 0000           L18:
 0000 202020202000      .byte 32,32,32,32,32,0
