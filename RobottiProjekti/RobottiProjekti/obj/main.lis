                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area data(ram, con, rel)
 0000                   .dbfile ./main.c
 0000           _timeT::
 0000                   .blkb 2
                        .area idata(rom,lit)
 0000 0000              .word 0
                        .area data(ram, con, rel)
 0002                   .dbfile ./main.c
 0002                   .dbfile C:\Users\Kaxxo\DOCUME~1\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0002                   .dbsym e timeT _timeT I
                        .area text(rom, con, rel)
 0000                   .dbfile C:\Users\Kaxxo\DOCUME~1\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0000                   .dbfunc e main _main fV
 0000           ;         buffer -> X+6
 0000           ;              a -> X+4
 0000           ;   pulseForward -> X+2
 0000           ;              i -> X+0
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 380B              add SP,11
 0004                   .dbline 22
 0004           ; //----------------------------------------------------------------------------
 0004           ; // Robotti Projekti
 0004           ; // Robor7 @ 2014
 0004           ; // Kasper Kiiskinen, Henri Sinokki, Eero Holopainen, Mikko Litta, Kari Lampinen
 0004           ; //----------------------------------------------------------------------------
 0004           ; 
 0004           ; #include <m8c.h>        // part specific constants and macros
 0004           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0004           ; #include<stdio.h>
 0004           ; #include<stdlib.h>
 0004           ; 
 0004           ; //Omat header filet
 0004           ; #include "MotorControl.h"
 0004           ; //#include "UltraControl.h"
 0004           ; //#include "GyroControl.h"
 0004           ; //....
 0004           ; 
 0004           ; int timeT = 0;
 0004           ; 
 0004           ; //Main Method
 0004           ; void main(void)
 0004           ; {
 0004                   .dbline 24
 0004           ;       //Määrittelyt
 0004           ;       int pulseForward = 0;
 0004 560300            mov [X+3],0
 0007 560200            mov [X+2],0
 000A                   .dbline 26
 000A           ;       char buffer[5];
 000A           ;       volatile int i = 0;
 000A 560100            mov [X+1],0
 000D 560000            mov [X+0],0
 0010                   .dbline 27
 0010           ;       int a = 0;
 0010 560500            mov [X+5],0
 0013 560400            mov [X+4],0
 0016                   .dbline 32
 0016           ;       
 0016           ;       //Init**************************
 0016           ;       
 0016           ;       //Enables Global Interrupts
 0016           ;       M8C_EnableGInt; 
 0016 7101                      or  F, 01h
 0018           
 0018                   .dbline 35
 0018           ;       
 0018           ;       //Start LCD
 0018           ;       LCD_Start();
 0018 10                push X
 0019 7C0000            xcall _LCD_Start
 001C                   .dbline 38
 001C           ;       
 001C           ;       //InitializeTimer
 001C           ;       Timer8_Start();
 001C 7C0000            xcall _Timer8_Start
 001F                   .dbline 39
 001F           ;       Timer8_EnableInt();
 001F 7C0000            xcall _Timer8_EnableInt
 0022 20                pop X
 0023                   .dbline 42
 0023           ;       
 0023           ;       //Start Motor PWMs
 0023           ;       InitPWM();
 0023 7C0000            xcall _InitPWM
 0026 80B7              xjmp L3
 0028           L2:
 0028                   .dbline 48
 0028           ;       
 0028           ;       
 0028           ;       //MainLoop**********
 0028           ;       //***********************
 0028           ;       while(1)
 0028           ;       {
 0028                   .dbline 50
 0028           ;               //TEST CODE AJA MOOTTOREITA ETEEN/TAAKSE
 0028           ;               i++;
 0028 7701              inc [X+1]
 002A 0F0000            adc [X+0],0
 002D                   .dbline 51
 002D           ;               if (i > 1000)
 002D 50E8              mov A,-24
 002F 1301              sub A,[X+1]
 0031 5200              mov A,[X+0]
 0033 3180              xor A,-128
 0035 5300              mov [__rX],A
 0037 5083              mov A,(3 ^ 0x80)
 0039 1A00              sbb A,[__rX]
 003B D07A              jnc L5
 003D           X1:
 003D                   .dbline 53
 003D           ;               {
 003D           ;                       i = 0;
 003D                   .dbline 53
 003D 560100            mov [X+1],0
 0040 560000            mov [X+0],0
 0043                   .dbline 55
 0043           ;                       
 0043           ;                       pulseForward++;
 0043 7703              inc [X+3]
 0045 0F0200            adc [X+2],0
 0048                   .dbline 56
 0048           ;                       if(pulseForward > 198) 
 0048 50C6              mov A,-58
 004A 1303              sub A,[X+3]
 004C 5202              mov A,[X+2]
 004E 3180              xor A,-128
 0050 5300              mov [__rX],A
 0052 5080              mov A,(0 ^ 0x80)
 0054 1A00              sbb A,[__rX]
 0056 D007              jnc L7
 0058           X2:
 0058                   .dbline 58
 0058           ;                       {
 0058           ;                               pulseForward = 0;
 0058                   .dbline 58
 0058 560300            mov [X+3],0
 005B 560200            mov [X+2],0
 005E                   .dbline 59
 005E           ;                       }
 005E           L7:
 005E                   .dbline 62
 005E           ;                       
 005E           ;                       //Ajaa moottoreita
 005E           ;                       if(a == 1)
 005E 3D0400            cmp [X+4],0
 0061 B013              jnz L9
 0063 3D0501            cmp [X+5],1
 0066 B00E              jnz L9
 0068           X3:
 0068                   .dbline 63
 0068           ;                               MoveBackward(pulseForward);
 0068 5202              mov A,[X+2]
 006A 08                push A
 006B 5203              mov A,[X+3]
 006D 08                push A
 006E 7C0000            xcall _MoveBackward
 0071 38FE              add SP,-2
 0073 800C              xjmp L10
 0075           L9:
 0075                   .dbline 65
 0075           ;                       else 
 0075           ;                               MoveForward(pulseForward);
 0075 5202              mov A,[X+2]
 0077 08                push A
 0078 5203              mov A,[X+3]
 007A 08                push A
 007B 7C0000            xcall _MoveForward
 007E 38FE              add SP,-2
 0080           L10:
 0080                   .dbline 69
 0080           ;                       
 0080           ;                       
 0080           ;                       //WRITE TO LCD
 0080           ;                       itoa(buffer,pulseForward,10);
 0080 5000              mov A,0
 0082 08                push A
 0083 500A              mov A,10
 0085 08                push A
 0086 5202              mov A,[X+2]
 0088 08                push A
 0089 5203              mov A,[X+3]
 008B 08                push A
 008C 5A00              mov [__r1],X
 008E 060006            add [__r1],6
 0091 5100              mov A,[__r0]
 0093 08                push A
 0094 5100              mov A,[__r1]
 0096 08                push A
 0097 7C0000            xcall _itoa
 009A 38FA              add SP,-6
 009C                   .dbline 70
 009C           ;                       LCD_Position(0,2);
 009C 10                push X
 009D 5702              mov X,2
 009F 5000              mov A,0
 00A1 7C0000            xcall _LCD_Position
 00A4 20                pop X
 00A5                   .dbline 71
 00A5           ;                       LCD_PrString(buffer);
 00A5 5A00              mov [__r1],X
 00A7 060006            add [__r1],6
 00AA 10                push X
 00AB 5100              mov A,[__r0]
 00AD 08                push A
 00AE 5100              mov A,[__r1]
 00B0 5C                mov X,A
 00B1 18                pop A
 00B2 7C0000            xcall _LCD_PrString
 00B5 20                pop X
 00B6                   .dbline 72
 00B6           ;               }
 00B6           L5:
 00B6                   .dbline 76
 00B6           ;               
 00B6           ;               
 00B6           ;               //1s välein vaihda suuntaa.
 00B6           ;               if (timeT == 100)
 00B6 3C0000            cmp [_timeT],0
 00B9 B024              jnz L11
 00BB 3C0164            cmp [_timeT+1],100
 00BE B01F              jnz L11
 00C0           X4:
 00C0                   .dbline 78
 00C0           ;               {
 00C0           ;                       if(a == 0)
 00C0                   .dbline 78
 00C0 3D0400            cmp [X+4],0
 00C3 B00E              jnz L13
 00C5 3D0500            cmp [X+5],0
 00C8 B009              jnz L13
 00CA           X5:
 00CA                   .dbline 79
 00CA           ;                               a = 1;
 00CA 560501            mov [X+5],1
 00CD 560400            mov [X+4],0
 00D0 8007              xjmp L14
 00D2           L13:
 00D2                   .dbline 81
 00D2           ;                       else 
 00D2           ;                               a = 0;
 00D2 560500            mov [X+5],0
 00D5 560400            mov [X+4],0
 00D8           L14:
 00D8                   .dbline 83
 00D8           ;                       
 00D8           ;                       timeT = 0;
 00D8 550100            mov [_timeT+1],0
 00DB 550000            mov [_timeT],0
 00DE                   .dbline 84
 00DE           ;               }
 00DE           L11:
 00DE                   .dbline 85
 00DE           ;       }
 00DE           L3:
 00DE                   .dbline 47
 00DE 8F49              xjmp L2
 00E0           L15:
 00E0                   .dbline 87
 00E0           ; 
 00E0           ;       while (1){}
 00E0                   .dbline 87
 00E0           L16:
 00E0                   .dbline 87
 00E0 8FFF              xjmp L15
 00E2           X0:
 00E2                   .dbline -2
 00E2           L1:
 00E2 38F5              add SP,-11
 00E4 20                pop X
 00E5                   .dbline 0 ; func end
 00E5 8FFF              jmp .
 00E7                   .dbsym l buffer 6 A[5:5]c
 00E7                   .dbsym l a 4 I
 00E7                   .dbsym l pulseForward 2 I
 00E7                   .dbsym l i 0 I
 00E7                   .dbend
 00E7                   .dbfunc e TimerInterrupt _TimerInterrupt fV
 00E7           _TimerInterrupt::
 00E7                   .dbline -1
 00E7 08                push A
 00E8                   .dbline 93
 00E8           ; }
 00E8           ; 
 00E8           ; //Kutsutaan joka 0.01s = 10ms välein.
 00E8           ; #pragma interrupt_handler TimerInterrupt
 00E8           ; void TimerInterrupt()
 00E8           ; {
 00E8                   .dbline 94
 00E8           ;   timeT++;
 00E8 7601              inc [_timeT+1]
 00EA 0E0000            adc [_timeT],0
 00ED                   .dbline -2
 00ED           L18:
 00ED 18                pop A
 00EE                   .dbline 0 ; func end
 00EE 7E                reti
 00EF                   .dbend
