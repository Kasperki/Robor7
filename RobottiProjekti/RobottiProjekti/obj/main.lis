                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area data(ram, con, rel)
 0000                   .dbfile ./main.c
 0000           _timeT::
 0000                   .blkb 2
                        .area idata(rom,lit)
 0000 0000              .word 0
                        .area data(ram, con, rel)
 0002                   .dbfile ./main.c
 0002                   .dbfile Z:\AMMATI~2\Koodi\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0002                   .dbsym e timeT _timeT I
 0002           _timeT2::
 0002                   .blkb 2
                        .area idata(rom,lit)
 0002 0000              .word 0
                        .area data(ram, con, rel)
 0004                   .dbfile Z:\AMMATI~2\Koodi\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0004                   .dbsym e timeT2 _timeT2 I
 0004           _timeLCD::
 0004                   .blkb 2
                        .area idata(rom,lit)
 0004 0000              .word 0
                        .area data(ram, con, rel)
 0006                   .dbfile Z:\AMMATI~2\Koodi\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0006                   .dbsym e timeLCD _timeLCD I
 0006           _timeUltra::
 0006                   .blkb 2
                        .area idata(rom,lit)
 0006 0000              .word 0
                        .area data(ram, con, rel)
 0008                   .dbfile Z:\AMMATI~2\Koodi\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0008                   .dbsym e timeUltra _timeUltra I
 0008           _timeForward::
 0008                   .blkb 2
                        .area idata(rom,lit)
 0008 0032              .word 50
                        .area data(ram, con, rel)
 000A                   .dbfile Z:\AMMATI~2\Koodi\Robor7\ROBOTT~1\ROBOTT~1\main.c
 000A                   .dbsym e timeForward _timeForward I
 000A           _turnTime::
 000A                   .blkb 2
                        .area idata(rom,lit)
 000A 0037              .word 55
                        .area data(ram, con, rel)
 000C                   .dbfile Z:\AMMATI~2\Koodi\Robor7\ROBOTT~1\ROBOTT~1\main.c
 000C                   .dbsym e turnTime _turnTime I
 000C           _timeRobotWidth::
 000C                   .blkb 2
                        .area idata(rom,lit)
 000C 000F              .word 15
                        .area data(ram, con, rel)
 000E                   .dbfile Z:\AMMATI~2\Koodi\Robor7\ROBOTT~1\ROBOTT~1\main.c
 000E                   .dbsym e timeRobotWidth _timeRobotWidth I
                        .area text(rom, con, rel)
 0000                   .dbfile Z:\AMMATI~2\Koodi\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0000                   .dbfunc e main _main fV
 0000           ;         buffer -> X+8
 0000           ;          kulma -> X+6
 0000           ;           turn -> X+4
 0000           ;              i -> X+2
 0000           ;      ultraData -> X+0
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3812              add SP,18
 0004                   .dbline 27
 0004           ; //----------------------------------------------------------------------------
 0004           ; // Robotti Projekti
 0004           ; // Robor7 @ 2014
 0004           ; // Kasper Kiiskinen, Henri Sinokki, Eero Holopainen, Mikko Liira, Kari Lampi
 0004           ; //----------------------------------------------------------------------------
 0004           ; 
 0004           ; #include <m8c.h>        // part specific constants and macros
 0004           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0004           ; #include<stdio.h>
 0004           ; #include<stdlib.h>
 0004           ; 
 0004           ; //Omat header filet
 0004           ; #include "MotorControl.h"
 0004           ; #include "UltraControl.h"
 0004           ; //#include "GyroControl.h"
 0004           ; 
 0004           ; //Kellot
 0004           ; volatile int timeT = 0,timeT2 = 0;
 0004           ; int timeLCD = 0,timeUltra = 0; 
 0004           ; 
 0004           ; int timeForward = 50; //.... 4m täydellä vauhdilla 3.7s
 0004           ; int turnTime = 55;       //.... 90 asteen käännökseen meneväaika
 0004           ; int timeRobotWidth = 15; //.... Robotin leveyteen menevä aika ?
 0004           ; 
 0004           ; //Main Method
 0004           ; void main(void)
 0004           ; {
 0004                   .dbline 30
 0004           ;       //Määrittelyt
 0004           ;       char buffer[10];
 0004           ;       volatile int i = 0;
 0004 560300            mov [X+3],0
 0007 560200            mov [X+2],0
 000A                   .dbline 31
 000A           ;       int turn = 0;
 000A 560500            mov [X+5],0
 000D 560400            mov [X+4],0
 0010                   .dbline 32
 0010           ;       int ultraData = 0; //Data from ultrasonic sensor
 0010 560100            mov [X+1],0
 0013 560000            mov [X+0],0
 0016                   .dbline 33
 0016           ;       int kulma = 0;
 0016 560700            mov [X+7],0
 0019 560600            mov [X+6],0
 001C                   .dbline 38
 001C           ;       
 001C           ;       //Init**************************
 001C           ;       
 001C           ;       //Enables Global Interrupts
 001C           ;       M8C_EnableGInt; 
 001C 7101                      or  F, 01h
 001E           
 001E                   .dbline 41
 001E           ;               
 001E           ;       //Start LCD
 001E           ;       LCD_Start();
 001E 10                push X
 001F 7C0000            xcall _LCD_Start
 0022                   .dbline 44
 0022           ;       
 0022           ;       //InitializeTimer
 0022           ;       Timer8_Start();
 0022 7C0000            xcall _Timer8_Start
 0025                   .dbline 45
 0025           ;       Timer8_EnableInt();
 0025 7C0000            xcall _Timer8_EnableInt
 0028 20                pop X
 0029                   .dbline 48
 0029           ;               
 0029           ;       //Start Motor PWMs
 0029           ;       InitPWM();
 0029 7C0000            xcall _InitPWM
 002C                   .dbline 51
 002C           ;       
 002C           ;       //Init PGA and ADCIN for Ultrasonic
 002C           ;       InitUA();
 002C 7C0000            xcall _InitUA
 002F                   .dbline 53
 002F           ;       
 002F           ;       Delay(200);
 002F 5000              mov A,0
 0031 08                push A
 0032 50C8              mov A,-56
 0034 08                push A
 0035 9021              xcall _Delay
 0037 38FE              add SP,-2
 0039 8017              xjmp L3
 003B           L2:
 003B                   .dbline 61
 003B           ;       
 003B           ;       //Testink
 003B           ;       //TestLoop();
 003B           ; 
 003B           ;       //MainLoop**********
 003B           ;       //***********************
 003B           ;       while(1)
 003B           ;       {
 003B                   .dbline 63
 003B           ;               //Controlls the ultraSonic trigger
 003B           ;               ControlTrigger(&timeUltra);     
 003B 5006              mov A,>_timeUltra
 003D 08                push A
 003E 5006              mov A,<_timeUltra
 0040 08                push A
 0041 7C0000            xcall _ControlTrigger
 0044 38FE              add SP,-2
 0046                   .dbline 66
 0046           ;                       
 0046           ;               //Gets the data
 0046           ;               ultraData = getDataUA();
 0046 7C0000            xcall _getDataUA
 0049 5100              mov A,[__r1]
 004B 5401              mov [X+1],A
 004D 5100              mov A,[__r0]
 004F 5400              mov [X+0],A
 0051                   .dbline 69
 0051           ;               
 0051           ;       
 0051           ;       }
 0051           L3:
 0051                   .dbline 60
 0051 8FE9              xjmp L2
 0053           X0:
 0053                   .dbline -2
 0053           L1:
 0053 38EE              add SP,-18
 0055 20                pop X
 0056                   .dbline 0 ; func end
 0056 8FFF              jmp .
 0058                   .dbsym l buffer 8 A[10:10]c
 0058                   .dbsym l kulma 6 I
 0058                   .dbsym l turn 4 I
 0058                   .dbsym l i 2 I
 0058                   .dbsym l ultraData 0 I
 0058                   .dbend
 0058                   .dbfunc e Delay _Delay fV
 0058           ;          timme -> X+0
 0058           ;          dealy -> X-5
 0058           _Delay::
 0058                   .dbline -1
 0058 10                push X
 0059 4F                mov X,SP
 005A 3802              add SP,2
 005C                   .dbline 74
 005C           ; }
 005C           ; 
 005C           ; //Delay function
 005C           ; void Delay(int dealy)
 005C           ; {
 005C                   .dbline 75
 005C           ;       int timme = timeT + dealy;
 005C 5101              mov A,[_timeT+1]
 005E 03FC              add A,[X-4]
 0060 5401              mov [X+1],A
 0062 5100              mov A,[_timeT]
 0064 0BFB              adc A,[X-5]
 0066 5400              mov [X+0],A
 0068           L6:
 0068                   .dbline 77
 0068           ;       while (timeT < timme)
 0068           ;       {}
 0068                   .dbline 77
 0068           L7:
 0068                   .dbline 76
 0068 5101              mov A,[_timeT+1]
 006A 1301              sub A,[X+1]
 006C 5200              mov A,[X+0]
 006E 3180              xor A,-128
 0070 5300              mov [__rX],A
 0072 5100              mov A,[_timeT]
 0074 3180              xor A,-128
 0076 1A00              sbb A,[__rX]
 0078 CFEF              jc L6
 007A           X1:
 007A                   .dbline 79
 007A           ;       
 007A           ;       timeT = 0;
 007A 550100            mov [_timeT+1],0
 007D 550000            mov [_timeT],0
 0080                   .dbline -2
 0080           L5:
 0080 38FE              add SP,-2
 0082 20                pop X
 0083                   .dbline 0 ; func end
 0083 7F                ret
 0084                   .dbsym l timme 0 I
 0084                   .dbsym l dealy -5 I
 0084                   .dbend
 0084                   .dbfunc e TimerInterrupt _TimerInterrupt fV
 0084           _TimerInterrupt::
 0084                   .dbline -1
 0084                   .dbline 84
 0084           ; }
 0084           ; 
 0084           ; //Kutsutaan joka 0.01s = 10ms välein.
 0084           ; void TimerInterrupt()
 0084           ; {
 0084                   .dbline 85
 0084           ;   timeT++;
 0084 7601              inc [_timeT+1]
 0086 0E0000            adc [_timeT],0
 0089                   .dbline 86
 0089           ;   timeT2++;
 0089 7603              inc [_timeT2+1]
 008B 0E0200            adc [_timeT2],0
 008E                   .dbline 88
 008E           ; 
 008E           ;   timeLCD++; //Controlls LCD draw cycle
 008E 7605              inc [_timeLCD+1]
 0090 0E0400            adc [_timeLCD],0
 0093                   .dbline 89
 0093           ;   timeUltra++; //Controlls Ultrasonic sensor trigger time
 0093 7607              inc [_timeUltra+1]
 0095 0E0600            adc [_timeUltra],0
 0098                   .dbline -2
 0098           L9:
 0098                   .dbline 0 ; func end
 0098 7F                ret
 0099                   .dbend
 0099                   .dbfunc e TestLoop _TestLoop fV
 0099           _TestLoop::
 0099                   .dbline -1
 0099                   .dbline 94
 0099           ; }
 0099           ; 
 0099           ; //For Testing
 0099           ; void TestLoop()
 0099           ; {
 0099 8062              xjmp L12
 009B           L11:
 009B                   .dbline 96
 009B           ;       while(1)
 009B           ;       {
 009B                   .dbline 98
 009B           ;               
 009B           ;               LCD_Position(1,0);
 009B 10                push X
 009C 5700              mov X,0
 009E 5001              mov A,1
 00A0 7C0000            xcall _LCD_Position
 00A3                   .dbline 99
 00A3           ;               LCD_PrCString("PIRI TOIMII");
 00A3 5000              mov A,>L14
 00A5 08                push A
 00A6 5000              mov A,<L14
 00A8 5C                mov X,A
 00A9 18                pop A
 00AA 7C0000            xcall _LCD_PrCString
 00AD 20                pop X
 00AE                   .dbline 112
 00AE           ;               
 00AE           ;               //Test 4m
 00AE           ;               /*
 00AE           ;               if (timeT < 250)
 00AE           ;                       TurnLeft(FULL_SPEED);
 00AE           ;               else if (timeT < 500)
 00AE           ;                       TurnRight(HALF_SPEED);
 00AE           ;               else 
 00AE           ;                       Stop();
 00AE           ;               */
 00AE           ;       
 00AE           ;               //About 90
 00AE           ;               if (timeT < 200)
 00AE 5101              mov A,[_timeT+1]
 00B0 11C8              sub A,-56
 00B2 5100              mov A,[_timeT]
 00B4 3180              xor A,-128
 00B6 1980              sbb A,(0 ^ 0x80)
 00B8 D00E              jnc L15
 00BA           X3:
 00BA                   .dbline 113
 00BA           ;                       ControlServo(8);
 00BA 5000              mov A,0
 00BC 08                push A
 00BD 5008              mov A,8
 00BF 08                push A
 00C0 7C0000            xcall _ControlServo
 00C3 38FE              add SP,-2
 00C5 8036              xjmp L16
 00C7           L15:
 00C7                   .dbline 114
 00C7           ;               else if(timeT < 400)
 00C7 5101              mov A,[_timeT+1]
 00C9 1190              sub A,-112
 00CB 5100              mov A,[_timeT]
 00CD 3180              xor A,-128
 00CF 1981              sbb A,(1 ^ 0x80)
 00D1 D00E              jnc L17
 00D3           X4:
 00D3                   .dbline 115
 00D3           ;                       ControlServo(15);
 00D3 5000              mov A,0
 00D5 08                push A
 00D6 500F              mov A,15
 00D8 08                push A
 00D9 7C0000            xcall _ControlServo
 00DC 38FE              add SP,-2
 00DE 801D              xjmp L18
 00E0           L17:
 00E0                   .dbline 116
 00E0           ;               else if(timeT < 600)
 00E0 5101              mov A,[_timeT+1]
 00E2 1158              sub A,88
 00E4 5100              mov A,[_timeT]
 00E6 3180              xor A,-128
 00E8 1982              sbb A,(2 ^ 0x80)
 00EA D00E              jnc L19
 00EC           X5:
 00EC                   .dbline 117
 00EC           ;                       ControlServo(25);
 00EC 5000              mov A,0
 00EE 08                push A
 00EF 5019              mov A,25
 00F1 08                push A
 00F2 7C0000            xcall _ControlServo
 00F5 38FE              add SP,-2
 00F7 8004              xjmp L20
 00F9           L19:
 00F9                   .dbline 119
 00F9           ;               else
 00F9           ;                       Stop();
 00F9 7C0000            xcall _Stop
 00FC           L20:
 00FC           L18:
 00FC           L16:
 00FC                   .dbline 129
 00FC           ;                       
 00FC           ;               //Test 90 degree Turn
 00FC           ;               /*      
 00FC           ;                       if(timeT <= 100) //1.0s
 00FC           ;                               TurnRight(FULL_SPEED);
 00FC           ;                       else if(timeT <= 400)
 00FC           ;                               timeT = 0;
 00FC           ;               */
 00FC           ;               
 00FC           ;       }
 00FC           L12:
 00FC                   .dbline 95
 00FC 8F9E              xjmp L11
 00FE           X2:
 00FE                   .dbline -2
 00FE           L10:
 00FE                   .dbline 0 ; func end
 00FE 7F                ret
 00FF                   .dbend
                        .area lit(rom, con, rel, lit)
 0000           L14:
 0000 5049524920544F494D494900  .byte 'P,'I,'R,'I,32,'T,'O,'I,'M,'I,'I,0
