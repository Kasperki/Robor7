                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area data(ram, con, rel)
 0000                   .dbfile ./main.c
 0000           _timeT::
 0000                   .blkb 2
                        .area idata(rom,lit)
 0000 0000              .word 0
                        .area data(ram, con, rel)
 0002                   .dbfile ./main.c
 0002                   .dbfile Z:\Robo\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0002                   .dbsym e timeT _timeT I
 0002           _timeT2::
 0002                   .blkb 2
                        .area idata(rom,lit)
 0002 0000              .word 0
                        .area data(ram, con, rel)
 0004                   .dbfile Z:\Robo\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0004                   .dbsym e timeT2 _timeT2 I
 0004           _timeLCD::
 0004                   .blkb 2
                        .area idata(rom,lit)
 0004 0000              .word 0
                        .area data(ram, con, rel)
 0006                   .dbfile Z:\Robo\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0006                   .dbsym e timeLCD _timeLCD I
 0006           _timeUltra::
 0006                   .blkb 2
                        .area idata(rom,lit)
 0006 0000              .word 0
                        .area data(ram, con, rel)
 0008                   .dbfile Z:\Robo\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0008                   .dbsym e timeUltra _timeUltra I
 0008           _timeForward::
 0008                   .blkb 2
                        .area idata(rom,lit)
 0008 0032              .word 50
                        .area data(ram, con, rel)
 000A                   .dbfile Z:\Robo\Robor7\ROBOTT~1\ROBOTT~1\main.c
 000A                   .dbsym e timeForward _timeForward I
 000A           _turnTime::
 000A                   .blkb 2
                        .area idata(rom,lit)
 000A 0037              .word 55
                        .area data(ram, con, rel)
 000C                   .dbfile Z:\Robo\Robor7\ROBOTT~1\ROBOTT~1\main.c
 000C                   .dbsym e turnTime _turnTime I
 000C           _timeRobotWidth::
 000C                   .blkb 2
                        .area idata(rom,lit)
 000C 000F              .word 15
                        .area data(ram, con, rel)
 000E                   .dbfile Z:\Robo\Robor7\ROBOTT~1\ROBOTT~1\main.c
 000E                   .dbsym e timeRobotWidth _timeRobotWidth I
                        .area text(rom, con, rel)
 0000                   .dbfile Z:\Robo\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0000                   .dbfunc e main _main fV
 0000           ;          kulma -> X+16
 0000           ;           turn -> X+14
 0000           ;      ultraData -> X+12
 0000           ;         buffer -> X+2
 0000           ;              i -> X+0
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3812              add SP,18
 0004                   .dbline 27
 0004           ; //----------------------------------------------------------------------------
 0004           ; // Robotti Projekti
 0004           ; // Robor7 @ 2014
 0004           ; // Kasper Kiiskinen, Henri Sinokki, Eero Holopainen, Mikko Liira, Kari Lampi
 0004           ; //----------------------------------------------------------------------------
 0004           ; 
 0004           ; #include <m8c.h>        // part specific constants and macros
 0004           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0004           ; #include<stdio.h>
 0004           ; #include<stdlib.h>
 0004           ; 
 0004           ; //Omat header filet
 0004           ; #include "MotorControl.h"
 0004           ; #include "UltraControl.h"
 0004           ; //#include "GyroControl.h"
 0004           ; 
 0004           ; //Kellot
 0004           ; int timeT = 0,timeT2 = 0;
 0004           ; int timeLCD = 0,timeUltra = 0; 
 0004           ; 
 0004           ; int timeForward = 50; //.... 4m täydellä vauhdilla 3.7s
 0004           ; int turnTime = 55;       //.... 90 asteen käännökseen meneväaika
 0004           ; int timeRobotWidth = 15; //.... Robotin leveyteen menevä aika ?
 0004           ; 
 0004           ; //Main Method
 0004           ; void main(void)
 0004           ; {
 0004                   .dbline 30
 0004           ;       //Määrittelyt
 0004           ;       char buffer[10];
 0004           ;       volatile int i = 0;
 0004 560100            mov [X+1],0
 0007 560000            mov [X+0],0
 000A                   .dbline 31
 000A           ;       int turn = 0;
 000A 560F00            mov [X+15],0
 000D 560E00            mov [X+14],0
 0010                   .dbline 32
 0010           ;       int ultraData = 0; //Data from ultrasonic sensor
 0010 560D00            mov [X+13],0
 0013 560C00            mov [X+12],0
 0016                   .dbline 33
 0016           ;       int kulma = 0;
 0016 561100            mov [X+17],0
 0019 561000            mov [X+16],0
 001C                   .dbline 38
 001C           ;       
 001C           ;       //Init**************************
 001C           ;       
 001C           ;       //Enables Global Interrupts
 001C           ;       M8C_EnableGInt; 
 001C 7101                      or  F, 01h
 001E           
 001E                   .dbline 41
 001E           ;               
 001E           ;       //Start LCD
 001E           ;       LCD_Start();
 001E 10                push X
 001F 7C0000            xcall _LCD_Start
 0022                   .dbline 44
 0022           ;       
 0022           ;       //InitializeTimer
 0022           ;       Timer8_Start();
 0022 7C0000            xcall _Timer8_Start
 0025                   .dbline 45
 0025           ;       Timer8_EnableInt();
 0025 7C0000            xcall _Timer8_EnableInt
 0028 20                pop X
 0029                   .dbline 48
 0029           ;               
 0029           ;       //Start Motor PWMs
 0029           ;       InitPWM();
 0029 7C0000            xcall _InitPWM
 002C                   .dbline 51
 002C           ;       
 002C           ;       //Init PGA and ADCIN for Ultrasonic
 002C           ;       InitUA();
 002C 7C0000            xcall _InitUA
 002F                   .dbline 55
 002F           ;       
 002F           ;       //Testink
 002F           ;       //TestLoop();
 002F           ;       i = 100;
 002F 560164            mov [X+1],100
 0032 560000            mov [X+0],0
 0035 82A5              xjmp L3
 0037           L2:
 0037                   .dbline 59
 0037           ;       //MainLoop**********
 0037           ;       //***********************
 0037           ;       while(1)
 0037           ;       {
 0037                   .dbline 61
 0037           ;               //Controlls the ultraSonic trigger
 0037           ;               ControlTrigger(&timeUltra);     
 0037 5006              mov A,>_timeUltra
 0039 08                push A
 003A 5006              mov A,<_timeUltra
 003C 08                push A
 003D 7C0000            xcall _ControlTrigger
 0040 38FE              add SP,-2
 0042                   .dbline 64
 0042           ;                       
 0042           ;               //Gets the data
 0042           ;               ultraData = getDataUA();
 0042 7C0000            xcall _getDataUA
 0045 5100              mov A,[__r1]
 0047 540D              mov [X+13],A
 0049 5100              mov A,[__r0]
 004B 540C              mov [X+12],A
 004D                   .dbline 67
 004D           ;               
 004D           ;               //Spiraali
 004D           ;               if(i < 10)
 004D 5201              mov A,[X+1]
 004F 110A              sub A,10
 0051 5200              mov A,[X+0]
 0053 3180              xor A,-128
 0055 1980              sbb A,(0 ^ 0x80)
 0057 D0F2              jnc L5
 0059           X1:
 0059                   .dbline 69
 0059           ;               {
 0059           ;                       if(i < 3)
 0059                   .dbline 69
 0059 5201              mov A,[X+1]
 005B 1103              sub A,3
 005D 5200              mov A,[X+0]
 005F 3180              xor A,-128
 0061 1980              sbb A,(0 ^ 0x80)
 0063 D06C              jnc L7
 0065           X2:
 0065                   .dbline 71
 0065           ;                       {
 0065           ;                               if(turn == 0)
 0065                   .dbline 71
 0065 3D0E00            cmp [X+14],0
 0068 B013              jnz L9
 006A 3D0F00            cmp [X+15],0
 006D B00E              jnz L9
 006F           X3:
 006F                   .dbline 72
 006F           ;                                       MoveForward(HALF_SPEED);
 006F 5000              mov A,0
 0071 08                push A
 0072 5064              mov A,100
 0074 08                push A
 0075 7C0000            xcall _MoveForward
 0078 38FE              add SP,-2
 007A 806F              xjmp L8
 007C           L9:
 007C                   .dbline 73
 007C           ;                               else if(turn == 1)
 007C 3D0E00            cmp [X+14],0
 007F B023              jnz L11
 0081 3D0F01            cmp [X+15],1
 0084 B01E              jnz L11
 0086           X4:
 0086                   .dbline 75
 0086           ;                               {
 0086           ;                                       Stop();
 0086                   .dbline 75
 0086 7C0000            xcall _Stop
 0089                   .dbline 76
 0089           ;                                       if(timeT >= 100)
 0089 5101              mov A,[_timeT+1]
 008B 1164              sub A,100
 008D 5100              mov A,[_timeT]
 008F 3180              xor A,-128
 0091 1980              sbb A,(0 ^ 0x80)
 0093 C056              jc L8
 0095           X5:
 0095                   .dbline 78
 0095           ;                                       {
 0095           ;                                               turn = 2; 
 0095                   .dbline 78
 0095 560F02            mov [X+15],2
 0098 560E00            mov [X+14],0
 009B                   .dbline 79
 009B           ;                                               timeT = 0;
 009B 550100            mov [_timeT+1],0
 009E 550000            mov [_timeT],0
 00A1                   .dbline 80
 00A1           ;                                       }
 00A1                   .dbline 81
 00A1           ;                               }
 00A1 8048              xjmp L8
 00A3           L11:
 00A3                   .dbline 83
 00A3           ;                               else 
 00A3           ;                               {
 00A3                   .dbline 84
 00A3           ;                                       if(timeT <= turnTime) //if(gyroKulma < 90)
 00A3 510B              mov A,[_turnTime+1]
 00A5 1201              sub A,[_timeT+1]
 00A7 5100              mov A,[_timeT]
 00A9 3180              xor A,-128
 00AB 5300              mov [__rX],A
 00AD 510A              mov A,[_turnTime]
 00AF 3180              xor A,-128
 00B1 1A00              sbb A,[__rX]
 00B3 C00E              jc L15
 00B5           X6:
 00B5                   .dbline 86
 00B5           ;                                       {
 00B5           ;                                               TurnLeft(HALF_SPEED);
 00B5                   .dbline 86
 00B5 5000              mov A,0
 00B7 08                push A
 00B8 5064              mov A,100
 00BA 08                push A
 00BB 7C0000            xcall _TurnLeft
 00BE 38FE              add SP,-2
 00C0                   .dbline 87
 00C0           ;                                       }
 00C0 8029              xjmp L8
 00C2           L15:
 00C2                   .dbline 89
 00C2           ;                                       else
 00C2           ;                                       { 
 00C2                   .dbline 90
 00C2           ;                                               turn = 0;
 00C2 560F00            mov [X+15],0
 00C5 560E00            mov [X+14],0
 00C8                   .dbline 91
 00C8           ;                                               timeT = 0;
 00C8 550100            mov [_timeT+1],0
 00CB 550000            mov [_timeT],0
 00CE                   .dbline 92
 00CE           ;                                       }
 00CE                   .dbline 93
 00CE           ;                               }
 00CE                   .dbline 94
 00CE           ;                       }
 00CE 801B              xjmp L8
 00D0           L7:
 00D0                   .dbline 95
 00D0           ;                       else if(i < 5) 
 00D0 5201              mov A,[X+1]
 00D2 1105              sub A,5
 00D4 5200              mov A,[X+0]
 00D6 3180              xor A,-128
 00D8 1980              sbb A,(0 ^ 0x80)
 00DA D00F              jnc L17
 00DC           X7:
 00DC                   .dbline 97
 00DC           ;                       {
 00DC           ;                               i = 0;
 00DC                   .dbline 97
 00DC 560100            mov [X+1],0
 00DF 560000            mov [X+0],0
 00E2                   .dbline 98
 00E2           ;                               timeForward -= timeRobotWidth;
 00E2 510D              mov A,[_timeRobotWidth+1]
 00E4 1409              sub [_timeForward+1],A
 00E6 510C              mov A,[_timeRobotWidth]
 00E8 1C08              sbb [_timeForward],A
 00EA                   .dbline 99
 00EA           ;                       }
 00EA           L17:
 00EA           L8:
 00EA                   .dbline 102
 00EA           ;                       
 00EA           ;                       //Kokokierros on menty
 00EA           ;                       if(timeForward <= 0)
 00EA 5000              mov A,0
 00EC 1209              sub A,[_timeForward+1]
 00EE 5108              mov A,[_timeForward]
 00F0 3180              xor A,-128
 00F2 5300              mov [__rX],A
 00F4 5080              mov A,(0 ^ 0x80)
 00F6 1A00              sbb A,[__rX]
 00F8 C024              jc L19
 00FA           X8:
 00FA                   .dbline 104
 00FA           ;                       {
 00FA           ;                               i = 10;
 00FA                   .dbline 104
 00FA 56010A            mov [X+1],10
 00FD 560000            mov [X+0],0
 0100                   .dbline 105
 0100           ;                               timeT = 0; 
 0100 550100            mov [_timeT+1],0
 0103 550000            mov [_timeT],0
 0106                   .dbline 106
 0106           ;                               timeT2 = 0;
 0106 550300            mov [_timeT2+1],0
 0109 550200            mov [_timeT2],0
 010C                   .dbline 107
 010C           ;                               turn = 0;
 010C 560F00            mov [X+15],0
 010F 560E00            mov [X+14],0
 0112                   .dbline 108
 0112           ;                               timeForward = 0;
 0112 550900            mov [_timeForward+1],0
 0115 550800            mov [_timeForward],0
 0118                   .dbline 109
 0118           ;                               Stop();
 0118 7C0000            xcall _Stop
 011B                   .dbline 110
 011B           ;                       }
 011B 802E              xjmp L20
 011D           L19:
 011D                   .dbline 111
 011D           ;                       else if (timeT >= timeForward && turn == 0)
 011D 5101              mov A,[_timeT+1]
 011F 1209              sub A,[_timeForward+1]
 0121 5108              mov A,[_timeForward]
 0123 3180              xor A,-128
 0125 5300              mov [__rX],A
 0127 5100              mov A,[_timeT]
 0129 3180              xor A,-128
 012B 1A00              sbb A,[__rX]
 012D C01C              jc L21
 012F           X9:
 012F 3D0E00            cmp [X+14],0
 0132 B017              jnz L21
 0134 3D0F00            cmp [X+15],0
 0137 B012              jnz L21
 0139           X10:
 0139                   .dbline 113
 0139           ;                       {
 0139           ;                               i++;
 0139                   .dbline 113
 0139 7701              inc [X+1]
 013B 0F0000            adc [X+0],0
 013E                   .dbline 114
 013E           ;                               turn = 1;
 013E 560F01            mov [X+15],1
 0141 560E00            mov [X+14],0
 0144                   .dbline 115
 0144           ;                               timeT = 0;
 0144 550100            mov [_timeT+1],0
 0147 550000            mov [_timeT],0
 014A                   .dbline 116
 014A           ;                       }
 014A           L21:
 014A           L20:
 014A                   .dbline 117
 014A           ;               }
 014A           L5:
 014A                   .dbline 122
 014A           ;               //End Spiraali
 014A           ;               
 014A           ;               
 014A           ;               //Scan
 014A           ;               if(i == 100)
 014A 3D0000            cmp [X+0],0
 014D B099              jnz L23
 014F 3D0164            cmp [X+1],100
 0152 B094              jnz L23
 0154           X11:
 0154                   .dbline 124
 0154           ;               {
 0154           ;                       if(kulma < 360)
 0154                   .dbline 124
 0154 5211              mov A,[X+17]
 0156 1168              sub A,104
 0158 5210              mov A,[X+16]
 015A 3180              xor A,-128
 015C 1981              sbb A,(1 ^ 0x80)
 015E D082              jnc L25
 0160           X12:
 0160                   .dbline 126
 0160           ;                       {
 0160           ;                               if(ultraData < 200)
 0160                   .dbline 126
 0160 520D              mov A,[X+13]
 0162 11C8              sub A,-56
 0164 520C              mov A,[X+12]
 0166 3180              xor A,-128
 0168 1980              sbb A,(0 ^ 0x80)
 016A D01E              jnc L27
 016C           X13:
 016C                   .dbline 128
 016C           ;                               {       
 016C           ;                                       if(ultraData > 0)
 016C                   .dbline 128
 016C 5000              mov A,0
 016E 130D              sub A,[X+13]
 0170 520C              mov A,[X+12]
 0172 3180              xor A,-128
 0174 5300              mov [__rX],A
 0176 5080              mov A,(0 ^ 0x80)
 0178 1A00              sbb A,[__rX]
 017A D06C              jnc L26
 017C           X14:
 017C                   .dbline 129
 017C           ;                                               MoveForward(HALF_SPEED); 
 017C 5000              mov A,0
 017E 08                push A
 017F 5064              mov A,100
 0181 08                push A
 0182 7C0000            xcall _MoveForward
 0185 38FE              add SP,-2
 0187                   .dbline 130
 0187           ;                               }
 0187 805F              xjmp L26
 0189           L27:
 0189                   .dbline 131
 0189           ;                               else if (timeT2 >= 50) //WAIT 500ms
 0189 5103              mov A,[_timeT2+1]
 018B 1132              sub A,50
 018D 5102              mov A,[_timeT2]
 018F 3180              xor A,-128
 0191 1980              sbb A,(0 ^ 0x80)
 0193 C048              jc L31
 0195           X15:
 0195                   .dbline 133
 0195           ;                               {
 0195           ;                                       if (turn == 0)
 0195                   .dbline 133
 0195 3D0E00            cmp [X+14],0
 0198 B012              jnz L33
 019A 3D0F00            cmp [X+15],0
 019D B00D              jnz L33
 019F           X16:
 019F                   .dbline 135
 019F           ;                                       {       
 019F           ;                                               timeT = 0;
 019F                   .dbline 135
 019F 550100            mov [_timeT+1],0
 01A2 550000            mov [_timeT],0
 01A5                   .dbline 136
 01A5           ;                                               turn = 1;
 01A5 560F01            mov [X+15],1
 01A8 560E00            mov [X+14],0
 01AB                   .dbline 137
 01AB           ;                                       }
 01AB           L33:
 01AB                   .dbline 139
 01AB           ;                                               
 01AB           ;                                       if(timeT <= 20)
 01AB 5014              mov A,20
 01AD 1201              sub A,[_timeT+1]
 01AF 5100              mov A,[_timeT]
 01B1 3180              xor A,-128
 01B3 5300              mov [__rX],A
 01B5 5080              mov A,(0 ^ 0x80)
 01B7 1A00              sbb A,[__rX]
 01B9 C00E              jc L35
 01BB           X17:
 01BB                   .dbline 140
 01BB           ;                                               TurnRight(HALF_SPEED);
 01BB 5000              mov A,0
 01BD 08                push A
 01BE 5064              mov A,100
 01C0 08                push A
 01C1 7C0000            xcall _TurnRight
 01C4 38FE              add SP,-2
 01C6 8020              xjmp L26
 01C8           L35:
 01C8                   .dbline 142
 01C8           ;                                       else
 01C8           ;                                       {
 01C8                   .dbline 143
 01C8           ;                                               kulma+=5;
 01C8 071105            add [X+17],5
 01CB 0F1000            adc [X+16],0
 01CE                   .dbline 144
 01CE           ;                                               timeT2 = 0;
 01CE 550300            mov [_timeT2+1],0
 01D1 550200            mov [_timeT2],0
 01D4                   .dbline 145
 01D4           ;                                               turn = 0;
 01D4 560F00            mov [X+15],0
 01D7 560E00            mov [X+14],0
 01DA                   .dbline 146
 01DA           ;                                       }
 01DA                   .dbline 147
 01DA           ;                               }
 01DA 800C              xjmp L26
 01DC           L31:
 01DC                   .dbline 149
 01DC           ;                               else 
 01DC           ;                                       Stop();
 01DC 7C0000            xcall _Stop
 01DF                   .dbline 150
 01DF           ;                       }
 01DF 8007              xjmp L26
 01E1           L25:
 01E1                   .dbline 152
 01E1           ;                       else 
 01E1           ;                               i = 20;
 01E1 560114            mov [X+1],20
 01E4 560000            mov [X+0],0
 01E7           L26:
 01E7                   .dbline 153
 01E7           ;               }
 01E7           L23:
 01E7                   .dbline 155
 01E7           ;               
 01E7           ;               if(i == 20)
 01E7 3D0000            cmp [X+0],0
 01EA B009              jnz L37
 01EC 3D0114            cmp [X+1],20
 01EF B004              jnz L37
 01F1           X18:
 01F1                   .dbline 156
 01F1           ;                       Stop();
 01F1 7C0000            xcall _Stop
 01F4           L37:
 01F4                   .dbline 160
 01F4           ;               
 01F4           ;               
 01F4           ;               //WRITE TO LCD
 01F4           ;               if(timeLCD >= 6)
 01F4 5105              mov A,[_timeLCD+1]
 01F6 1106              sub A,6
 01F8 5104              mov A,[_timeLCD]
 01FA 3180              xor A,-128
 01FC 1980              sbb A,(0 ^ 0x80)
 01FE C0DC              jc L39
 0200           X19:
 0200                   .dbline 162
 0200           ;               {
 0200           ;                       itoa(buffer,ultraData,10);
 0200                   .dbline 162
 0200 5000              mov A,0
 0202 08                push A
 0203 500A              mov A,10
 0205 08                push A
 0206 520C              mov A,[X+12]
 0208 08                push A
 0209 520D              mov A,[X+13]
 020B 08                push A
 020C 5A00              mov [__r1],X
 020E 060002            add [__r1],2
 0211 5100              mov A,[__r0]
 0213 08                push A
 0214 5100              mov A,[__r1]
 0216 08                push A
 0217 7C0000            xcall _itoa
 021A 38FA              add SP,-6
 021C                   .dbline 163
 021C           ;                       LCD_Position(0,0);
 021C 10                push X
 021D 5000              mov A,0
 021F 5700              mov X,0
 0221 7C0000            xcall _LCD_Position
 0224                   .dbline 164
 0224           ;                       LCD_PrCString("      ");
 0224 500C              mov A,>L41
 0226 08                push A
 0227 500C              mov A,<L41
 0229 5C                mov X,A
 022A 18                pop A
 022B 7C0000            xcall _LCD_PrCString
 022E                   .dbline 165
 022E           ;                       LCD_Position(0,0);
 022E 5000              mov A,0
 0230 5700              mov X,0
 0232 7C0000            xcall _LCD_Position
 0235 20                pop X
 0236                   .dbline 166
 0236           ;                       LCD_PrString(buffer);
 0236 5A00              mov [__r1],X
 0238 060002            add [__r1],2
 023B 10                push X
 023C 5100              mov A,[__r0]
 023E 08                push A
 023F 5100              mov A,[__r1]
 0241 5C                mov X,A
 0242 18                pop A
 0243 7C0000            xcall _LCD_PrString
 0246                   .dbline 169
 0246           ;                                       
 0246           ;                       //
 0246           ;                       LCD_Position(0,5);
 0246 5705              mov X,5
 0248 5000              mov A,0
 024A 7C0000            xcall _LCD_Position
 024D                   .dbline 170
 024D           ;                       LCD_PrCString("      ");
 024D 500C              mov A,>L41
 024F 08                push A
 0250 500C              mov A,<L41
 0252 5C                mov X,A
 0253 18                pop A
 0254 7C0000            xcall _LCD_PrCString
 0257 20                pop X
 0258                   .dbline 171
 0258           ;                       itoa(buffer,timeForward,10);
 0258 5000              mov A,0
 025A 08                push A
 025B 500A              mov A,10
 025D 08                push A
 025E 5108              mov A,[_timeForward]
 0260 08                push A
 0261 5109              mov A,[_timeForward+1]
 0263 08                push A
 0264 5A00              mov [__r1],X
 0266 060002            add [__r1],2
 0269 5100              mov A,[__r0]
 026B 08                push A
 026C 5100              mov A,[__r1]
 026E 08                push A
 026F 7C0000            xcall _itoa
 0272 38FA              add SP,-6
 0274                   .dbline 172
 0274           ;                       LCD_Position(0,5);
 0274 10                push X
 0275 5705              mov X,5
 0277 5000              mov A,0
 0279 7C0000            xcall _LCD_Position
 027C 20                pop X
 027D                   .dbline 173
 027D           ;                       LCD_PrString(buffer);
 027D 5A00              mov [__r1],X
 027F 060002            add [__r1],2
 0282 10                push X
 0283 5100              mov A,[__r0]
 0285 08                push A
 0286 5100              mov A,[__r1]
 0288 5C                mov X,A
 0289 18                pop A
 028A 7C0000            xcall _LCD_PrString
 028D                   .dbline 175
 028D           ;                       
 028D           ;                       LCD_Position(1,0);
 028D 5700              mov X,0
 028F 5001              mov A,1
 0291 7C0000            xcall _LCD_Position
 0294                   .dbline 176
 0294           ;                       LCD_PrCString("      ");
 0294 500C              mov A,>L41
 0296 08                push A
 0297 500C              mov A,<L41
 0299 5C                mov X,A
 029A 18                pop A
 029B 7C0000            xcall _LCD_PrCString
 029E 20                pop X
 029F                   .dbline 177
 029F           ;                       itoa(buffer,kulma,10);
 029F 5000              mov A,0
 02A1 08                push A
 02A2 500A              mov A,10
 02A4 08                push A
 02A5 5210              mov A,[X+16]
 02A7 08                push A
 02A8 5211              mov A,[X+17]
 02AA 08                push A
 02AB 5A00              mov [__r1],X
 02AD 060002            add [__r1],2
 02B0 5100              mov A,[__r0]
 02B2 08                push A
 02B3 5100              mov A,[__r1]
 02B5 08                push A
 02B6 7C0000            xcall _itoa
 02B9 38FA              add SP,-6
 02BB                   .dbline 178
 02BB           ;                       LCD_Position(1,0);
 02BB 10                push X
 02BC 5700              mov X,0
 02BE 5001              mov A,1
 02C0 7C0000            xcall _LCD_Position
 02C3 20                pop X
 02C4                   .dbline 179
 02C4           ;                       LCD_PrString(buffer);
 02C4 5A00              mov [__r1],X
 02C6 060002            add [__r1],2
 02C9 10                push X
 02CA 5100              mov A,[__r0]
 02CC 08                push A
 02CD 5100              mov A,[__r1]
 02CF 5C                mov X,A
 02D0 18                pop A
 02D1 7C0000            xcall _LCD_PrString
 02D4 20                pop X
 02D5                   .dbline 181
 02D5           ;                       
 02D5           ;                       timeLCD = 0;
 02D5 550500            mov [_timeLCD+1],0
 02D8 550400            mov [_timeLCD],0
 02DB                   .dbline 182
 02DB           ;               }               
 02DB           L39:
 02DB                   .dbline 183
 02DB           ;       }
 02DB           L3:
 02DB                   .dbline 58
 02DB 8D5B              xjmp L2
 02DD           X0:
 02DD                   .dbline -2
 02DD           L1:
 02DD 38EE              add SP,-18
 02DF 20                pop X
 02E0                   .dbline 0 ; func end
 02E0 8FFF              jmp .
 02E2                   .dbsym l kulma 16 I
 02E2                   .dbsym l turn 14 I
 02E2                   .dbsym l ultraData 12 I
 02E2                   .dbsym l buffer 2 A[10:10]c
 02E2                   .dbsym l i 0 I
 02E2                   .dbend
 02E2                   .dbfunc e TimerInterrupt _TimerInterrupt fV
 02E2           _TimerInterrupt::
 02E2                   .dbline -1
 02E2                   .dbline 188
 02E2           ; }
 02E2           ; 
 02E2           ; //Kutsutaan joka 0.01s = 10ms välein.
 02E2           ; void TimerInterrupt()
 02E2           ; {
 02E2                   .dbline 189
 02E2           ;   timeT++;
 02E2 7601              inc [_timeT+1]
 02E4 0E0000            adc [_timeT],0
 02E7                   .dbline 190
 02E7           ;   timeT2++;
 02E7 7603              inc [_timeT2+1]
 02E9 0E0200            adc [_timeT2],0
 02EC                   .dbline 192
 02EC           ; 
 02EC           ;   timeLCD++; //Controlls LCD draw cycle
 02EC 7605              inc [_timeLCD+1]
 02EE 0E0400            adc [_timeLCD],0
 02F1                   .dbline 193
 02F1           ;   timeUltra++; //Controlls Ultrasonic sensor trigger time
 02F1 7607              inc [_timeUltra+1]
 02F3 0E0600            adc [_timeUltra],0
 02F6                   .dbline -2
 02F6           L42:
 02F6                   .dbline 0 ; func end
 02F6 7F                ret
 02F7                   .dbend
 02F7                   .dbfunc e TestLoop _TestLoop fV
 02F7           _TestLoop::
 02F7                   .dbline -1
 02F7                   .dbline 198
 02F7           ; }
 02F7           ; 
 02F7           ; //For Testing
 02F7           ; void TestLoop()
 02F7           ; {
 02F7 8030              xjmp L45
 02F9           L44:
 02F9                   .dbline 200
 02F9           ;       while(1)
 02F9           ;       {
 02F9                   .dbline 202
 02F9           ;               
 02F9           ;               LCD_Position(1,0);
 02F9 10                push X
 02FA 5700              mov X,0
 02FC 5001              mov A,1
 02FE 7C0000            xcall _LCD_Position
 0301                   .dbline 203
 0301           ;               LCD_PrCString("PIRI TOIMII");
 0301 5000              mov A,>L47
 0303 08                push A
 0304 5000              mov A,<L47
 0306 5C                mov X,A
 0307 18                pop A
 0308 7C0000            xcall _LCD_PrCString
 030B 20                pop X
 030C                   .dbline 216
 030C           ;               
 030C           ;               //Test 4m
 030C           ;               /*
 030C           ;               if (timeT < 250)
 030C           ;                       TurnLeft(FULL_SPEED);
 030C           ;               else if (timeT < 500)
 030C           ;                       TurnRight(HALF_SPEED);
 030C           ;               else 
 030C           ;                       Stop();
 030C           ;               */
 030C           ;       
 030C           ;               //About 90
 030C           ;               if (timeT < 60)
 030C 5101              mov A,[_timeT+1]
 030E 113C              sub A,60
 0310 5100              mov A,[_timeT]
 0312 3180              xor A,-128
 0314 1980              sbb A,(0 ^ 0x80)
 0316 D00E              jnc L48
 0318           X21:
 0318                   .dbline 217
 0318           ;                       TurnLeft(HALF_SPEED);
 0318 5000              mov A,0
 031A 08                push A
 031B 5064              mov A,100
 031D 08                push A
 031E 7C0000            xcall _TurnLeft
 0321 38FE              add SP,-2
 0323 8004              xjmp L49
 0325           L48:
 0325                   .dbline 219
 0325           ;               else
 0325           ;                       Stop();
 0325 7C0000            xcall _Stop
 0328           L49:
 0328                   .dbline 229
 0328           ;                       
 0328           ;               //Test 90 degree Turn
 0328           ;               /*      
 0328           ;                       if(timeT <= 100) //1.0s
 0328           ;                               TurnRight(FULL_SPEED);
 0328           ;                       else if(timeT <= 400)
 0328           ;                               timeT = 0;
 0328           ;               */
 0328           ;               
 0328           ;       }
 0328           L45:
 0328                   .dbline 199
 0328 8FD0              xjmp L44
 032A           X20:
 032A                   .dbline -2
 032A           L43:
 032A                   .dbline 0 ; func end
 032A 7F                ret
 032B                   .dbend
                        .area lit(rom, con, rel, lit)
 0000           L47:
 0000 5049524920544F494D494900  .byte 'P,'I,'R,'I,32,'T,'O,'I,'M,'I,'I,0
 000C           L41:
 000C 20202020202000    .byte 32,32,32,32,32,32,0
