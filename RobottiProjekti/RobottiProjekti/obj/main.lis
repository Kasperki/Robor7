                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area data(ram, con, rel)
 0000                   .dbfile ./main.c
 0000           _timeT::
 0000                   .blkb 2
                        .area idata(rom,lit)
 0000 0000              .word 0
                        .area data(ram, con, rel)
 0002                   .dbfile ./main.c
 0002                   .dbfile C:\Users\Kaxxo\DOCUME~1\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0002                   .dbsym e timeT _timeT I
                        .area text(rom, con, rel)
 0000                   .dbfile C:\Users\Kaxxo\DOCUME~1\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0000                   .dbfunc e main _main fV
 0000           ;         buffer -> X+6
 0000           ;              a -> X+4
 0000           ;   pulseForward -> X+2
 0000           ;              i -> X+0
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 380B              add SP,11
 0004                   .dbline 22
 0004           ; //----------------------------------------------------------------------------
 0004           ; // Robotti Projekti
 0004           ; // Robor7 @ 2014
 0004           ; // Kasper Kiiskinen, Henri Sinokki, Eero Holopainen, Mikko Litta, Kari Lampinen
 0004           ; //----------------------------------------------------------------------------
 0004           ; 
 0004           ; #include <m8c.h>        // part specific constants and macros
 0004           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0004           ; #include<stdio.h>
 0004           ; #include<stdlib.h>
 0004           ; 
 0004           ; //Omat header filet
 0004           ; #include "MotorControl.h"
 0004           ; //#include "UltraControl.h"
 0004           ; //#include "GyroControl.h"
 0004           ; //.... 4m täydellä vauhdilla 3.9s
 0004           ; 
 0004           ; int timeT = 0;
 0004           ; 
 0004           ; //Main Method
 0004           ; void main(void)
 0004           ; {
 0004                   .dbline 24
 0004           ;       //Määrittelyt
 0004           ;       int pulseForward = 0;
 0004 560300            mov [X+3],0
 0007 560200            mov [X+2],0
 000A                   .dbline 26
 000A           ;       char buffer[5];
 000A           ;       volatile int i = 0;
 000A 560100            mov [X+1],0
 000D 560000            mov [X+0],0
 0010                   .dbline 27
 0010           ;       int a = 0;
 0010 560500            mov [X+5],0
 0013 560400            mov [X+4],0
 0016                   .dbline 32
 0016           ;       
 0016           ;       //Init**************************
 0016           ;       
 0016           ;       //Enables Global Interrupts
 0016           ;       M8C_EnableGInt; 
 0016 7101                      or  F, 01h
 0018           
 0018                   .dbline 35
 0018           ;       
 0018           ;       //Start LCD
 0018           ;       LCD_Start();
 0018 10                push X
 0019 7C0000            xcall _LCD_Start
 001C                   .dbline 38
 001C           ;       
 001C           ;       //InitializeTimer
 001C           ;       Timer8_Start();
 001C 7C0000            xcall _Timer8_Start
 001F                   .dbline 39
 001F           ;       Timer8_EnableInt();
 001F 7C0000            xcall _Timer8_EnableInt
 0022 20                pop X
 0023                   .dbline 42
 0023           ;       
 0023           ;       //Start Motor PWMs
 0023           ;       InitPWM();
 0023 7C0000            xcall _InitPWM
 0026 809C              xjmp L3
 0028           L2:
 0028                   .dbline 48
 0028           ;       
 0028           ;       
 0028           ;       //MainLoop**********
 0028           ;       //***********************
 0028           ;       while(1)
 0028           ;       {
 0028                   .dbline 50
 0028           ;               //TEST CODE AJA MOOTTOREITA ETEEN/TAAKSE
 0028           ;               i++;
 0028 7701              inc [X+1]
 002A 0F0000            adc [X+0],0
 002D                   .dbline 51
 002D           ;               if (i > 1000)
 002D 50E8              mov A,-24
 002F 1301              sub A,[X+1]
 0031 5200              mov A,[X+0]
 0033 3180              xor A,-128
 0035 5300              mov [__rX],A
 0037 5083              mov A,(3 ^ 0x80)
 0039 1A00              sbb A,[__rX]
 003B D072              jnc L5
 003D           X1:
 003D                   .dbline 53
 003D           ;               {
 003D           ;                       i = 0;
 003D                   .dbline 53
 003D 560100            mov [X+1],0
 0040 560000            mov [X+0],0
 0043                   .dbline 55
 0043           ;               
 0043           ;                       if(pulseForward < 198) 
 0043 5203              mov A,[X+3]
 0045 11C6              sub A,-58
 0047 5202              mov A,[X+2]
 0049 3180              xor A,-128
 004B 1980              sbb A,(0 ^ 0x80)
 004D D006              jnc L7
 004F           X2:
 004F                   .dbline 57
 004F           ;                       {
 004F           ;                               pulseForward++;
 004F                   .dbline 57
 004F 7703              inc [X+3]
 0051 0F0200            adc [X+2],0
 0054                   .dbline 58
 0054           ;                       }
 0054           L7:
 0054                   .dbline 61
 0054           ;                                               
 0054           ;                       //Ajaa moottoreita
 0054           ;                       if(a == 0)
 0054 3D0400            cmp [X+4],0
 0057 B013              jnz L9
 0059 3D0500            cmp [X+5],0
 005C B00E              jnz L9
 005E           X3:
 005E                   .dbline 62
 005E           ;                               MoveForward(199);
 005E 5000              mov A,0
 0060 08                push A
 0061 50C7              mov A,-57
 0063 08                push A
 0064 7C0000            xcall _MoveForward
 0067 38FE              add SP,-2
 0069 800E              xjmp L10
 006B           L9:
 006B                   .dbline 63
 006B           ;                       else if (a == 1)
 006B 3D0400            cmp [X+4],0
 006E B009              jnz L11
 0070 3D0501            cmp [X+5],1
 0073 B004              jnz L11
 0075           X4:
 0075                   .dbline 64
 0075           ;                               Stop();
 0075 7C0000            xcall _Stop
 0078           L11:
 0078           L10:
 0078                   .dbline 68
 0078           ; 
 0078           ;                       
 0078           ;                       //WRITE TO LCD
 0078           ;                       itoa(buffer,pulseForward,10);
 0078 5000              mov A,0
 007A 08                push A
 007B 500A              mov A,10
 007D 08                push A
 007E 5202              mov A,[X+2]
 0080 08                push A
 0081 5203              mov A,[X+3]
 0083 08                push A
 0084 5A00              mov [__r1],X
 0086 060006            add [__r1],6
 0089 5100              mov A,[__r0]
 008B 08                push A
 008C 5100              mov A,[__r1]
 008E 08                push A
 008F 7C0000            xcall _itoa
 0092 38FA              add SP,-6
 0094                   .dbline 69
 0094           ;                       LCD_Position(0,2);
 0094 10                push X
 0095 5702              mov X,2
 0097 5000              mov A,0
 0099 7C0000            xcall _LCD_Position
 009C 20                pop X
 009D                   .dbline 70
 009D           ;                       LCD_PrString(buffer);
 009D 5A00              mov [__r1],X
 009F 060006            add [__r1],6
 00A2 10                push X
 00A3 5100              mov A,[__r0]
 00A5 08                push A
 00A6 5100              mov A,[__r1]
 00A8 5C                mov X,A
 00A9 18                pop A
 00AA 7C0000            xcall _LCD_PrString
 00AD 20                pop X
 00AE                   .dbline 71
 00AE           ;               }
 00AE           L5:
 00AE                   .dbline 75
 00AE           ;               
 00AE           ;               
 00AE           ;               //1s välein vaihda suuntaa. (10ms * 100 = 1s)
 00AE           ;               if (timeT == 1000) //1000 = 10s
 00AE 3C0003            cmp [_timeT],3
 00B1 B011              jnz L13
 00B3 3C01E8            cmp [_timeT+1],-24
 00B6 B00C              jnz L13
 00B8           X5:
 00B8                   .dbline 77
 00B8           ;               {
 00B8           ;                       a++;
 00B8                   .dbline 77
 00B8 7705              inc [X+5]
 00BA 0F0400            adc [X+4],0
 00BD                   .dbline 78
 00BD           ;                       timeT = 0;
 00BD 550100            mov [_timeT+1],0
 00C0 550000            mov [_timeT],0
 00C3                   .dbline 79
 00C3           ;               }
 00C3           L13:
 00C3                   .dbline 80
 00C3           ;       }
 00C3           L3:
 00C3                   .dbline 47
 00C3 8F64              xjmp L2
 00C5           X0:
 00C5                   .dbline -2
 00C5           L1:
 00C5 38F5              add SP,-11
 00C7 20                pop X
 00C8                   .dbline 0 ; func end
 00C8 8FFF              jmp .
 00CA                   .dbsym l buffer 6 A[5:5]c
 00CA                   .dbsym l a 4 I
 00CA                   .dbsym l pulseForward 2 I
 00CA                   .dbsym l i 0 I
 00CA                   .dbend
 00CA                   .dbfunc e TimerInterrupt _TimerInterrupt fV
 00CA           _TimerInterrupt::
 00CA                   .dbline -1
 00CA 08                push A
 00CB                   .dbline 87
 00CB           ; 
 00CB           ; }
 00CB           ; 
 00CB           ; //Kutsutaan joka 0.01s = 10ms välein.
 00CB           ; #pragma interrupt_handler TimerInterrupt
 00CB           ; void TimerInterrupt()
 00CB           ; {
 00CB                   .dbline 88
 00CB           ;   timeT++;
 00CB 7601              inc [_timeT+1]
 00CD 0E0000            adc [_timeT],0
 00D0                   .dbline -2
 00D0           L15:
 00D0 18                pop A
 00D1                   .dbline 0 ; func end
 00D1 7E                reti
 00D2                   .dbend
