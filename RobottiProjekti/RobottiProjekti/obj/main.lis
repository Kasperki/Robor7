                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area data(ram, con, rel)
 0000                   .dbfile ./main.c
 0000           _timeT::
 0000                   .blkb 2
                        .area idata(rom,lit)
 0000 0000              .word 0
                        .area data(ram, con, rel)
 0002                   .dbfile ./main.c
 0002                   .dbfile Z:\robotti\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0002                   .dbsym e timeT _timeT I
 0002           _timeUltra::
 0002                   .blkb 2
                        .area idata(rom,lit)
 0002 0000              .word 0
                        .area data(ram, con, rel)
 0004                   .dbfile Z:\robotti\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0004                   .dbsym e timeUltra _timeUltra I
 0004           _timeUltraRead::
 0004                   .blkb 2
                        .area idata(rom,lit)
 0004 0000              .word 0
                        .area data(ram, con, rel)
 0006                   .dbfile Z:\robotti\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0006                   .dbsym e timeUltraRead _timeUltraRead I
 0006           _milliT::
 0006                   .blkb 4
                        .area idata(rom,lit)
 0006 00000000          .word 0,0
                        .area data(ram, con, rel)
 000A                   .dbfile Z:\robotti\Robor7\ROBOTT~1\ROBOTT~1\main.c
 000A                   .dbsym e milliT _milliT l
 000A           _distanceCM::
 000A                   .blkb 2
                        .area idata(rom,lit)
 000A 0000              .word 0
                        .area data(ram, con, rel)
 000C                   .dbfile Z:\robotti\Robor7\ROBOTT~1\ROBOTT~1\main.c
 000C                   .dbsym e distanceCM _distanceCM I
                        .area text(rom, con, rel)
 0000                   .dbfile Z:\robotti\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0000                   .dbfunc e main _main fV
 0000           ;              i -> X+3
 0000           ;         strPtr -> X+1
 0000           ;        uartBuf -> X+0
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3805              add SP,5
 0004                   .dbline 34
 0004           ; //----------------------------------------------------------------------------
 0004           ; // Robotti Projekti
 0004           ; // Robor7 @ 2014
 0004           ; // Kasper Kiiskinen, Henri Sinokki, Eero Holopainen, Mikko Liira, Kari Lampi
 0004           ; //----------------------------------------------------------------------------
 0004           ; 
 0004           ; #include <m8c.h>        // part specific constants and macros
 0004           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0004           ; #include<stdio.h>
 0004           ; #include<stdlib.h>
 0004           ; #include "delay.h"
 0004           ; 
 0004           ; //Omat header filet
 0004           ; #include "MotorControl.h"
 0004           ; #include "UltraControl.h"
 0004           ; //#include "GyroControl.h"
 0004           ; 
 0004           ; #pragma interrupt_handler PinInterrupt
 0004           ; 
 0004           ; void Delay(int);
 0004           ; void TestLoop(void);
 0004           ; 
 0004           ; //Kellot
 0004           ; volatile int timeT = 0;
 0004           ; int timeUltra = 0,timeUltraRead = 0;
 0004           ; volatile unsigned long int milliT = 0;
 0004           ; 
 0004           ; volatile int distanceCM = 0;
 0004           ; char buffer[10];
 0004           ; 
 0004           ; 
 0004           ; //Main Method
 0004           ; void main(void)
 0004           ; {
 0004                   .dbline 40
 0004           ;       //Init**************************
 0004           ;       //UART
 0004           ;       char * strPtr;                        // Parameter pointer
 0004           ;       char uartBuf;
 0004           ;     
 0004           ;       UART_1_CmdReset();                      // Initialize receiver/cmd // buffer
 0004 10                push X
 0005 7C0000            xcall _UART_1_CmdReset
 0008                   .dbline 42
 0008           ;     //UART_1_IntCntl(UART_1_ENABLE_RX_INT);     // Enable RX interrupts
 0008           ;       UART_1_Start(UART_1_PARITY_NONE); 
 0008 5000              mov A,0
 000A 7C0000            xcall _UART_1_Start
 000D 20                pop X
 000E                   .dbline 45
 000E           ;       
 000E           ;       //Enables Global Interrupts
 000E           ;       M8C_EnableGInt; 
 000E 7101                      or  F, 01h
 0010           
 0010                   .dbline 46
 0010           ;       M8C_EnableIntMask(INT_MSK0, INT_MSK0_GPIO);     //VITTU
 0010 43E020            or REG[0xe0],32
 0013                   .dbline 49
 0013           ;       
 0013           ;       //Start LCD
 0013           ;       LCD_Start();
 0013 10                push X
 0014 7C0000            xcall _LCD_Start
 0017 20                pop X
 0018                   .dbline 52
 0018           ;       
 0018           ;       //Start Motor PWMs
 0018           ;       InitPWM();
 0018 7C0000            xcall _InitPWM
 001B                   .dbline 55
 001B           ;       
 001B           ;       //Init Servo
 001B           ;       InitUAServo();
 001B 7C0000            xcall _InitUAServo
 001E                   .dbline 57
 001E           ;               
 001E           ;       Delay10msTimes(100);
 001E 10                push X
 001F 5064              mov A,100
 0021 7C0000            xcall _Delay10msTimes
 0024 20                pop X
 0025 8066              xjmp L3
 0027           L2:
 0027                   .dbline 65
 0027           ;       
 0027           ;       //Testink
 0027           ;       //TestLoop();
 0027           ; 
 0027           ;       //MainLoop**********
 0027           ;       //***********************
 0027           ;       while(1)
 0027           ;       {
 0027                   .dbline 66
 0027           ;               int i = 0;
 0027 560400            mov [X+4],0
 002A 560300            mov [X+3],0
 002D                   .dbline 70
 002D           ;               //for(i = 0; i < 8; i++)
 002D           ;                       //strPtr[i] = UART_1_cGetChar();
 002D           ;               
 002D           ;               uartBuf = UART_1_cGetChar();
 002D 10                push X
 002E 7C0000            xcall _UART_1_cGetChar
 0031 20                pop X
 0032 5400              mov [X+0],A
 0034                   .dbline 72
 0034           ;               
 0034           ;               if (uartBuf == 0x31)
 0034 3D0031            cmp [X+0],49
 0037 B00C              jnz L5
 0039                   .dbline 74
 0039           ;               {
 0039           ;                       MoveForward(FULL_SPEED);
 0039                   .dbline 74
 0039 5000              mov A,0
 003B 08                push A
 003C 50C7              mov A,-57
 003E 08                push A
 003F 7C0000            xcall _MoveForward
 0042 38FE              add SP,-2
 0044                   .dbline 75
 0044           ;               }
 0044           L5:
 0044                   .dbline 76
 0044           ;               if (uartBuf == 0x32)
 0044 3D0032            cmp [X+0],50
 0047 B00C              jnz L7
 0049                   .dbline 78
 0049           ;               {
 0049           ;                       TurnRight(FULL_SPEED);
 0049                   .dbline 78
 0049 5000              mov A,0
 004B 08                push A
 004C 50C7              mov A,-57
 004E 08                push A
 004F 7C0000            xcall _TurnRight
 0052 38FE              add SP,-2
 0054                   .dbline 79
 0054           ;               }
 0054           L7:
 0054                   .dbline 80
 0054           ;               if (uartBuf == 0x33)
 0054 3D0033            cmp [X+0],51
 0057 B00C              jnz L9
 0059                   .dbline 82
 0059           ;               {
 0059           ;                       MoveBackward(FULL_SPEED);
 0059                   .dbline 82
 0059 5000              mov A,0
 005B 08                push A
 005C 50C7              mov A,-57
 005E 08                push A
 005F 7C0000            xcall _MoveBackward
 0062 38FE              add SP,-2
 0064                   .dbline 83
 0064           ;               }
 0064           L9:
 0064                   .dbline 84
 0064           ;               if (uartBuf == 0x34)
 0064 3D0034            cmp [X+0],52
 0067 B00C              jnz L11
 0069                   .dbline 86
 0069           ;               {
 0069           ;                       TurnLeft(FULL_SPEED);
 0069                   .dbline 86
 0069 5000              mov A,0
 006B 08                push A
 006C 50C7              mov A,-57
 006E 08                push A
 006F 7C0000            xcall _TurnLeft
 0072 38FE              add SP,-2
 0074                   .dbline 87
 0074           ;               }
 0074           L11:
 0074                   .dbline 88
 0074           ;               if(uartBuf == 0x30)
 0074 3D0030            cmp [X+0],48
 0077 B004              jnz L13
 0079                   .dbline 89
 0079           ;                       Stop();
 0079 7C0000            xcall _Stop
 007C           L13:
 007C                   .dbline 92
 007C           ;               
 007C           ;               
 007C           ;               LCD_Position(0,0);
 007C 10                push X
 007D 5000              mov A,0
 007F 5700              mov X,0
 0081 7C0000            xcall _LCD_Position
 0084 20                pop X
 0085                   .dbline 93
 0085           ;               LCD_PrHexByte(uartBuf);
 0085 10                push X
 0086 5200              mov A,[X+0]
 0088 7C0000            xcall _LCD_PrHexByte
 008B 20                pop X
 008C                   .dbline 95
 008C           ;               //LCD_PrString(strPtr);
 008C           ;       }
 008C           L3:
 008C                   .dbline 64
 008C 8F9A              xjmp L2
 008E           X0:
 008E                   .dbline -2
 008E           L1:
 008E 38FB              add SP,-5
 0090 20                pop X
 0091                   .dbline 0 ; func end
 0091 8FFF              jmp .
 0093                   .dbsym l i 3 I
 0093                   .dbsym l strPtr 1 pc
 0093                   .dbsym l uartBuf 0 c
 0093                   .dbend
 0093                   .dbfunc e PinInterrupt _PinInterrupt fV
 0093           _PinInterrupt::
 0093                   .dbline -1
 0093 08                push A
 0094                   .dbline 100
 0094           ; }
 0094           ; 
 0094           ; 
 0094           ; // Pin interrupt
 0094           ; void PinInterrupt(void){}
 0094                   .dbline -2
 0094           L15:
 0094 18                pop A
 0095                   .dbline 0 ; func end
 0095 7E                reti
 0096                   .dbend
 0096                   .dbfunc e TestLoop _TestLoop fV
 0096           _TestLoop::
 0096                   .dbline -1
 0096                   .dbline 105
 0096           ; 
 0096           ; 
 0096           ; //For Testing
 0096           ; void TestLoop(void)
 0096           ; {
 0096           L17:
 0096                   .dbline 107
 0096           ;       while(1)
 0096           ;       {       
 0096                   .dbline 123
 0096           ;               /*ControlServo(SERVO_LEFT);
 0096           ;               Delay10msTimes(250);
 0096           ;               ControlServo(SERVO_MIDDLE_FROM_LEFT);
 0096           ;               Delay10msTimes(250);
 0096           ;               ControlServo(SERVO_RIGHT);
 0096           ;               Delay10msTimes(250);
 0096           ;               ControlServo(SERVO_MIDDLE_FROM_RIGHT);
 0096           ;               Delay10msTimes(250);            
 0096           ;                       
 0096           ;               itoa(buffer,distanceCM,10);
 0096           ;               LCD_Position(0,0);
 0096           ;               LCD_PrCString("     ");
 0096           ;               LCD_Position(0,0);
 0096           ;               LCD_PrString(buffer);
 0096           ;               */              
 0096           ;       }
 0096           L18:
 0096                   .dbline 106
 0096 8FFF              xjmp L17
 0098           X1:
 0098                   .dbline -2
 0098           L16:
 0098                   .dbline 0 ; func end
 0098 7F                ret
 0099                   .dbend
 0099                   .dbfunc e Delay _Delay fV
 0099           ;          timme -> X+0
 0099           ;          delay -> X-5
 0099           _Delay::
 0099                   .dbline -1
 0099 10                push X
 009A 4F                mov X,SP
 009B 3804              add SP,4
 009D                   .dbline 128
 009D           ; }
 009D           ; 
 009D           ; ////OMA Delay function 
 009D           ; void Delay(int delay)
 009D           ; {
 009D                   .dbline 129
 009D           ;       unsigned long int timme = milliT + delay;
 009D 52FC              mov A,[X-4]
 009F 5300              mov [__r3],A
 00A1 52FB              mov A,[X-5]
 00A3 5300              mov [__r2],A
 00A5 470080            tst [__r2],-128
 00A8 A009              jz X2
 00AA 5500FF            mov [__r1],-1
 00AD 5500FF            mov [__r0],-1
 00B0 8007              jmp X3
 00B2           X2:
 00B2 550000            mov [__r1],0
 00B5 550000            mov [__r0],0
 00B8           X3:
 00B8 5109              mov A,[_milliT+3]
 00BA 0200              add A,[__r3]
 00BC 5403              mov [X+3],A
 00BE 5108              mov A,[_milliT+2]
 00C0 0A00              adc A,[__r2]
 00C2 5402              mov [X+2],A
 00C4 5107              mov A,[_milliT+1]
 00C6 0A00              adc A,[__r1]
 00C8 5401              mov [X+1],A
 00CA 5106              mov A,[_milliT]
 00CC 0A00              adc A,[__r0]
 00CE 5400              mov [X+0],A
 00D0           L21:
 00D0                   .dbline 130
 00D0           ;       while (milliT < timme){}
 00D0                   .dbline 130
 00D0           L22:
 00D0                   .dbline 130
 00D0 5109              mov A,[_milliT+3]
 00D2 1303              sub A,[X+3]
 00D4 5108              mov A,[_milliT+2]
 00D6 1B02              sbb A,[X+2]
 00D8 5107              mov A,[_milliT+1]
 00DA 1B01              sbb A,[X+1]
 00DC 5106              mov A,[_milliT]
 00DE 1B00              sbb A,[X+0]
 00E0 CFEF              jc L21
 00E2           X4:
 00E2                   .dbline -2
 00E2           L20:
 00E2 38FC              add SP,-4
 00E4 20                pop X
 00E5                   .dbline 0 ; func end
 00E5 7F                ret
 00E6                   .dbsym l timme 0 l
 00E6                   .dbsym l delay -5 I
 00E6                   .dbend
                        .area bss(ram, con, rel)
 0000                   .dbfile Z:\robotti\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0000           _buffer::
 0000                   .blkb 10
 000A                   .dbsym e buffer _buffer A[10:10]c
