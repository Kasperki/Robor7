                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area data(ram, con, rel)
 0000                   .dbfile ./main.c
 0000           _timeT::
 0000                   .blkb 2
                        .area idata(rom,lit)
 0000 0000              .word 0
                        .area data(ram, con, rel)
 0002                   .dbfile ./main.c
 0002                   .dbfile Z:\Robo\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0002                   .dbsym e timeT _timeT I
 0002           _timeT2::
 0002                   .blkb 2
                        .area idata(rom,lit)
 0002 0000              .word 0
                        .area data(ram, con, rel)
 0004                   .dbfile Z:\Robo\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0004                   .dbsym e timeT2 _timeT2 I
 0004           _timeLCD::
 0004                   .blkb 2
                        .area idata(rom,lit)
 0004 0000              .word 0
                        .area data(ram, con, rel)
 0006                   .dbfile Z:\Robo\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0006                   .dbsym e timeLCD _timeLCD I
 0006           _timeUltra::
 0006                   .blkb 2
                        .area idata(rom,lit)
 0006 0000              .word 0
                        .area data(ram, con, rel)
 0008                   .dbfile Z:\Robo\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0008                   .dbsym e timeUltra _timeUltra I
 0008           _timeForward::
 0008                   .blkb 2
                        .area idata(rom,lit)
 0008 0032              .word 50
                        .area data(ram, con, rel)
 000A                   .dbfile Z:\Robo\Robor7\ROBOTT~1\ROBOTT~1\main.c
 000A                   .dbsym e timeForward _timeForward I
 000A           _turnTime::
 000A                   .blkb 2
                        .area idata(rom,lit)
 000A 004B              .word 75
                        .area data(ram, con, rel)
 000C                   .dbfile Z:\Robo\Robor7\ROBOTT~1\ROBOTT~1\main.c
 000C                   .dbsym e turnTime _turnTime I
 000C           _timeRobotWidth::
 000C                   .blkb 2
                        .area idata(rom,lit)
 000C 000F              .word 15
                        .area data(ram, con, rel)
 000E                   .dbfile Z:\Robo\Robor7\ROBOTT~1\ROBOTT~1\main.c
 000E                   .dbsym e timeRobotWidth _timeRobotWidth I
                        .area text(rom, con, rel)
 0000                   .dbfile Z:\Robo\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0000                   .dbfunc e main _main fV
 0000           ;         buffer -> X+8
 0000           ;          kulma -> X+6
 0000           ;      ultraData -> X+4
 0000           ;           turn -> X+2
 0000           ;              i -> X+0
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3812              add SP,18
 0004                   .dbline 27
 0004           ; //----------------------------------------------------------------------------
 0004           ; // Robotti Projekti
 0004           ; // Robor7 @ 2014
 0004           ; // Kasper Kiiskinen, Henri Sinokki, Eero Holopainen, Mikko Liira, Kari Lampi
 0004           ; //----------------------------------------------------------------------------
 0004           ; 
 0004           ; #include <m8c.h>        // part specific constants and macros
 0004           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0004           ; #include<stdio.h>
 0004           ; #include<stdlib.h>
 0004           ; 
 0004           ; //Omat header filet
 0004           ; #include "MotorControl.h"
 0004           ; #include "UltraControl.h"
 0004           ; //#include "GyroControl.h"
 0004           ; 
 0004           ; //Kellot
 0004           ; int timeT = 0,timeT2 = 0;
 0004           ; int timeLCD = 0,timeUltra = 0; 
 0004           ; 
 0004           ; int timeForward = 50; //.... 4m täydellä vauhdilla 3.9s
 0004           ; int turnTime = 75;       //.... 90 asteen käännökseen meneväaika
 0004           ; int timeRobotWidth = 15; //.... Robotin leveyteen menevä aika ?
 0004           ; 
 0004           ; //Main Method
 0004           ; void main(void)
 0004           ; {
 0004                   .dbline 30
 0004           ;       //Määrittelyt
 0004           ;       char buffer[10];
 0004           ;       volatile int i = 0;
 0004 560100            mov [X+1],0
 0007 560000            mov [X+0],0
 000A                   .dbline 31
 000A           ;       int turn = 0;
 000A 560300            mov [X+3],0
 000D 560200            mov [X+2],0
 0010                   .dbline 32
 0010           ;       int ultraData = 0; //Data from ultrasonic sensor
 0010 560500            mov [X+5],0
 0013 560400            mov [X+4],0
 0016                   .dbline 33
 0016           ;       int kulma = 0;
 0016 560700            mov [X+7],0
 0019 560600            mov [X+6],0
 001C                   .dbline 38
 001C           ;       
 001C           ;       //Init**************************
 001C           ;       
 001C           ;       //Enables Global Interrupts
 001C           ;       M8C_EnableGInt; 
 001C 7101                      or  F, 01h
 001E           
 001E                   .dbline 41
 001E           ;               
 001E           ;       //Start LCD
 001E           ;       LCD_Start();
 001E 10                push X
 001F 7C0000            xcall _LCD_Start
 0022                   .dbline 44
 0022           ;       
 0022           ;       //InitializeTimer
 0022           ;       Timer8_Start();
 0022 7C0000            xcall _Timer8_Start
 0025                   .dbline 45
 0025           ;       Timer8_EnableInt();
 0025 7C0000            xcall _Timer8_EnableInt
 0028 20                pop X
 0029                   .dbline 48
 0029           ;               
 0029           ;       //Start Motor PWMs
 0029           ;       InitPWM();
 0029 7C0000            xcall _InitPWM
 002C                   .dbline 51
 002C           ;       
 002C           ;       //Init PGA and ADCIN for Ultrasonic
 002C           ;       InitUA();
 002C 7C0000            xcall _InitUA
 002F                   .dbline 54
 002F           ;       
 002F           ;       //Testink
 002F           ;       TestLoop();
 002F 901A              xcall _TestLoop
 0031                   .dbline -2
 0031           L1:
 0031 38EE              add SP,-18
 0033 20                pop X
 0034                   .dbline 0 ; func end
 0034 8FFF              jmp .
 0036                   .dbsym l buffer 8 A[10:10]c
 0036                   .dbsym l kulma 6 I
 0036                   .dbsym l ultraData 4 I
 0036                   .dbsym l turn 2 I
 0036                   .dbsym l i 0 I
 0036                   .dbend
 0036                   .dbfunc e TimerInterrupt _TimerInterrupt fV
 0036           _TimerInterrupt::
 0036                   .dbline -1
 0036                   .dbline 181
 0036           ;       
 0036           ;       //MainLoop**********
 0036           ;       //***********************
 0036           ;       /*
 0036           ;       while(1)
 0036           ;       {
 0036           ;               //Controlls the ultraSonic trigger
 0036           ;               ControlTrigger(&timeUltra);     
 0036           ;                       
 0036           ;               //Gets the data
 0036           ;               ultraData = getDataUA();
 0036           ;               
 0036           ;               //Spiraali
 0036           ;               if(i < 10)
 0036           ;               {
 0036           ;                       if(i < 3)
 0036           ;                       {
 0036           ;                               if(turn == 0)
 0036           ;                                       MoveForward(FULL_SPEED);
 0036           ;                               else 
 0036           ;                               {
 0036           ;                                       if(timeT <= turnTime) //if(gyroKulma < 90)
 0036           ;                                       {
 0036           ;                                               TurnLeft(FULL_SPEED);
 0036           ;                                       }
 0036           ;                                       else
 0036           ;                                       { 
 0036           ;                                               turn = 0;
 0036           ;                                               timeT = 0;
 0036           ;                                       }
 0036           ;                               }
 0036           ;                       }
 0036           ;                       else if(i < 5) 
 0036           ;                       {
 0036           ;                               i = 0;
 0036           ;                               timeForward -= timeRobotWidth;
 0036           ;                       }
 0036           ;                       
 0036           ;                       //Kokokierros on menty
 0036           ;                       if(timeForward <= 0)
 0036           ;                       {
 0036           ;                               i = 10;
 0036           ;                               timeT = 0; 
 0036           ;                               timeT2 = 0;
 0036           ;                               turn = 0;
 0036           ;                               timeForward = 0;
 0036           ;                               Stop();
 0036           ;                       }
 0036           ;                       else if (timeT >= timeForward && turn == 0)
 0036           ;                       {
 0036           ;                               i++;
 0036           ;                               turn = 1;
 0036           ;                               timeT = 0;
 0036           ;                       }
 0036           ;               }
 0036           ;               //End Spiraali
 0036           ;               
 0036           ;               
 0036           ;               //Scan
 0036           ;               if(i == 10)
 0036           ;               {
 0036           ;                       if(kulma < 360)
 0036           ;                       {
 0036           ;                               if(ultraData < 200)
 0036           ;                               {       
 0036           ;                                       if(ultraData > 0)
 0036           ;                                               MoveForward(SLOW_SPEED); 
 0036           ;                               }
 0036           ;                               else if (timeT2 >= 50) //WAIT 500ms
 0036           ;                               {
 0036           ;                                       if (turn == 0)
 0036           ;                                       {       
 0036           ;                                               timeT = 0;
 0036           ;                                               turn = 1;
 0036           ;                                       }
 0036           ;                                               
 0036           ;                                       if(timeT <= 20)
 0036           ;                                               TurnRight(HALF_SPEED);
 0036           ;                                       else
 0036           ;                                       {
 0036           ;                                               kulma+=5;
 0036           ;                                               timeT2 = 0;
 0036           ;                                               turn = 0;
 0036           ;                                       }
 0036           ;                               }
 0036           ;                               else 
 0036           ;                                       Stop();
 0036           ;                       }
 0036           ;                       else 
 0036           ;                               i = 20;
 0036           ;               }
 0036           ;               
 0036           ;               if(i == 20)
 0036           ;                       Stop();
 0036           ;               
 0036           ;               
 0036           ;               //WRITE TO LCD
 0036           ;               if(timeLCD >= 6)
 0036           ;               {
 0036           ;                       itoa(buffer,ultraData,10);
 0036           ;                       LCD_Position(0,0);
 0036           ;                       LCD_PrCString("      ");
 0036           ;                       LCD_Position(0,0);
 0036           ;                       LCD_PrString(buffer);
 0036           ;                                       
 0036           ;                       //
 0036           ;                       LCD_Position(0,5);
 0036           ;                       LCD_PrCString("      ");
 0036           ;                       itoa(buffer,timeForward,10);
 0036           ;                       LCD_Position(0,5);
 0036           ;                       LCD_PrString(buffer);
 0036           ;                       
 0036           ;                       LCD_Position(1,0);
 0036           ;                       LCD_PrCString("      ");
 0036           ;                       itoa(buffer,kulma,10);
 0036           ;                       LCD_Position(1,0);
 0036           ;                       LCD_PrString(buffer);
 0036           ;                       
 0036           ;                       timeLCD = 0;
 0036           ;               }               
 0036           ;       }
 0036           ;       */
 0036           ; }
 0036           ; 
 0036           ; //Kutsutaan joka 0.01s = 10ms välein.
 0036           ; void TimerInterrupt()
 0036           ; {
 0036                   .dbline 182
 0036           ;   timeT++;
 0036 7601              inc [_timeT+1]
 0038 0E0000            adc [_timeT],0
 003B                   .dbline 183
 003B           ;   timeT2++;
 003B 7603              inc [_timeT2+1]
 003D 0E0200            adc [_timeT2],0
 0040                   .dbline 185
 0040           ; 
 0040           ;   timeLCD++; //Controlls LCD draw cycle
 0040 7605              inc [_timeLCD+1]
 0042 0E0400            adc [_timeLCD],0
 0045                   .dbline 186
 0045           ;   timeUltra++; //Controlls Ultrasonic sensor trigger time
 0045 7607              inc [_timeUltra+1]
 0047 0E0600            adc [_timeUltra],0
 004A                   .dbline -2
 004A           L2:
 004A                   .dbline 0 ; func end
 004A 7F                ret
 004B                   .dbend
 004B                   .dbfunc e TestLoop _TestLoop fV
 004B           _TestLoop::
 004B                   .dbline -1
 004B                   .dbline 191
 004B           ; }
 004B           ; 
 004B           ; //For Testing
 004B           ; void TestLoop()
 004B           ; {
 004B 800C              xjmp L5
 004D           L4:
 004D                   .dbline 193
 004D           ;       while(1)
 004D           ;       {
 004D                   .dbline 196
 004D           ;               //Test 4m
 004D           ; 
 004D           ;               MoveForward(HALF_SPEED);
 004D 5000              mov A,0
 004F 08                push A
 0050 5064              mov A,100
 0052 08                push A
 0053 7C0000            xcall _MoveForward
 0056 38FE              add SP,-2
 0058                   .dbline 207
 0058           ;               
 0058           ;               
 0058           ;               //Test 90 degree Turn
 0058           ;               /*      
 0058           ;                       if(timeT <= 100) //1.0s
 0058           ;                               TurnRight(FULL_SPEED);
 0058           ;                       else if(timeT <= 400)
 0058           ;                               timeT = 0;
 0058           ;               */
 0058           ;               
 0058           ;       }
 0058           L5:
 0058                   .dbline 192
 0058 8FF4              xjmp L4
 005A           X0:
 005A                   .dbline -2
 005A           L3:
 005A                   .dbline 0 ; func end
 005A 7F                ret
 005B                   .dbend
