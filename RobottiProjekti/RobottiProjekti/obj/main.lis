                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area data(ram, con, rel)
 0000                   .dbfile ./main.c
 0000           _timeT::
 0000                   .blkb 2
                        .area idata(rom,lit)
 0000 0000              .word 0
                        .area data(ram, con, rel)
 0002                   .dbfile ./main.c
 0002                   .dbfile Z:\Robo\Roobbo\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0002                   .dbsym e timeT _timeT I
 0002           _timeUltra::
 0002                   .blkb 2
                        .area idata(rom,lit)
 0002 0000              .word 0
                        .area data(ram, con, rel)
 0004                   .dbfile Z:\Robo\Roobbo\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0004                   .dbsym e timeUltra _timeUltra I
 0004           _timeUltraRead::
 0004                   .blkb 2
                        .area idata(rom,lit)
 0004 0000              .word 0
                        .area data(ram, con, rel)
 0006                   .dbfile Z:\Robo\Roobbo\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0006                   .dbsym e timeUltraRead _timeUltraRead I
 0006           _milliT::
 0006                   .blkb 4
                        .area idata(rom,lit)
 0006 00000000          .word 0,0
                        .area data(ram, con, rel)
 000A                   .dbfile Z:\Robo\Roobbo\Robor7\ROBOTT~1\ROBOTT~1\main.c
 000A                   .dbsym e milliT _milliT l
 000A           _a::
 000A                   .blkb 2
                        .area idata(rom,lit)
 000A 0000              .word 0
                        .area data(ram, con, rel)
 000C                   .dbfile Z:\Robo\Roobbo\Robor7\ROBOTT~1\ROBOTT~1\main.c
 000C                   .dbsym e a _a I
 000C           _pertti::
 000C                   .blkb 2
                        .area idata(rom,lit)
 000C 0000              .word 0
                        .area data(ram, con, rel)
 000E                   .dbfile Z:\Robo\Roobbo\Robor7\ROBOTT~1\ROBOTT~1\main.c
 000E                   .dbsym e pertti _pertti I
 000E           _timeForward::
 000E                   .blkb 2
                        .area idata(rom,lit)
 000E 0032              .word 50
                        .area data(ram, con, rel)
 0010                   .dbfile Z:\Robo\Roobbo\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0010                   .dbsym e timeForward _timeForward I
 0010           _turnTime::
 0010                   .blkb 2
                        .area idata(rom,lit)
 0010 0037              .word 55
                        .area data(ram, con, rel)
 0012                   .dbfile Z:\Robo\Roobbo\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0012                   .dbsym e turnTime _turnTime I
 0012           _timeRobotWidth::
 0012                   .blkb 2
                        .area idata(rom,lit)
 0012 000F              .word 15
                        .area data(ram, con, rel)
 0014                   .dbfile Z:\Robo\Roobbo\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0014                   .dbsym e timeRobotWidth _timeRobotWidth I
 0014           _ultraData::
 0014                   .blkb 2
                        .area idata(rom,lit)
 0014 0000              .word 0
                        .area data(ram, con, rel)
 0016                   .dbfile Z:\Robo\Roobbo\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0016                   .dbsym e ultraData _ultraData I
                        .area text(rom, con, rel)
 0000                   .dbfile Z:\Robo\Roobbo\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0000                   .dbfunc e main _main fV
 0000           _main::
 0000                   .dbline -1
 0000                   .dbline 40
 0000           ; //----------------------------------------------------------------------------
 0000           ; // Robotti Projekti
 0000           ; // Robor7 @ 2014
 0000           ; // Kasper Kiiskinen, Henri Sinokki, Eero Holopainen, Mikko Liira, Kari Lampi
 0000           ; //----------------------------------------------------------------------------
 0000           ; 
 0000           ; #include <m8c.h>        // part specific constants and macros
 0000           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0000           ; #include<stdio.h>
 0000           ; #include<stdlib.h>
 0000           ; 
 0000           ; //Omat header filet
 0000           ; #include "MotorControl.h"
 0000           ; #include "UltraControl.h"
 0000           ; //#include "GyroControl.h"
 0000           ; 
 0000           ; #pragma interrupt_handler PinInterrupt
 0000           ; 
 0000           ; void Delay(int);
 0000           ; void TestLoop(void);
 0000           ; void CounterISR(void);
 0000           ; 
 0000           ; //Kellot
 0000           ; volatile int timeT = 0;
 0000           ; int timeUltra = 0,timeUltraRead = 0;
 0000           ; volatile unsigned long int milliT = 0;
 0000           ; 
 0000           ; //Test
 0000           ; volatile int a = 0;
 0000           ; char buffer[10];
 0000           ; 
 0000           ; int pertti = 0;
 0000           ; int timeForward = 50; //.... 4m täydellä vauhdilla 3.7s
 0000           ; int turnTime = 55;       //.... 90 asteen käännökseen meneväaika
 0000           ; int timeRobotWidth = 15; //.... Robotin leveyteen menevä aika ?
 0000           ; int ultraData = 0; //Ultraääni anturrista saatava arvo millisekunteina pitää jakaa jollain että saadaan senttimerejä
 0000           ; 
 0000           ; //Main Method
 0000           ; void main(void)
 0000           ; {
 0000                   .dbline 44
 0000           ;       //Init**************************
 0000           ;       
 0000           ;       //Enables Global Interrupts
 0000           ;       M8C_EnableGInt; 
 0000 7101                      or  F, 01h
 0002           
 0002                   .dbline 45
 0002           ;       M8C_EnableIntMask(INT_MSK0, INT_MSK0_GPIO);     //VITTU
 0002 43E020            or REG[0xe0],32
 0005                   .dbline 48
 0005           ;       
 0005           ;       //Start LCD
 0005           ;       LCD_Start();
 0005 10                push X
 0006 7C0000            xcall _LCD_Start
 0009                   .dbline 50
 0009           ;       //InitializeTimer
 0009           ;       Timer8_Start();
 0009 7C0000            xcall _Timer8_Start
 000C                   .dbline 51
 000C           ;       Timer8_EnableInt();
 000C 7C0000            xcall _Timer8_EnableInt
 000F                   .dbline 53
 000F           ;               
 000F           ;       Counter16_1_EnableInt();
 000F 7C0000            xcall _Counter16_1_EnableInt
 0012                   .dbline 54
 0012           ;       Counter16_1_Start();
 0012 7C0000            xcall _Counter16_1_Start
 0015 20                pop X
 0016                   .dbline 67
 0016           ;       
 0016           ;       //Start Motor PWMs
 0016           ;       //InitPWM();
 0016           ;       
 0016           ;       //Init Servo
 0016           ;       //InitUAServo();
 0016           ;               
 0016           ;       //Delay(500);
 0016           ;       
 0016           ;       //Counter8_Start();
 0016           ;       
 0016           ;       //Testink
 0016           ;       TestLoop();
 0016 90AB              xcall _TestLoop
 0018                   .dbline -2
 0018           L1:
 0018                   .dbline 0 ; func end
 0018 8FFF              jmp .
 001A                   .dbend
 001A                   .dbfunc e Delay _Delay fV
 001A           ;          timme -> X+0
 001A           ;          dealy -> X-5
 001A           _Delay::
 001A                   .dbline -1
 001A 10                push X
 001B 4F                mov X,SP
 001C 3804              add SP,4
 001E                   .dbline 84
 001E           ; 
 001E           ;       //MainLoop**********
 001E           ;       //***********************
 001E           ;       /*while(1)
 001E           ;       {
 001E           ;               //Controlls the ultraSonic trigger
 001E           ;               ControlTrigger(&timeUltra);     
 001E           ;                       
 001E           ;               //Gets the data
 001E           ;               //ultraData = getDataUA();
 001E           ;               
 001E           ;       }*/
 001E           ; }
 001E           ; 
 001E           ; //Delay function
 001E           ; void Delay(int dealy)
 001E           ; {
 001E                   .dbline 85
 001E           ;       unsigned long int timme = milliT + dealy;
 001E 52FC              mov A,[X-4]
 0020 5300              mov [__r3],A
 0022 52FB              mov A,[X-5]
 0024 5300              mov [__r2],A
 0026 470080            tst [__r2],-128
 0029 A009              jz X0
 002B 5500FF            mov [__r1],-1
 002E 5500FF            mov [__r0],-1
 0031 8007              jmp X1
 0033           X0:
 0033 550000            mov [__r1],0
 0036 550000            mov [__r0],0
 0039           X1:
 0039 5109              mov A,[_milliT+3]
 003B 0200              add A,[__r3]
 003D 5403              mov [X+3],A
 003F 5108              mov A,[_milliT+2]
 0041 0A00              adc A,[__r2]
 0043 5402              mov [X+2],A
 0045 5107              mov A,[_milliT+1]
 0047 0A00              adc A,[__r1]
 0049 5401              mov [X+1],A
 004B 5106              mov A,[_milliT]
 004D 0A00              adc A,[__r0]
 004F 5400              mov [X+0],A
 0051           L3:
 0051                   .dbline 86
 0051           ;       while (milliT < timme){}
 0051                   .dbline 86
 0051           L4:
 0051                   .dbline 86
 0051 5109              mov A,[_milliT+3]
 0053 1303              sub A,[X+3]
 0055 5108              mov A,[_milliT+2]
 0057 1B02              sbb A,[X+2]
 0059 5107              mov A,[_milliT+1]
 005B 1B01              sbb A,[X+1]
 005D 5106              mov A,[_milliT]
 005F 1B00              sbb A,[X+0]
 0061 CFEF              jc L3
 0063           X2:
 0063                   .dbline -2
 0063           L2:
 0063 38FC              add SP,-4
 0065 20                pop X
 0066                   .dbline 0 ; func end
 0066 7F                ret
 0067                   .dbsym l timme 0 l
 0067                   .dbsym l dealy -5 I
 0067                   .dbend
 0067                   .dbfunc e TimerInterrupt _TimerInterrupt fV
 0067           _TimerInterrupt::
 0067                   .dbline -1
 0067                   .dbline 92
 0067           ; }
 0067           ; 
 0067           ; //Palauttaa eerolle millisekunnit siitä asti ku psoc on käynnistytnyt
 0067           ; //Kutsutaan joka 0.001s = 1ms välein.
 0067           ; void TimerInterrupt(void)
 0067           ; {
 0067                   .dbline 93
 0067           ;   timeT++;
 0067 7601              inc [_timeT+1]
 0069 0E0000            adc [_timeT],0
 006C                   .dbline 96
 006C           ;       
 006C           ;   //DO NOT TOUCH
 006C           ;   milliT++;
 006C 060901            add [_milliT+3],1
 006F 0E0800            adc [_milliT+2],0
 0072 0E0700            adc [_milliT+1],0
 0075 0E0600            adc [_milliT],0
 0078                   .dbline 97
 0078           ;   timeUltra++;
 0078 7603              inc [_timeUltra+1]
 007A 0E0200            adc [_timeUltra],0
 007D                   .dbline 98
 007D           ;   timeUltraRead++;
 007D 7605              inc [_timeUltraRead+1]
 007F 0E0400            adc [_timeUltraRead],0
 0082                   .dbline -2
 0082           L6:
 0082                   .dbline 0 ; func end
 0082 7F                ret
 0083                   .dbend
 0083                   .dbfunc e CounterISR _CounterISR fV
 0083           _CounterISR::
 0083                   .dbline -1
 0083                   .dbline 103
 0083           ; }
 0083           ; 
 0083           ; //Counter INTERRUPT
 0083           ; void CounterISR(void)
 0083           ; {
 0083                   .dbline 104
 0083           ;   pertti++;
 0083 760D              inc [_pertti+1]
 0085 0E0C00            adc [_pertti],0
 0088                   .dbline -2
 0088           L7:
 0088                   .dbline 0 ; func end
 0088 7F                ret
 0089                   .dbend
                        .area bss(ram, con, rel)
 0000                   .dbfile Z:\Robo\Roobbo\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0000           L9:
 0000                   .blkb 1
 0001           L10:
 0001                   .blkb 2
                        .area text(rom, con, rel)
 0089                   .dbfile Z:\Robo\Roobbo\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0089                   .dbfunc e PinInterrupt _PinInterrupt fV
 0089                   .dbsym s nousevaReuna L10 I
 0089                   .dbsym s port0_prevValue L9 c
 0089           _PinInterrupt::
 0089                   .dbline -1
 0089 08                push A
 008A 5100              mov A,[__r0]
 008C 08                push A
 008D                   .dbline 108
 008D           ; }
 008D           ; 
 008D           ; void PinInterrupt(void)
 008D           ; {
 008D                   .dbline 116
 008D           ;       static BYTE port0_prevValue;
 008D           ;       static nousevaReuna;
 008D           ;       
 008D           ;       //a++;
 008D           ;       
 008D           ;       //UÅ ECHO 
 008D           ;       /* Check if interrupt because of P0_7 change from read */
 008D           ;       if ((PRT0DR ^ port0_prevValue)==0x80)
 008D 5D00              mov A,REG[0]
 008F 5300              mov [__r0],A
 0091 5100              mov A,[L9]
 0093 3400              xor [__r0],A
 0095 3C0080            cmp [__r0],-128
 0098 B01F              jnz L11
 009A                   .dbline 119
 009A           ;       {
 009A           ;       
 009A           ;               if (nousevaReuna == 0)
 009A                   .dbline 119
 009A 3C0100            cmp [L10],0
 009D B014              jnz L13
 009F 3C0200            cmp [L10+1],0
 00A2 B00F              jnz L13
 00A4           X3:
 00A4                   .dbline 121
 00A4           ;               {
 00A4           ;                       timeUltraRead = 0;
 00A4                   .dbline 121
 00A4 550500            mov [_timeUltraRead+1],0
 00A7 550400            mov [_timeUltraRead],0
 00AA                   .dbline 122
 00AA           ;                       nousevaReuna = 1;
 00AA 550201            mov [L10+1],1
 00AD 550100            mov [L10],0
 00B0                   .dbline 125
 00B0           ;                       //Counter8_Start();
 00B0           ;                       //a = 1;
 00B0           ;               }
 00B0 8007              xjmp L14
 00B2           L13:
 00B2                   .dbline 127
 00B2           ;               else 
 00B2           ;               {
 00B2                   .dbline 128
 00B2           ;                       nousevaReuna = 0;
 00B2 550200            mov [L10+1],0
 00B5 550100            mov [L10],0
 00B8                   .dbline 133
 00B8           ;                       //ultraData = Counter8_wReadCounter();
 00B8           ;                       //Counter8_Stop();
 00B8           ;                       //a = 0;
 00B8           ;                       //ultraData = timeUltraRead;
 00B8           ;               }
 00B8           L14:
 00B8                   .dbline 134
 00B8           ;       }
 00B8           L11:
 00B8                   .dbline 137
 00B8           ; 
 00B8           ;       /* Store values of P0_40 for next ISR */
 00B8           ;       port0_prevValue = PRT0DR & 0x80;
 00B8 5D00              mov A,REG[0]
 00BA 2180              and A,-128
 00BC 5300              mov [L9],A
 00BE                   .dbline -2
 00BE           L8:
 00BE 18                pop A
 00BF 5300              mov [__r0],A
 00C1 18                pop A
 00C2                   .dbline 0 ; func end
 00C2 7E                reti
 00C3                   .dbend
 00C3                   .dbfunc e TestLoop _TestLoop fV
 00C3           _TestLoop::
 00C3                   .dbline -1
 00C3                   .dbline 144
 00C3           ;       
 00C3           ; }
 00C3           ; 
 00C3           ; 
 00C3           ; //For Testing
 00C3           ; void TestLoop(void)
 00C3           ; {
 00C3 8060              xjmp L17
 00C5           L16:
 00C5                   .dbline 146
 00C5           ;       while(1)
 00C5           ;       {
 00C5                   .dbline 148
 00C5           ;               
 00C5           ;               UATrig_Data_ADDR |= UATrig_MASK;
 00C5 430040            or REG[0],64
 00C8                   .dbline 149
 00C8           ;               Delay(1);
 00C8 5000              mov A,0
 00CA 08                push A
 00CB 5001              mov A,1
 00CD 08                push A
 00CE 9F4A              xcall _Delay
 00D0 38FE              add SP,-2
 00D2                   .dbline 150
 00D2           ;               pertti = 0;
 00D2 550D00            mov [_pertti+1],0
 00D5 550C00            mov [_pertti],0
 00D8                   .dbline 151
 00D8           ;               UATrig_Data_ADDR &= 0b00000000; 
 00D8 620000            mov REG[0],0
 00DB                   .dbline 152
 00DB           ;               Delay(10);
 00DB 5000              mov A,0
 00DD 08                push A
 00DE 500A              mov A,10
 00E0 08                push A
 00E1 9F37              xcall _Delay
 00E3                   .dbline 153
 00E3           ;               a = pertti;
 00E3 5F0B0D            mov [_a+1],[_pertti+1]
 00E6 5F0A0C            mov [_a],[_pertti]
 00E9                   .dbline 156
 00E9           ;               //~UATrig_MASK
 00E9           ;               
 00E9           ;               itoa(buffer,a,10);
 00E9 5000              mov A,0
 00EB 08                push A
 00EC 500A              mov A,10
 00EE 08                push A
 00EF 510A              mov A,[_a]
 00F1 08                push A
 00F2 510B              mov A,[_a+1]
 00F4 08                push A
 00F5 5003              mov A,>_buffer
 00F7 08                push A
 00F8 5003              mov A,<_buffer
 00FA 08                push A
 00FB 7C0000            xcall _itoa
 00FE 38F8              add SP,-8
 0100                   .dbline 157
 0100           ;               LCD_Position(0,0);
 0100 10                push X
 0101 5000              mov A,0
 0103 5700              mov X,0
 0105 7C0000            xcall _LCD_Position
 0108                   .dbline 158
 0108           ;               LCD_PrCString("     ");
 0108 5000              mov A,>L19
 010A 08                push A
 010B 5000              mov A,<L19
 010D 5C                mov X,A
 010E 18                pop A
 010F 7C0000            xcall _LCD_PrCString
 0112                   .dbline 159
 0112           ;               LCD_Position(0,0);
 0112 5000              mov A,0
 0114 5700              mov X,0
 0116 7C0000            xcall _LCD_Position
 0119                   .dbline 160
 0119           ;               LCD_PrString(buffer);
 0119 5003              mov A,>_buffer
 011B 08                push A
 011C 5003              mov A,<_buffer
 011E 5C                mov X,A
 011F 18                pop A
 0120 7C0000            xcall _LCD_PrString
 0123 20                pop X
 0124                   .dbline 197
 0124           ;               
 0124           ; //            itoa(buffer,t++,10);
 0124           ; //            LCD_Position(1,0);
 0124           ; //            LCD_PrCString("     ");
 0124           ; //            LCD_Position(1,0);
 0124           ; //            LCD_PrString(buffer);
 0124           ; //            for (j=0;j<9000;j++);
 0124           ;                       
 0124           ;               //Test 4m
 0124           ;               /*
 0124           ;               if (timeT < 250)
 0124           ;                       TurnLeft(FULL_SPEED);
 0124           ;               else if (timeT < 500)
 0124           ;                       TurnRight(HALF_SPEED);
 0124           ;               else 
 0124           ;                       Stop();
 0124           ;               */
 0124           ;       
 0124           ;               //About 90
 0124           ;               /*if (timeT < 2000)
 0124           ;                       ControlServo(8);
 0124           ;               else if(timeT < 4000)
 0124           ;                       ControlServo(15);
 0124           ;               else if(timeT < 6000)
 0124           ;                       ControlServo(25);
 0124           ;               else
 0124           ;                       Stop();
 0124           ;               */      
 0124           ;               //Test 90 degree Turn
 0124           ;               /*      
 0124           ;                       if(timeT <= 100) //1.0s
 0124           ;                               TurnRight(FULL_SPEED);
 0124           ;                       else if(timeT <= 400)
 0124           ;                               timeT = 0;
 0124           ;               */
 0124           ;               
 0124           ;       }
 0124           L17:
 0124                   .dbline 145
 0124 8FA0              xjmp L16
 0126           X4:
 0126                   .dbline -2
 0126           L15:
 0126                   .dbline 0 ; func end
 0126 7F                ret
 0127                   .dbend
                        .area bss(ram, con, rel)
 0003                   .dbfile Z:\Robo\Roobbo\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0003           _buffer::
 0003                   .blkb 10
 000D                   .dbsym e buffer _buffer A[10:10]c
                        .area lit(rom, con, rel, lit)
 0000           L19:
 0000 202020202000      .byte 32,32,32,32,32,0
