                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area data(ram, con, rel)
 0000                   .dbfile ./main.c
 0000           _timeT::
 0000                   .blkb 2
                        .area idata(rom,lit)
 0000 0000              .word 0
                        .area data(ram, con, rel)
 0002                   .dbfile ./main.c
 0002                   .dbfile Z:\robotti\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0002                   .dbsym e timeT _timeT I
 0002           _timeUltra::
 0002                   .blkb 2
                        .area idata(rom,lit)
 0002 0000              .word 0
                        .area data(ram, con, rel)
 0004                   .dbfile Z:\robotti\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0004                   .dbsym e timeUltra _timeUltra I
 0004           _timeUltraRead::
 0004                   .blkb 2
                        .area idata(rom,lit)
 0004 0000              .word 0
                        .area data(ram, con, rel)
 0006                   .dbfile Z:\robotti\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0006                   .dbsym e timeUltraRead _timeUltraRead I
 0006           _milliT::
 0006                   .blkb 4
                        .area idata(rom,lit)
 0006 00000000          .word 0,0
                        .area data(ram, con, rel)
 000A                   .dbfile Z:\robotti\Robor7\ROBOTT~1\ROBOTT~1\main.c
 000A                   .dbsym e milliT _milliT l
 000A           _distanceCM::
 000A                   .blkb 2
                        .area idata(rom,lit)
 000A 0000              .word 0
                        .area data(ram, con, rel)
 000C                   .dbfile Z:\robotti\Robor7\ROBOTT~1\ROBOTT~1\main.c
 000C                   .dbsym e distanceCM _distanceCM I
                        .area text(rom, con, rel)
 0000                   .dbfile Z:\robotti\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0000                   .dbfunc e main _main fV
 0000           ;         strPtr -> X+1
 0000           ;        uartBuf -> X+0
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3803              add SP,3
 0004                   .dbline 34
 0004           ; //----------------------------------------------------------------------------
 0004           ; // Robotti Projekti
 0004           ; // Robor7 @ 2014
 0004           ; // Kasper Kiiskinen, Henri Sinokki, Eero Holopainen, Mikko Liira, Kari Lampi
 0004           ; //----------------------------------------------------------------------------
 0004           ; 
 0004           ; #include <m8c.h>        // part specific constants and macros
 0004           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0004           ; #include<stdio.h>
 0004           ; #include<stdlib.h>
 0004           ; #include "delay.h"
 0004           ; 
 0004           ; //Omat header filet
 0004           ; #include "MotorControl.h"
 0004           ; #include "UltraControl.h"
 0004           ; //#include "GyroControl.h"
 0004           ; 
 0004           ; #pragma interrupt_handler PinInterrupt
 0004           ; 
 0004           ; void Delay(int);
 0004           ; void TestLoop(void);
 0004           ; 
 0004           ; //Kellot
 0004           ; volatile int timeT = 0;
 0004           ; int timeUltra = 0,timeUltraRead = 0;
 0004           ; volatile unsigned long int milliT = 0;
 0004           ; 
 0004           ; volatile int distanceCM = 0;
 0004           ; char buffer[10];
 0004           ; 
 0004           ; 
 0004           ; //Main Method
 0004           ; void main(void)
 0004           ; {
 0004                   .dbline 40
 0004           ;       //Init**************************
 0004           ;       //UART
 0004           ;       char * strPtr;                        // Parameter pointer
 0004           ;       char uartBuf;
 0004           ;     
 0004           ;       UART_1_CmdReset();                      // Initialize receiver/cmd // buffer
 0004 10                push X
 0005 7C0000            xcall _UART_1_CmdReset
 0008                   .dbline 42
 0008           ;     //UART_1_IntCntl(UART_1_ENABLE_RX_INT);     // Enable RX interrupts
 0008           ;       UART_1_Start(UART_1_PARITY_NONE); 
 0008 5000              mov A,0
 000A 7C0000            xcall _UART_1_Start
 000D 20                pop X
 000E                   .dbline 45
 000E           ;       
 000E           ;       //Enables Global Interrupts
 000E           ;       M8C_EnableGInt; 
 000E 7101                      or  F, 01h
 0010           
 0010                   .dbline 46
 0010           ;       M8C_EnableIntMask(INT_MSK0, INT_MSK0_GPIO);     //VITTU
 0010 43E020            or REG[0xe0],32
 0013                   .dbline 49
 0013           ;       
 0013           ;       //Start LCD
 0013           ;       LCD_Start();
 0013 10                push X
 0014 7C0000            xcall _LCD_Start
 0017 20                pop X
 0018                   .dbline 52
 0018           ;       
 0018           ;       //Start Motor PWMs
 0018           ;       InitPWM();
 0018 7C0000            xcall _InitPWM
 001B                   .dbline 55
 001B           ;       
 001B           ;       //Init Servo
 001B           ;       InitUAServo();
 001B 7C0000            xcall _InitUAServo
 001E                   .dbline 57
 001E           ;               
 001E           ;       Delay10msTimes(100);
 001E 10                push X
 001F 5064              mov A,100
 0021 7C0000            xcall _Delay10msTimes
 0024 20                pop X
 0025 8018              xjmp L3
 0027           L2:
 0027                   .dbline 65
 0027           ;       
 0027           ;       //Testink
 0027           ;       //TestLoop();
 0027           ; 
 0027           ;       //MainLoop**********
 0027           ;       //***********************
 0027           ;       while(1)
 0027           ;       {
 0027                   .dbline 89
 0027           ;               /* if(UART_1_bCmdCheck())  // Wait for command  
 0027           ;               {                   
 0027           ;                       if(strPtr = UART_1_szGetParam()) 
 0027           ;                       {    
 0027           ;                               while(strPtr = UART_1_szGetParam()) 
 0027           ;                               { 
 0027           ;                                       LCD_Position(0,0);
 0027           ;                                       LCD_PrString(strPtr);
 0027           ;                       } 
 0027           ;                       } 
 0027           ;                       
 0027           ;                       UART_1_CmdReset();                          // Reset command buffer  
 0027           ;               }*/
 0027           ;               
 0027           ;               /*
 0027           ;               int i = 0;
 0027           ;               
 0027           ;               for(i = 0; i < 16; i++)
 0027           ;               {
 0027           ;                       c[i] = UART_1_cGetChar();
 0027           ;               }*/
 0027           ;               
 0027           ; //            uartBuf = UART_1_cGetChar();
 0027           ;               uartBuf = UART_1_cGetChar();
 0027 10                push X
 0028 7C0000            xcall _UART_1_cGetChar
 002B 20                pop X
 002C 5400              mov [X+0],A
 002E                   .dbline 92
 002E           ;               //itoa(c,a,10);
 002E           ;                       
 002E           ;               LCD_Position(0,0);
 002E 10                push X
 002F 5000              mov A,0
 0031 5700              mov X,0
 0033 7C0000            xcall _LCD_Position
 0036 20                pop X
 0037                   .dbline 93
 0037           ;               LCD_PrHexByte(uartBuf);
 0037 10                push X
 0038 5200              mov A,[X+0]
 003A 7C0000            xcall _LCD_PrHexByte
 003D 20                pop X
 003E                   .dbline 94
 003E           ;       }
 003E           L3:
 003E                   .dbline 64
 003E 8FE8              xjmp L2
 0040           X0:
 0040                   .dbline -2
 0040           L1:
 0040 38FD              add SP,-3
 0042 20                pop X
 0043                   .dbline 0 ; func end
 0043 8FFF              jmp .
 0045                   .dbsym l strPtr 1 pc
 0045                   .dbsym l uartBuf 0 c
 0045                   .dbend
 0045                   .dbfunc e PinInterrupt _PinInterrupt fV
 0045           _PinInterrupt::
 0045                   .dbline -1
 0045 08                push A
 0046                   .dbline 99
 0046           ; }
 0046           ; 
 0046           ; 
 0046           ; // Pin interrupt
 0046           ; void PinInterrupt(void){}
 0046                   .dbline -2
 0046           L5:
 0046 18                pop A
 0047                   .dbline 0 ; func end
 0047 7E                reti
 0048                   .dbend
 0048                   .dbfunc e TestLoop _TestLoop fV
 0048           _TestLoop::
 0048                   .dbline -1
 0048                   .dbline 104
 0048           ; 
 0048           ; 
 0048           ; //For Testing
 0048           ; void TestLoop(void)
 0048           ; {
 0048           L7:
 0048                   .dbline 106
 0048           ;       while(1)
 0048           ;       {       
 0048                   .dbline 122
 0048           ;               /*ControlServo(SERVO_LEFT);
 0048           ;               Delay10msTimes(250);
 0048           ;               ControlServo(SERVO_MIDDLE_FROM_LEFT);
 0048           ;               Delay10msTimes(250);
 0048           ;               ControlServo(SERVO_RIGHT);
 0048           ;               Delay10msTimes(250);
 0048           ;               ControlServo(SERVO_MIDDLE_FROM_RIGHT);
 0048           ;               Delay10msTimes(250);            
 0048           ;                       
 0048           ;               itoa(buffer,distanceCM,10);
 0048           ;               LCD_Position(0,0);
 0048           ;               LCD_PrCString("     ");
 0048           ;               LCD_Position(0,0);
 0048           ;               LCD_PrString(buffer);
 0048           ;               */              
 0048           ;       }
 0048           L8:
 0048                   .dbline 105
 0048 8FFF              xjmp L7
 004A           X1:
 004A                   .dbline -2
 004A           L6:
 004A                   .dbline 0 ; func end
 004A 7F                ret
 004B                   .dbend
 004B                   .dbfunc e Delay _Delay fV
 004B           ;          timme -> X+0
 004B           ;          delay -> X-5
 004B           _Delay::
 004B                   .dbline -1
 004B 10                push X
 004C 4F                mov X,SP
 004D 3804              add SP,4
 004F                   .dbline 127
 004F           ; }
 004F           ; 
 004F           ; ////OMA Delay function 
 004F           ; void Delay(int delay)
 004F           ; {
 004F                   .dbline 128
 004F           ;       unsigned long int timme = milliT + delay;
 004F 52FC              mov A,[X-4]
 0051 5300              mov [__r3],A
 0053 52FB              mov A,[X-5]
 0055 5300              mov [__r2],A
 0057 470080            tst [__r2],-128
 005A A009              jz X2
 005C 5500FF            mov [__r1],-1
 005F 5500FF            mov [__r0],-1
 0062 8007              jmp X3
 0064           X2:
 0064 550000            mov [__r1],0
 0067 550000            mov [__r0],0
 006A           X3:
 006A 5109              mov A,[_milliT+3]
 006C 0200              add A,[__r3]
 006E 5403              mov [X+3],A
 0070 5108              mov A,[_milliT+2]
 0072 0A00              adc A,[__r2]
 0074 5402              mov [X+2],A
 0076 5107              mov A,[_milliT+1]
 0078 0A00              adc A,[__r1]
 007A 5401              mov [X+1],A
 007C 5106              mov A,[_milliT]
 007E 0A00              adc A,[__r0]
 0080 5400              mov [X+0],A
 0082           L11:
 0082                   .dbline 129
 0082           ;       while (milliT < timme){}
 0082                   .dbline 129
 0082           L12:
 0082                   .dbline 129
 0082 5109              mov A,[_milliT+3]
 0084 1303              sub A,[X+3]
 0086 5108              mov A,[_milliT+2]
 0088 1B02              sbb A,[X+2]
 008A 5107              mov A,[_milliT+1]
 008C 1B01              sbb A,[X+1]
 008E 5106              mov A,[_milliT]
 0090 1B00              sbb A,[X+0]
 0092 CFEF              jc L11
 0094           X4:
 0094                   .dbline -2
 0094           L10:
 0094 38FC              add SP,-4
 0096 20                pop X
 0097                   .dbline 0 ; func end
 0097 7F                ret
 0098                   .dbsym l timme 0 l
 0098                   .dbsym l delay -5 I
 0098                   .dbend
                        .area bss(ram, con, rel)
 0000                   .dbfile Z:\robotti\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0000           _buffer::
 0000                   .blkb 10
 000A                   .dbsym e buffer _buffer A[10:10]c
