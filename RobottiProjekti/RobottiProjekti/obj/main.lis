                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area data(ram, con, rel)
 0000                   .dbfile ./main.c
 0000           _timeT::
 0000                   .blkb 2
                        .area idata(rom,lit)
 0000 0000              .word 0
                        .area data(ram, con, rel)
 0002                   .dbfile ./main.c
 0002                   .dbfile Z:\AMMATI~2\Koodi\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0002                   .dbsym e timeT _timeT I
 0002           _timeUltra::
 0002                   .blkb 2
                        .area idata(rom,lit)
 0002 0000              .word 0
                        .area data(ram, con, rel)
 0004                   .dbfile Z:\AMMATI~2\Koodi\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0004                   .dbsym e timeUltra _timeUltra I
 0004           _timeUltraRead::
 0004                   .blkb 2
                        .area idata(rom,lit)
 0004 0000              .word 0
                        .area data(ram, con, rel)
 0006                   .dbfile Z:\AMMATI~2\Koodi\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0006                   .dbsym e timeUltraRead _timeUltraRead I
 0006           _milliT::
 0006                   .blkb 4
                        .area idata(rom,lit)
 0006 00000000          .word 0,0
                        .area data(ram, con, rel)
 000A                   .dbfile Z:\AMMATI~2\Koodi\Robor7\ROBOTT~1\ROBOTT~1\main.c
 000A                   .dbsym e milliT _milliT l
 000A           _distanceCM::
 000A                   .blkb 2
                        .area idata(rom,lit)
 000A 0000              .word 0
                        .area data(ram, con, rel)
 000C                   .dbfile Z:\AMMATI~2\Koodi\Robor7\ROBOTT~1\ROBOTT~1\main.c
 000C                   .dbsym e distanceCM _distanceCM I
 000C           _onBlackLine::
 000C                   .blkb 2
                        .area idata(rom,lit)
 000C 0000              .word 0
                        .area data(ram, con, rel)
 000E                   .dbfile Z:\AMMATI~2\Koodi\Robor7\ROBOTT~1\ROBOTT~1\main.c
 000E                   .dbsym e onBlackLine _onBlackLine I
 000E           _blackLineCounter::
 000E                   .blkb 2
                        .area idata(rom,lit)
 000E 0000              .word 0
                        .area data(ram, con, rel)
 0010                   .dbfile Z:\AMMATI~2\Koodi\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0010                   .dbsym e blackLineCounter _blackLineCounter I
 0010           _lastTurn::
 0010                   .blkb 2
                        .area idata(rom,lit)
 0010 0001              .word 1
                        .area data(ram, con, rel)
 0012                   .dbfile Z:\AMMATI~2\Koodi\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0012                   .dbsym e lastTurn _lastTurn I
 0012           _vaihe::
 0012                   .blkb 2
                        .area idata(rom,lit)
 0012 0000              .word 0
                        .area data(ram, con, rel)
 0014                   .dbfile Z:\AMMATI~2\Koodi\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0014                   .dbsym e vaihe _vaihe I
 0014           _etaisyysSeinasta::
 0014                   .blkb 2
                        .area idata(rom,lit)
 0014 0000              .word 0
                        .area data(ram, con, rel)
 0016                   .dbfile Z:\AMMATI~2\Koodi\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0016                   .dbsym e etaisyysSeinasta _etaisyysSeinasta I
 0016           _timeForward::
 0016                   .blkb 2
                        .area idata(rom,lit)
 0016 0032              .word 50
                        .area data(ram, con, rel)
 0018                   .dbfile Z:\AMMATI~2\Koodi\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0018                   .dbsym e timeForward _timeForward I
 0018           _turnTime::
 0018                   .blkb 2
                        .area idata(rom,lit)
 0018 0037              .word 55
                        .area data(ram, con, rel)
 001A                   .dbfile Z:\AMMATI~2\Koodi\Robor7\ROBOTT~1\ROBOTT~1\main.c
 001A                   .dbsym e turnTime _turnTime I
 001A           _timeRobotWidth::
 001A                   .blkb 2
                        .area idata(rom,lit)
 001A 000F              .word 15
                        .area data(ram, con, rel)
 001C                   .dbfile Z:\AMMATI~2\Koodi\Robor7\ROBOTT~1\ROBOTT~1\main.c
 001C                   .dbsym e timeRobotWidth _timeRobotWidth I
 001C           _ultraData::
 001C                   .blkb 2
                        .area idata(rom,lit)
 001C 0000              .word 0
                        .area data(ram, con, rel)
 001E                   .dbfile Z:\AMMATI~2\Koodi\Robor7\ROBOTT~1\ROBOTT~1\main.c
 001E                   .dbsym e ultraData _ultraData I
                        .area text(rom, con, rel)
 0000                   .dbfile Z:\AMMATI~2\Koodi\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0000                   .dbfunc e main _main fV
 0000           _main::
 0000                   .dbline -1
 0000                   .dbline 48
 0000           ; //----------------------------------------------------------------------------
 0000           ; // Robotti Projekti
 0000           ; // Robor7 @ 2014
 0000           ; // Kasper Kiiskinen, Henri Sinokki, Eero Holopainen, Mikko Liira, Kari Lampi
 0000           ; //----------------------------------------------------------------------------
 0000           ; 
 0000           ; #include <m8c.h>        // part specific constants and macros
 0000           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0000           ; #include<stdio.h>
 0000           ; #include<stdlib.h>
 0000           ; #include "delay.h"
 0000           ; 
 0000           ; //Omat header filet
 0000           ; #include "MotorControl.h"
 0000           ; #include "UltraControl.h"
 0000           ; //#include "GyroControl.h"
 0000           ; 
 0000           ; #pragma interrupt_handler PinInterrupt
 0000           ; 
 0000           ; void Delay(int);
 0000           ; void TestLoop(void);
 0000           ; void CounterISR(void);
 0000           ; void CheckLeft(void);
 0000           ; void CheckRight(void);
 0000           ; 
 0000           ; //Kellot
 0000           ; volatile int timeT = 0;
 0000           ; int timeUltra = 0,timeUltraRead = 0;
 0000           ; volatile unsigned long int milliT = 0;
 0000           ; 
 0000           ; volatile int distanceCM = 0;
 0000           ; char buffer[10];
 0000           ; 
 0000           ; // Linefinder test
 0000           ; volatile int onBlackLine = 0, blackLineCounter = 0;
 0000           ; 
 0000           ; int lastTurn = 1; // muuttuja jolla pidetään kirjaa viimesimmästä käännöksestä. 1 = oikea ja 2 = vasen.
 0000           ; int vaihe = 0;
 0000           ; int left, right;
 0000           ; int etaisyysSeinasta = 0;
 0000           ; int timeForward = 50; //.... 4m täydellä vauhdilla 3.7s
 0000           ; int turnTime = 55;       //.... 90 asteen käännökseen meneväaika
 0000           ; int timeRobotWidth = 15; //.... Robotin leveyteen menevä aika ?
 0000           ; int ultraData = 0; //Ultraääni anturrista saatava arvo millisekunteina pitää jakaa jollain että saadaan senttimerejä
 0000           ; 
 0000           ; //Main Method
 0000           ; void main(void)
 0000           ; {
 0000                   .dbline 52
 0000           ;       //Init**************************
 0000           ;       
 0000           ;       //Enables Global Interrupts
 0000           ;       M8C_EnableGInt; 
 0000 7101                      or  F, 01h
 0002           
 0002                   .dbline 53
 0002           ;       M8C_EnableIntMask(INT_MSK0, INT_MSK0_GPIO);     //VITTU
 0002 43E020            or REG[0xe0],32
 0005                   .dbline 56
 0005           ;       
 0005           ;       //Start LCD
 0005           ;       LCD_Start();
 0005 10                push X
 0006 7C0000            xcall _LCD_Start
 0009                   .dbline 58
 0009           ;       //InitializeTimer
 0009           ;       Timer8_Start();
 0009 7C0000            xcall _Timer8_Start
 000C                   .dbline 59
 000C           ;       Timer8_EnableInt();
 000C 7C0000            xcall _Timer8_EnableInt
 000F                   .dbline 61
 000F           ;               
 000F           ;       Counter16_1_EnableInt();
 000F 7C0000            xcall _Counter16_1_EnableInt
 0012                   .dbline 62
 0012           ;       Counter16_1_Start();
 0012 7C0000            xcall _Counter16_1_Start
 0015 20                pop X
 0016                   .dbline 65
 0016           ;       
 0016           ;       //Start Motor PWMs
 0016           ;       InitPWM();
 0016 7C0000            xcall _InitPWM
 0019                   .dbline 68
 0019           ;       
 0019           ;       //Init Servo
 0019           ;       InitUAServo();
 0019 7C0000            xcall _InitUAServo
 001C                   .dbline 70
 001C           ;               
 001C           ;       Delay10msTimes(100);
 001C 10                push X
 001D 5064              mov A,100
 001F 7C0000            xcall _Delay10msTimes
 0022 20                pop X
 0023                   .dbline 71
 0023           ;       vaihe = 1;
 0023 551301            mov [_vaihe+1],1
 0026 551200            mov [_vaihe],0
 0029 8228              xjmp L3
 002B           L2:
 002B                   .dbline 79
 002B           ;       
 002B           ;       //Testink
 002B           ;       //TestLoop();
 002B           ; 
 002B           ;       //MainLoop**********
 002B           ;       //***********************
 002B           ;       while(1)
 002B           ;       {
 002B                   .dbline 80
 002B           ;               itoa(buffer, vaihe, 10);
 002B 5000              mov A,0
 002D 08                push A
 002E 500A              mov A,10
 0030 08                push A
 0031 5112              mov A,[_vaihe]
 0033 08                push A
 0034 5113              mov A,[_vaihe+1]
 0036 08                push A
 0037 5004              mov A,>_buffer
 0039 08                push A
 003A 5004              mov A,<_buffer
 003C 08                push A
 003D 7C0000            xcall _itoa
 0040 38FA              add SP,-6
 0042                   .dbline 81
 0042           ;               LCD_Position(1,0);
 0042 10                push X
 0043 5700              mov X,0
 0045 5001              mov A,1
 0047 7C0000            xcall _LCD_Position
 004A                   .dbline 82
 004A           ;               LCD_PrString(buffer);
 004A 5004              mov A,>_buffer
 004C 08                push A
 004D 5004              mov A,<_buffer
 004F 5C                mov X,A
 0050 18                pop A
 0051 7C0000            xcall _LCD_PrString
 0054 20                pop X
 0055                   .dbline 84
 0055           ;               
 0055           ;               itoa(buffer, blackLineCounter, 10);
 0055 5000              mov A,0
 0057 08                push A
 0058 500A              mov A,10
 005A 08                push A
 005B 510E              mov A,[_blackLineCounter]
 005D 08                push A
 005E 510F              mov A,[_blackLineCounter+1]
 0060 08                push A
 0061 5004              mov A,>_buffer
 0063 08                push A
 0064 5004              mov A,<_buffer
 0066 08                push A
 0067 7C0000            xcall _itoa
 006A 38FA              add SP,-6
 006C                   .dbline 85
 006C           ;               LCD_Position(0,0);
 006C 10                push X
 006D 5000              mov A,0
 006F 5700              mov X,0
 0071 7C0000            xcall _LCD_Position
 0074                   .dbline 86
 0074           ;               LCD_PrString(buffer);           
 0074 5004              mov A,>_buffer
 0076 08                push A
 0077 5004              mov A,<_buffer
 0079 5C                mov X,A
 007A 18                pop A
 007B 7C0000            xcall _LCD_PrString
 007E 20                pop X
 007F                   .dbline 90
 007F           ;               
 007F           ;               
 007F           ;               // Eteenpäin ajo vaihe, ajetaan eteenpäin niin pitkään kunnes ollaan 20cm päästä seinästä.
 007F           ;               if( vaihe == 1 )
 007F 3C1200            cmp [_vaihe],0
 0082 B0FE              jnz L5
 0084 3C1301            cmp [_vaihe+1],1
 0087 B0F9              jnz L5
 0089           X1:
 0089                   .dbline 92
 0089           ;               {       
 0089           ;                       sendTrigPulse(&ultraData);
 0089                   .dbline 92
 0089 501C              mov A,>_ultraData
 008B 08                push A
 008C 501C              mov A,<_ultraData
 008E 08                push A
 008F 7C0000            xcall _sendTrigPulse
 0092 38FE              add SP,-2
 0094                   .dbline 94
 0094           ;                       
 0094           ;                       distanceCM = ultraData * 2;     
 0094 5F001D            mov [__r1],[_ultraData+1]
 0097 5F001C            mov [__r0],[_ultraData]
 009A 6500              asl [__r1]
 009C 6B00              rlc [__r0]
 009E 5F0B00            mov [_distanceCM+1],[__r1]
 00A1 5F0A00            mov [_distanceCM],[__r0]
 00A4                   .dbline 96
 00A4           ; 
 00A4           ;                       if (distanceCM >= 60)
 00A4 510B              mov A,[_distanceCM+1]
 00A6 113C              sub A,60
 00A8 510A              mov A,[_distanceCM]
 00AA 3180              xor A,-128
 00AC 1980              sbb A,(0 ^ 0x80)
 00AE C0A0              jc L7
 00B0           X2:
 00B0                   .dbline 98
 00B0           ;                       {       
 00B0           ;                               if (lastTurn == 2)
 00B0                   .dbline 98
 00B0 3C1000            cmp [_lastTurn],0
 00B3 B008              jnz L9
 00B5 3C1102            cmp [_lastTurn+1],2
 00B8 B003              jnz L9
 00BA           X3:
 00BA                   .dbline 100
 00BA           ;                               {
 00BA           ;                                       CheckRight();                           
 00BA                   .dbline 100
 00BA 91B8              xcall _CheckRight
 00BC                   .dbline 101
 00BC           ;                               }                               
 00BC           L9:
 00BC                   .dbline 102
 00BC           ;                               if (lastTurn == 1)
 00BC 3C1000            cmp [_lastTurn],0
 00BF B008              jnz L11
 00C1 3C1101            cmp [_lastTurn+1],1
 00C4 B003              jnz L11
 00C6           X4:
 00C6                   .dbline 104
 00C6           ;                               {
 00C6           ;                                       CheckLeft();
 00C6                   .dbline 104
 00C6 918E              xcall _CheckLeft
 00C8                   .dbline 105
 00C8           ;                               }
 00C8           L11:
 00C8                   .dbline 106
 00C8           ;                               etaisyysSeinasta = ultraData * 2;
 00C8 5F001D            mov [__r1],[_ultraData+1]
 00CB 5F001C            mov [__r0],[_ultraData]
 00CE 6500              asl [__r1]
 00D0 6B00              rlc [__r0]
 00D2 5F1500            mov [_etaisyysSeinasta+1],[__r1]
 00D5 5F1400            mov [_etaisyysSeinasta],[__r0]
 00D8                   .dbline 108
 00D8           ;                               
 00D8           ;                               ControlServo(SERVO_MIDDLE);
 00D8 5000              mov A,0
 00DA 08                push A
 00DB 5021              mov A,33
 00DD 08                push A
 00DE 7C0000            xcall _ControlServo
 00E1 38FE              add SP,-2
 00E3                   .dbline 109
 00E3           ;                               Delay10msTimes(50);
 00E3 10                push X
 00E4 5032              mov A,50
 00E6 7C0000            xcall _Delay10msTimes
 00E9 20                pop X
 00EA                   .dbline 110
 00EA           ;                               if (etaisyysSeinasta < 10)
 00EA 5115              mov A,[_etaisyysSeinasta+1]
 00EC 110A              sub A,10
 00EE 5114              mov A,[_etaisyysSeinasta]
 00F0 3180              xor A,-128
 00F2 1980              sbb A,(0 ^ 0x80)
 00F4 D01E              jnc L13
 00F6           X5:
 00F6                   .dbline 112
 00F6           ;                               {
 00F6           ;                                       MoveForward2(TURN_SPEED, 1.0f, 0.70f);
 00F6                   .dbline 112
 00F6 503F              mov A,63
 00F8 08                push A
 00F9 5033              mov A,51
 00FB 08                push A
 00FC 08                push A
 00FD 08                push A
 00FE 503F              mov A,63
 0100 08                push A
 0101 5080              mov A,-128
 0103 08                push A
 0104 5000              mov A,0
 0106 08                push A
 0107 08                push A
 0108 08                push A
 0109 5073              mov A,115
 010B 08                push A
 010C 7C0000            xcall _MoveForward2
 010F 38F6              add SP,-10
 0111                   .dbline 114
 0111           ;                                       
 0111           ;                               }
 0111 806F              xjmp L8
 0113           L13:
 0113                   .dbline 115
 0113           ;                               else if (etaisyysSeinasta > 30)
 0113 501E              mov A,30
 0115 1215              sub A,[_etaisyysSeinasta+1]
 0117 5114              mov A,[_etaisyysSeinasta]
 0119 3180              xor A,-128
 011B 5300              mov [__rX],A
 011D 5080              mov A,(0 ^ 0x80)
 011F 1A00              sbb A,[__rX]
 0121 D020              jnc L15
 0123           X6:
 0123                   .dbline 117
 0123           ;                               {
 0123           ;                                       MoveForward2(TURN_SPEED, 0.70f, 1.0f);  
 0123                   .dbline 117
 0123 503F              mov A,63
 0125 08                push A
 0126 5080              mov A,-128
 0128 08                push A
 0129 5000              mov A,0
 012B 08                push A
 012C 08                push A
 012D 503F              mov A,63
 012F 08                push A
 0130 5033              mov A,51
 0132 08                push A
 0133 08                push A
 0134 08                push A
 0135 5000              mov A,0
 0137 08                push A
 0138 5073              mov A,115
 013A 08                push A
 013B 7C0000            xcall _MoveForward2
 013E 38F6              add SP,-10
 0140                   .dbline 119
 0140           ;                                       
 0140           ;                               }
 0140 8040              xjmp L8
 0142           L15:
 0142                   .dbline 120
 0142           ;                               else {
 0142                   .dbline 121
 0142           ;                                       MoveForward(HALF_SPEED);        
 0142 5000              mov A,0
 0144 08                push A
 0145 5050              mov A,80
 0147 08                push A
 0148 7C0000            xcall _MoveForward
 014B 38FE              add SP,-2
 014D                   .dbline 122
 014D           ;                               }
 014D                   .dbline 123
 014D           ;                       }
 014D 8033              xjmp L8
 014F           L7:
 014F                   .dbline 124
 014F           ;                       else if (distanceCM < 60 && distanceCM > 35)
 014F 510B              mov A,[_distanceCM+1]
 0151 113C              sub A,60
 0153 510A              mov A,[_distanceCM]
 0155 3180              xor A,-128
 0157 1980              sbb A,(0 ^ 0x80)
 0159 D01E              jnc L17
 015B           X7:
 015B 5023              mov A,35
 015D 120B              sub A,[_distanceCM+1]
 015F 510A              mov A,[_distanceCM]
 0161 3180              xor A,-128
 0163 5300              mov [__rX],A
 0165 5080              mov A,(0 ^ 0x80)
 0167 1A00              sbb A,[__rX]
 0169 D00E              jnc L17
 016B           X8:
 016B                   .dbline 126
 016B           ;                       {
 016B           ;                               MoveForward(SLOW_SPEED);
 016B                   .dbline 126
 016B 5000              mov A,0
 016D 08                push A
 016E 5046              mov A,70
 0170 08                push A
 0171 7C0000            xcall _MoveForward
 0174 38FE              add SP,-2
 0176                   .dbline 127
 0176           ;                       }                               
 0176 800A              xjmp L18
 0178           L17:
 0178                   .dbline 129
 0178           ;                       else 
 0178           ;                       {
 0178                   .dbline 130
 0178           ;                               Stop();
 0178 7C0000            xcall _Stop
 017B                   .dbline 131
 017B           ;                               vaihe = 2;
 017B 551302            mov [_vaihe+1],2
 017E 551200            mov [_vaihe],0
 0181                   .dbline 132
 0181           ;                       }
 0181           L18:
 0181           L8:
 0181                   .dbline 133
 0181           ;               }
 0181           L5:
 0181                   .dbline 135
 0181           ;               // Vaiheessa ollaan pysähtyneenä ja katsomme vasemmalle ja oikealle ja teemme päätöksen kumpaan suuntaan käännymme.
 0181           ;               if ( vaihe == 2 )
 0181 3C1200            cmp [_vaihe],0
 0184 B08D              jnz L19
 0186 3C1302            cmp [_vaihe+1],2
 0189 B088              jnz L19
 018B           X9:
 018B                   .dbline 137
 018B           ;               {
 018B           ;                               CheckLeft();
 018B                   .dbline 137
 018B 90C9              xcall _CheckLeft
 018D                   .dbline 138
 018D           ;                               left = ultraData * 2;
 018D 5F001D            mov [__r1],[_ultraData+1]
 0190 5F001C            mov [__r0],[_ultraData]
 0193 6500              asl [__r1]
 0195 6B00              rlc [__r0]
 0197 5F0300            mov [_left+1],[__r1]
 019A 5F0200            mov [_left],[__r0]
 019D                   .dbline 139
 019D           ;                               CheckRight();
 019D 90D5              xcall _CheckRight
 019F                   .dbline 140
 019F           ;                               right = ultraData * 2;
 019F 5F001D            mov [__r1],[_ultraData+1]
 01A2 5F001C            mov [__r0],[_ultraData]
 01A5 6500              asl [__r1]
 01A7 6B00              rlc [__r0]
 01A9 5F0100            mov [_right+1],[__r1]
 01AC 5F0000            mov [_right],[__r0]
 01AF                   .dbline 142
 01AF           ;                       
 01AF           ;                               if (right>left)
 01AF 5103              mov A,[_left+1]
 01B1 1201              sub A,[_right+1]
 01B3 5100              mov A,[_right]
 01B5 3180              xor A,-128
 01B7 5300              mov [__rX],A
 01B9 5102              mov A,[_left]
 01BB 3180              xor A,-128
 01BD 1A00              sbb A,[__rX]
 01BF D01E              jnc L21
 01C1           X10:
 01C1                   .dbline 144
 01C1           ;                               {       //turn right
 01C1           ;                                       TurnRight(TURN_SPEED);
 01C1                   .dbline 144
 01C1 5000              mov A,0
 01C3 08                push A
 01C4 5073              mov A,115
 01C6 08                push A
 01C7 7C0000            xcall _TurnRight
 01CA 38FE              add SP,-2
 01CC                   .dbline 145
 01CC           ;                                       Delay10msTimes(42);             //Voi joutua korjaamaan
 01CC 10                push X
 01CD 502A              mov A,42
 01CF 7C0000            xcall _Delay10msTimes
 01D2 20                pop X
 01D3                   .dbline 146
 01D3           ;                                       Stop();
 01D3 7C0000            xcall _Stop
 01D6                   .dbline 147
 01D6           ;                                       lastTurn = 1;
 01D6 551101            mov [_lastTurn+1],1
 01D9 551000            mov [_lastTurn],0
 01DC                   .dbline 148
 01DC           ;                               }
 01DC 801C              xjmp L22
 01DE           L21:
 01DE                   .dbline 150
 01DE           ;                               else 
 01DE           ;                               {
 01DE                   .dbline 152
 01DE           ;                                       //turnlefti
 01DE           ;                                       TurnLeft(TURN_SPEED);
 01DE 5000              mov A,0
 01E0 08                push A
 01E1 5073              mov A,115
 01E3 08                push A
 01E4 7C0000            xcall _TurnLeft
 01E7 38FE              add SP,-2
 01E9                   .dbline 153
 01E9           ;                                       Delay10msTimes(42);             //Voi joutua korjaamaan
 01E9 10                push X
 01EA 502A              mov A,42
 01EC 7C0000            xcall _Delay10msTimes
 01EF 20                pop X
 01F0                   .dbline 154
 01F0           ;                                       Stop();
 01F0 7C0000            xcall _Stop
 01F3                   .dbline 155
 01F3           ;                                       lastTurn = 2;
 01F3 551102            mov [_lastTurn+1],2
 01F6 551000            mov [_lastTurn],0
 01F9                   .dbline 156
 01F9           ;                               }
 01F9           L22:
 01F9                   .dbline 157
 01F9           ;                               ControlServo(SERVO_MIDDLE_FROM_RIGHT);
 01F9 5000              mov A,0
 01FB 08                push A
 01FC 501F              mov A,31
 01FE 08                push A
 01FF 7C0000            xcall _ControlServo
 0202                   .dbline 159
 0202           ;                               
 0202           ;                               Delay(1000);
 0202 5003              mov A,3
 0204 08                push A
 0205 50E8              mov A,-24
 0207 08                push A
 0208 911F              xcall _Delay
 020A 38FC              add SP,-4
 020C                   .dbline 160
 020C           ;                               vaihe = 1;
 020C 551301            mov [_vaihe+1],1
 020F 551200            mov [_vaihe],0
 0212                   .dbline 161
 0212           ;               }
 0212           L19:
 0212                   .dbline 164
 0212           ;               
 0212           ;               //Mustat miehet
 0212           ;               if (blackLineCounter > 0)
 0212 5000              mov A,0
 0214 120F              sub A,[_blackLineCounter+1]
 0216 510E              mov A,[_blackLineCounter]
 0218 3180              xor A,-128
 021A 5300              mov [__rX],A
 021C 5080              mov A,(0 ^ 0x80)
 021E 1A00              sbb A,[__rX]
 0220 D007              jnc L23
 0222           X11:
 0222                   .dbline 165
 0222           ;                       vaihe = 3;
 0222 551303            mov [_vaihe+1],3
 0225 551200            mov [_vaihe],0
 0228           L23:
 0228                   .dbline 167
 0228           ;               
 0228           ;               if (vaihe == 3)
 0228 3C1200            cmp [_vaihe],0
 022B B011              jnz L25
 022D 3C1303            cmp [_vaihe+1],3
 0230 B00C              jnz L25
 0232           X12:
 0232                   .dbline 168
 0232           ;                       MoveForward(SLOW_SPEED);
 0232 5000              mov A,0
 0234 08                push A
 0235 5046              mov A,70
 0237 08                push A
 0238 7C0000            xcall _MoveForward
 023B 38FE              add SP,-2
 023D           L25:
 023D                   .dbline 170
 023D           ;               
 023D           ;               if (blackLineCounter >= 5)
 023D 510F              mov A,[_blackLineCounter+1]
 023F 1105              sub A,5
 0241 510E              mov A,[_blackLineCounter]
 0243 3180              xor A,-128
 0245 1980              sbb A,(0 ^ 0x80)
 0247 C00A              jc L27
 0249           X13:
 0249                   .dbline 172
 0249           ;               {
 0249           ;                       Stop(); 
 0249                   .dbline 172
 0249 7C0000            xcall _Stop
 024C                   .dbline 173
 024C           ;                       vaihe = 4; 
 024C 551304            mov [_vaihe+1],4
 024F 551200            mov [_vaihe],0
 0252                   .dbline 174
 0252           ;               }
 0252           L27:
 0252                   .dbline 176
 0252           ;               
 0252           ;       }
 0252           L3:
 0252                   .dbline 78
 0252 8DD8              xjmp L2
 0254           X0:
 0254                   .dbline -2
 0254           L1:
 0254                   .dbline 0 ; func end
 0254 8FFF              jmp .
 0256                   .dbend
 0256                   .dbfunc e CheckLeft _CheckLeft fV
 0256           _CheckLeft::
 0256                   .dbline -1
 0256                   .dbline 180
 0256           ; }
 0256           ; 
 0256           ; void CheckLeft(void)
 0256           ; {
 0256                   .dbline 181
 0256           ;       ControlServo(SERVO_LEFT);
 0256 5000              mov A,0
 0258 08                push A
 0259 5032              mov A,50
 025B 08                push A
 025C 7C0000            xcall _ControlServo
 025F 38FE              add SP,-2
 0261                   .dbline 182
 0261           ;       Delay10msTimes(50);
 0261 10                push X
 0262 5032              mov A,50
 0264 7C0000            xcall _Delay10msTimes
 0267 20                pop X
 0268                   .dbline 183
 0268           ;       sendTrigPulse(&ultraData);
 0268 501C              mov A,>_ultraData
 026A 08                push A
 026B 501C              mov A,<_ultraData
 026D 08                push A
 026E 7C0000            xcall _sendTrigPulse
 0271 38FE              add SP,-2
 0273                   .dbline -2
 0273           L29:
 0273                   .dbline 0 ; func end
 0273 7F                ret
 0274                   .dbend
 0274                   .dbfunc e CheckRight _CheckRight fV
 0274           _CheckRight::
 0274                   .dbline -1
 0274                   .dbline 187
 0274           ; }
 0274           ; 
 0274           ; void CheckRight(void)
 0274           ; {
 0274                   .dbline 188
 0274           ;       ControlServo(SERVO_RIGHT);
 0274 5000              mov A,0
 0276 08                push A
 0277 5011              mov A,17
 0279 08                push A
 027A 7C0000            xcall _ControlServo
 027D 38FE              add SP,-2
 027F                   .dbline 189
 027F           ;       Delay10msTimes(50);
 027F 10                push X
 0280 5032              mov A,50
 0282 7C0000            xcall _Delay10msTimes
 0285 20                pop X
 0286                   .dbline 190
 0286           ;       sendTrigPulse(&ultraData);
 0286 501C              mov A,>_ultraData
 0288 08                push A
 0289 501C              mov A,<_ultraData
 028B 08                push A
 028C 7C0000            xcall _sendTrigPulse
 028F 38FE              add SP,-2
 0291                   .dbline -2
 0291           L30:
 0291                   .dbline 0 ; func end
 0291 7F                ret
 0292                   .dbend
 0292                   .dbfunc e TimerInterrupt _TimerInterrupt fV
 0292           _TimerInterrupt::
 0292                   .dbline -1
 0292                   .dbline 196
 0292           ; }
 0292           ; 
 0292           ; //Palauttaa eerolle millisekunnit siitä asti ku psoc on käynnistytnyt
 0292           ; //Kutsutaan joka 0.001s = 1ms välein.
 0292           ; void TimerInterrupt(void)
 0292           ; {
 0292                   .dbline 197
 0292           ;   timeT++;
 0292 7601              inc [_timeT+1]
 0294 0E0000            adc [_timeT],0
 0297                   .dbline 200
 0297           ;       
 0297           ;   //DO NOT TOUCH
 0297           ;   milliT++;
 0297 060901            add [_milliT+3],1
 029A 0E0800            adc [_milliT+2],0
 029D 0E0700            adc [_milliT+1],0
 02A0 0E0600            adc [_milliT],0
 02A3                   .dbline 204
 02A3           ;       
 02A3           ;       //Linefinder START
 02A3           ;       
 02A3           ;       if ((LineFinder_Data_ADDR & LineFinder_MASK) && (onBlackLine == 0)) {
 02A3 5D00              mov A,REG[0]
 02A5 5300              mov [__r0],A
 02A7 470020            tst [__r0],32
 02AA A018              jz L32
 02AC 3C0C00            cmp [_onBlackLine],0
 02AF B013              jnz L32
 02B1 3C0D00            cmp [_onBlackLine+1],0
 02B4 B00E              jnz L32
 02B6           X14:
 02B6                   .dbline 205
 02B6           ;               onBlackLine = 1;
 02B6                   .dbline 205
 02B6 550D01            mov [_onBlackLine+1],1
 02B9 550C00            mov [_onBlackLine],0
 02BC                   .dbline 206
 02BC           ;               blackLineCounter++;
 02BC 760F              inc [_blackLineCounter+1]
 02BE 0E0E00            adc [_blackLineCounter],0
 02C1                   .dbline 207
 02C1           ;       } else if (!(LineFinder_Data_ADDR & LineFinder_MASK)) { // tänne vaan jos EI olla mustalla viivalla atm
 02C1 8010              xjmp L33
 02C3           L32:
 02C3                   .dbline 207
 02C3 5D00              mov A,REG[0]
 02C5 5300              mov [__r0],A
 02C7 470020            tst [__r0],32
 02CA B007              jnz L34
 02CC                   .dbline 208
 02CC           ;               onBlackLine = 0;
 02CC                   .dbline 208
 02CC 550D00            mov [_onBlackLine+1],0
 02CF 550C00            mov [_onBlackLine],0
 02D2                   .dbline 209
 02D2           ;       }
 02D2           L34:
 02D2           L33:
 02D2                   .dbline -2
 02D2           L31:
 02D2                   .dbline 0 ; func end
 02D2 7F                ret
 02D3                   .dbend
 02D3                   .dbfunc e CounterISR _CounterISR fV
 02D3           _CounterISR::
 02D3                   .dbline -1
 02D3                   .dbline 217
 02D3           ;       //LineFinder STOP
 02D3           ; }
 02D3           ; 
 02D3           ; 
 02D3           ; 
 02D3           ; //Counter INTERRUPT
 02D3           ; void CounterISR(void)
 02D3           ; {
 02D3                   .dbline 218
 02D3           ;       ultraData++;
 02D3 761D              inc [_ultraData+1]
 02D5 0E1C00            adc [_ultraData],0
 02D8                   .dbline -2
 02D8           L36:
 02D8                   .dbline 0 ; func end
 02D8 7F                ret
 02D9                   .dbend
 02D9                   .dbfunc e PinInterrupt _PinInterrupt fV
 02D9           _PinInterrupt::
 02D9                   .dbline -1
 02D9 08                push A
 02DA                   .dbline 222
 02DA           ; }
 02DA           ; 
 02DA           ; // Pin interrupt
 02DA           ; void PinInterrupt(void){}
 02DA                   .dbline -2
 02DA           L37:
 02DA 18                pop A
 02DB                   .dbline 0 ; func end
 02DB 7E                reti
 02DC                   .dbend
 02DC                   .dbfunc e TestLoop _TestLoop fV
 02DC           _TestLoop::
 02DC                   .dbline -1
 02DC                   .dbline 230
 02DC           ; 
 02DC           ; 
 02DC           ; 
 02DC           ; 
 02DC           ; 
 02DC           ; //For Testing
 02DC           ; void TestLoop(void)
 02DC           ; {
 02DC 8049              xjmp L40
 02DE           L39:
 02DE                   .dbline 232
 02DE           ;       while(1)
 02DE           ;       {       
 02DE                   .dbline 233
 02DE           ;               ControlServo(SERVO_LEFT);
 02DE 5000              mov A,0
 02E0 08                push A
 02E1 5032              mov A,50
 02E3 08                push A
 02E4 7C0000            xcall _ControlServo
 02E7 38FE              add SP,-2
 02E9                   .dbline 234
 02E9           ;               Delay10msTimes(250);
 02E9 10                push X
 02EA 50FA              mov A,-6
 02EC 7C0000            xcall _Delay10msTimes
 02EF 20                pop X
 02F0                   .dbline 235
 02F0           ;               ControlServo(SERVO_MIDDLE_FROM_LEFT);
 02F0 5000              mov A,0
 02F2 08                push A
 02F3 5022              mov A,34
 02F5 08                push A
 02F6 7C0000            xcall _ControlServo
 02F9 38FE              add SP,-2
 02FB                   .dbline 236
 02FB           ;               Delay10msTimes(250);
 02FB 10                push X
 02FC 50FA              mov A,-6
 02FE 7C0000            xcall _Delay10msTimes
 0301 20                pop X
 0302                   .dbline 237
 0302           ;               ControlServo(SERVO_RIGHT);
 0302 5000              mov A,0
 0304 08                push A
 0305 5011              mov A,17
 0307 08                push A
 0308 7C0000            xcall _ControlServo
 030B 38FE              add SP,-2
 030D                   .dbline 238
 030D           ;               Delay10msTimes(250);
 030D 10                push X
 030E 50FA              mov A,-6
 0310 7C0000            xcall _Delay10msTimes
 0313 20                pop X
 0314                   .dbline 239
 0314           ;               ControlServo(SERVO_MIDDLE_FROM_RIGHT);
 0314 5000              mov A,0
 0316 08                push A
 0317 501F              mov A,31
 0319 08                push A
 031A 7C0000            xcall _ControlServo
 031D 38FE              add SP,-2
 031F                   .dbline 240
 031F           ;               Delay10msTimes(250);            
 031F 10                push X
 0320 50FA              mov A,-6
 0322 7C0000            xcall _Delay10msTimes
 0325 20                pop X
 0326                   .dbline 266
 0326           ;               
 0326           ;               
 0326           ;               
 0326           ; //            TurnRight(TURN_SPEED);
 0326           ; //            Delay10msTimes(75);
 0326           ; //            
 0326           ; //            Stop();
 0326           ; //            Delay10msTimes(250);
 0326           ; //            
 0326           ; //            TurnLeft(TURN_SPEED);
 0326           ; //            Delay10msTimes(75);
 0326           ; //            
 0326           ; //            Stop();
 0326           ; //            Delay10msTimes(250);
 0326           ;               
 0326           ;               /*sendTrigPulse(&ultraData);
 0326           ;               
 0326           ;               distanceCM = ultraData * 2;             
 0326           ;       
 0326           ;               itoa(buffer,distanceCM,10);
 0326           ;               LCD_Position(0,0);
 0326           ;               LCD_PrCString("     ");
 0326           ;               LCD_Position(0,0);
 0326           ;               LCD_PrString(buffer);
 0326           ;               */              
 0326           ;       }
 0326           L40:
 0326                   .dbline 231
 0326 8FB7              xjmp L39
 0328           X15:
 0328                   .dbline -2
 0328           L38:
 0328                   .dbline 0 ; func end
 0328 7F                ret
 0329                   .dbend
 0329                   .dbfunc e Delay _Delay fV
 0329           ;          timme -> X+0
 0329           ;          delay -> X-5
 0329           _Delay::
 0329                   .dbline -1
 0329 10                push X
 032A 4F                mov X,SP
 032B 3804              add SP,4
 032D                   .dbline 271
 032D           ; }
 032D           ; 
 032D           ; ////OMA Delay function 
 032D           ; void Delay(int delay)
 032D           ; {
 032D                   .dbline 272
 032D           ;       unsigned long int timme = milliT + delay;
 032D 52FC              mov A,[X-4]
 032F 5300              mov [__r3],A
 0331 52FB              mov A,[X-5]
 0333 5300              mov [__r2],A
 0335 470080            tst [__r2],-128
 0338 A009              jz X16
 033A 5500FF            mov [__r1],-1
 033D 5500FF            mov [__r0],-1
 0340 8007              jmp X17
 0342           X16:
 0342 550000            mov [__r1],0
 0345 550000            mov [__r0],0
 0348           X17:
 0348 5109              mov A,[_milliT+3]
 034A 0200              add A,[__r3]
 034C 5403              mov [X+3],A
 034E 5108              mov A,[_milliT+2]
 0350 0A00              adc A,[__r2]
 0352 5402              mov [X+2],A
 0354 5107              mov A,[_milliT+1]
 0356 0A00              adc A,[__r1]
 0358 5401              mov [X+1],A
 035A 5106              mov A,[_milliT]
 035C 0A00              adc A,[__r0]
 035E 5400              mov [X+0],A
 0360           L43:
 0360                   .dbline 273
 0360           ;       while (milliT < timme){}
 0360                   .dbline 273
 0360           L44:
 0360                   .dbline 273
 0360 5109              mov A,[_milliT+3]
 0362 1303              sub A,[X+3]
 0364 5108              mov A,[_milliT+2]
 0366 1B02              sbb A,[X+2]
 0368 5107              mov A,[_milliT+1]
 036A 1B01              sbb A,[X+1]
 036C 5106              mov A,[_milliT]
 036E 1B00              sbb A,[X+0]
 0370 CFEF              jc L43
 0372           X18:
 0372                   .dbline -2
 0372           L42:
 0372 38FC              add SP,-4
 0374 20                pop X
 0375                   .dbline 0 ; func end
 0375 7F                ret
 0376                   .dbsym l timme 0 l
 0376                   .dbsym l delay -5 I
 0376                   .dbend
                        .area bss(ram, con, rel)
 0000                   .dbfile Z:\AMMATI~2\Koodi\Robor7\ROBOTT~1\ROBOTT~1\main.c
 0000           _right::
 0000                   .blkb 2
 0002                   .dbsym e right _right I
 0002           _left::
 0002                   .blkb 2
 0004                   .dbsym e left _left I
 0004           _buffer::
 0004                   .blkb 10
 000E                   .dbsym e buffer _buffer A[10:10]c
