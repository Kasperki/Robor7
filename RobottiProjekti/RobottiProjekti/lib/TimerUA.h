//*****************************************************************************
//*****************************************************************************
//  FILENAME: TimerUA.h
//   Version: 2.70, Updated on 2013/5/19 at 10:44:42
//  Generated by PSoC Designer 5.4.2946
//
//  DESCRIPTION: Timer8 User Module C Language interface file
//-----------------------------------------------------------------------------
//  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
//*****************************************************************************
//*****************************************************************************
#ifndef TimerUA_INCLUDE
#define TimerUA_INCLUDE

#include <m8c.h>

#pragma fastcall16 TimerUA_EnableInt                 //                 Proxy 1
#pragma fastcall16 TimerUA_DisableInt                //                 Proxy 1
#pragma fastcall16 TimerUA_Start                     //                 Proxy 1
#pragma fastcall16 TimerUA_Stop                      //                 Proxy 1
#pragma fastcall16 TimerUA_bReadTimer                // Read  DR0       Proxy 1
#pragma fastcall16 TimerUA_bReadTimerSaveCV          // Read  DR0       Proxy 2
#pragma fastcall16 TimerUA_WritePeriod               // Write DR1       Proxy 1
#pragma fastcall16 TimerUA_bReadCompareValue         // Read  DR2       Proxy 1
#pragma fastcall16 TimerUA_WriteCompareValue         // Write DR2       Proxy 1

// The following symbols are deprecated.
// They may be omitted in future releases
//
#pragma fastcall16 bTimerUA_ReadCounter              // Read  DR0 "Obsolete"
#pragma fastcall16 bTimerUA_CaptureCounter           // Read  DR0 "Obsolete"
#pragma fastcall16 bTimerUA_ReadTimer                // Read  DR0 (Deprecated)
#pragma fastcall16 bTimerUA_ReadTimerSaveCV          // Read  DR0 (Deprecated)
#pragma fastcall16 bTimerUA_ReadCompareValue         // Read  DR2 (Deprecated)


//-------------------------------------------------
// Prototypes of the TimerUA API.
//-------------------------------------------------

extern void TimerUA_EnableInt(void);
extern void TimerUA_DisableInt(void);
extern void TimerUA_Start(void);
extern void TimerUA_Stop(void);
extern BYTE TimerUA_bReadTimer(void);
extern BYTE TimerUA_bReadTimerSaveCV(void);
extern void TimerUA_WritePeriod(BYTE bPeriod);
extern BYTE TimerUA_bReadCompareValue(void);
extern void TimerUA_WriteCompareValue(BYTE bCompareValue);

// The following functions are deprecated.
// They may be omitted in future releases
//
extern BYTE bTimerUA_ReadCompareValue(void);       // Deprecated
extern BYTE bTimerUA_ReadTimerSaveCV(void);        // Deprecated
extern BYTE bTimerUA_ReadCounter(void);            // Obsolete
extern BYTE bTimerUA_ReadTimer(void);              // Deprecated
extern BYTE bTimerUA_CaptureCounter(void);         // Obsolete


//--------------------------------------------------
// Constants for TimerUA API's.
//--------------------------------------------------

#define TimerUA_CONTROL_REG_START_BIT          ( 0x01 )
#define TimerUA_INT_REG_ADDR                   ( 0x0e1 )
#define TimerUA_INT_MASK                       ( 0x10 )


//--------------------------------------------------
// Constants for TimerUA user defined values
//--------------------------------------------------

#define TimerUA_PERIOD                         ( 0x13 )
#define TimerUA_COMPARE_VALUE                  ( 0x00 )


//-------------------------------------------------
// Register Addresses for TimerUA
//-------------------------------------------------

#pragma ioport  TimerUA_COUNTER_REG:    0x030              //DR0 Count register
BYTE            TimerUA_COUNTER_REG;
#pragma ioport  TimerUA_PERIOD_REG: 0x031                  //DR1 Period register
BYTE            TimerUA_PERIOD_REG;
#pragma ioport  TimerUA_COMPARE_REG:    0x032              //DR2 Compare register
BYTE            TimerUA_COMPARE_REG;
#pragma ioport  TimerUA_CONTROL_REG:    0x033              //Control register
BYTE            TimerUA_CONTROL_REG;
#pragma ioport  TimerUA_FUNC_REG:   0x130                  //Function register
BYTE            TimerUA_FUNC_REG;
#pragma ioport  TimerUA_INPUT_REG:  0x131                  //Input register
BYTE            TimerUA_INPUT_REG;
#pragma ioport  TimerUA_OUTPUT_REG: 0x132                  //Output register
BYTE            TimerUA_OUTPUT_REG;
#pragma ioport  TimerUA_INT_REG:       0x0e1               //Interrupt Mask Register
BYTE            TimerUA_INT_REG;


//-------------------------------------------------
// TimerUA Macro 'Functions'
//-------------------------------------------------

#define TimerUA_Start_M \
   ( TimerUA_CONTROL_REG |=  TimerUA_CONTROL_REG_START_BIT )

#define TimerUA_Stop_M  \
   ( TimerUA_CONTROL_REG &= ~TimerUA_CONTROL_REG_START_BIT )

#define TimerUA_EnableInt_M   \
   M8C_EnableIntMask(  TimerUA_INT_REG, TimerUA_INT_MASK )

#define TimerUA_DisableInt_M  \
   M8C_DisableIntMask( TimerUA_INT_REG, TimerUA_INT_MASK )

#endif
// end of file TimerUA.h
